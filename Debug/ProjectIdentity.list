
ProjectIdentity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c1c  0800a150  0800a150  0000b150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad6c  0800ad6c  0000c1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ad6c  0800ad6c  0000bd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad74  0800ad74  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad74  0800ad74  0000bd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad78  0800ad78  0000bd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800ad7c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200001e8  0800af64  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  0800af64  0000c59c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d28  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003026  00000000  00000000  00022f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00025f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101e  00000000  00000000  00027410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5ae  00000000  00000000  0002842e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019271  00000000  00000000  000479dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7735  00000000  00000000  00060c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118382  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000676c  00000000  00000000  001183c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011eb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a138 	.word	0x0800a138

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a138 	.word	0x0800a138

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <_sendCmd>:
#include "SSD1331.h"

static unsigned char CHR_X, CHR_Y;

void _sendCmd(uint8_t cmd)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET); // DC = 0 (komenda)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbc:	f003 fd06 	bl	80045cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS = 0
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f003 fd00 	bl	80045cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8000bcc:	1df9      	adds	r1, r7, #7
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <_sendCmd+0x48>)
 8000bd6:	f005 fbd6 	bl	8006386 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);   // CS = 1
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2110      	movs	r1, #16
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be2:	f003 fcf3 	bl	80045cc <HAL_GPIO_WritePin>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200002bc 	.word	0x200002bc

08000bf4 <_sendData>:

void _sendData(uint8_t data)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);   // DC = 1 (dane)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c08:	f003 fce0 	bl	80045cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS = 0
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2110      	movs	r1, #16
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c14:	f003 fcda 	bl	80045cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &data, 1, HAL_MAX_DELAY);
 8000c18:	1df9      	adds	r1, r7, #7
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4806      	ldr	r0, [pc, #24]	@ (8000c3c <_sendData+0x48>)
 8000c22:	f005 fbb0 	bl	8006386 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);   // CS = 1
 8000c26:	2201      	movs	r2, #1
 8000c28:	2110      	movs	r1, #16
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f003 fccd 	bl	80045cc <HAL_GPIO_WritePin>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200002bc 	.word	0x200002bc

08000c40 <SSD1331_init>:

// **POPRAWIONA FUNKCJA INICJALIZACJI**
void SSD1331_init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
    // Reset ekranu - KLUCZOWE!
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4e:	f003 fcbd 	bl	80045cc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c52:	200a      	movs	r0, #10
 8000c54:	f002 fa5a 	bl	800310c <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c62:	f003 fcb3 	bl	80045cc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c66:	200a      	movs	r0, #10
 8000c68:	f002 fa50 	bl	800310c <HAL_Delay>

    // Inicjalizacja SSD1331 - KOMPLETNA SEKWENCJA
    _sendCmd(CMD_DISPLAY_OFF);                    // Wyłącz ekran podczas inicjalizacji
 8000c6c:	20ae      	movs	r0, #174	@ 0xae
 8000c6e:	f7ff ff9b 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_CONTRAST_A); _sendCmd(0x91); // Kontrast dla kolor A (czerwony)
 8000c72:	2081      	movs	r0, #129	@ 0x81
 8000c74:	f7ff ff98 	bl	8000ba8 <_sendCmd>
 8000c78:	2091      	movs	r0, #145	@ 0x91
 8000c7a:	f7ff ff95 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_CONTRAST_B); _sendCmd(0x50); // Kontrast dla kolor B (zielony)
 8000c7e:	2082      	movs	r0, #130	@ 0x82
 8000c80:	f7ff ff92 	bl	8000ba8 <_sendCmd>
 8000c84:	2050      	movs	r0, #80	@ 0x50
 8000c86:	f7ff ff8f 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_CONTRAST_C); _sendCmd(0x7D); // Kontrast dla kolor C (niebieski)
 8000c8a:	2083      	movs	r0, #131	@ 0x83
 8000c8c:	f7ff ff8c 	bl	8000ba8 <_sendCmd>
 8000c90:	207d      	movs	r0, #125	@ 0x7d
 8000c92:	f7ff ff89 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_MASTER_CURRENT_CONTROL); _sendCmd(0x06); // Kontrola głównego prądu
 8000c96:	2087      	movs	r0, #135	@ 0x87
 8000c98:	f7ff ff86 	bl	8000ba8 <_sendCmd>
 8000c9c:	2006      	movs	r0, #6
 8000c9e:	f7ff ff83 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_SPEED_A); _sendCmd(0x64);  // Prędkość ładowania A
 8000ca2:	208a      	movs	r0, #138	@ 0x8a
 8000ca4:	f7ff ff80 	bl	8000ba8 <_sendCmd>
 8000ca8:	2064      	movs	r0, #100	@ 0x64
 8000caa:	f7ff ff7d 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_SPEED_B); _sendCmd(0x78);  // Prędkość ładowania B
 8000cae:	208b      	movs	r0, #139	@ 0x8b
 8000cb0:	f7ff ff7a 	bl	8000ba8 <_sendCmd>
 8000cb4:	2078      	movs	r0, #120	@ 0x78
 8000cb6:	f7ff ff77 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_SPEED_C); _sendCmd(0x64);  // Prędkość ładowania C
 8000cba:	208c      	movs	r0, #140	@ 0x8c
 8000cbc:	f7ff ff74 	bl	8000ba8 <_sendCmd>
 8000cc0:	2064      	movs	r0, #100	@ 0x64
 8000cc2:	f7ff ff71 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_REMAP); _sendCmd(0x72);              // Mapowanie kolorów i orientacja
 8000cc6:	20a0      	movs	r0, #160	@ 0xa0
 8000cc8:	f7ff ff6e 	bl	8000ba8 <_sendCmd>
 8000ccc:	2072      	movs	r0, #114	@ 0x72
 8000cce:	f7ff ff6b 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_DISPLAY_START_LINE); _sendCmd(0x0);  // Linia startowa
 8000cd2:	20a1      	movs	r0, #161	@ 0xa1
 8000cd4:	f7ff ff68 	bl	8000ba8 <_sendCmd>
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff ff65 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_DISPLAY_OFFSET); _sendCmd(0x0);      // Offset wyświetlania
 8000cde:	20a2      	movs	r0, #162	@ 0xa2
 8000ce0:	f7ff ff62 	bl	8000ba8 <_sendCmd>
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff ff5f 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_NORMAL_DISPLAY);                         // Normalny tryb wyświetlania
 8000cea:	20a4      	movs	r0, #164	@ 0xa4
 8000cec:	f7ff ff5c 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_MULTIPLEX_RATIO); _sendCmd(0x3F);    // Współczynnik multipleks (64 linie)
 8000cf0:	20a8      	movs	r0, #168	@ 0xa8
 8000cf2:	f7ff ff59 	bl	8000ba8 <_sendCmd>
 8000cf6:	203f      	movs	r0, #63	@ 0x3f
 8000cf8:	f7ff ff56 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_MASTER_CONFIGURE); _sendCmd(0x8E);   // Konfiguracja główna
 8000cfc:	20ad      	movs	r0, #173	@ 0xad
 8000cfe:	f7ff ff53 	bl	8000ba8 <_sendCmd>
 8000d02:	208e      	movs	r0, #142	@ 0x8e
 8000d04:	f7ff ff50 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_POWER_SAVE_MODE); _sendCmd(0x00);        // Wyłącz tryb oszczędzania energii
 8000d08:	20b0      	movs	r0, #176	@ 0xb0
 8000d0a:	f7ff ff4d 	bl	8000ba8 <_sendCmd>
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff ff4a 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_PHASE_PERIOD_ADJUSTMENT); _sendCmd(0x31); // Regulacja okresu fazy
 8000d14:	20b1      	movs	r0, #177	@ 0xb1
 8000d16:	f7ff ff47 	bl	8000ba8 <_sendCmd>
 8000d1a:	2031      	movs	r0, #49	@ 0x31
 8000d1c:	f7ff ff44 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_DISPLAY_CLOCK_DIV); _sendCmd(0xF0);      // Dzielnik zegara wyświetlania
 8000d20:	20b3      	movs	r0, #179	@ 0xb3
 8000d22:	f7ff ff41 	bl	8000ba8 <_sendCmd>
 8000d26:	20f0      	movs	r0, #240	@ 0xf0
 8000d28:	f7ff ff3e 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_VOLTAGE); _sendCmd(0x3A);  // Napięcie ładowania wstępnego
 8000d2c:	20bb      	movs	r0, #187	@ 0xbb
 8000d2e:	f7ff ff3b 	bl	8000ba8 <_sendCmd>
 8000d32:	203a      	movs	r0, #58	@ 0x3a
 8000d34:	f7ff ff38 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_V_VOLTAGE); _sendCmd(0x3E);          // Napięcie V
 8000d38:	20be      	movs	r0, #190	@ 0xbe
 8000d3a:	f7ff ff35 	bl	8000ba8 <_sendCmd>
 8000d3e:	203e      	movs	r0, #62	@ 0x3e
 8000d40:	f7ff ff32 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_DEACTIVE_SCROLLING);                     // Wyłącz scrollowanie
 8000d44:	202e      	movs	r0, #46	@ 0x2e
 8000d46:	f7ff ff2f 	bl	8000ba8 <_sendCmd>

    // **KLUCZOWE - WŁĄCZ EKRAN NA KOŃCU**
    _sendCmd(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);           // Włącz ekran z normalną jasnością
 8000d4a:	20af      	movs	r0, #175	@ 0xaf
 8000d4c:	f7ff ff2c 	bl	8000ba8 <_sendCmd>

    HAL_Delay(100); // Daj czas na stabilizację
 8000d50:	2064      	movs	r0, #100	@ 0x64
 8000d52:	f002 f9db 	bl	800310c <HAL_Delay>
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <SSD1331_drawPixel>:

void SSD1331_drawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	80fb      	strh	r3, [r7, #6]
 8000d64:	460b      	mov	r3, r1
 8000d66:	80bb      	strh	r3, [r7, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	807b      	strh	r3, [r7, #2]
    if ((x < 0) || (x >= RGB_OLED_WIDTH) || (y < 0) || (y >= RGB_OLED_HEIGHT))
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d70:	d838      	bhi.n	8000de4 <SSD1331_drawPixel+0x8a>
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d76:	d835      	bhi.n	8000de4 <SSD1331_drawPixel+0x8a>
        return;
    //set column point
    _sendCmd(CMD_SET_COLUMN_ADDRESS);
 8000d78:	2015      	movs	r0, #21
 8000d7a:	f7ff ff15 	bl	8000ba8 <_sendCmd>
    _sendCmd(x);
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff10 	bl	8000ba8 <_sendCmd>
    _sendCmd(RGB_OLED_WIDTH-1);
 8000d88:	205f      	movs	r0, #95	@ 0x5f
 8000d8a:	f7ff ff0d 	bl	8000ba8 <_sendCmd>
    //set row point
    _sendCmd(CMD_SET_ROW_ADDRESS);
 8000d8e:	2075      	movs	r0, #117	@ 0x75
 8000d90:	f7ff ff0a 	bl	8000ba8 <_sendCmd>
    _sendCmd(y);
 8000d94:	88bb      	ldrh	r3, [r7, #4]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff05 	bl	8000ba8 <_sendCmd>
    _sendCmd(RGB_OLED_HEIGHT-1);
 8000d9e:	203f      	movs	r0, #63	@ 0x3f
 8000da0:	f7ff ff02 	bl	8000ba8 <_sendCmd>

    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin,GPIO_PIN_SET);; //cs
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dae:	f003 fc0d 	bl	80045cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_RESET);; //cs
 8000db2:	2200      	movs	r2, #0
 8000db4:	2110      	movs	r1, #16
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dba:	f003 fc07 	bl	80045cc <HAL_GPIO_WritePin>

	_sendData(color >> 8);
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff14 	bl	8000bf4 <_sendData>
	_sendData(color);
 8000dcc:	887b      	ldrh	r3, [r7, #2]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff0f 	bl	8000bf4 <_sendData>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_SET);; //cs
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2110      	movs	r1, #16
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dde:	f003 fbf5 	bl	80045cc <HAL_GPIO_WritePin>
 8000de2:	e000      	b.n	8000de6 <SSD1331_drawPixel+0x8c>
        return;
 8000de4:	bf00      	nop

}
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SSD1331_drawLine>:

void SSD1331_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4604      	mov	r4, r0
 8000df4:	4608      	mov	r0, r1
 8000df6:	4611      	mov	r1, r2
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	80fb      	strh	r3, [r7, #6]
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80bb      	strh	r3, [r7, #4]
 8000e02:	460b      	mov	r3, r1
 8000e04:	807b      	strh	r3, [r7, #2]
 8000e06:	4613      	mov	r3, r2
 8000e08:	803b      	strh	r3, [r7, #0]
    if((x0 < 0) || (y0 < 0) || (x1 < 0) || (y1 < 0))
        return;

    if (x0 >= RGB_OLED_WIDTH)  x0 = RGB_OLED_WIDTH - 1;
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000e0e:	d901      	bls.n	8000e14 <SSD1331_drawLine+0x28>
 8000e10:	235f      	movs	r3, #95	@ 0x5f
 8000e12:	80fb      	strh	r3, [r7, #6]
    if (y0 >= RGB_OLED_HEIGHT) y0 = RGB_OLED_HEIGHT - 1;
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e18:	d901      	bls.n	8000e1e <SSD1331_drawLine+0x32>
 8000e1a:	233f      	movs	r3, #63	@ 0x3f
 8000e1c:	80bb      	strh	r3, [r7, #4]
    if (x1 >= RGB_OLED_WIDTH)  x1 = RGB_OLED_WIDTH - 1;
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	2b5f      	cmp	r3, #95	@ 0x5f
 8000e22:	d901      	bls.n	8000e28 <SSD1331_drawLine+0x3c>
 8000e24:	235f      	movs	r3, #95	@ 0x5f
 8000e26:	807b      	strh	r3, [r7, #2]
    if (y1 >= RGB_OLED_HEIGHT) y1 = RGB_OLED_HEIGHT - 1;
 8000e28:	883b      	ldrh	r3, [r7, #0]
 8000e2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e2c:	d901      	bls.n	8000e32 <SSD1331_drawLine+0x46>
 8000e2e:	233f      	movs	r3, #63	@ 0x3f
 8000e30:	803b      	strh	r3, [r7, #0]

    _sendCmd(CMD_DRAW_LINE);//draw line
 8000e32:	2021      	movs	r0, #33	@ 0x21
 8000e34:	f7ff feb8 	bl	8000ba8 <_sendCmd>
    _sendCmd(x0);//start column
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff feb3 	bl	8000ba8 <_sendCmd>
    _sendCmd(y0);//start row
 8000e42:	88bb      	ldrh	r3, [r7, #4]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff feae 	bl	8000ba8 <_sendCmd>
    _sendCmd(x1);//end column
 8000e4c:	887b      	ldrh	r3, [r7, #2]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fea9 	bl	8000ba8 <_sendCmd>
    _sendCmd(y1);//end row
 8000e56:	883b      	ldrh	r3, [r7, #0]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fea4 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((color>>11)&0x1F));//R
 8000e60:	8b3b      	ldrh	r3, [r7, #24]
 8000e62:	0adb      	lsrs	r3, r3, #11
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f003 031f 	and.w	r3, r3, #31
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fe9a 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((color>>5)&0x3F));//G
 8000e74:	8b3b      	ldrh	r3, [r7, #24]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fe90 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)(color&0x1F));//B
 8000e88:	8b3b      	ldrh	r3, [r7, #24]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fe88 	bl	8000ba8 <_sendCmd>
}
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd90      	pop	{r4, r7, pc}

08000e9e <SSD1331_drawFrame>:

void SSD1331_drawFrame(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t outColor, uint16_t fillColor)
{
 8000e9e:	b590      	push	{r4, r7, lr}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4623      	mov	r3, r4
 8000eae:	80fb      	strh	r3, [r7, #6]
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	80bb      	strh	r3, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	803b      	strh	r3, [r7, #0]
    if((x0 < 0) || (y0 < 0) || (x1 < 0) || (y1 < 0))
        return;

    if (x0 >= RGB_OLED_WIDTH)  x0 = RGB_OLED_WIDTH - 1;
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	2b5f      	cmp	r3, #95	@ 0x5f
 8000ec0:	d901      	bls.n	8000ec6 <SSD1331_drawFrame+0x28>
 8000ec2:	235f      	movs	r3, #95	@ 0x5f
 8000ec4:	80fb      	strh	r3, [r7, #6]
    if (y0 >= RGB_OLED_HEIGHT) y0 = RGB_OLED_HEIGHT - 1;
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000eca:	d901      	bls.n	8000ed0 <SSD1331_drawFrame+0x32>
 8000ecc:	233f      	movs	r3, #63	@ 0x3f
 8000ece:	80bb      	strh	r3, [r7, #4]
    if (x1 >= RGB_OLED_WIDTH)  x1 = RGB_OLED_WIDTH - 1;
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	2b5f      	cmp	r3, #95	@ 0x5f
 8000ed4:	d901      	bls.n	8000eda <SSD1331_drawFrame+0x3c>
 8000ed6:	235f      	movs	r3, #95	@ 0x5f
 8000ed8:	807b      	strh	r3, [r7, #2]
    if (y1 >= RGB_OLED_HEIGHT) y1 = RGB_OLED_HEIGHT - 1;
 8000eda:	883b      	ldrh	r3, [r7, #0]
 8000edc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ede:	d901      	bls.n	8000ee4 <SSD1331_drawFrame+0x46>
 8000ee0:	233f      	movs	r3, #63	@ 0x3f
 8000ee2:	803b      	strh	r3, [r7, #0]

    _sendCmd(CMD_FILL_WINDOW);//fill window
 8000ee4:	2026      	movs	r0, #38	@ 0x26
 8000ee6:	f7ff fe5f 	bl	8000ba8 <_sendCmd>
    _sendCmd(ENABLE_FILL);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f7ff fe5c 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_DRAW_RECTANGLE);//draw rectangle
 8000ef0:	2022      	movs	r0, #34	@ 0x22
 8000ef2:	f7ff fe59 	bl	8000ba8 <_sendCmd>
    _sendCmd(x0);//start column
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fe54 	bl	8000ba8 <_sendCmd>
    _sendCmd(y0);//start row
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe4f 	bl	8000ba8 <_sendCmd>
    _sendCmd(x1);//end column
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fe4a 	bl	8000ba8 <_sendCmd>
    _sendCmd(y1);//end row
 8000f14:	883b      	ldrh	r3, [r7, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fe45 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((outColor>>11)&0x1F));//R
 8000f1e:	8b3b      	ldrh	r3, [r7, #24]
 8000f20:	0adb      	lsrs	r3, r3, #11
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fe3b 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((outColor>>5)&0x3F));//G
 8000f32:	8b3b      	ldrh	r3, [r7, #24]
 8000f34:	095b      	lsrs	r3, r3, #5
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fe31 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)(outColor&0x1F));//B
 8000f46:	8b3b      	ldrh	r3, [r7, #24]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f003 031f 	and.w	r3, r3, #31
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fe29 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((fillColor>>11)&0x1F));//R
 8000f56:	8bbb      	ldrh	r3, [r7, #28]
 8000f58:	0adb      	lsrs	r3, r3, #11
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fe1f 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((fillColor>>5)&0x3F));//G
 8000f6a:	8bbb      	ldrh	r3, [r7, #28]
 8000f6c:	095b      	lsrs	r3, r3, #5
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fe15 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)(fillColor&0x1F));//B
 8000f7e:	8bbb      	ldrh	r3, [r7, #28]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fe0d 	bl	8000ba8 <_sendCmd>
}
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd90      	pop	{r4, r7, pc}

08000f94 <SSD1331_drawCircle>:

void SSD1331_drawCircle(uint16_t x, uint16_t y, uint16_t radius, uint16_t color) {
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4623      	mov	r3, r4
 8000fa4:	80fb      	strh	r3, [r7, #6]
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80bb      	strh	r3, [r7, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	807b      	strh	r3, [r7, #2]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	803b      	strh	r3, [r7, #0]
	signed char xc = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]
	signed char yc = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73bb      	strb	r3, [r7, #14]
	signed char p = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	737b      	strb	r3, [r7, #13]

    // Out of range
    if (x >= RGB_OLED_WIDTH || y >= RGB_OLED_HEIGHT)
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	2b5f      	cmp	r3, #95	@ 0x5f
 8000fc2:	f200 80c0 	bhi.w	8001146 <SSD1331_drawCircle+0x1b2>
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fca:	f200 80bc 	bhi.w	8001146 <SSD1331_drawCircle+0x1b2>
        return;

    yc = radius;
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	73bb      	strb	r3, [r7, #14]
    p = 3 - (radius<<1);
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f1c3 0303 	rsb	r3, r3, #3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	737b      	strb	r3, [r7, #13]
    while (xc <= yc)
 8000fe2:	e0a8      	b.n	8001136 <SSD1331_drawCircle+0x1a2>
    {
    	SSD1331_drawPixel(x + xc, y + yc, color);
 8000fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	4413      	add	r3, r2
 8000fee:	b298      	uxth	r0, r3
 8000ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	88bb      	ldrh	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	883a      	ldrh	r2, [r7, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff feab 	bl	8000d5a <SSD1331_drawPixel>
    	SSD1331_drawPixel(x + xc, y - yc, color);
 8001004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001008:	b29a      	uxth	r2, r3
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	4413      	add	r3, r2
 800100e:	b298      	uxth	r0, r3
 8001010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001014:	b29b      	uxth	r3, r3
 8001016:	88ba      	ldrh	r2, [r7, #4]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	883a      	ldrh	r2, [r7, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fe9b 	bl	8000d5a <SSD1331_drawPixel>
    	SSD1331_drawPixel(x - xc, y + yc, color);
 8001024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001028:	b29b      	uxth	r3, r3
 800102a:	88fa      	ldrh	r2, [r7, #6]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	b298      	uxth	r0, r3
 8001030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001034:	b29a      	uxth	r2, r3
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	b29b      	uxth	r3, r3
 800103c:	883a      	ldrh	r2, [r7, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fe8b 	bl	8000d5a <SSD1331_drawPixel>
    	SSD1331_drawPixel(x - xc, y - yc, color);
 8001044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001048:	b29b      	uxth	r3, r3
 800104a:	88fa      	ldrh	r2, [r7, #6]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	b298      	uxth	r0, r3
 8001050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001054:	b29b      	uxth	r3, r3
 8001056:	88ba      	ldrh	r2, [r7, #4]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	883a      	ldrh	r2, [r7, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fe7b 	bl	8000d5a <SSD1331_drawPixel>
    	SSD1331_drawPixel(x + yc, y + xc, color);
 8001064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001068:	b29a      	uxth	r2, r3
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	4413      	add	r3, r2
 800106e:	b298      	uxth	r0, r3
 8001070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001074:	b29a      	uxth	r2, r3
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	883a      	ldrh	r2, [r7, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fe6b 	bl	8000d5a <SSD1331_drawPixel>
    	SSD1331_drawPixel(x + yc, y - xc, color);
 8001084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001088:	b29a      	uxth	r2, r3
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	4413      	add	r3, r2
 800108e:	b298      	uxth	r0, r3
 8001090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001094:	b29b      	uxth	r3, r3
 8001096:	88ba      	ldrh	r2, [r7, #4]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	883a      	ldrh	r2, [r7, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fe5b 	bl	8000d5a <SSD1331_drawPixel>
    	SSD1331_drawPixel(x - yc, y + xc, color);
 80010a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	88fa      	ldrh	r2, [r7, #6]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b298      	uxth	r0, r3
 80010b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	88bb      	ldrh	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	883a      	ldrh	r2, [r7, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fe4b 	bl	8000d5a <SSD1331_drawPixel>
    	SSD1331_drawPixel(x - yc, y - xc, color);
 80010c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	88fa      	ldrh	r2, [r7, #6]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	b298      	uxth	r0, r3
 80010d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	88ba      	ldrh	r2, [r7, #4]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	b29b      	uxth	r3, r3
 80010dc:	883a      	ldrh	r2, [r7, #0]
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fe3b 	bl	8000d5a <SSD1331_drawPixel>
        if (p < 0) p += (xc++ << 2) + 6;
 80010e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da0e      	bge.n	800110a <SSD1331_drawCircle+0x176>
 80010ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80010f0:	b2d3      	uxtb	r3, r2
 80010f2:	3301      	adds	r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	3306      	adds	r3, #6
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	7b7b      	ldrb	r3, [r7, #13]
 8001102:	4413      	add	r3, r2
 8001104:	b2db      	uxtb	r3, r3
 8001106:	737b      	strb	r3, [r7, #13]
 8001108:	e015      	b.n	8001136 <SSD1331_drawCircle+0x1a2>
            else p += ((xc++ - yc--)<<2) + 10;
 800110a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800110e:	b2d3      	uxtb	r3, r2
 8001110:	3301      	adds	r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800111c:	b2d3      	uxtb	r3, r2
 800111e:	3b01      	subs	r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	73bb      	strb	r3, [r7, #14]
 8001124:	4613      	mov	r3, r2
 8001126:	1acb      	subs	r3, r1, r3
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	330a      	adds	r3, #10
 800112c:	b2da      	uxtb	r2, r3
 800112e:	7b7b      	ldrb	r3, [r7, #13]
 8001130:	4413      	add	r3, r2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	737b      	strb	r3, [r7, #13]
    while (xc <= yc)
 8001136:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800113a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800113e:	429a      	cmp	r2, r3
 8001140:	f77f af50 	ble.w	8000fe4 <SSD1331_drawCircle+0x50>
 8001144:	e000      	b.n	8001148 <SSD1331_drawCircle+0x1b4>
        return;
 8001146:	bf00      	nop
    }

}
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
	...

08001150 <SSD1331_drawXOboard>:
void SSD1331_drawXOboard(
    uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
    uint16_t fillColor, uint16_t lineColor)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af02      	add	r7, sp, #8
 8001156:	4604      	mov	r4, r0
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4623      	mov	r3, r4
 8001160:	80fb      	strh	r3, [r7, #6]
 8001162:	4603      	mov	r3, r0
 8001164:	80bb      	strh	r3, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	807b      	strh	r3, [r7, #2]
 800116a:	4613      	mov	r3, r2
 800116c:	803b      	strh	r3, [r7, #0]
    // Rysuj ramkę z wypełnieniem
    SSD1331_drawFrame(x0, y0, x1, y1, lineColor, fillColor);
 800116e:	883c      	ldrh	r4, [r7, #0]
 8001170:	887a      	ldrh	r2, [r7, #2]
 8001172:	88b9      	ldrh	r1, [r7, #4]
 8001174:	88f8      	ldrh	r0, [r7, #6]
 8001176:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4623      	mov	r3, r4
 8001180:	f7ff fe8d 	bl	8000e9e <SSD1331_drawFrame>

    // Oblicz wymiary planszy
    uint16_t width  = x1 > x0 ? x1 - x0 : x0 - x1;
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	429a      	cmp	r2, r3
 800118a:	d904      	bls.n	8001196 <SSD1331_drawXOboard+0x46>
 800118c:	887a      	ldrh	r2, [r7, #2]
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	b29b      	uxth	r3, r3
 8001194:	e003      	b.n	800119e <SSD1331_drawXOboard+0x4e>
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	b29b      	uxth	r3, r3
 800119e:	82fb      	strh	r3, [r7, #22]
    uint16_t height = y1 > y0 ? y1 - y0 : y0 - y1;
 80011a0:	883a      	ldrh	r2, [r7, #0]
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d904      	bls.n	80011b2 <SSD1331_drawXOboard+0x62>
 80011a8:	883a      	ldrh	r2, [r7, #0]
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	e003      	b.n	80011ba <SSD1331_drawXOboard+0x6a>
 80011b2:	88ba      	ldrh	r2, [r7, #4]
 80011b4:	883b      	ldrh	r3, [r7, #0]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	82bb      	strh	r3, [r7, #20]

    // Pozycje linii pionowych (dzielą na 3 kolumny)
    uint16_t xA = x0 + width / 3;
 80011bc:	8afb      	ldrh	r3, [r7, #22]
 80011be:	4a2a      	ldr	r2, [pc, #168]	@ (8001268 <SSD1331_drawXOboard+0x118>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	085b      	lsrs	r3, r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	4413      	add	r3, r2
 80011cc:	827b      	strh	r3, [r7, #18]
    uint16_t xB = x0 + 2 * width / 3;
 80011ce:	8afb      	ldrh	r3, [r7, #22]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4a26      	ldr	r2, [pc, #152]	@ (800126c <SSD1331_drawXOboard+0x11c>)
 80011d4:	fb82 1203 	smull	r1, r2, r2, r3
 80011d8:	17db      	asrs	r3, r3, #31
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	b29a      	uxth	r2, r3
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	4413      	add	r3, r2
 80011e2:	823b      	strh	r3, [r7, #16]

    // Pozycje linii poziomych (dzielą na 3 wiersze)
    uint16_t yA = y0 + height / 3;
 80011e4:	8abb      	ldrh	r3, [r7, #20]
 80011e6:	4a20      	ldr	r2, [pc, #128]	@ (8001268 <SSD1331_drawXOboard+0x118>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	085b      	lsrs	r3, r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	88bb      	ldrh	r3, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	81fb      	strh	r3, [r7, #14]
    uint16_t yB = y0 + 2 * height / 3;
 80011f6:	8abb      	ldrh	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4a1c      	ldr	r2, [pc, #112]	@ (800126c <SSD1331_drawXOboard+0x11c>)
 80011fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001200:	17db      	asrs	r3, r3, #31
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b29a      	uxth	r2, r3
 8001206:	88bb      	ldrh	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	81bb      	strh	r3, [r7, #12]

    HAL_Delay(150);
 800120c:	2096      	movs	r0, #150	@ 0x96
 800120e:	f001 ff7d 	bl	800310c <HAL_Delay>
    // Rysuj linie pionowe
    SSD1331_drawLine(xA, y0, xA, y1, lineColor);
 8001212:	883c      	ldrh	r4, [r7, #0]
 8001214:	8a7a      	ldrh	r2, [r7, #18]
 8001216:	88b9      	ldrh	r1, [r7, #4]
 8001218:	8a78      	ldrh	r0, [r7, #18]
 800121a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4623      	mov	r3, r4
 8001220:	f7ff fde4 	bl	8000dec <SSD1331_drawLine>
    SSD1331_drawLine(xB, y0, xB, y1, lineColor);
 8001224:	883c      	ldrh	r4, [r7, #0]
 8001226:	8a3a      	ldrh	r2, [r7, #16]
 8001228:	88b9      	ldrh	r1, [r7, #4]
 800122a:	8a38      	ldrh	r0, [r7, #16]
 800122c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4623      	mov	r3, r4
 8001232:	f7ff fddb 	bl	8000dec <SSD1331_drawLine>

    HAL_Delay(150);
 8001236:	2096      	movs	r0, #150	@ 0x96
 8001238:	f001 ff68 	bl	800310c <HAL_Delay>
    // Rysuj linie poziome
    SSD1331_drawLine(x0, yA, x1, yA, lineColor);
 800123c:	89fc      	ldrh	r4, [r7, #14]
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	89f9      	ldrh	r1, [r7, #14]
 8001242:	88f8      	ldrh	r0, [r7, #6]
 8001244:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	4623      	mov	r3, r4
 800124a:	f7ff fdcf 	bl	8000dec <SSD1331_drawLine>
    SSD1331_drawLine(x0, yB, x1, yB, lineColor);
 800124e:	89bc      	ldrh	r4, [r7, #12]
 8001250:	887a      	ldrh	r2, [r7, #2]
 8001252:	89b9      	ldrh	r1, [r7, #12]
 8001254:	88f8      	ldrh	r0, [r7, #6]
 8001256:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4623      	mov	r3, r4
 800125c:	f7ff fdc6 	bl	8000dec <SSD1331_drawLine>
}
 8001260:	bf00      	nop
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	aaaaaaab 	.word	0xaaaaaaab
 800126c:	55555556 	.word	0x55555556

08001270 <SSD1331_SetXY>:

// Set current position in cache
void SSD1331_SetXY(unsigned char x, unsigned char y) {
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	460a      	mov	r2, r1
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	4613      	mov	r3, r2
 800127e:	71bb      	strb	r3, [r7, #6]
	CHR_X = x;
 8001280:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <SSD1331_SetXY+0x28>)
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	7013      	strb	r3, [r2, #0]
	CHR_Y = y;
 8001286:	4a05      	ldr	r2, [pc, #20]	@ (800129c <SSD1331_SetXY+0x2c>)
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	7013      	strb	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	20000204 	.word	0x20000204
 800129c:	20000205 	.word	0x20000205

080012a0 <SSD1331_XY_INK>:

void SSD1331_XY_INK(LcdFontSize size) {
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	CHR_X += 6*size;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	461a      	mov	r2, r3
 80012ae:	0052      	lsls	r2, r2, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <SSD1331_XY_INK+0x74>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <SSD1331_XY_INK+0x74>)
 80012c0:	701a      	strb	r2, [r3, #0]
	if (CHR_X + 6*size > RGB_OLED_WIDTH) {
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <SSD1331_XY_INK+0x74>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	440b      	add	r3, r1
 80012d4:	2b60      	cmp	r3, #96	@ 0x60
 80012d6:	dd16      	ble.n	8001306 <SSD1331_XY_INK+0x66>
		CHR_X = 0;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <SSD1331_XY_INK+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
		CHR_Y += 8*size;
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <SSD1331_XY_INK+0x78>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <SSD1331_XY_INK+0x78>)
 80012ee:	701a      	strb	r2, [r3, #0]
		if (CHR_Y + 8*size > RGB_OLED_HEIGHT) {
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <SSD1331_XY_INK+0x78>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4413      	add	r3, r2
 80012fc:	2b40      	cmp	r3, #64	@ 0x40
 80012fe:	dd02      	ble.n	8001306 <SSD1331_XY_INK+0x66>
			CHR_Y = 0;
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <SSD1331_XY_INK+0x78>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000204 	.word	0x20000204
 8001318:	20000205 	.word	0x20000205

0800131c <SSD1331_Chr>:

void SSD1331_Chr(LcdFontSize size, unsigned char ch, uint16_t chr_color, uint16_t bg_color) {
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	4604      	mov	r4, r0
 8001324:	4608      	mov	r0, r1
 8001326:	4611      	mov	r1, r2
 8001328:	461a      	mov	r2, r3
 800132a:	4623      	mov	r3, r4
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	4603      	mov	r3, r0
 8001330:	71bb      	strb	r3, [r7, #6]
 8001332:	460b      	mov	r3, r1
 8001334:	80bb      	strh	r3, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	807b      	strh	r3, [r7, #2]
	unsigned char y, x, sx, sy;
	uint16_t color;
	/////uint16_t cx=CHR_X*6*size;
	uint16_t cx=CHR_X;
 800133a:	4b9b      	ldr	r3, [pc, #620]	@ (80015a8 <SSD1331_Chr+0x28c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	823b      	strh	r3, [r7, #16]
	/////uint16_t cy=CHR_Y*8*size;
	uint16_t cy=CHR_Y;
 8001340:	4b9a      	ldr	r3, [pc, #616]	@ (80015ac <SSD1331_Chr+0x290>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	81fb      	strh	r3, [r7, #14]

	if ( (cx + 6*size > RGB_OLED_WIDTH) || (cy + 8*size > RGB_OLED_HEIGHT) ) {
 8001346:	8a39      	ldrh	r1, [r7, #16]
 8001348:	79fa      	ldrb	r2, [r7, #7]
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	440b      	add	r3, r1
 8001354:	2b60      	cmp	r3, #96	@ 0x60
 8001356:	f300 816c 	bgt.w	8001632 <SSD1331_Chr+0x316>
 800135a:	89fa      	ldrh	r2, [r7, #14]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	2b40      	cmp	r3, #64	@ 0x40
 8001364:	f300 8165 	bgt.w	8001632 <SSD1331_Chr+0x316>
		return;
	}

	// CHR
    if ( (ch >= 0x20) && (ch <= 0x7F) )
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	2b1f      	cmp	r3, #31
 800136c:	d907      	bls.n	800137e <SSD1331_Chr+0x62>
 800136e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db03      	blt.n	800137e <SSD1331_Chr+0x62>
    {
        // offset in symbols table ASCII[0x20-0x7F]
        ch -= 32;
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	3b20      	subs	r3, #32
 800137a:	71bb      	strb	r3, [r7, #6]
 800137c:	e008      	b.n	8001390 <SSD1331_Chr+0x74>
    }
    else if (ch >= 0xC0)
 800137e:	79bb      	ldrb	r3, [r7, #6]
 8001380:	2bbf      	cmp	r3, #191	@ 0xbf
 8001382:	d903      	bls.n	800138c <SSD1331_Chr+0x70>
    {
        // offset in symbols table CP1251[0xC0-0xFF] (Cyrillic)
        ch -= 96;
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	3b60      	subs	r3, #96	@ 0x60
 8001388:	71bb      	strb	r3, [r7, #6]
 800138a:	e001      	b.n	8001390 <SSD1331_Chr+0x74>
    }
    else
    {
        // Ignore unknown symbols
        ch = 95;
 800138c:	235f      	movs	r3, #95	@ 0x5f
 800138e:	71bb      	strb	r3, [r7, #6]
    }

    if ((size > FONT_1X) & (ch > 15) & (ch < 26)) {
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b01      	cmp	r3, #1
 8001394:	bf8c      	ite	hi
 8001396:	2301      	movhi	r3, #1
 8001398:	2300      	movls	r3, #0
 800139a:	b2da      	uxtb	r2, r3
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	bf8c      	ite	hi
 80013a2:	2301      	movhi	r3, #1
 80013a4:	2300      	movls	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4013      	ands	r3, r2
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	2b19      	cmp	r3, #25
 80013b2:	bf94      	ite	ls
 80013b4:	2301      	movls	r3, #1
 80013b6:	2300      	movhi	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a4 	beq.w	800150a <SSD1331_Chr+0x1ee>
        ch -= 16;
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	3b10      	subs	r3, #16
 80013c6:	71bb      	strb	r3, [r7, #6]
    	for (sy = 0; sy<size; sy++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	753b      	strb	r3, [r7, #20]
 80013cc:	e097      	b.n	80014fe <SSD1331_Chr+0x1e2>
    	for (y = 0; y<8; y++ ) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]
 80013d2:	e08d      	b.n	80014f0 <SSD1331_Chr+0x1d4>
    		//set column point
    		_sendCmd(CMD_SET_COLUMN_ADDRESS);
 80013d4:	2015      	movs	r0, #21
 80013d6:	f7ff fbe7 	bl	8000ba8 <_sendCmd>
    		_sendCmd(cx);
 80013da:	8a3b      	ldrh	r3, [r7, #16]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fbe2 	bl	8000ba8 <_sendCmd>
    		_sendCmd(RGB_OLED_WIDTH-1);
 80013e4:	205f      	movs	r0, #95	@ 0x5f
 80013e6:	f7ff fbdf 	bl	8000ba8 <_sendCmd>
    		//set row point
    		_sendCmd(CMD_SET_ROW_ADDRESS);
 80013ea:	2075      	movs	r0, #117	@ 0x75
 80013ec:	f7ff fbdc 	bl	8000ba8 <_sendCmd>
    		_sendCmd(y + cy + sy*8);
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	4413      	add	r3, r2
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	7d3b      	ldrb	r3, [r7, #20]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b2db      	uxtb	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fbcf 	bl	8000ba8 <_sendCmd>
    		_sendCmd(RGB_OLED_HEIGHT-1);
 800140a:	203f      	movs	r0, #63	@ 0x3f
 800140c:	f7ff fbcc 	bl	8000ba8 <_sendCmd>
    		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin,GPIO_PIN_SET);//cs
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001416:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141a:	f003 f8d7 	bl	80045cc <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_RESET); //cs
 800141e:	2200      	movs	r2, #0
 8001420:	2110      	movs	r1, #16
 8001422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001426:	f003 f8d1 	bl	80045cc <HAL_GPIO_WritePin>
    		for (x = 0; x < 5*size; x++ ) {
 800142a:	2300      	movs	r3, #0
 800142c:	75bb      	strb	r3, [r7, #22]
 800142e:	e055      	b.n	80014dc <SSD1331_Chr+0x1c0>
    			if ( (((BigNumbers[ch][x+sy*10] >> y) & 0x01 ) & (size == FONT_2X)) |
 8001430:	79ba      	ldrb	r2, [r7, #6]
 8001432:	7db8      	ldrb	r0, [r7, #22]
 8001434:	7d39      	ldrb	r1, [r7, #20]
 8001436:	460b      	mov	r3, r1
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	18c1      	adds	r1, r0, r3
 8001440:	485b      	ldr	r0, [pc, #364]	@ (80015b0 <SSD1331_Chr+0x294>)
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4403      	add	r3, r0
 800144c:	440b      	add	r3, r1
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	fa42 f303 	asr.w	r3, r2, r3
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	b2da      	uxtb	r2, r3
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b02      	cmp	r3, #2
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4013      	ands	r3, r2
 800146c:	b2d8      	uxtb	r0, r3
    				 (((LargeNumbers[ch][x+sy*20] >> y) & 0x01 ) & (size == FONT_4X))
 800146e:	79ba      	ldrb	r2, [r7, #6]
 8001470:	7dbc      	ldrb	r4, [r7, #22]
 8001472:	7d39      	ldrb	r1, [r7, #20]
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	18e1      	adds	r1, r4, r3
 800147e:	4c4d      	ldr	r4, [pc, #308]	@ (80015b4 <SSD1331_Chr+0x298>)
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4423      	add	r3, r4
 800148a:	440b      	add	r3, r1
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	7dfb      	ldrb	r3, [r7, #23]
 8001492:	fa42 f303 	asr.w	r3, r2, r3
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	b2da      	uxtb	r2, r3
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf0c      	ite	eq
 80014a2:	2301      	moveq	r3, #1
 80014a4:	2300      	movne	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4013      	ands	r3, r2
 80014aa:	b2db      	uxtb	r3, r3
    			if ( (((BigNumbers[ch][x+sy*10] >> y) & 0x01 ) & (size == FONT_2X)) |
 80014ac:	4303      	orrs	r3, r0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <SSD1331_Chr+0x19e>

    				) {
    				color = chr_color;
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	827b      	strh	r3, [r7, #18]
 80014b8:	e001      	b.n	80014be <SSD1331_Chr+0x1a2>
    			}
    			else {
    				color = bg_color;
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	827b      	strh	r3, [r7, #18]
    			}
				_sendData(color >> 8);
 80014be:	8a7b      	ldrh	r3, [r7, #18]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fb94 	bl	8000bf4 <_sendData>
				_sendData(color);
 80014cc:	8a7b      	ldrh	r3, [r7, #18]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fb8f 	bl	8000bf4 <_sendData>
    		for (x = 0; x < 5*size; x++ ) {
 80014d6:	7dbb      	ldrb	r3, [r7, #22]
 80014d8:	3301      	adds	r3, #1
 80014da:	75bb      	strb	r3, [r7, #22]
 80014dc:	7db9      	ldrb	r1, [r7, #22]
 80014de:	79fa      	ldrb	r2, [r7, #7]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	4299      	cmp	r1, r3
 80014e8:	dba2      	blt.n	8001430 <SSD1331_Chr+0x114>
    	for (y = 0; y<8; y++ ) {
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	3301      	adds	r3, #1
 80014ee:	75fb      	strb	r3, [r7, #23]
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b07      	cmp	r3, #7
 80014f4:	f67f af6e 	bls.w	80013d4 <SSD1331_Chr+0xb8>
    	for (sy = 0; sy<size; sy++) {
 80014f8:	7d3b      	ldrb	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	753b      	strb	r3, [r7, #20]
 80014fe:	7d3a      	ldrb	r2, [r7, #20]
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	429a      	cmp	r2, r3
 8001504:	f4ff af63 	bcc.w	80013ce <SSD1331_Chr+0xb2>
 8001508:	e094      	b.n	8001634 <SSD1331_Chr+0x318>
    		}
    	}
    	}
    }
    else {
    	for (y = 0; y<8; y++ ) {
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]
 800150e:	e08b      	b.n	8001628 <SSD1331_Chr+0x30c>
    		for (sy = 0; sy<size; sy++ ) {
 8001510:	2300      	movs	r3, #0
 8001512:	753b      	strb	r3, [r7, #20]
 8001514:	e080      	b.n	8001618 <SSD1331_Chr+0x2fc>
    			//set column point
    			_sendCmd(CMD_SET_COLUMN_ADDRESS);
 8001516:	2015      	movs	r0, #21
 8001518:	f7ff fb46 	bl	8000ba8 <_sendCmd>
    			_sendCmd(cx);
 800151c:	8a3b      	ldrh	r3, [r7, #16]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fb41 	bl	8000ba8 <_sendCmd>
    			_sendCmd(RGB_OLED_WIDTH-1);
 8001526:	205f      	movs	r0, #95	@ 0x5f
 8001528:	f7ff fb3e 	bl	8000ba8 <_sendCmd>
    			//set row point
    			_sendCmd(CMD_SET_ROW_ADDRESS);
 800152c:	2075      	movs	r0, #117	@ 0x75
 800152e:	f7ff fb3b 	bl	8000ba8 <_sendCmd>
    			_sendCmd(y*size + sy + cy);
 8001532:	7dfa      	ldrb	r2, [r7, #23]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	fb12 f303 	smulbb	r3, r2, r3
 800153a:	b2da      	uxtb	r2, r3
 800153c:	7d3b      	ldrb	r3, [r7, #20]
 800153e:	4413      	add	r3, r2
 8001540:	b2da      	uxtb	r2, r3
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4413      	add	r3, r2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fb2c 	bl	8000ba8 <_sendCmd>
    			_sendCmd(RGB_OLED_HEIGHT-1);
 8001550:	203f      	movs	r0, #63	@ 0x3f
 8001552:	f7ff fb29 	bl	8000ba8 <_sendCmd>
        		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin,GPIO_PIN_SET);; //cs
 8001556:	2201      	movs	r2, #1
 8001558:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800155c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001560:	f003 f834 	bl	80045cc <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_RESET);; //cs
 8001564:	2200      	movs	r2, #0
 8001566:	2110      	movs	r1, #16
 8001568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156c:	f003 f82e 	bl	80045cc <HAL_GPIO_WritePin>
    			for (x = 0; x<5; x++ ) {
 8001570:	2300      	movs	r3, #0
 8001572:	75bb      	strb	r3, [r7, #22]
 8001574:	e038      	b.n	80015e8 <SSD1331_Chr+0x2cc>
    				if ((FontLookup[ch][x] >> y) & 0x01) {
 8001576:	79ba      	ldrb	r2, [r7, #6]
 8001578:	7db9      	ldrb	r1, [r7, #22]
 800157a:	480f      	ldr	r0, [pc, #60]	@ (80015b8 <SSD1331_Chr+0x29c>)
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	4403      	add	r3, r0
 8001584:	440b      	add	r3, r1
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	fa42 f303 	asr.w	r3, r2, r3
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <SSD1331_Chr+0x282>
    					color = chr_color;
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	827b      	strh	r3, [r7, #18]
 800159c:	e001      	b.n	80015a2 <SSD1331_Chr+0x286>
    				}
    				else {
    					color = bg_color;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	827b      	strh	r3, [r7, #18]
    				}
    				//SSD1331_drawPixel(x+cx, y+cy, color);
    				for (sx = 0; sx<size; sx++ ) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	757b      	strb	r3, [r7, #21]
 80015a6:	e018      	b.n	80015da <SSD1331_Chr+0x2be>
 80015a8:	20000204 	.word	0x20000204
 80015ac:	20000205 	.word	0x20000205
 80015b0:	0800a4e4 	.word	0x0800a4e4
 80015b4:	0800a5ac 	.word	0x0800a5ac
 80015b8:	0800a1c4 	.word	0x0800a1c4
    					_sendData(color >> 8);
 80015bc:	8a7b      	ldrh	r3, [r7, #18]
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fb15 	bl	8000bf4 <_sendData>
    					_sendData(color);
 80015ca:	8a7b      	ldrh	r3, [r7, #18]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb10 	bl	8000bf4 <_sendData>
    				for (sx = 0; sx<size; sx++ ) {
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
 80015d6:	3301      	adds	r3, #1
 80015d8:	757b      	strb	r3, [r7, #21]
 80015da:	7d7a      	ldrb	r2, [r7, #21]
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d3ec      	bcc.n	80015bc <SSD1331_Chr+0x2a0>
    			for (x = 0; x<5; x++ ) {
 80015e2:	7dbb      	ldrb	r3, [r7, #22]
 80015e4:	3301      	adds	r3, #1
 80015e6:	75bb      	strb	r3, [r7, #22]
 80015e8:	7dbb      	ldrb	r3, [r7, #22]
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d9c3      	bls.n	8001576 <SSD1331_Chr+0x25a>
    				}
    			}
    			_sendData(bg_color >> 8);
 80015ee:	887b      	ldrh	r3, [r7, #2]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fafc 	bl	8000bf4 <_sendData>
    			_sendData(bg_color);
 80015fc:	887b      	ldrh	r3, [r7, #2]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff faf7 	bl	8000bf4 <_sendData>
        		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_SET);; //cs
 8001606:	2201      	movs	r2, #1
 8001608:	2110      	movs	r1, #16
 800160a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160e:	f002 ffdd 	bl	80045cc <HAL_GPIO_WritePin>
    		for (sy = 0; sy<size; sy++ ) {
 8001612:	7d3b      	ldrb	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	753b      	strb	r3, [r7, #20]
 8001618:	7d3a      	ldrb	r2, [r7, #20]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	429a      	cmp	r2, r3
 800161e:	f4ff af7a 	bcc.w	8001516 <SSD1331_Chr+0x1fa>
    	for (y = 0; y<8; y++ ) {
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	3301      	adds	r3, #1
 8001626:	75fb      	strb	r3, [r7, #23]
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b07      	cmp	r3, #7
 800162c:	f67f af70 	bls.w	8001510 <SSD1331_Chr+0x1f4>
 8001630:	e000      	b.n	8001634 <SSD1331_Chr+0x318>
		return;
 8001632:	bf00      	nop
    	}
    }

    /////CHR_X++;
    //CHR_X += 6*size;
}
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop

0800163c <SSD1331_FStr>:
        tmpIdx++;
    }
}

// Print a string from the Flash to display
void SSD1331_FStr(LcdFontSize size, const unsigned char *dataPtr, uint16_t chr_color, uint16_t bg_color) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	4611      	mov	r1, r2
 8001646:	461a      	mov	r2, r3
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	460b      	mov	r3, r1
 800164e:	81bb      	strh	r3, [r7, #12]
 8001650:	4613      	mov	r3, r2
 8001652:	80fb      	strh	r3, [r7, #6]
    unsigned char c;
    for (c = *( dataPtr ); c; ++dataPtr, c = *( dataPtr ))
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	75fb      	strb	r3, [r7, #23]
 800165a:	e00f      	b.n	800167c <SSD1331_FStr+0x40>
        		CHR_Y = 0;
        	}
        }
        */

        SSD1331_Chr(size, c, chr_color, bg_color);
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	89ba      	ldrh	r2, [r7, #12]
 8001660:	7df9      	ldrb	r1, [r7, #23]
 8001662:	7bf8      	ldrb	r0, [r7, #15]
 8001664:	f7ff fe5a 	bl	800131c <SSD1331_Chr>
        SSD1331_XY_INK(size);
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fe18 	bl	80012a0 <SSD1331_XY_INK>
    for (c = *( dataPtr ); c; ++dataPtr, c = *( dataPtr ))
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3301      	adds	r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	75fb      	strb	r3, [r7, #23]
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ec      	bne.n	800165c <SSD1331_FStr+0x20>
    }
}
 8001682:	bf00      	nop
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <clamp>:
#include "display.h"
#include "ssd1331.h"
#include "stm32f3xx_hal.h"

// --- Pomocnicza funkcja ograniczająca zakres ---
static uint16_t clamp(uint16_t val, uint16_t min, uint16_t max) {
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
 8001696:	460b      	mov	r3, r1
 8001698:	80bb      	strh	r3, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	807b      	strh	r3, [r7, #2]
    if (val < min) return min;
 800169e:	88fa      	ldrh	r2, [r7, #6]
 80016a0:	88bb      	ldrh	r3, [r7, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d201      	bcs.n	80016aa <clamp+0x1e>
 80016a6:	88bb      	ldrh	r3, [r7, #4]
 80016a8:	e006      	b.n	80016b8 <clamp+0x2c>
    if (val > max) return max;
 80016aa:	88fa      	ldrh	r2, [r7, #6]
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d901      	bls.n	80016b6 <clamp+0x2a>
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	e000      	b.n	80016b8 <clamp+0x2c>
    return val;
 80016b6:	88fb      	ldrh	r3, [r7, #6]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <display_gameBoard>:
    }
    return 0;
}

// --- Funkcje planszy i ekranu ---
void display_gameBoard(void){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af02      	add	r7, sp, #8
    display_clear();
 80016ca:	f000 f811 	bl	80016f0 <display_clear>
    HAL_Delay(150);
 80016ce:	2096      	movs	r0, #150	@ 0x96
 80016d0:	f001 fd1c 	bl	800310c <HAL_Delay>
    SSD1331_drawXOboard(16, 0, 80, RGB_OLED_HEIGHT-1, COLOR_NAVY, COLOR_SILVER);
 80016d4:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2310      	movs	r3, #16
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	233f      	movs	r3, #63	@ 0x3f
 80016e0:	2250      	movs	r2, #80	@ 0x50
 80016e2:	2100      	movs	r1, #0
 80016e4:	2010      	movs	r0, #16
 80016e6:	f7ff fd33 	bl	8001150 <SSD1331_drawXOboard>
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <display_clear>:
void display_clear(void){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af02      	add	r7, sp, #8
    SSD1331_drawFrame(0, 0, RGB_OLED_WIDTH - 1, RGB_OLED_HEIGHT - 1, COLOR_BLACK, COLOR_BLACK);
 80016f6:	2300      	movs	r3, #0
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	2300      	movs	r3, #0
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	233f      	movs	r3, #63	@ 0x3f
 8001700:	225f      	movs	r2, #95	@ 0x5f
 8001702:	2100      	movs	r1, #0
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fbca 	bl	8000e9e <SSD1331_drawFrame>
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <display_clearByColor>:
void display_clearByColor(uint16_t color){
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af02      	add	r7, sp, #8
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
    SSD1331_drawFrame(0, 0, RGB_OLED_WIDTH - 1, RGB_OLED_HEIGHT - 1, color, color);
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	233f      	movs	r3, #63	@ 0x3f
 8001724:	225f      	movs	r2, #95	@ 0x5f
 8001726:	2100      	movs	r1, #0
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff fbb8 	bl	8000e9e <SSD1331_drawFrame>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <display_welcomeScreen>:
    SSD1331_FStr(FONT_1X, (unsigned char*)"Wilgotnosc :", COLOR_BLUE, COLOR_BLACK);
    sprintf(hum_str, "%.2f %%", hum);
    SSD1331_SetXY(RGB_OLED_WIDTH/2 - 35, RGB_OLED_HEIGHT/2 +6);
    SSD1331_FStr(FONT_1X, (unsigned char*)hum_str, COLOR_BLUE, COLOR_BLACK);
}
void display_welcomeScreen(void){
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af02      	add	r7, sp, #8
    display_clear();
 800173e:	f7ff ffd7 	bl	80016f0 <display_clear>
    HAL_Delay(200);
 8001742:	20c8      	movs	r0, #200	@ 0xc8
 8001744:	f001 fce2 	bl	800310c <HAL_Delay>
    SSD1331_drawFrame(0, 0, RGB_OLED_WIDTH - 1, RGB_OLED_HEIGHT - 1, COLOR_DARKGREEN, COLOR_CHOCOLATE);
 8001748:	f24d 3343 	movw	r3, #54083	@ 0xd343
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	233f      	movs	r3, #63	@ 0x3f
 8001756:	225f      	movs	r2, #95	@ 0x5f
 8001758:	2100      	movs	r1, #0
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff fb9f 	bl	8000e9e <SSD1331_drawFrame>
    HAL_Delay(300);
 8001760:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001764:	f001 fcd2 	bl	800310c <HAL_Delay>
    SSD1331_SetXY(RGB_OLED_WIDTH/2 - 40, RGB_OLED_HEIGHT/2 - 18);
 8001768:	210e      	movs	r1, #14
 800176a:	2008      	movs	r0, #8
 800176c:	f7ff fd80 	bl	8001270 <SSD1331_SetXY>
    char *wiadomosc = "TIC_TAC_TOE";
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <display_welcomeScreen+0x78>)
 8001772:	607b      	str	r3, [r7, #4]
    SSD1331_FStr(FONT_2X, (unsigned char*) wiadomosc, COLOR_AQUA, COLOR_CHOCOLATE);
 8001774:	f24d 3343 	movw	r3, #54083	@ 0xd343
 8001778:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	2002      	movs	r0, #2
 8001780:	f7ff ff5c 	bl	800163c <SSD1331_FStr>
    SSD1331_SetXY(RGB_OLED_WIDTH/2 - 40, RGB_OLED_HEIGHT/2 + 10);
 8001784:	212a      	movs	r1, #42	@ 0x2a
 8001786:	2008      	movs	r0, #8
 8001788:	f7ff fd72 	bl	8001270 <SSD1331_SetXY>
    char *wiadomosc2 = "Projekt JM/KD";
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <display_welcomeScreen+0x7c>)
 800178e:	603b      	str	r3, [r7, #0]
    SSD1331_FStr(FONT_1X, (unsigned char*)wiadomosc2, COLOR_WHITE, COLOR_CHOCOLATE);
 8001790:	f24d 3343 	movw	r3, #54083	@ 0xd343
 8001794:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001798:	6839      	ldr	r1, [r7, #0]
 800179a:	2001      	movs	r0, #1
 800179c:	f7ff ff4e 	bl	800163c <SSD1331_FStr>
    HAL_Delay(3000);
 80017a0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80017a4:	f001 fcb2 	bl	800310c <HAL_Delay>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	0800a184 	.word	0x0800a184
 80017b4:	0800a190 	.word	0x0800a190

080017b8 <getXOCell>:

// --- Struktury i funkcje planszy ---
XOCell getXOCell(
    uint16_t board_x0, uint16_t board_y0, uint16_t board_x1, uint16_t board_y1,
    uint8_t cellNumber // 1-9, zgodnie z T9
) {
 80017b8:	b480      	push	{r7}
 80017ba:	b08b      	sub	sp, #44	@ 0x2c
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	817b      	strh	r3, [r7, #10]
 80017ca:	460b      	mov	r3, r1
 80017cc:	813b      	strh	r3, [r7, #8]
 80017ce:	4613      	mov	r3, r2
 80017d0:	80fb      	strh	r3, [r7, #6]
    XOCell cell;
    uint16_t width  = board_x1 > board_x0 ? board_x1 - board_x0 : board_x0 - board_x1;
 80017d2:	88fa      	ldrh	r2, [r7, #6]
 80017d4:	897b      	ldrh	r3, [r7, #10]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d904      	bls.n	80017e4 <getXOCell+0x2c>
 80017da:	88fa      	ldrh	r2, [r7, #6]
 80017dc:	897b      	ldrh	r3, [r7, #10]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	e003      	b.n	80017ec <getXOCell+0x34>
 80017e4:	897a      	ldrh	r2, [r7, #10]
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t height = board_y1 > board_y0 ? board_y1 - board_y0 : board_y0 - board_y1;
 80017ee:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80017f0:	893b      	ldrh	r3, [r7, #8]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d904      	bls.n	8001800 <getXOCell+0x48>
 80017f6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80017f8:	893b      	ldrh	r3, [r7, #8]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	e003      	b.n	8001808 <getXOCell+0x50>
 8001800:	893a      	ldrh	r2, [r7, #8]
 8001802:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	b29b      	uxth	r3, r3
 8001808:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t cell_w = width / 3;
 800180a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800180c:	4a2b      	ldr	r2, [pc, #172]	@ (80018bc <getXOCell+0x104>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t cell_h = height / 3;
 8001816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001818:	4a28      	ldr	r2, [pc, #160]	@ (80018bc <getXOCell+0x104>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	843b      	strh	r3, [r7, #32]
    uint8_t row = (cellNumber - 1) / 3; // 0,1,2
 8001822:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001826:	3b01      	subs	r3, #1
 8001828:	4a25      	ldr	r2, [pc, #148]	@ (80018c0 <getXOCell+0x108>)
 800182a:	fb82 1203 	smull	r1, r2, r2, r3
 800182e:	17db      	asrs	r3, r3, #31
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	77fb      	strb	r3, [r7, #31]
    uint8_t col = (cellNumber - 1) % 3; // 0,1,2
 8001834:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001838:	1e5a      	subs	r2, r3, #1
 800183a:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <getXOCell+0x108>)
 800183c:	fb83 3102 	smull	r3, r1, r3, r2
 8001840:	17d3      	asrs	r3, r2, #31
 8001842:	1ac9      	subs	r1, r1, r3
 8001844:	460b      	mov	r3, r1
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	440b      	add	r3, r1
 800184a:	1ad1      	subs	r1, r2, r3
 800184c:	460b      	mov	r3, r1
 800184e:	77bb      	strb	r3, [r7, #30]
    cell.x0 = board_x0 + col * cell_w;
 8001850:	7fbb      	ldrb	r3, [r7, #30]
 8001852:	b29b      	uxth	r3, r3
 8001854:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001856:	fb12 f303 	smulbb	r3, r2, r3
 800185a:	b29a      	uxth	r2, r3
 800185c:	897b      	ldrh	r3, [r7, #10]
 800185e:	4413      	add	r3, r2
 8001860:	b29b      	uxth	r3, r3
 8001862:	82bb      	strh	r3, [r7, #20]
    cell.y0 = board_y0 + row * cell_h;
 8001864:	7ffb      	ldrb	r3, [r7, #31]
 8001866:	b29b      	uxth	r3, r3
 8001868:	8c3a      	ldrh	r2, [r7, #32]
 800186a:	fb12 f303 	smulbb	r3, r2, r3
 800186e:	b29a      	uxth	r2, r3
 8001870:	893b      	ldrh	r3, [r7, #8]
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	82fb      	strh	r3, [r7, #22]
    cell.x1 = (col == 2) ? board_x1 : (cell.x0 + cell_w);
 8001878:	7fbb      	ldrb	r3, [r7, #30]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d004      	beq.n	8001888 <getXOCell+0xd0>
 800187e:	8aba      	ldrh	r2, [r7, #20]
 8001880:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001882:	4413      	add	r3, r2
 8001884:	b29b      	uxth	r3, r3
 8001886:	e000      	b.n	800188a <getXOCell+0xd2>
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	833b      	strh	r3, [r7, #24]
    cell.y1 = (row == 2) ? board_y1 : (cell.y0 + cell_h);
 800188c:	7ffb      	ldrb	r3, [r7, #31]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d004      	beq.n	800189c <getXOCell+0xe4>
 8001892:	8afa      	ldrh	r2, [r7, #22]
 8001894:	8c3b      	ldrh	r3, [r7, #32]
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	e000      	b.n	800189e <getXOCell+0xe6>
 800189c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800189e:	837b      	strh	r3, [r7, #26]
    return cell;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	461a      	mov	r2, r3
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	cb03      	ldmia	r3!, {r0, r1}
 80018aa:	6010      	str	r0, [r2, #0]
 80018ac:	6051      	str	r1, [r2, #4]
}
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	372c      	adds	r7, #44	@ 0x2c
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	aaaaaaab 	.word	0xaaaaaaab
 80018c0:	55555556 	.word	0x55555556

080018c4 <getXOCellFromDefault>:
XOCell getXOCellFromDefault(uint8_t cellNumber){
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	70fb      	strb	r3, [r7, #3]
    return getXOCell(XO_BOARD_START_X, XO_BOARD_START_Y, XO_BOARD_END_X, XO_BOARD_END_Y, cellNumber);
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <getXOCellFromDefault+0x34>)
 80018d2:	8819      	ldrh	r1, [r3, #0]
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <getXOCellFromDefault+0x38>)
 80018d6:	881c      	ldrh	r4, [r3, #0]
 80018d8:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <getXOCellFromDefault+0x3c>)
 80018da:	881d      	ldrh	r5, [r3, #0]
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <getXOCellFromDefault+0x40>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	9201      	str	r2, [sp, #4]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	462b      	mov	r3, r5
 80018ea:	4622      	mov	r2, r4
 80018ec:	f7ff ff64 	bl	80017b8 <getXOCell>
}
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bdb0      	pop	{r4, r5, r7, pc}
 80018f8:	20000004 	.word	0x20000004
 80018fc:	20000206 	.word	0x20000206
 8001900:	20000000 	.word	0x20000000
 8001904:	20000002 	.word	0x20000002

08001908 <display_drawXOCellFrame>:
void display_drawXOCellFrame(
    uint16_t board_x0, uint16_t board_y0, uint16_t board_x1, uint16_t board_y1,
    uint8_t cellNumber, uint16_t lineColor, uint16_t fillColor)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b087      	sub	sp, #28
 800190c:	af02      	add	r7, sp, #8
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4623      	mov	r3, r4
 8001918:	80fb      	strh	r3, [r7, #6]
 800191a:	4603      	mov	r3, r0
 800191c:	80bb      	strh	r3, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	807b      	strh	r3, [r7, #2]
 8001922:	4613      	mov	r3, r2
 8001924:	803b      	strh	r3, [r7, #0]
    XOCell cell = getXOCell(board_x0, board_y0, board_x1, board_y1, cellNumber);
 8001926:	f107 0008 	add.w	r0, r7, #8
 800192a:	887c      	ldrh	r4, [r7, #2]
 800192c:	88ba      	ldrh	r2, [r7, #4]
 800192e:	88f9      	ldrh	r1, [r7, #6]
 8001930:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	883b      	ldrh	r3, [r7, #0]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	4623      	mov	r3, r4
 800193c:	f7ff ff3c 	bl	80017b8 <getXOCell>
    SSD1331_drawFrame(cell.x0, cell.y0, cell.x1, cell.y1, lineColor, fillColor);
 8001940:	8938      	ldrh	r0, [r7, #8]
 8001942:	8979      	ldrh	r1, [r7, #10]
 8001944:	89ba      	ldrh	r2, [r7, #12]
 8001946:	89fc      	ldrh	r4, [r7, #14]
 8001948:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	4623      	mov	r3, r4
 8001952:	f7ff faa4 	bl	8000e9e <SSD1331_drawFrame>
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bd90      	pop	{r4, r7, pc}
	...

08001960 <display_drawXOBoardCell>:
void display_drawXOBoardCell(uint8_t cellNumber, uint16_t lineColor, uint16_t fillColor){
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b087      	sub	sp, #28
 8001964:	af04      	add	r7, sp, #16
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	460b      	mov	r3, r1
 800196c:	80bb      	strh	r3, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	807b      	strh	r3, [r7, #2]
    display_drawXOCellFrame(XO_BOARD_START_X, XO_BOARD_START_Y, XO_BOARD_END_X, XO_BOARD_END_Y, cellNumber, lineColor, fillColor);
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <display_drawXOBoardCell+0x3c>)
 8001974:	8818      	ldrh	r0, [r3, #0]
 8001976:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <display_drawXOBoardCell+0x40>)
 8001978:	8819      	ldrh	r1, [r3, #0]
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <display_drawXOBoardCell+0x44>)
 800197c:	881a      	ldrh	r2, [r3, #0]
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <display_drawXOBoardCell+0x48>)
 8001980:	881c      	ldrh	r4, [r3, #0]
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	4623      	mov	r3, r4
 8001990:	f7ff ffba 	bl	8001908 <display_drawXOCellFrame>
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bd90      	pop	{r4, r7, pc}
 800199c:	20000004 	.word	0x20000004
 80019a0:	20000206 	.word	0x20000206
 80019a4:	20000000 	.word	0x20000000
 80019a8:	20000002 	.word	0x20000002

080019ac <display_clearXOBoardCell>:
void display_clearXOBoardCell(uint8_t cellNumber){
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af04      	add	r7, sp, #16
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
    display_drawXOCellFrame(XO_BOARD_START_X, XO_BOARD_START_Y, XO_BOARD_END_X, XO_BOARD_END_Y, cellNumber, COLOR_SILVER, COLOR_NAVY);
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <display_clearXOBoardCell+0x38>)
 80019b8:	8818      	ldrh	r0, [r3, #0]
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <display_clearXOBoardCell+0x3c>)
 80019bc:	8819      	ldrh	r1, [r3, #0]
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <display_clearXOBoardCell+0x40>)
 80019c0:	881a      	ldrh	r2, [r3, #0]
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <display_clearXOBoardCell+0x44>)
 80019c4:	881c      	ldrh	r4, [r3, #0]
 80019c6:	2310      	movs	r3, #16
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4623      	mov	r3, r4
 80019d6:	f7ff ff97 	bl	8001908 <display_drawXOCellFrame>
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000004 	.word	0x20000004
 80019e8:	20000206 	.word	0x20000206
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000002 	.word	0x20000002

080019f4 <display_fillXOBoardCell>:
void display_fillXOBoardCell(uint8_t cellNumber){
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af04      	add	r7, sp, #16
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
    display_drawXOCellFrame(XO_BOARD_START_X, XO_BOARD_START_Y, XO_BOARD_END_X, XO_BOARD_END_Y, cellNumber, COLOR_RED, COLOR_HONEYDEW);
 80019fe:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <display_fillXOBoardCell+0x38>)
 8001a00:	8818      	ldrh	r0, [r3, #0]
 8001a02:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <display_fillXOBoardCell+0x3c>)
 8001a04:	8819      	ldrh	r1, [r3, #0]
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <display_fillXOBoardCell+0x40>)
 8001a08:	881a      	ldrh	r2, [r3, #0]
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <display_fillXOBoardCell+0x44>)
 8001a0c:	881c      	ldrh	r4, [r3, #0]
 8001a0e:	f24f 73fe 	movw	r3, #63486	@ 0xf7fe
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4623      	mov	r3, r4
 8001a20:	f7ff ff72 	bl	8001908 <display_drawXOCellFrame>
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	20000004 	.word	0x20000004
 8001a30:	20000206 	.word	0x20000206
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000002 	.word	0x20000002

08001a3c <calculateCellMid>:
XOCellMidCor calculateCellMid(const XOCell* cell) {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    XOCellMidCor mid;
    mid.x = (cell->x0 + cell->x1) / 2;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	889b      	ldrh	r3, [r3, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	0fda      	lsrs	r2, r3, #31
 8001a52:	4413      	add	r3, r2
 8001a54:	105b      	asrs	r3, r3, #1
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	813b      	strh	r3, [r7, #8]
    mid.y = (cell->y0 + cell->y1) / 2;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	885b      	ldrh	r3, [r3, #2]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	88db      	ldrh	r3, [r3, #6]
 8001a64:	4413      	add	r3, r2
 8001a66:	0fda      	lsrs	r2, r3, #31
 8001a68:	4413      	add	r3, r2
 8001a6a:	105b      	asrs	r3, r3, #1
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	817b      	strh	r3, [r7, #10]
    return mid;
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	2300      	movs	r3, #0
 8001a76:	89ba      	ldrh	r2, [r7, #12]
 8001a78:	f362 030f 	bfi	r3, r2, #0, #16
 8001a7c:	89fa      	ldrh	r2, [r7, #14]
 8001a7e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <display_drawX>:

// --- Rysowanie X z zabezpieczeniem ---
void display_drawX(uint8_t cellNumber, uint16_t color) {
 8001a8e:	b590      	push	{r4, r7, lr}
 8001a90:	b08b      	sub	sp, #44	@ 0x2c
 8001a92:	af02      	add	r7, sp, #8
 8001a94:	4603      	mov	r3, r0
 8001a96:	460a      	mov	r2, r1
 8001a98:	71fb      	strb	r3, [r7, #7]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	80bb      	strh	r3, [r7, #4]
    XOCell cell = getXOCellFromDefault(cellNumber);
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	79fa      	ldrb	r2, [r7, #7]
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff0c 	bl	80018c4 <getXOCellFromDefault>
    uint16_t margin = 1;
 8001aac:	2301      	movs	r3, #1
 8001aae:	83fb      	strh	r3, [r7, #30]
    uint16_t x0 = clamp(cell.x0 + margin, 0, RGB_OLED_WIDTH-1);
 8001ab0:	89ba      	ldrh	r2, [r7, #12]
 8001ab2:	8bfb      	ldrh	r3, [r7, #30]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	225f      	movs	r2, #95	@ 0x5f
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fde5 	bl	800168c <clamp>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	83bb      	strh	r3, [r7, #28]
    uint16_t y0 = clamp(cell.y0 + margin, 0, RGB_OLED_HEIGHT-1);
 8001ac6:	89fa      	ldrh	r2, [r7, #14]
 8001ac8:	8bfb      	ldrh	r3, [r7, #30]
 8001aca:	4413      	add	r3, r2
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	223f      	movs	r2, #63	@ 0x3f
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fdda 	bl	800168c <clamp>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	837b      	strh	r3, [r7, #26]
    uint16_t x1 = clamp(cell.x1 - margin, 0, RGB_OLED_WIDTH-1);
 8001adc:	8a3a      	ldrh	r2, [r7, #16]
 8001ade:	8bfb      	ldrh	r3, [r7, #30]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	225f      	movs	r2, #95	@ 0x5f
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fdcf 	bl	800168c <clamp>
 8001aee:	4603      	mov	r3, r0
 8001af0:	833b      	strh	r3, [r7, #24]
    uint16_t y1 = clamp(cell.y1 - margin, 0, RGB_OLED_HEIGHT-1);
 8001af2:	8a7a      	ldrh	r2, [r7, #18]
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	223f      	movs	r2, #63	@ 0x3f
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fdc4 	bl	800168c <clamp>
 8001b04:	4603      	mov	r3, r0
 8001b06:	82fb      	strh	r3, [r7, #22]
    SSD1331_drawLine(x0, y0, x1, y1, color);
 8001b08:	8afc      	ldrh	r4, [r7, #22]
 8001b0a:	8b3a      	ldrh	r2, [r7, #24]
 8001b0c:	8b79      	ldrh	r1, [r7, #26]
 8001b0e:	8bb8      	ldrh	r0, [r7, #28]
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	4623      	mov	r3, r4
 8001b16:	f7ff f969 	bl	8000dec <SSD1331_drawLine>
    SSD1331_drawLine(x1, y0, x0, y1, color);
 8001b1a:	8afc      	ldrh	r4, [r7, #22]
 8001b1c:	8bba      	ldrh	r2, [r7, #28]
 8001b1e:	8b79      	ldrh	r1, [r7, #26]
 8001b20:	8b38      	ldrh	r0, [r7, #24]
 8001b22:	88bb      	ldrh	r3, [r7, #4]
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	4623      	mov	r3, r4
 8001b28:	f7ff f960 	bl	8000dec <SSD1331_drawLine>
}
 8001b2c:	bf00      	nop
 8001b2e:	3724      	adds	r7, #36	@ 0x24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}

08001b34 <display_drawCircle>:
    HAL_Delay(60);
    SSD1331_drawLine(x1, y0, x0, y1, COLOR_CRIMSON);
}

// --- Rysowanie O z zabezpieczeniem ---
void display_drawCircle(uint8_t cellNumber, uint16_t color) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	80bb      	strh	r3, [r7, #4]
    XOCell cell = getXOCellFromDefault(cellNumber);
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	79fa      	ldrb	r2, [r7, #7]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff feb9 	bl	80018c4 <getXOCellFromDefault>
    XOCellMidCor mid = calculateCellMid(&cell);
 8001b52:	f107 0310 	add.w	r3, r7, #16
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff70 	bl	8001a3c <calculateCellMid>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60fb      	str	r3, [r7, #12]
    uint16_t radius = 9;
 8001b60:	2309      	movs	r3, #9
 8001b62:	83bb      	strh	r3, [r7, #28]
    // Ograniczenie promienia do granic komórki i ekranu
    uint16_t max_radius_x = (mid.x - cell.x0 < cell.x1 - mid.x) ? (mid.x - cell.x0) : (cell.x1 - mid.x);
 8001b64:	8abb      	ldrh	r3, [r7, #20]
 8001b66:	461a      	mov	r2, r3
 8001b68:	89bb      	ldrh	r3, [r7, #12]
 8001b6a:	1ad2      	subs	r2, r2, r3
 8001b6c:	89bb      	ldrh	r3, [r7, #12]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	8a3b      	ldrh	r3, [r7, #16]
 8001b72:	1acb      	subs	r3, r1, r3
 8001b74:	4293      	cmp	r3, r2
 8001b76:	bfa8      	it	ge
 8001b78:	4613      	movge	r3, r2
 8001b7a:	837b      	strh	r3, [r7, #26]
    uint16_t max_radius_y = (mid.y - cell.y0 < cell.y1 - mid.y) ? (mid.y - cell.y0) : (cell.y1 - mid.y);
 8001b7c:	8afb      	ldrh	r3, [r7, #22]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	89fb      	ldrh	r3, [r7, #14]
 8001b82:	1ad2      	subs	r2, r2, r3
 8001b84:	89fb      	ldrh	r3, [r7, #14]
 8001b86:	4619      	mov	r1, r3
 8001b88:	8a7b      	ldrh	r3, [r7, #18]
 8001b8a:	1acb      	subs	r3, r1, r3
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	bfa8      	it	ge
 8001b90:	4613      	movge	r3, r2
 8001b92:	833b      	strh	r3, [r7, #24]
    uint16_t safe_radius = radius;
 8001b94:	8bbb      	ldrh	r3, [r7, #28]
 8001b96:	83fb      	strh	r3, [r7, #30]
    if (safe_radius > max_radius_x) safe_radius = max_radius_x;
 8001b98:	8bfa      	ldrh	r2, [r7, #30]
 8001b9a:	8b7b      	ldrh	r3, [r7, #26]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d901      	bls.n	8001ba4 <display_drawCircle+0x70>
 8001ba0:	8b7b      	ldrh	r3, [r7, #26]
 8001ba2:	83fb      	strh	r3, [r7, #30]
    if (safe_radius > max_radius_y) safe_radius = max_radius_y;
 8001ba4:	8bfa      	ldrh	r2, [r7, #30]
 8001ba6:	8b3b      	ldrh	r3, [r7, #24]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d901      	bls.n	8001bb0 <display_drawCircle+0x7c>
 8001bac:	8b3b      	ldrh	r3, [r7, #24]
 8001bae:	83fb      	strh	r3, [r7, #30]
    if (mid.x < safe_radius) safe_radius = mid.x;
 8001bb0:	89bb      	ldrh	r3, [r7, #12]
 8001bb2:	8bfa      	ldrh	r2, [r7, #30]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d901      	bls.n	8001bbc <display_drawCircle+0x88>
 8001bb8:	89bb      	ldrh	r3, [r7, #12]
 8001bba:	83fb      	strh	r3, [r7, #30]
    if (mid.y < safe_radius) safe_radius = mid.y;
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	8bfa      	ldrh	r2, [r7, #30]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d901      	bls.n	8001bc8 <display_drawCircle+0x94>
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 8001bc6:	83fb      	strh	r3, [r7, #30]
    if (mid.x + safe_radius >= RGB_OLED_WIDTH) safe_radius = RGB_OLED_WIDTH - 1 - mid.x;
 8001bc8:	89bb      	ldrh	r3, [r7, #12]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	4413      	add	r3, r2
 8001bd0:	2b5f      	cmp	r3, #95	@ 0x5f
 8001bd2:	dd03      	ble.n	8001bdc <display_drawCircle+0xa8>
 8001bd4:	89bb      	ldrh	r3, [r7, #12]
 8001bd6:	f1c3 035f 	rsb	r3, r3, #95	@ 0x5f
 8001bda:	83fb      	strh	r3, [r7, #30]
    if (mid.y + safe_radius >= RGB_OLED_HEIGHT) safe_radius = RGB_OLED_HEIGHT - 1 - mid.y;
 8001bdc:	89fb      	ldrh	r3, [r7, #14]
 8001bde:	461a      	mov	r2, r3
 8001be0:	8bfb      	ldrh	r3, [r7, #30]
 8001be2:	4413      	add	r3, r2
 8001be4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001be6:	dd03      	ble.n	8001bf0 <display_drawCircle+0xbc>
 8001be8:	89fb      	ldrh	r3, [r7, #14]
 8001bea:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8001bee:	83fb      	strh	r3, [r7, #30]
    SSD1331_drawCircle(mid.x, mid.y, safe_radius, color);
 8001bf0:	89b8      	ldrh	r0, [r7, #12]
 8001bf2:	89f9      	ldrh	r1, [r7, #14]
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
 8001bf6:	8bfa      	ldrh	r2, [r7, #30]
 8001bf8:	f7ff f9cc 	bl	8000f94 <SSD1331_drawCircle>
}
 8001bfc:	bf00      	nop
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <display_shiftDenied>:
    display_drawCircleByCell(cell, COLOR_GREEN);
    HAL_Delay(100);
}

// --- Animacja odrzucenia ruchu ---
void display_shiftDenied(uint8_t cellNumber, char board[3][3]) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
    uint8_t row = (cellNumber - 1) / 3;
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	4a26      	ldr	r2, [pc, #152]	@ (8001cb0 <display_shiftDenied+0xac>)
 8001c16:	fb82 1203 	smull	r1, r2, r2, r3
 8001c1a:	17db      	asrs	r3, r3, #31
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	75fb      	strb	r3, [r7, #23]
    uint8_t col = (cellNumber - 1) % 3;
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	1e5a      	subs	r2, r3, #1
 8001c24:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <display_shiftDenied+0xac>)
 8001c26:	fb83 3102 	smull	r3, r1, r3, r2
 8001c2a:	17d3      	asrs	r3, r2, #31
 8001c2c:	1ac9      	subs	r1, r1, r3
 8001c2e:	460b      	mov	r3, r1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	440b      	add	r3, r1
 8001c34:	1ad1      	subs	r1, r2, r3
 8001c36:	460b      	mov	r3, r1
 8001c38:	75bb      	strb	r3, [r7, #22]
    display_drawXOBoardCell(cellNumber, COLOR_RED, COLOR_RED);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c40:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fe8b 	bl	8001960 <display_drawXOBoardCell>
    XOCell cell = getXOCellFromDefault(cellNumber);
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	79fa      	ldrb	r2, [r7, #7]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe36 	bl	80018c4 <getXOCellFromDefault>
    XOCellMidCor mid = calculateCellMid(&cell);
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff feed 	bl	8001a3c <calculateCellMid>
 8001c62:	4603      	mov	r3, r0
 8001c64:	60bb      	str	r3, [r7, #8]
    if (board[row][col] == 'O') {
 8001c66:	7dfa      	ldrb	r2, [r7, #23]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	441a      	add	r2, r3
 8001c72:	7dbb      	ldrb	r3, [r7, #22]
 8001c74:	5cd3      	ldrb	r3, [r2, r3]
 8001c76:	2b4f      	cmp	r3, #79	@ 0x4f
 8001c78:	d106      	bne.n	8001c88 <display_shiftDenied+0x84>
        display_drawCircle(cellNumber, COLOR_YELLOW);
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff57 	bl	8001b34 <display_drawCircle>
    } else if (board[row][col] == 'X') {
        display_drawX(cellNumber, COLOR_YELLOW);
    }
}
 8001c86:	e00f      	b.n	8001ca8 <display_shiftDenied+0xa4>
    } else if (board[row][col] == 'X') {
 8001c88:	7dfa      	ldrb	r2, [r7, #23]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	441a      	add	r2, r3
 8001c94:	7dbb      	ldrb	r3, [r7, #22]
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	2b58      	cmp	r3, #88	@ 0x58
 8001c9a:	d105      	bne.n	8001ca8 <display_shiftDenied+0xa4>
        display_drawX(cellNumber, COLOR_YELLOW);
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fef3 	bl	8001a8e <display_drawX>
}
 8001ca8:	bf00      	nop
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	55555556 	.word	0x55555556

08001cb4 <display_neon_win>:

void display_neon_win(char board[3][3], uint8_t win_cells[3]) {
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b08f      	sub	sp, #60	@ 0x3c
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    uint16_t neon_color_x = 0x07E0;     // jasny zielony (np. dla X)
 8001cbe:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cc2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t neon_color_o = 0xF81F;     // jasny magenta (np. dla O)
 8001cc4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001cc8:	853b      	strh	r3, [r7, #40]	@ 0x28
    uint16_t neon_cross_color = 0xFFE0; // jasny żółty (dla linii przekreślenia)
 8001cca:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001cce:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Rysuj neonowe znaki na wygrywających polach
    for (int i = 0; i < 3; ++i) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cd4:	e044      	b.n	8001d60 <display_neon_win+0xac>
        uint8_t cell = win_cells[i];
 8001cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint8_t row = (cell - 1) / 3;
 8001ce2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	4a35      	ldr	r2, [pc, #212]	@ (8001dc0 <display_neon_win+0x10c>)
 8001cea:	fb82 1203 	smull	r1, r2, r2, r3
 8001cee:	17db      	asrs	r3, r3, #31
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        uint8_t col = (cell - 1) % 3;
 8001cf6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001cfa:	1e5a      	subs	r2, r3, #1
 8001cfc:	4b30      	ldr	r3, [pc, #192]	@ (8001dc0 <display_neon_win+0x10c>)
 8001cfe:	fb83 3102 	smull	r3, r1, r3, r2
 8001d02:	17d3      	asrs	r3, r2, #31
 8001d04:	1ac9      	subs	r1, r1, r3
 8001d06:	460b      	mov	r3, r1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	440b      	add	r3, r1
 8001d0c:	1ad1      	subs	r1, r2, r3
 8001d0e:	460b      	mov	r3, r1
 8001d10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        char sign = board[row][col];
 8001d14:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	441a      	add	r2, r3
 8001d22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (sign == 'X') {
 8001d2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d30:	2b58      	cmp	r3, #88	@ 0x58
 8001d32:	d107      	bne.n	8001d44 <display_neon_win+0x90>
            display_drawX(cell, neon_color_x);
 8001d34:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001d36:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fea6 	bl	8001a8e <display_drawX>
 8001d42:	e00a      	b.n	8001d5a <display_neon_win+0xa6>
        } else if (sign == 'O') {
 8001d44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d48:	2b4f      	cmp	r3, #79	@ 0x4f
 8001d4a:	d106      	bne.n	8001d5a <display_neon_win+0xa6>
            display_drawCircle(cell, neon_color_o);
 8001d4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001d4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff feed 	bl	8001b34 <display_drawCircle>
    for (int i = 0; i < 3; ++i) {
 8001d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	ddb7      	ble.n	8001cd6 <display_neon_win+0x22>
        }
    }

    // Przekreśl linię zwycięstwa (od środka pierwszego do środka ostatniego pola)
    XOCell cell_start = getXOCellFromDefault(win_cells[0]);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	f107 0318 	add.w	r3, r7, #24
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fda7 	bl	80018c4 <getXOCellFromDefault>
    XOCell cell_end   = getXOCellFromDefault(win_cells[2]);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	3302      	adds	r3, #2
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fd9e 	bl	80018c4 <getXOCellFromDefault>
    XOCellMidCor mid_start = calculateCellMid(&cell_start);
 8001d88:	f107 0318 	add.w	r3, r7, #24
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fe55 	bl	8001a3c <calculateCellMid>
 8001d92:	4603      	mov	r3, r0
 8001d94:	60fb      	str	r3, [r7, #12]
    XOCellMidCor mid_end   = calculateCellMid(&cell_end);
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fe4e 	bl	8001a3c <calculateCellMid>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60bb      	str	r3, [r7, #8]
    SSD1331_drawLine(mid_start.x, mid_start.y, mid_end.x, mid_end.y, neon_cross_color);
 8001da4:	89b8      	ldrh	r0, [r7, #12]
 8001da6:	89f9      	ldrh	r1, [r7, #14]
 8001da8:	893a      	ldrh	r2, [r7, #8]
 8001daa:	897c      	ldrh	r4, [r7, #10]
 8001dac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4623      	mov	r3, r4
 8001db2:	f7ff f81b 	bl	8000dec <SSD1331_drawLine>
}
 8001db6:	bf00      	nop
 8001db8:	3734      	adds	r7, #52	@ 0x34
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	55555556 	.word	0x55555556

08001dc4 <HAL_GPIO_EXTI_Callback>:
static void MX_ADC1_Init(void);
static void MX_RTC_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_0){
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d102      	bne.n	8001dda <HAL_GPIO_EXTI_Callback+0x16>
        button_pressed = 1;
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <HAL_GPIO_EXTI_Callback+0x24>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
    }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000444 	.word	0x20000444

08001dec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
//        	display_fillXOBoardCell(currentState);
//        	HAL_Delay(100);
//        	lastState = currentState;
//        }
//    }
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <detectDirection>:
//              return 4;
//      }
//
//      return 0;
//  }
uint8_t detectDirection(uint16_t x, uint16_t y) {
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	460a      	mov	r2, r1
 8001e0a:	80fb      	strh	r3, [r7, #6]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	80bb      	strh	r3, [r7, #4]
    int16_t dx = x - 2048;
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	81fb      	strh	r3, [r7, #14]
    int16_t dy = y - 2048;
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	81bb      	strh	r3, [r7, #12]
    int16_t threshold = 500;
 8001e24:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e28:	817b      	strh	r3, [r7, #10]

    if (abs(dx) < threshold && abs(dy) < threshold) return 0; // brak ruchu
 8001e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bfb8      	it	lt
 8001e32:	425b      	neglt	r3, r3
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	da0c      	bge.n	8001e5a <detectDirection+0x5a>
 8001e40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bfb8      	it	lt
 8001e48:	425b      	neglt	r3, r3
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	da01      	bge.n	8001e5a <detectDirection+0x5a>
 8001e56:	2300      	movs	r3, #0
 8001e58:	e05e      	b.n	8001f18 <detectDirection+0x118>

    if (dy < -threshold && dx < -threshold) return 8; // góra-lewo
 8001e5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e62:	425b      	negs	r3, r3
 8001e64:	429a      	cmp	r2, r3
 8001e66:	da08      	bge.n	8001e7a <detectDirection+0x7a>
 8001e68:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e70:	425b      	negs	r3, r3
 8001e72:	429a      	cmp	r2, r3
 8001e74:	da01      	bge.n	8001e7a <detectDirection+0x7a>
 8001e76:	2308      	movs	r3, #8
 8001e78:	e04e      	b.n	8001f18 <detectDirection+0x118>
    if (dy < -threshold && dx >  threshold) return 2; // góra-prawo
 8001e7a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e82:	425b      	negs	r3, r3
 8001e84:	429a      	cmp	r2, r3
 8001e86:	da07      	bge.n	8001e98 <detectDirection+0x98>
 8001e88:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dd01      	ble.n	8001e98 <detectDirection+0x98>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e03f      	b.n	8001f18 <detectDirection+0x118>
    if (dy >  threshold && dx < -threshold) return 6; // dół-lewo
 8001e98:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	dd08      	ble.n	8001eb6 <detectDirection+0xb6>
 8001ea4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ea8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001eac:	425b      	negs	r3, r3
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	da01      	bge.n	8001eb6 <detectDirection+0xb6>
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	e030      	b.n	8001f18 <detectDirection+0x118>
    if (dy >  threshold && dx >  threshold) return 4; // dół-prawo
 8001eb6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001eba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dd07      	ble.n	8001ed2 <detectDirection+0xd2>
 8001ec2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ec6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	dd01      	ble.n	8001ed2 <detectDirection+0xd2>
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e022      	b.n	8001f18 <detectDirection+0x118>

    if (dy < -threshold) return 1; // góra
 8001ed2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ed6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001eda:	425b      	negs	r3, r3
 8001edc:	429a      	cmp	r2, r3
 8001ede:	da01      	bge.n	8001ee4 <detectDirection+0xe4>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e019      	b.n	8001f18 <detectDirection+0x118>
    if (dy >  threshold) return 5; // dół
 8001ee4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ee8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dd01      	ble.n	8001ef4 <detectDirection+0xf4>
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	e011      	b.n	8001f18 <detectDirection+0x118>
    if (dx < -threshold) return 7; // lewo
 8001ef4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ef8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001efc:	425b      	negs	r3, r3
 8001efe:	429a      	cmp	r2, r3
 8001f00:	da01      	bge.n	8001f06 <detectDirection+0x106>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e008      	b.n	8001f18 <detectDirection+0x118>
    if (dx >  threshold) return 3; // prawo
 8001f06:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f0a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dd01      	ble.n	8001f16 <detectDirection+0x116>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e000      	b.n	8001f18 <detectDirection+0x118>

    return 0;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <moveCursor>:
void moveCursor(uint8_t direction) {
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
    int8_t dRow = 0, dCol = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
 8001f32:	2300      	movs	r3, #0
 8001f34:	73bb      	strb	r3, [r7, #14]
    switch(direction) {
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	2b07      	cmp	r3, #7
 8001f3c:	d85d      	bhi.n	8001ffa <moveCursor+0xd6>
 8001f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f44 <moveCursor+0x20>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f65 	.word	0x08001f65
 8001f48:	08001f6f 	.word	0x08001f6f
 8001f4c:	08001f79 	.word	0x08001f79
 8001f50:	08001f83 	.word	0x08001f83
 8001f54:	08001f8d 	.word	0x08001f8d
 8001f58:	08001f97 	.word	0x08001f97
 8001f5c:	08001fa1 	.word	0x08001fa1
 8001f60:	08001fab 	.word	0x08001fab
        case 1: dRow = -1; dCol =  0; break; // góra
 8001f64:	23ff      	movs	r3, #255	@ 0xff
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73bb      	strb	r3, [r7, #14]
 8001f6c:	e022      	b.n	8001fb4 <moveCursor+0x90>
        case 2: dRow = -1; dCol = +1; break; // góra-prawo
 8001f6e:	23ff      	movs	r3, #255	@ 0xff
 8001f70:	73fb      	strb	r3, [r7, #15]
 8001f72:	2301      	movs	r3, #1
 8001f74:	73bb      	strb	r3, [r7, #14]
 8001f76:	e01d      	b.n	8001fb4 <moveCursor+0x90>
        case 3: dRow =  0; dCol = +1; break; // prawo
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73bb      	strb	r3, [r7, #14]
 8001f80:	e018      	b.n	8001fb4 <moveCursor+0x90>
        case 4: dRow = +1; dCol = +1; break; // dół-prawo
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
 8001f86:	2301      	movs	r3, #1
 8001f88:	73bb      	strb	r3, [r7, #14]
 8001f8a:	e013      	b.n	8001fb4 <moveCursor+0x90>
        case 5: dRow = +1; dCol =  0; break; // dół
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	2300      	movs	r3, #0
 8001f92:	73bb      	strb	r3, [r7, #14]
 8001f94:	e00e      	b.n	8001fb4 <moveCursor+0x90>
        case 6: dRow = +1; dCol = -1; break; // dół-lewo
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	23ff      	movs	r3, #255	@ 0xff
 8001f9c:	73bb      	strb	r3, [r7, #14]
 8001f9e:	e009      	b.n	8001fb4 <moveCursor+0x90>
        case 7: dRow =  0; dCol = -1; break; // lewo
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	23ff      	movs	r3, #255	@ 0xff
 8001fa6:	73bb      	strb	r3, [r7, #14]
 8001fa8:	e004      	b.n	8001fb4 <moveCursor+0x90>
        case 8: dRow = -1; dCol = -1; break; // góra-lewo
 8001faa:	23ff      	movs	r3, #255	@ 0xff
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	23ff      	movs	r3, #255	@ 0xff
 8001fb0:	73bb      	strb	r3, [r7, #14]
 8001fb2:	bf00      	nop
        default: return; // brak ruchu
    }
    // Sprawdź granice planszy
    int8_t newRow = cursorRow + dRow;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <moveCursor+0xe4>)
 8001fb6:	781a      	ldrb	r2, [r3, #0]
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	4413      	add	r3, r2
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	737b      	strb	r3, [r7, #13]
    int8_t newCol = cursorCol + dCol;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <moveCursor+0xe8>)
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	7bbb      	ldrb	r3, [r7, #14]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	733b      	strb	r3, [r7, #12]
    if (newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE) {
 8001fcc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db13      	blt.n	8001ffc <moveCursor+0xd8>
 8001fd4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	dc0f      	bgt.n	8001ffc <moveCursor+0xd8>
 8001fdc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0b      	blt.n	8001ffc <moveCursor+0xd8>
 8001fe4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	dc07      	bgt.n	8001ffc <moveCursor+0xd8>
        cursorRow = newRow;
 8001fec:	7b7a      	ldrb	r2, [r7, #13]
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <moveCursor+0xe4>)
 8001ff0:	701a      	strb	r2, [r3, #0]
        cursorCol = newCol;
 8001ff2:	7b3a      	ldrb	r2, [r7, #12]
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <moveCursor+0xe8>)
 8001ff6:	701a      	strb	r2, [r3, #0]
 8001ff8:	e000      	b.n	8001ffc <moveCursor+0xd8>
        default: return; // brak ruchu
 8001ffa:	bf00      	nop
    }
}
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000006 	.word	0x20000006
 800200c:	20000007 	.word	0x20000007

08002010 <check_winner>:
    else if (who == 'X')
        display_animateChooseX(getXOCellFromDefault(cellNumber), COLOR_GREEN);
    else
        display_fillXOBoardCell(cellNumber); // domyślna animacja podświetlenia
}
char check_winner(char board[3][3], uint8_t win_cells[3]) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b092      	sub	sp, #72	@ 0x48
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    // Indeksy wygrywających linii: wiersze, kolumny, przekątne
    const uint8_t lines[8][3][2] = {
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	2230      	movs	r2, #48	@ 0x30
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f006 f963 	bl	80082ee <memset>
 8002028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800202c:	81fb      	strh	r3, [r7, #14]
 800202e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002032:	823b      	strh	r3, [r7, #16]
 8002034:	2301      	movs	r3, #1
 8002036:	827b      	strh	r3, [r7, #18]
 8002038:	f240 1301 	movw	r3, #257	@ 0x101
 800203c:	82bb      	strh	r3, [r7, #20]
 800203e:	f240 2301 	movw	r3, #513	@ 0x201
 8002042:	82fb      	strh	r3, [r7, #22]
 8002044:	2302      	movs	r3, #2
 8002046:	833b      	strh	r3, [r7, #24]
 8002048:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800204c:	837b      	strh	r3, [r7, #26]
 800204e:	f240 2302 	movw	r3, #514	@ 0x202
 8002052:	83bb      	strh	r3, [r7, #28]
 8002054:	2301      	movs	r3, #1
 8002056:	843b      	strh	r3, [r7, #32]
 8002058:	2302      	movs	r3, #2
 800205a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800205c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002060:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002062:	f240 1301 	movw	r3, #257	@ 0x101
 8002066:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002068:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800206c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800206e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002072:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002074:	f240 2301 	movw	r3, #513	@ 0x201
 8002078:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800207a:	f240 2302 	movw	r3, #514	@ 0x202
 800207e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002080:	f240 1301 	movw	r3, #257	@ 0x101
 8002084:	867b      	strh	r3, [r7, #50]	@ 0x32
 8002086:	f240 2302 	movw	r3, #514	@ 0x202
 800208a:	86bb      	strh	r3, [r7, #52]	@ 0x34
        {{0,1},{1,1},{2,1}}, // kolumna 2
        {{0,2},{1,2},{2,2}}, // kolumna 3
        {{0,0},{1,1},{2,2}}, // przekątna \
        {{0,2},{1,1},{2,0}}  // przekątna /
    };
    for (int i = 0; i < 8; ++i) {
 800208c:	2300      	movs	r3, #0
 800208e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002090:	e091      	b.n	80021b6 <check_winner+0x1a6>
        char a = board[lines[i][0][0]][lines[i][0][1]];
 8002092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	3348      	adds	r3, #72	@ 0x48
 800209e:	443b      	add	r3, r7
 80020a0:	3b3c      	subs	r3, #60	@ 0x3c
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	18d1      	adds	r1, r2, r3
 80020b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	3348      	adds	r3, #72	@ 0x48
 80020bc:	443b      	add	r3, r7
 80020be:	3b3b      	subs	r3, #59	@ 0x3b
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        char b = board[lines[i][1][0]][lines[i][1][1]];
 80020c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	3348      	adds	r3, #72	@ 0x48
 80020d4:	443b      	add	r3, r7
 80020d6:	3b3a      	subs	r3, #58	@ 0x3a
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	18d1      	adds	r1, r2, r3
 80020e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	3348      	adds	r3, #72	@ 0x48
 80020f2:	443b      	add	r3, r7
 80020f4:	3b39      	subs	r3, #57	@ 0x39
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	5ccb      	ldrb	r3, [r1, r3]
 80020fa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        char c = board[lines[i][2][0]][lines[i][2][1]];
 80020fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	3348      	adds	r3, #72	@ 0x48
 800210a:	443b      	add	r3, r7
 800210c:	3b38      	subs	r3, #56	@ 0x38
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	18d1      	adds	r1, r2, r3
 800211c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	3348      	adds	r3, #72	@ 0x48
 8002128:	443b      	add	r3, r7
 800212a:	3b37      	subs	r3, #55	@ 0x37
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        if (a != 'N' && a == b && b == c) {
 8002134:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002138:	2b4e      	cmp	r3, #78	@ 0x4e
 800213a:	d039      	beq.n	80021b0 <check_winner+0x1a0>
 800213c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002140:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002144:	429a      	cmp	r2, r3
 8002146:	d133      	bne.n	80021b0 <check_winner+0x1a0>
 8002148:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800214c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002150:	429a      	cmp	r2, r3
 8002152:	d12d      	bne.n	80021b0 <check_winner+0x1a0>
            // Zamień współrzędne (row,col) na cellNumber (1-9)
            for (int j = 0; j < 3; ++j)
 8002154:	2300      	movs	r3, #0
 8002156:	643b      	str	r3, [r7, #64]	@ 0x40
 8002158:	e024      	b.n	80021a4 <check_winner+0x194>
                win_cells[j] = lines[i][j][0] * 3 + lines[i][j][1] + 1;
 800215a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002164:	4413      	add	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	3348      	adds	r3, #72	@ 0x48
 800216a:	443b      	add	r3, r7
 800216c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002170:	461a      	mov	r2, r3
 8002172:	0052      	lsls	r2, r2, #1
 8002174:	4413      	add	r3, r2
 8002176:	b2d9      	uxtb	r1, r3
 8002178:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002182:	4413      	add	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	3348      	adds	r3, #72	@ 0x48
 8002188:	443b      	add	r3, r7
 800218a:	f813 3c3b 	ldrb.w	r3, [r3, #-59]
 800218e:	440b      	add	r3, r1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002194:	6839      	ldr	r1, [r7, #0]
 8002196:	440b      	add	r3, r1
 8002198:	3201      	adds	r2, #1
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < 3; ++j)
 800219e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a0:	3301      	adds	r3, #1
 80021a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80021a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	ddd7      	ble.n	800215a <check_winner+0x14a>
            return a; // 'X' lub 'O'
 80021aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021ae:	e007      	b.n	80021c0 <check_winner+0x1b0>
    for (int i = 0; i < 8; ++i) {
 80021b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021b2:	3301      	adds	r3, #1
 80021b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80021b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021b8:	2b07      	cmp	r3, #7
 80021ba:	f77f af6a 	ble.w	8002092 <check_winner+0x82>
        }
    }
    return 'N'; // brak zwycięzcy
 80021be:	234e      	movs	r3, #78	@ 0x4e
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3748      	adds	r7, #72	@ 0x48
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <resetGame>:
void resetGame(char board[3][3], char winner) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
    // Czyszczenie tablicy planszy
    for (int i = 0; i < 3; i++) {
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e015      	b.n	8002206 <resetGame+0x3e>
        for (int j = 0; j < 3; j++) {
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	e00c      	b.n	80021fa <resetGame+0x32>
            board[i][j] = 'N';
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4613      	mov	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4413      	add	r3, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	441a      	add	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4413      	add	r3, r2
 80021f0:	224e      	movs	r2, #78	@ 0x4e
 80021f2:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	3301      	adds	r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	ddef      	ble.n	80021e0 <resetGame+0x18>
    for (int i = 0; i < 3; i++) {
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3301      	adds	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b02      	cmp	r3, #2
 800220a:	dde6      	ble.n	80021da <resetGame+0x12>
        }
    }

    // Czyszczenie ekranu
    display_clearByColor(COLOR_AQUA);
 800220c:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8002210:	f7ff fa7e 	bl	8001710 <display_clearByColor>
    HAL_Delay(50);
 8002214:	2032      	movs	r0, #50	@ 0x32
 8002216:	f000 ff79 	bl	800310c <HAL_Delay>


    // Wyświetlanie komunikatu o wyniku
    SSD1331_SetXY(RGB_OLED_WIDTH/2 - 40, RGB_OLED_HEIGHT/2 - 10);
 800221a:	2116      	movs	r1, #22
 800221c:	2008      	movs	r0, #8
 800221e:	f7ff f827 	bl	8001270 <SSD1331_SetXY>
    if (winner == 'X') {
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	2b58      	cmp	r3, #88	@ 0x58
 8002226:	d112      	bne.n	800224e <resetGame+0x86>
        SSD1331_FStr(FONT_2X, (unsigned char*)"WYGRAL: ", COLOR_GOLDEN, COLOR_BLACK);
 8002228:	2300      	movs	r3, #0
 800222a:	f64f 62a0 	movw	r2, #65184	@ 0xfea0
 800222e:	491c      	ldr	r1, [pc, #112]	@ (80022a0 <resetGame+0xd8>)
 8002230:	2002      	movs	r0, #2
 8002232:	f7ff fa03 	bl	800163c <SSD1331_FStr>
        SSD1331_SetXY(RGB_OLED_WIDTH/2 - 40, RGB_OLED_HEIGHT/2 + 10);
 8002236:	212a      	movs	r1, #42	@ 0x2a
 8002238:	2008      	movs	r0, #8
 800223a:	f7ff f819 	bl	8001270 <SSD1331_SetXY>
        SSD1331_FStr(FONT_2X, (unsigned char*)"KRZYZ", COLOR_GREEN, COLOR_BLACK);
 800223e:	2300      	movs	r3, #0
 8002240:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002244:	4917      	ldr	r1, [pc, #92]	@ (80022a4 <resetGame+0xdc>)
 8002246:	2002      	movs	r0, #2
 8002248:	f7ff f9f8 	bl	800163c <SSD1331_FStr>
 800224c:	e020      	b.n	8002290 <resetGame+0xc8>
    } else if (winner == 'O') {
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	2b4f      	cmp	r3, #79	@ 0x4f
 8002252:	d112      	bne.n	800227a <resetGame+0xb2>
    	  SSD1331_FStr(FONT_2X, (unsigned char*)"WYGRAL: ", COLOR_GOLDEN, COLOR_BLACK);
 8002254:	2300      	movs	r3, #0
 8002256:	f64f 62a0 	movw	r2, #65184	@ 0xfea0
 800225a:	4911      	ldr	r1, [pc, #68]	@ (80022a0 <resetGame+0xd8>)
 800225c:	2002      	movs	r0, #2
 800225e:	f7ff f9ed 	bl	800163c <SSD1331_FStr>
    	  SSD1331_SetXY(RGB_OLED_WIDTH/2 - 40, RGB_OLED_HEIGHT/2 + 10);
 8002262:	212a      	movs	r1, #42	@ 0x2a
 8002264:	2008      	movs	r0, #8
 8002266:	f7ff f803 	bl	8001270 <SSD1331_SetXY>
    	  SSD1331_FStr(FONT_2X, (unsigned char*)"KOLO", COLOR_GREEN, COLOR_BLACK);
 800226a:	2300      	movs	r3, #0
 800226c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002270:	490d      	ldr	r1, [pc, #52]	@ (80022a8 <resetGame+0xe0>)
 8002272:	2002      	movs	r0, #2
 8002274:	f7ff f9e2 	bl	800163c <SSD1331_FStr>
 8002278:	e00a      	b.n	8002290 <resetGame+0xc8>
    } else {
    	  SSD1331_SetXY(RGB_OLED_WIDTH/2 - 40, RGB_OLED_HEIGHT/2);
 800227a:	2120      	movs	r1, #32
 800227c:	2008      	movs	r0, #8
 800227e:	f7fe fff7 	bl	8001270 <SSD1331_SetXY>
    	 SSD1331_FStr(FONT_2X, (unsigned char*)"REMIS", COLOR_CRIMSON, COLOR_BLACK);
 8002282:	2300      	movs	r3, #0
 8002284:	f64d 02a7 	movw	r2, #55463	@ 0xd8a7
 8002288:	4908      	ldr	r1, [pc, #32]	@ (80022ac <resetGame+0xe4>)
 800228a:	2002      	movs	r0, #2
 800228c:	f7ff f9d6 	bl	800163c <SSD1331_FStr>
    }

    HAL_Delay(2000); // Wyświetlanie komunikatu przez 2 sekundy
 8002290:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002294:	f000 ff3a 	bl	800310c <HAL_Delay>
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	0800a1a0 	.word	0x0800a1a0
 80022a4:	0800a1ac 	.word	0x0800a1ac
 80022a8:	0800a1b4 	.word	0x0800a1b4
 80022ac:	0800a1bc 	.word	0x0800a1bc

080022b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022b6:	f000 fec3 	bl	8003040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ba:	f000 f91f 	bl	80024fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022be:	f000 fb57 	bl	8002970 <MX_GPIO_Init>
  MX_DMA_Init();
 80022c2:	f000 fb37 	bl	8002934 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80022c6:	f000 fb05 	bl	80028d4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80022ca:	f000 fa41 	bl	8002750 <MX_SPI3_Init>
  MX_ADC1_Init();
 80022ce:	f000 f979 	bl	80025c4 <MX_ADC1_Init>
  MX_RTC_Init();
 80022d2:	f000 f9e3 	bl	800269c <MX_RTC_Init>
  MX_TIM2_Init();
 80022d6:	f000 fa79 	bl	80027cc <MX_TIM2_Init>
  MX_TIM6_Init();
 80022da:	f000 fac5 	bl	8002868 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80022de:	2202      	movs	r2, #2
 80022e0:	497f      	ldr	r1, [pc, #508]	@ (80024e0 <main+0x230>)
 80022e2:	4880      	ldr	r0, [pc, #512]	@ (80024e4 <main+0x234>)
 80022e4:	f001 f8da 	bl	800349c <HAL_ADC_Start_DMA>

  SSD1331_init();
 80022e8:	f7fe fcaa 	bl	8000c40 <SSD1331_init>
  HAL_Delay(100);
 80022ec:	2064      	movs	r0, #100	@ 0x64
 80022ee:	f000 ff0d 	bl	800310c <HAL_Delay>
  display_welcomeScreen();
 80022f2:	f7ff fa21 	bl	8001738 <display_welcomeScreen>
  HAL_Delay(150);
 80022f6:	2096      	movs	r0, #150	@ 0x96
 80022f8:	f000 ff08 	bl	800310c <HAL_Delay>
  display_gameBoard();
 80022fc:	f7ff f9e2 	bl	80016c4 <display_gameBoard>

  HAL_Delay(100);
 8002300:	2064      	movs	r0, #100	@ 0x64
 8002302:	f000 ff03 	bl	800310c <HAL_Delay>
  display_fillXOBoardCell(cursorRow * BOARD_SIZE + cursorCol + 1);
 8002306:	4b78      	ldr	r3, [pc, #480]	@ (80024e8 <main+0x238>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	4a76      	ldr	r2, [pc, #472]	@ (80024ec <main+0x23c>)
 8002314:	7812      	ldrb	r2, [r2, #0]
 8002316:	4413      	add	r3, r2
 8002318:	3301      	adds	r3, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fb6a 	bl	80019f4 <display_fillXOBoardCell>
//		 HAL_Delay(200);
//
//	 }
//
//
	  int8_t direction = detectDirection(adc_buf[0], adc_buf[1]);
 8002320:	4b6f      	ldr	r3, [pc, #444]	@ (80024e0 <main+0x230>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	4a6e      	ldr	r2, [pc, #440]	@ (80024e0 <main+0x230>)
 8002326:	8852      	ldrh	r2, [r2, #2]
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fd68 	bl	8001e00 <detectDirection>
 8002330:	4603      	mov	r3, r0
 8002332:	73bb      	strb	r3, [r7, #14]
	      uint8_t cellNumber = cursorRow * BOARD_SIZE + cursorCol + 1;
 8002334:	4b6c      	ldr	r3, [pc, #432]	@ (80024e8 <main+0x238>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	0052      	lsls	r2, r2, #1
 800233c:	4413      	add	r3, r2
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b6a      	ldr	r3, [pc, #424]	@ (80024ec <main+0x23c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4413      	add	r3, r2
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]

	      if (direction != 0) {
 800234c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d04d      	beq.n	80023f0 <main+0x140>
	          // Zapamiętaj poprzednią pozycję
	          uint8_t prevRow = cursorRow;
 8002354:	4b64      	ldr	r3, [pc, #400]	@ (80024e8 <main+0x238>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	737b      	strb	r3, [r7, #13]
	          uint8_t prevCol = cursorCol;
 800235a:	4b64      	ldr	r3, [pc, #400]	@ (80024ec <main+0x23c>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	733b      	strb	r3, [r7, #12]
	          uint8_t prevCellNumber = prevRow * BOARD_SIZE + prevCol + 1;
 8002360:	7b7b      	ldrb	r3, [r7, #13]
 8002362:	461a      	mov	r2, r3
 8002364:	0052      	lsls	r2, r2, #1
 8002366:	4413      	add	r3, r2
 8002368:	b2da      	uxtb	r2, r3
 800236a:	7b3b      	ldrb	r3, [r7, #12]
 800236c:	4413      	add	r3, r2
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	72fb      	strb	r3, [r7, #11]

	          // Przesuń kursor
	          moveCursor(direction);
 8002374:	7bbb      	ldrb	r3, [r7, #14]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fdd4 	bl	8001f24 <moveCursor>
	          cellNumber = cursorRow * BOARD_SIZE + cursorCol + 1;
 800237c:	4b5a      	ldr	r3, [pc, #360]	@ (80024e8 <main+0x238>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	0052      	lsls	r2, r2, #1
 8002384:	4413      	add	r3, r2
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b58      	ldr	r3, [pc, #352]	@ (80024ec <main+0x23c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4413      	add	r3, r2
 800238e:	b2db      	uxtb	r3, r3
 8002390:	3301      	adds	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]

	          // 1. Wyczyść podświetlenie w starej komórce
	          display_clearXOBoardCell(prevCellNumber);
 8002394:	7afb      	ldrb	r3, [r7, #11]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fb08 	bl	80019ac <display_clearXOBoardCell>

	          // 2. Przywróć znak w starej komórce
	          if (board[prevRow][prevCol] == 'X') {
 800239c:	7b7a      	ldrb	r2, [r7, #13]
 800239e:	7b39      	ldrb	r1, [r7, #12]
 80023a0:	4853      	ldr	r0, [pc, #332]	@ (80024f0 <main+0x240>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	4403      	add	r3, r0
 80023aa:	440b      	add	r3, r1
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b58      	cmp	r3, #88	@ 0x58
 80023b0:	d106      	bne.n	80023c0 <main+0x110>
	              display_drawX(prevCellNumber, COLOR_FORESTGREEN);
 80023b2:	7afb      	ldrb	r3, [r7, #11]
 80023b4:	f242 4144 	movw	r1, #9284	@ 0x2444
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fb68 	bl	8001a8e <display_drawX>
 80023be:	e010      	b.n	80023e2 <main+0x132>
	          } else if (board[prevRow][prevCol] == 'O') {
 80023c0:	7b7a      	ldrb	r2, [r7, #13]
 80023c2:	7b39      	ldrb	r1, [r7, #12]
 80023c4:	484a      	ldr	r0, [pc, #296]	@ (80024f0 <main+0x240>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	4403      	add	r3, r0
 80023ce:	440b      	add	r3, r1
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b4f      	cmp	r3, #79	@ 0x4f
 80023d4:	d105      	bne.n	80023e2 <main+0x132>
	              display_drawCircle(prevCellNumber, COLOR_FIREBRICK);
 80023d6:	7afb      	ldrb	r3, [r7, #11]
 80023d8:	f24b 1104 	movw	r1, #45316	@ 0xb104
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fba9 	bl	8001b34 <display_drawCircle>
	          }
	          // Jeśli 'N', nie rysujemy nic

	          // 3. Podświetl nową komórkę
	          display_fillXOBoardCell(cellNumber);
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fb05 	bl	80019f4 <display_fillXOBoardCell>

	          HAL_Delay(120); // Debouncing ruchu kursora
 80023ea:	2078      	movs	r0, #120	@ 0x78
 80023ec:	f000 fe8e 	bl	800310c <HAL_Delay>
	      } else {

	      }

	      // Akceptacja ruchu po wciśnięciu przycisku
	      if (button_pressed) {
 80023f0:	4b40      	ldr	r3, [pc, #256]	@ (80024f4 <main+0x244>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d092      	beq.n	8002320 <main+0x70>
	          button_pressed = 0; // kasuj flagę
 80023fa:	4b3e      	ldr	r3, [pc, #248]	@ (80024f4 <main+0x244>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]

	          if(board[cursorRow][cursorCol] != 'N'){
 8002400:	4b39      	ldr	r3, [pc, #228]	@ (80024e8 <main+0x238>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4619      	mov	r1, r3
 8002406:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <main+0x23c>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	4a38      	ldr	r2, [pc, #224]	@ (80024f0 <main+0x240>)
 800240e:	460b      	mov	r3, r1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	440b      	add	r3, r1
 8002414:	4413      	add	r3, r2
 8002416:	4403      	add	r3, r0
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b4e      	cmp	r3, #78	@ 0x4e
 800241c:	d005      	beq.n	800242a <main+0x17a>
	              display_shiftDenied(cellNumber, board);
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	4933      	ldr	r1, [pc, #204]	@ (80024f0 <main+0x240>)
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fbee 	bl	8001c04 <display_shiftDenied>
 8002428:	e039      	b.n	800249e <main+0x1ee>
	          } else {
	              if(currentShift == 'O'){
 800242a:	4b33      	ldr	r3, [pc, #204]	@ (80024f8 <main+0x248>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002430:	d114      	bne.n	800245c <main+0x1ac>
	                  board[cursorRow][cursorCol] = 'O';
 8002432:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <main+0x238>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	4619      	mov	r1, r3
 8002438:	4b2c      	ldr	r3, [pc, #176]	@ (80024ec <main+0x23c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	4a2c      	ldr	r2, [pc, #176]	@ (80024f0 <main+0x240>)
 8002440:	460b      	mov	r3, r1
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	440b      	add	r3, r1
 8002446:	4413      	add	r3, r2
 8002448:	4403      	add	r3, r0
 800244a:	224f      	movs	r2, #79	@ 0x4f
 800244c:	701a      	strb	r2, [r3, #0]
	                  display_drawCircle(cellNumber, COLOR_FIREBRICK);
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	f24b 1104 	movw	r1, #45316	@ 0xb104
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fb6d 	bl	8001b34 <display_drawCircle>
 800245a:	e017      	b.n	800248c <main+0x1dc>
	              } else if(currentShift == 'X'){
 800245c:	4b26      	ldr	r3, [pc, #152]	@ (80024f8 <main+0x248>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b58      	cmp	r3, #88	@ 0x58
 8002462:	d113      	bne.n	800248c <main+0x1dc>
	                  board[cursorRow][cursorCol] = 'X';
 8002464:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <main+0x238>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <main+0x23c>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	4a1f      	ldr	r2, [pc, #124]	@ (80024f0 <main+0x240>)
 8002472:	460b      	mov	r3, r1
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	440b      	add	r3, r1
 8002478:	4413      	add	r3, r2
 800247a:	4403      	add	r3, r0
 800247c:	2258      	movs	r2, #88	@ 0x58
 800247e:	701a      	strb	r2, [r3, #0]
	                  display_drawX(cellNumber, COLOR_FORESTGREEN);
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	f242 4144 	movw	r1, #9284	@ 0x2444
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fb01 	bl	8001a8e <display_drawX>

	              }
	              // Zmieniaj turę
	              currentShift = (currentShift == 'X') ? 'O' : 'X';
 800248c:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <main+0x248>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b58      	cmp	r3, #88	@ 0x58
 8002492:	d101      	bne.n	8002498 <main+0x1e8>
 8002494:	224f      	movs	r2, #79	@ 0x4f
 8002496:	e000      	b.n	800249a <main+0x1ea>
 8002498:	2258      	movs	r2, #88	@ 0x58
 800249a:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <main+0x248>)
 800249c:	701a      	strb	r2, [r3, #0]
	          }

	          uint8_t win_cells[3];
	          char winner = check_winner(board, win_cells);
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4813      	ldr	r0, [pc, #76]	@ (80024f0 <main+0x240>)
 80024a4:	f7ff fdb4 	bl	8002010 <check_winner>
 80024a8:	4603      	mov	r3, r0
 80024aa:	72bb      	strb	r3, [r7, #10]
	          if (winner == 'X' || winner == 'O') {
 80024ac:	7abb      	ldrb	r3, [r7, #10]
 80024ae:	2b58      	cmp	r3, #88	@ 0x58
 80024b0:	d002      	beq.n	80024b8 <main+0x208>
 80024b2:	7abb      	ldrb	r3, [r7, #10]
 80024b4:	2b4f      	cmp	r3, #79	@ 0x4f
 80024b6:	d10e      	bne.n	80024d6 <main+0x226>
	              display_neon_win(board, win_cells);
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	480c      	ldr	r0, [pc, #48]	@ (80024f0 <main+0x240>)
 80024be:	f7ff fbf9 	bl	8001cb4 <display_neon_win>
	              resetGame(board, winner); display_clear();
 80024c2:	7abb      	ldrb	r3, [r7, #10]
 80024c4:	4619      	mov	r1, r3
 80024c6:	480a      	ldr	r0, [pc, #40]	@ (80024f0 <main+0x240>)
 80024c8:	f7ff fe7e 	bl	80021c8 <resetGame>
 80024cc:	f7ff f910 	bl	80016f0 <display_clear>
                  HAL_Delay(50);
 80024d0:	2032      	movs	r0, #50	@ 0x32
 80024d2:	f000 fe1b 	bl	800310c <HAL_Delay>

	          }
	          HAL_Delay(200); // Debouncing przycisku
 80024d6:	20c8      	movs	r0, #200	@ 0xc8
 80024d8:	f000 fe18 	bl	800310c <HAL_Delay>
  {
 80024dc:	e720      	b.n	8002320 <main+0x70>
 80024de:	bf00      	nop
 80024e0:	20000440 	.word	0x20000440
 80024e4:	20000208 	.word	0x20000208
 80024e8:	20000006 	.word	0x20000006
 80024ec:	20000007 	.word	0x20000007
 80024f0:	20000008 	.word	0x20000008
 80024f4:	20000444 	.word	0x20000444
 80024f8:	20000011 	.word	0x20000011

080024fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b09c      	sub	sp, #112	@ 0x70
 8002500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002502:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002506:	2228      	movs	r2, #40	@ 0x28
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f005 feef 	bl	80082ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002510:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002520:	463b      	mov	r3, r7
 8002522:	2234      	movs	r2, #52	@ 0x34
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f005 fee1 	bl	80082ee <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800252c:	f002 f87e 	bl	800462c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002530:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <SystemClock_Config+0xc4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <SystemClock_Config+0xc4>)
 8002536:	f023 0318 	bic.w	r3, r3, #24
 800253a:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800253c:	2306      	movs	r3, #6
 800253e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002540:	2301      	movs	r3, #1
 8002542:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002544:	2301      	movs	r3, #1
 8002546:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002548:	2310      	movs	r3, #16
 800254a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800254c:	2302      	movs	r3, #2
 800254e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002550:	2300      	movs	r3, #0
 8002552:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002554:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002558:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800255a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800255e:	4618      	mov	r0, r3
 8002560:	f002 f874 	bl	800464c <HAL_RCC_OscConfig>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800256a:	f000 fa9d 	bl	8002aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800256e:	230f      	movs	r3, #15
 8002570:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002572:	2302      	movs	r3, #2
 8002574:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002576:	2300      	movs	r3, #0
 8002578:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800257a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800257e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002580:	2300      	movs	r3, #0
 8002582:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002584:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002588:	2102      	movs	r1, #2
 800258a:	4618      	mov	r0, r3
 800258c:	f003 f86c 	bl	8005668 <HAL_RCC_ClockConfig>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002596:	f000 fa87 	bl	8002aa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800259a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800259e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025a4:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a6:	463b      	mov	r3, r7
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 fa6f 	bl	8005a8c <HAL_RCCEx_PeriphCLKConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80025b4:	f000 fa78 	bl	8002aa8 <Error_Handler>
  }
}
 80025b8:	bf00      	nop
 80025ba:	3770      	adds	r7, #112	@ 0x70
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000

080025c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025ca:	463b      	mov	r3, r7
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
 80025d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80025da:	4b2f      	ldr	r3, [pc, #188]	@ (8002698 <MX_ADC1_Init+0xd4>)
 80025dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80025e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002698 <MX_ADC1_Init+0xd4>)
 80025e4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80025e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002698 <MX_ADC1_Init+0xd4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025f0:	4b29      	ldr	r3, [pc, #164]	@ (8002698 <MX_ADC1_Init+0xd4>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025f6:	4b28      	ldr	r3, [pc, #160]	@ (8002698 <MX_ADC1_Init+0xd4>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025fc:	4b26      	ldr	r3, [pc, #152]	@ (8002698 <MX_ADC1_Init+0xd4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002604:	4b24      	ldr	r3, [pc, #144]	@ (8002698 <MX_ADC1_Init+0xd4>)
 8002606:	2200      	movs	r2, #0
 8002608:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800260a:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <MX_ADC1_Init+0xd4>)
 800260c:	2201      	movs	r2, #1
 800260e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002610:	4b21      	ldr	r3, [pc, #132]	@ (8002698 <MX_ADC1_Init+0xd4>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002616:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <MX_ADC1_Init+0xd4>)
 8002618:	2202      	movs	r2, #2
 800261a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800261c:	4b1e      	ldr	r3, [pc, #120]	@ (8002698 <MX_ADC1_Init+0xd4>)
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002624:	4b1c      	ldr	r3, [pc, #112]	@ (8002698 <MX_ADC1_Init+0xd4>)
 8002626:	2204      	movs	r2, #4
 8002628:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800262a:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <MX_ADC1_Init+0xd4>)
 800262c:	2200      	movs	r2, #0
 800262e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002630:	4b19      	ldr	r3, [pc, #100]	@ (8002698 <MX_ADC1_Init+0xd4>)
 8002632:	2200      	movs	r2, #0
 8002634:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002636:	4818      	ldr	r0, [pc, #96]	@ (8002698 <MX_ADC1_Init+0xd4>)
 8002638:	f000 fdaa 	bl	8003190 <HAL_ADC_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8002642:	f000 fa31 	bl	8002aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002646:	2307      	movs	r3, #7
 8002648:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800264a:	2301      	movs	r3, #1
 800264c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8002652:	2306      	movs	r3, #6
 8002654:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800265e:	463b      	mov	r3, r7
 8002660:	4619      	mov	r1, r3
 8002662:	480d      	ldr	r0, [pc, #52]	@ (8002698 <MX_ADC1_Init+0xd4>)
 8002664:	f000 ffb6 	bl	80035d4 <HAL_ADC_ConfigChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800266e:	f000 fa1b 	bl	8002aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002672:	2308      	movs	r3, #8
 8002674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002676:	2302      	movs	r3, #2
 8002678:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800267a:	463b      	mov	r3, r7
 800267c:	4619      	mov	r1, r3
 800267e:	4806      	ldr	r0, [pc, #24]	@ (8002698 <MX_ADC1_Init+0xd4>)
 8002680:	f000 ffa8 	bl	80035d4 <HAL_ADC_ConfigChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800268a:	f000 fa0d 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000208 	.word	0x20000208

0800269c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80026b0:	2300      	movs	r3, #0
 80026b2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026b4:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <MX_RTC_Init+0xac>)
 80026b6:	4a25      	ldr	r2, [pc, #148]	@ (800274c <MX_RTC_Init+0xb0>)
 80026b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026ba:	4b23      	ldr	r3, [pc, #140]	@ (8002748 <MX_RTC_Init+0xac>)
 80026bc:	2200      	movs	r2, #0
 80026be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80026c0:	4b21      	ldr	r3, [pc, #132]	@ (8002748 <MX_RTC_Init+0xac>)
 80026c2:	227f      	movs	r2, #127	@ 0x7f
 80026c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80026c6:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <MX_RTC_Init+0xac>)
 80026c8:	22ff      	movs	r2, #255	@ 0xff
 80026ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002748 <MX_RTC_Init+0xac>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002748 <MX_RTC_Init+0xac>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <MX_RTC_Init+0xac>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026de:	481a      	ldr	r0, [pc, #104]	@ (8002748 <MX_RTC_Init+0xac>)
 80026e0:	f003 fb64 	bl	8005dac <HAL_RTC_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80026ea:	f000 f9dd 	bl	8002aa8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	2201      	movs	r2, #1
 8002706:	4619      	mov	r1, r3
 8002708:	480f      	ldr	r0, [pc, #60]	@ (8002748 <MX_RTC_Init+0xac>)
 800270a:	f003 fbd2 	bl	8005eb2 <HAL_RTC_SetTime>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002714:	f000 f9c8 	bl	8002aa8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002718:	2301      	movs	r3, #1
 800271a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800271c:	2301      	movs	r3, #1
 800271e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002720:	2301      	movs	r3, #1
 8002722:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002724:	2300      	movs	r3, #0
 8002726:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002728:	463b      	mov	r3, r7
 800272a:	2201      	movs	r2, #1
 800272c:	4619      	mov	r1, r3
 800272e:	4806      	ldr	r0, [pc, #24]	@ (8002748 <MX_RTC_Init+0xac>)
 8002730:	f003 fc59 	bl	8005fe6 <HAL_RTC_SetDate>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800273a:	f000 f9b5 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000029c 	.word	0x2000029c
 800274c:	40002800 	.word	0x40002800

08002750 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <MX_SPI3_Init+0x74>)
 8002756:	4a1c      	ldr	r2, [pc, #112]	@ (80027c8 <MX_SPI3_Init+0x78>)
 8002758:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800275a:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <MX_SPI3_Init+0x74>)
 800275c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002760:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002762:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <MX_SPI3_Init+0x74>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002768:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <MX_SPI3_Init+0x74>)
 800276a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800276e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002770:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <MX_SPI3_Init+0x74>)
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002776:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <MX_SPI3_Init+0x74>)
 8002778:	2200      	movs	r2, #0
 800277a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800277c:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <MX_SPI3_Init+0x74>)
 800277e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002782:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002784:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <MX_SPI3_Init+0x74>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <MX_SPI3_Init+0x74>)
 800278c:	2200      	movs	r2, #0
 800278e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <MX_SPI3_Init+0x74>)
 8002792:	2200      	movs	r2, #0
 8002794:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002796:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <MX_SPI3_Init+0x74>)
 8002798:	2200      	movs	r2, #0
 800279a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800279c:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <MX_SPI3_Init+0x74>)
 800279e:	2207      	movs	r2, #7
 80027a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027a2:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <MX_SPI3_Init+0x74>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <MX_SPI3_Init+0x74>)
 80027aa:	2208      	movs	r2, #8
 80027ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80027ae:	4805      	ldr	r0, [pc, #20]	@ (80027c4 <MX_SPI3_Init+0x74>)
 80027b0:	f003 fd3e 	bl	8006230 <HAL_SPI_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80027ba:	f000 f975 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200002bc 	.word	0x200002bc
 80027c8:	40003c00 	.word	0x40003c00

080027cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <MX_TIM2_Init+0x98>)
 80027ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002864 <MX_TIM2_Init+0x98>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <MX_TIM2_Init+0x98>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027fe:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <MX_TIM2_Init+0x98>)
 8002800:	f04f 32ff 	mov.w	r2, #4294967295
 8002804:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002806:	4b17      	ldr	r3, [pc, #92]	@ (8002864 <MX_TIM2_Init+0x98>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280c:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <MX_TIM2_Init+0x98>)
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002812:	4814      	ldr	r0, [pc, #80]	@ (8002864 <MX_TIM2_Init+0x98>)
 8002814:	f004 f890 	bl	8006938 <HAL_TIM_Base_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800281e:	f000 f943 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002826:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	4619      	mov	r1, r3
 800282e:	480d      	ldr	r0, [pc, #52]	@ (8002864 <MX_TIM2_Init+0x98>)
 8002830:	f004 f9db 	bl	8006bea <HAL_TIM_ConfigClockSource>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800283a:	f000 f935 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4806      	ldr	r0, [pc, #24]	@ (8002864 <MX_TIM2_Init+0x98>)
 800284c:	f004 fbd2 	bl	8006ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002856:	f000 f927 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000320 	.word	0x20000320

08002868 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002878:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <MX_TIM6_Init+0x64>)
 800287a:	4a15      	ldr	r2, [pc, #84]	@ (80028d0 <MX_TIM6_Init+0x68>)
 800287c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 800287e:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <MX_TIM6_Init+0x64>)
 8002880:	229f      	movs	r2, #159	@ 0x9f
 8002882:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <MX_TIM6_Init+0x64>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <MX_TIM6_Init+0x64>)
 800288c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002890:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002892:	4b0e      	ldr	r3, [pc, #56]	@ (80028cc <MX_TIM6_Init+0x64>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002898:	480c      	ldr	r0, [pc, #48]	@ (80028cc <MX_TIM6_Init+0x64>)
 800289a:	f004 f84d 	bl	8006938 <HAL_TIM_Base_Init>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80028a4:	f000 f900 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a8:	2300      	movs	r3, #0
 80028aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4805      	ldr	r0, [pc, #20]	@ (80028cc <MX_TIM6_Init+0x64>)
 80028b6:	f004 fb9d 	bl	8006ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80028c0:	f000 f8f2 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	2000036c 	.word	0x2000036c
 80028d0:	40001000 	.word	0x40001000

080028d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028d8:	4b14      	ldr	r3, [pc, #80]	@ (800292c <MX_USART2_UART_Init+0x58>)
 80028da:	4a15      	ldr	r2, [pc, #84]	@ (8002930 <MX_USART2_UART_Init+0x5c>)
 80028dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028de:	4b13      	ldr	r3, [pc, #76]	@ (800292c <MX_USART2_UART_Init+0x58>)
 80028e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028e6:	4b11      	ldr	r3, [pc, #68]	@ (800292c <MX_USART2_UART_Init+0x58>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <MX_USART2_UART_Init+0x58>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	@ (800292c <MX_USART2_UART_Init+0x58>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028f8:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <MX_USART2_UART_Init+0x58>)
 80028fa:	220c      	movs	r2, #12
 80028fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fe:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <MX_USART2_UART_Init+0x58>)
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <MX_USART2_UART_Init+0x58>)
 8002906:	2200      	movs	r2, #0
 8002908:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800290a:	4b08      	ldr	r3, [pc, #32]	@ (800292c <MX_USART2_UART_Init+0x58>)
 800290c:	2200      	movs	r2, #0
 800290e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <MX_USART2_UART_Init+0x58>)
 8002912:	2200      	movs	r2, #0
 8002914:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002916:	4805      	ldr	r0, [pc, #20]	@ (800292c <MX_USART2_UART_Init+0x58>)
 8002918:	f004 fbf0 	bl	80070fc <HAL_UART_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002922:	f000 f8c1 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200003b8 	.word	0x200003b8
 8002930:	40004400 	.word	0x40004400

08002934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800293a:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <MX_DMA_Init+0x38>)
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4a0b      	ldr	r2, [pc, #44]	@ (800296c <MX_DMA_Init+0x38>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6153      	str	r3, [r2, #20]
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <MX_DMA_Init+0x38>)
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	200b      	movs	r0, #11
 8002958:	f001 faf9 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800295c:	200b      	movs	r0, #11
 800295e:	f001 fb12 	bl	8003f86 <HAL_NVIC_EnableIRQ>

}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000

08002970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	@ 0x28
 8002974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002986:	4b45      	ldr	r3, [pc, #276]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4a44      	ldr	r2, [pc, #272]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 800298c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002990:	6153      	str	r3, [r2, #20]
 8002992:	4b42      	ldr	r3, [pc, #264]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800299e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	4a3e      	ldr	r2, [pc, #248]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 80029a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029a8:	6153      	str	r3, [r2, #20]
 80029aa:	4b3c      	ldr	r3, [pc, #240]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	4b39      	ldr	r3, [pc, #228]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	4a38      	ldr	r2, [pc, #224]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 80029bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c0:	6153      	str	r3, [r2, #20]
 80029c2:	4b36      	ldr	r3, [pc, #216]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	4b33      	ldr	r3, [pc, #204]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	4a32      	ldr	r2, [pc, #200]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d8:	6153      	str	r3, [r2, #20]
 80029da:	4b30      	ldr	r3, [pc, #192]	@ (8002a9c <MX_GPIO_Init+0x12c>)
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RESET_Pin|DC_Pin, GPIO_PIN_RESET);
 80029e6:	2200      	movs	r2, #0
 80029e8:	f248 2110 	movw	r1, #33296	@ 0x8210
 80029ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029f0:	f001 fdec 	bl	80045cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80029f4:	2200      	movs	r2, #0
 80029f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029fa:	4829      	ldr	r0, [pc, #164]	@ (8002aa0 <MX_GPIO_Init+0x130>)
 80029fc:	f001 fde6 	bl	80045cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8002a00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4619      	mov	r1, r3
 8002a16:	4823      	ldr	r0, [pc, #140]	@ (8002aa4 <MX_GPIO_Init+0x134>)
 8002a18:	f001 fc66 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a20:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	481c      	ldr	r0, [pc, #112]	@ (8002aa4 <MX_GPIO_Init+0x134>)
 8002a32:	f001 fc59 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin RESET_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RESET_Pin|DC_Pin;
 8002a36:	f248 2310 	movw	r3, #33296	@ 0x8210
 8002a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a44:	2300      	movs	r3, #0
 8002a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a52:	f001 fc49 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002a56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	480c      	ldr	r0, [pc, #48]	@ (8002aa0 <MX_GPIO_Init+0x130>)
 8002a70:	f001 fc3a 	bl	80042e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	2006      	movs	r0, #6
 8002a7a:	f001 fa68 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a7e:	2006      	movs	r0, #6
 8002a80:	f001 fa81 	bl	8003f86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2100      	movs	r1, #0
 8002a88:	2028      	movs	r0, #40	@ 0x28
 8002a8a:	f001 fa60 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a8e:	2028      	movs	r0, #40	@ 0x28
 8002a90:	f001 fa79 	bl	8003f86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a94:	bf00      	nop
 8002a96:	3728      	adds	r7, #40	@ 0x28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	48000400 	.word	0x48000400
 8002aa4:	48000800 	.word	0x48000800

08002aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aac:	b672      	cpsid	i
}
 8002aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <Error_Handler+0x8>

08002ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aba:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <HAL_MspInit+0x44>)
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4a0e      	ldr	r2, [pc, #56]	@ (8002af8 <HAL_MspInit+0x44>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6193      	str	r3, [r2, #24]
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <HAL_MspInit+0x44>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_MspInit+0x44>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	4a08      	ldr	r2, [pc, #32]	@ (8002af8 <HAL_MspInit+0x44>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002adc:	61d3      	str	r3, [r2, #28]
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_MspInit+0x44>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002aea:	2007      	movs	r0, #7
 8002aec:	f001 fa24 	bl	8003f38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000

08002afc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b1c:	d14b      	bne.n	8002bb6 <HAL_ADC_MspInit+0xba>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b1e:	4b28      	ldr	r3, [pc, #160]	@ (8002bc0 <HAL_ADC_MspInit+0xc4>)
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	4a27      	ldr	r2, [pc, #156]	@ (8002bc0 <HAL_ADC_MspInit+0xc4>)
 8002b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b28:	6153      	str	r3, [r2, #20]
 8002b2a:	4b25      	ldr	r3, [pc, #148]	@ (8002bc0 <HAL_ADC_MspInit+0xc4>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b36:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <HAL_ADC_MspInit+0xc4>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4a21      	ldr	r2, [pc, #132]	@ (8002bc0 <HAL_ADC_MspInit+0xc4>)
 8002b3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002b40:	6153      	str	r3, [r2, #20]
 8002b42:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc0 <HAL_ADC_MspInit+0xc4>)
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002b4e:	2306      	movs	r3, #6
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b52:	2303      	movs	r3, #3
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4818      	ldr	r0, [pc, #96]	@ (8002bc4 <HAL_ADC_MspInit+0xc8>)
 8002b62:	f001 fbc1 	bl	80042e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002b66:	4b18      	ldr	r3, [pc, #96]	@ (8002bc8 <HAL_ADC_MspInit+0xcc>)
 8002b68:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <HAL_ADC_MspInit+0xd0>)
 8002b6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_ADC_MspInit+0xcc>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b72:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <HAL_ADC_MspInit+0xcc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b78:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <HAL_ADC_MspInit+0xcc>)
 8002b7a:	2280      	movs	r2, #128	@ 0x80
 8002b7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_ADC_MspInit+0xcc>)
 8002b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b86:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <HAL_ADC_MspInit+0xcc>)
 8002b88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc8 <HAL_ADC_MspInit+0xcc>)
 8002b90:	2220      	movs	r2, #32
 8002b92:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b94:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <HAL_ADC_MspInit+0xcc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b9a:	480b      	ldr	r0, [pc, #44]	@ (8002bc8 <HAL_ADC_MspInit+0xcc>)
 8002b9c:	f001 fa0d 	bl	8003fba <HAL_DMA_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8002ba6:	f7ff ff7f 	bl	8002aa8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a06      	ldr	r2, [pc, #24]	@ (8002bc8 <HAL_ADC_MspInit+0xcc>)
 8002bae:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bb0:	4a05      	ldr	r2, [pc, #20]	@ (8002bc8 <HAL_ADC_MspInit+0xcc>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3728      	adds	r7, #40	@ 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	48000800 	.word	0x48000800
 8002bc8:	20000258 	.word	0x20000258
 8002bcc:	40020008 	.word	0x40020008

08002bd0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c14 <HAL_RTC_MspInit+0x44>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d111      	bne.n	8002c06 <HAL_RTC_MspInit+0x36>
 8002be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002be6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b07      	ldr	r3, [pc, #28]	@ (8002c18 <HAL_RTC_MspInit+0x48>)
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	461a      	mov	r2, r3
 8002c02:	2301      	movs	r3, #1
 8002c04:	6013      	str	r3, [r2, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40002800 	.word	0x40002800
 8002c18:	10908100 	.word	0x10908100

08002c1c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <HAL_SPI_MspInit+0x7c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d128      	bne.n	8002c90 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c3e:	4b17      	ldr	r3, [pc, #92]	@ (8002c9c <HAL_SPI_MspInit+0x80>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	4a16      	ldr	r2, [pc, #88]	@ (8002c9c <HAL_SPI_MspInit+0x80>)
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c48:	61d3      	str	r3, [r2, #28]
 8002c4a:	4b14      	ldr	r3, [pc, #80]	@ (8002c9c <HAL_SPI_MspInit+0x80>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c56:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <HAL_SPI_MspInit+0x80>)
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	4a10      	ldr	r2, [pc, #64]	@ (8002c9c <HAL_SPI_MspInit+0x80>)
 8002c5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002c60:	6153      	str	r3, [r2, #20]
 8002c62:	4b0e      	ldr	r3, [pc, #56]	@ (8002c9c <HAL_SPI_MspInit+0x80>)
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002c6e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c80:	2306      	movs	r3, #6
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <HAL_SPI_MspInit+0x84>)
 8002c8c:	f001 fb2c 	bl	80042e8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002c90:	bf00      	nop
 8002c92:	3728      	adds	r7, #40	@ 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40003c00 	.word	0x40003c00
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	48000800 	.word	0x48000800

08002ca4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_TIM_Base_MspInit+0x68>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4a14      	ldr	r2, [pc, #80]	@ (8002d0c <HAL_TIM_Base_MspInit+0x68>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	61d3      	str	r3, [r2, #28]
 8002cc2:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <HAL_TIM_Base_MspInit+0x68>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002cce:	e018      	b.n	8002d02 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	@ (8002d10 <HAL_TIM_Base_MspInit+0x6c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d113      	bne.n	8002d02 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cda:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <HAL_TIM_Base_MspInit+0x68>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4a0b      	ldr	r2, [pc, #44]	@ (8002d0c <HAL_TIM_Base_MspInit+0x68>)
 8002ce0:	f043 0310 	orr.w	r3, r3, #16
 8002ce4:	61d3      	str	r3, [r2, #28]
 8002ce6:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <HAL_TIM_Base_MspInit+0x68>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2036      	movs	r0, #54	@ 0x36
 8002cf8:	f001 f929 	bl	8003f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cfc:	2036      	movs	r0, #54	@ 0x36
 8002cfe:	f001 f942 	bl	8003f86 <HAL_NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40001000 	.word	0x40001000

08002d14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	@ 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a17      	ldr	r2, [pc, #92]	@ (8002d90 <HAL_UART_MspInit+0x7c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d128      	bne.n	8002d88 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d36:	4b17      	ldr	r3, [pc, #92]	@ (8002d94 <HAL_UART_MspInit+0x80>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4a16      	ldr	r2, [pc, #88]	@ (8002d94 <HAL_UART_MspInit+0x80>)
 8002d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d40:	61d3      	str	r3, [r2, #28]
 8002d42:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <HAL_UART_MspInit+0x80>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <HAL_UART_MspInit+0x80>)
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	4a10      	ldr	r2, [pc, #64]	@ (8002d94 <HAL_UART_MspInit+0x80>)
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d58:	6153      	str	r3, [r2, #20]
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <HAL_UART_MspInit+0x80>)
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d66:	230c      	movs	r3, #12
 8002d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d76:	2307      	movs	r3, #7
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	f107 0314 	add.w	r3, r7, #20
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d84:	f001 fab0 	bl	80042e8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002d88:	bf00      	nop
 8002d8a:	3728      	adds	r7, #40	@ 0x28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40004400 	.word	0x40004400
 8002d94:	40021000 	.word	0x40021000

08002d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d9c:	bf00      	nop
 8002d9e:	e7fd      	b.n	8002d9c <NMI_Handler+0x4>

08002da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <HardFault_Handler+0x4>

08002da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <MemManage_Handler+0x4>

08002db0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <BusFault_Handler+0x4>

08002db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <UsageFault_Handler+0x4>

08002dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dee:	f000 f96d 	bl	80030cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f001 fbfe 	bl	80045fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e08:	4802      	ldr	r0, [pc, #8]	@ (8002e14 <DMA1_Channel1_IRQHandler+0x10>)
 8002e0a:	f001 f97c 	bl	8004106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000258 	.word	0x20000258

08002e18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 8002e1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e20:	f001 fbec 	bl	80045fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e2c:	4802      	ldr	r0, [pc, #8]	@ (8002e38 <TIM6_DAC_IRQHandler+0x10>)
 8002e2e:	f003 fdda 	bl	80069e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2000036c 	.word	0x2000036c

08002e3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return 1;
 8002e40:	2301      	movs	r3, #1
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <_kill>:

int _kill(int pid, int sig)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e56:	f005 fa9d 	bl	8008394 <__errno>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2216      	movs	r2, #22
 8002e5e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <_exit>:

void _exit (int status)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e74:	f04f 31ff 	mov.w	r1, #4294967295
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ffe7 	bl	8002e4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e7e:	bf00      	nop
 8002e80:	e7fd      	b.n	8002e7e <_exit+0x12>

08002e82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e00a      	b.n	8002eaa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e94:	f3af 8000 	nop.w
 8002e98:	4601      	mov	r1, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	60ba      	str	r2, [r7, #8]
 8002ea0:	b2ca      	uxtb	r2, r1
 8002ea2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	dbf0      	blt.n	8002e94 <_read+0x12>
  }

  return len;
 8002eb2:	687b      	ldr	r3, [r7, #4]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	e009      	b.n	8002ee2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	60ba      	str	r2, [r7, #8]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	dbf1      	blt.n	8002ece <_write+0x12>
  }
  return len;
 8002eea:	687b      	ldr	r3, [r7, #4]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <_close>:

int _close(int file)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f1c:	605a      	str	r2, [r3, #4]
  return 0;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <_isatty>:

int _isatty(int file)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f34:	2301      	movs	r3, #1
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f64:	4a14      	ldr	r2, [pc, #80]	@ (8002fb8 <_sbrk+0x5c>)
 8002f66:	4b15      	ldr	r3, [pc, #84]	@ (8002fbc <_sbrk+0x60>)
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f70:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <_sbrk+0x64>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f78:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <_sbrk+0x64>)
 8002f7a:	4a12      	ldr	r2, [pc, #72]	@ (8002fc4 <_sbrk+0x68>)
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f7e:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <_sbrk+0x64>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d207      	bcs.n	8002f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f8c:	f005 fa02 	bl	8008394 <__errno>
 8002f90:	4603      	mov	r3, r0
 8002f92:	220c      	movs	r2, #12
 8002f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9a:	e009      	b.n	8002fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f9c:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <_sbrk+0x64>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fa2:	4b07      	ldr	r3, [pc, #28]	@ (8002fc0 <_sbrk+0x64>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	4a05      	ldr	r2, [pc, #20]	@ (8002fc0 <_sbrk+0x64>)
 8002fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fae:	68fb      	ldr	r3, [r7, #12]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20004000 	.word	0x20004000
 8002fbc:	00000400 	.word	0x00000400
 8002fc0:	20000448 	.word	0x20000448
 8002fc4:	200005a0 	.word	0x200005a0

08002fc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <SystemInit+0x20>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd2:	4a05      	ldr	r2, [pc, #20]	@ (8002fe8 <SystemInit+0x20>)
 8002fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003024 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ff0:	f7ff ffea 	bl	8002fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff4:	480c      	ldr	r0, [pc, #48]	@ (8003028 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ff6:	490d      	ldr	r1, [pc, #52]	@ (800302c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <LoopForever+0xe>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ffc:	e002      	b.n	8003004 <LoopCopyDataInit>

08002ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003002:	3304      	adds	r3, #4

08003004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003008:	d3f9      	bcc.n	8002ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800300a:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800300c:	4c0a      	ldr	r4, [pc, #40]	@ (8003038 <LoopForever+0x16>)
  movs r3, #0
 800300e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003010:	e001      	b.n	8003016 <LoopFillZerobss>

08003012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003014:	3204      	adds	r2, #4

08003016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003018:	d3fb      	bcc.n	8003012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800301a:	f005 f9c1 	bl	80083a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800301e:	f7ff f947 	bl	80022b0 <main>

08003022 <LoopForever>:

LoopForever:
    b LoopForever
 8003022:	e7fe      	b.n	8003022 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003024:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800302c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003030:	0800ad7c 	.word	0x0800ad7c
  ldr r2, =_sbss
 8003034:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003038:	2000059c 	.word	0x2000059c

0800303c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800303c:	e7fe      	b.n	800303c <ADC1_IRQHandler>
	...

08003040 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003044:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_Init+0x28>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a07      	ldr	r2, [pc, #28]	@ (8003068 <HAL_Init+0x28>)
 800304a:	f043 0310 	orr.w	r3, r3, #16
 800304e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003050:	2003      	movs	r0, #3
 8003052:	f000 ff71 	bl	8003f38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003056:	2000      	movs	r0, #0
 8003058:	f000 f808 	bl	800306c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800305c:	f7ff fd2a 	bl	8002ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40022000 	.word	0x40022000

0800306c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003074:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <HAL_InitTick+0x54>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <HAL_InitTick+0x58>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003082:	fbb3 f3f1 	udiv	r3, r3, r1
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	4618      	mov	r0, r3
 800308c:	f000 ff89 	bl	8003fa2 <HAL_SYSTICK_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e00e      	b.n	80030b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b0f      	cmp	r3, #15
 800309e:	d80a      	bhi.n	80030b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a0:	2200      	movs	r2, #0
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	f000 ff51 	bl	8003f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030ac:	4a06      	ldr	r2, [pc, #24]	@ (80030c8 <HAL_InitTick+0x5c>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000014 	.word	0x20000014
 80030c4:	2000001c 	.word	0x2000001c
 80030c8:	20000018 	.word	0x20000018

080030cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030d0:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <HAL_IncTick+0x20>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <HAL_IncTick+0x24>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	4a04      	ldr	r2, [pc, #16]	@ (80030f0 <HAL_IncTick+0x24>)
 80030de:	6013      	str	r3, [r2, #0]
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	2000001c 	.word	0x2000001c
 80030f0:	2000044c 	.word	0x2000044c

080030f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80030f8:	4b03      	ldr	r3, [pc, #12]	@ (8003108 <HAL_GetTick+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	2000044c 	.word	0x2000044c

0800310c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003114:	f7ff ffee 	bl	80030f4 <HAL_GetTick>
 8003118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d005      	beq.n	8003132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003126:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <HAL_Delay+0x44>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003132:	bf00      	nop
 8003134:	f7ff ffde 	bl	80030f4 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	429a      	cmp	r2, r3
 8003142:	d8f7      	bhi.n	8003134 <HAL_Delay+0x28>
  {
  }
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	2000001c 	.word	0x2000001c

08003154 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b09a      	sub	sp, #104	@ 0x68
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e169      	b.n	8003484 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d176      	bne.n	80032b0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d152      	bne.n	8003270 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fc89 	bl	8002afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d13b      	bne.n	8003270 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fd67 	bl	8003ccc <ADC_Disable>
 80031fe:	4603      	mov	r3, r0
 8003200:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b00      	cmp	r3, #0
 800320e:	d12f      	bne.n	8003270 <HAL_ADC_Init+0xe0>
 8003210:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003214:	2b00      	cmp	r3, #0
 8003216:	d12b      	bne.n	8003270 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003220:	f023 0302 	bic.w	r3, r3, #2
 8003224:	f043 0202 	orr.w	r2, r3, #2
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800323a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800324a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800324c:	4b8f      	ldr	r3, [pc, #572]	@ (800348c <HAL_ADC_Init+0x2fc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a8f      	ldr	r2, [pc, #572]	@ (8003490 <HAL_ADC_Init+0x300>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0c9a      	lsrs	r2, r3, #18
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003262:	e002      	b.n	800326a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	3b01      	subs	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f9      	bne.n	8003264 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800328c:	d110      	bne.n	80032b0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f023 0312 	bic.w	r3, r3, #18
 8003296:	f043 0210 	orr.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f040 80d6 	bne.w	800346a <HAL_ADC_Init+0x2da>
 80032be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 80d1 	bne.w	800346a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 80c9 	bne.w	800346a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80032e0:	f043 0202 	orr.w	r2, r3, #2
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003494 <HAL_ADC_Init+0x304>)
 80032ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d108      	bne.n	8003310 <HAL_ADC_Init+0x180>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_ADC_Init+0x180>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <HAL_ADC_Init+0x182>
 8003310:	2300      	movs	r3, #0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11c      	bne.n	8003350 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003316:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d107      	bne.n	8003338 <HAL_ADC_Init+0x1a8>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_ADC_Init+0x1a8>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_ADC_Init+0x1aa>
 8003338:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800333a:	2b00      	cmp	r3, #0
 800333c:	d108      	bne.n	8003350 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800333e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	431a      	orrs	r2, r3
 800334c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800334e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7e5b      	ldrb	r3, [r3, #25]
 8003354:	035b      	lsls	r3, r3, #13
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800335a:	2a01      	cmp	r2, #1
 800335c:	d002      	beq.n	8003364 <HAL_ADC_Init+0x1d4>
 800335e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003362:	e000      	b.n	8003366 <HAL_ADC_Init+0x1d6>
 8003364:	2200      	movs	r2, #0
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	4313      	orrs	r3, r2
 8003374:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003376:	4313      	orrs	r3, r2
 8003378:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d11b      	bne.n	80033bc <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	7e5b      	ldrb	r3, [r3, #25]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	3b01      	subs	r3, #1
 8003392:	045a      	lsls	r2, r3, #17
 8003394:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003396:	4313      	orrs	r3, r2
 8003398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339c:	663b      	str	r3, [r7, #96]	@ 0x60
 800339e:	e00d      	b.n	80033bc <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80033a8:	f043 0220 	orr.w	r2, r3, #32
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d007      	beq.n	80033d4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	4313      	orrs	r3, r2
 80033ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80033d0:	4313      	orrs	r3, r2
 80033d2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d114      	bne.n	800340c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033f0:	f023 0302 	bic.w	r3, r3, #2
 80033f4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7e1b      	ldrb	r3, [r3, #24]
 80033fa:	039a      	lsls	r2, r3, #14
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4313      	orrs	r3, r2
 8003406:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003408:	4313      	orrs	r3, r2
 800340a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	4b21      	ldr	r3, [pc, #132]	@ (8003498 <HAL_ADC_Init+0x308>)
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800341c:	430b      	orrs	r3, r1
 800341e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d10c      	bne.n	8003442 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	f023 010f 	bic.w	r1, r3, #15
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	1e5a      	subs	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003440:	e007      	b.n	8003452 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 020f 	bic.w	r2, r2, #15
 8003450:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	f023 0303 	bic.w	r3, r3, #3
 8003460:	f043 0201 	orr.w	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	641a      	str	r2, [r3, #64]	@ 0x40
 8003468:	e00a      	b.n	8003480 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f023 0312 	bic.w	r3, r3, #18
 8003472:	f043 0210 	orr.w	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800347a:	2301      	movs	r3, #1
 800347c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003480:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003484:	4618      	mov	r0, r3
 8003486:	3768      	adds	r7, #104	@ 0x68
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000014 	.word	0x20000014
 8003490:	431bde83 	.word	0x431bde83
 8003494:	50000300 	.word	0x50000300
 8003498:	fff0c007 	.word	0xfff0c007

0800349c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d17e      	bne.n	80035b8 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_Start_DMA+0x2c>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e07a      	b.n	80035be <HAL_ADC_Start_DMA+0x122>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fb97 	bl	8003c04 <ADC_Enable>
 80034d6:	4603      	mov	r3, r0
 80034d8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d166      	bne.n	80035ae <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003516:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	641a      	str	r2, [r3, #64]	@ 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800352a:	d106      	bne.n	800353a <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003530:	f023 0206 	bic.w	r2, r3, #6
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	645a      	str	r2, [r3, #68]	@ 0x44
 8003538:	e002      	b.n	8003540 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354c:	4a1e      	ldr	r2, [pc, #120]	@ (80035c8 <HAL_ADC_Start_DMA+0x12c>)
 800354e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	4a1d      	ldr	r2, [pc, #116]	@ (80035cc <HAL_ADC_Start_DMA+0x130>)
 8003556:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355c:	4a1c      	ldr	r2, [pc, #112]	@ (80035d0 <HAL_ADC_Start_DMA+0x134>)
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	221c      	movs	r2, #28
 8003566:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0210 	orr.w	r2, r2, #16
 8003576:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3340      	adds	r3, #64	@ 0x40
 8003592:	4619      	mov	r1, r3
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f000 fd56 	bl	8004048 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0204 	orr.w	r2, r2, #4
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	e006      	b.n	80035bc <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80035b6:	e001      	b.n	80035bc <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
 80035ba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	08003b39 	.word	0x08003b39
 80035cc:	08003bb3 	.word	0x08003bb3
 80035d0:	08003bcf 	.word	0x08003bcf

080035d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b09b      	sub	sp, #108	@ 0x6c
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x22>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e295      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x54e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 8279 	bne.w	8003b00 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b04      	cmp	r3, #4
 8003614:	d81c      	bhi.n	8003650 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	461a      	mov	r2, r3
 800362a:	231f      	movs	r3, #31
 800362c:	4093      	lsls	r3, r2
 800362e:	43db      	mvns	r3, r3
 8003630:	4019      	ands	r1, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	fa00 f203 	lsl.w	r2, r0, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30
 800364e:	e063      	b.n	8003718 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b09      	cmp	r3, #9
 8003656:	d81e      	bhi.n	8003696 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	3b1e      	subs	r3, #30
 800366c:	221f      	movs	r2, #31
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	4019      	ands	r1, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	3b1e      	subs	r3, #30
 8003688:	fa00 f203 	lsl.w	r2, r0, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	635a      	str	r2, [r3, #52]	@ 0x34
 8003694:	e040      	b.n	8003718 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b0e      	cmp	r3, #14
 800369c:	d81e      	bhi.n	80036dc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	4413      	add	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	3b3c      	subs	r3, #60	@ 0x3c
 80036b2:	221f      	movs	r2, #31
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	4019      	ands	r1, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	3b3c      	subs	r3, #60	@ 0x3c
 80036ce:	fa00 f203 	lsl.w	r2, r0, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80036da:	e01d      	b.n	8003718 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	3b5a      	subs	r3, #90	@ 0x5a
 80036f0:	221f      	movs	r2, #31
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	4019      	ands	r1, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	3b5a      	subs	r3, #90	@ 0x5a
 800370c:	fa00 f203 	lsl.w	r2, r0, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 80e5 	bne.w	80038f2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b09      	cmp	r3, #9
 800372e:	d91c      	bls.n	800376a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6999      	ldr	r1, [r3, #24]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4413      	add	r3, r2
 8003740:	3b1e      	subs	r3, #30
 8003742:	2207      	movs	r2, #7
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	4019      	ands	r1, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6898      	ldr	r0, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	3b1e      	subs	r3, #30
 800375c:	fa00 f203 	lsl.w	r2, r0, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	619a      	str	r2, [r3, #24]
 8003768:	e019      	b.n	800379e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6959      	ldr	r1, [r3, #20]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	2207      	movs	r2, #7
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	4019      	ands	r1, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6898      	ldr	r0, [r3, #8]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	fa00 f203 	lsl.w	r2, r0, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	08db      	lsrs	r3, r3, #3
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d84f      	bhi.n	8003860 <HAL_ADC_ConfigChannel+0x28c>
 80037c0:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <HAL_ADC_ConfigChannel+0x1f4>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037fb 	.word	0x080037fb
 80037d0:	0800381d 	.word	0x0800381d
 80037d4:	0800383f 	.word	0x0800383f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037de:	4b97      	ldr	r3, [pc, #604]	@ (8003a3c <HAL_ADC_ConfigChannel+0x468>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	0691      	lsls	r1, r2, #26
 80037e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80037ea:	430a      	orrs	r2, r1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80037f6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037f8:	e07b      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003800:	4b8e      	ldr	r3, [pc, #568]	@ (8003a3c <HAL_ADC_ConfigChannel+0x468>)
 8003802:	4013      	ands	r3, r2
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	0691      	lsls	r1, r2, #26
 800380a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800380c:	430a      	orrs	r2, r1
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003818:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800381a:	e06a      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003822:	4b86      	ldr	r3, [pc, #536]	@ (8003a3c <HAL_ADC_ConfigChannel+0x468>)
 8003824:	4013      	ands	r3, r2
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	0691      	lsls	r1, r2, #26
 800382c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800382e:	430a      	orrs	r2, r1
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800383a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800383c:	e059      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003844:	4b7d      	ldr	r3, [pc, #500]	@ (8003a3c <HAL_ADC_ConfigChannel+0x468>)
 8003846:	4013      	ands	r3, r2
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	0691      	lsls	r1, r2, #26
 800384e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003850:	430a      	orrs	r2, r1
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800385c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800385e:	e048      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003866:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	069b      	lsls	r3, r3, #26
 8003870:	429a      	cmp	r2, r3
 8003872:	d107      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003882:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800388a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	069b      	lsls	r3, r3, #26
 8003894:	429a      	cmp	r2, r3
 8003896:	d107      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038a6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	069b      	lsls	r3, r3, #26
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d107      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038ca:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	069b      	lsls	r3, r3, #26
 80038dc:	429a      	cmp	r2, r3
 80038de:	d107      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038ee:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80038f0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d108      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x33e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x33e>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_ADC_ConfigChannel+0x340>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	f040 80fe 	bne.w	8003b16 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d00f      	beq.n	8003942 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2201      	movs	r2, #1
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43da      	mvns	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	400a      	ands	r2, r1
 800393c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003940:	e049      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	409a      	lsls	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b09      	cmp	r3, #9
 8003962:	d91c      	bls.n	800399e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6999      	ldr	r1, [r3, #24]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4413      	add	r3, r2
 8003974:	3b1b      	subs	r3, #27
 8003976:	2207      	movs	r2, #7
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	4019      	ands	r1, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6898      	ldr	r0, [r3, #8]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	3b1b      	subs	r3, #27
 8003990:	fa00 f203 	lsl.w	r2, r0, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	619a      	str	r2, [r3, #24]
 800399c:	e01b      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6959      	ldr	r1, [r3, #20]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	4613      	mov	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	4413      	add	r3, r2
 80039b0:	2207      	movs	r2, #7
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	4019      	ands	r1, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6898      	ldr	r0, [r3, #8]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	4613      	mov	r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	4413      	add	r3, r2
 80039ca:	fa00 f203 	lsl.w	r2, r0, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <HAL_ADC_ConfigChannel+0x46c>)
 80039d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b10      	cmp	r3, #16
 80039e0:	d105      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80039e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d014      	beq.n	8003a18 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80039f2:	2b11      	cmp	r3, #17
 80039f4:	d105      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003a06:	2b12      	cmp	r3, #18
 8003a08:	f040 8085 	bne.w	8003b16 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003a0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d17e      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d10c      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x470>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x470>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e004      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x472>
 8003a3c:	83fff000 	.word	0x83fff000
 8003a40:	50000300 	.word	0x50000300
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d150      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a4a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d010      	beq.n	8003a72 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d107      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x498>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x498>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_ADC_ConfigChannel+0x49a>
 8003a6c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d13c      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d11d      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x4e2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a82:	d118      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a8e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a90:	4b27      	ldr	r3, [pc, #156]	@ (8003b30 <HAL_ADC_ConfigChannel+0x55c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a27      	ldr	r2, [pc, #156]	@ (8003b34 <HAL_ADC_ConfigChannel+0x560>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	0c9a      	lsrs	r2, r3, #18
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003aa6:	e002      	b.n	8003aae <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f9      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ab4:	e02e      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b11      	cmp	r3, #17
 8003abc:	d10b      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x502>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ac6:	d106      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003ac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ad2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ad4:	e01e      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b12      	cmp	r3, #18
 8003adc:	d11a      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003ade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ae8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003aea:	e013      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003afe:	e00a      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003b12:	e000      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b14:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b1e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	376c      	adds	r7, #108	@ 0x6c
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000014 	.word	0x20000014
 8003b34:	431bde83 	.word	0x431bde83

08003b38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d126      	bne.n	8003ba0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d115      	bne.n	8003b98 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d111      	bne.n	8003b98 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7ff fadb 	bl	8003154 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003b9e:	e004      	b.n	8003baa <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff fad1 	bl	8003168 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bec:	f043 0204 	orr.w	r2, r3, #4
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f7ff fac1 	bl	800317c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d108      	bne.n	8003c30 <ADC_Enable+0x2c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <ADC_Enable+0x2c>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <ADC_Enable+0x2e>
 8003c30:	2300      	movs	r3, #0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d143      	bne.n	8003cbe <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	4b22      	ldr	r3, [pc, #136]	@ (8003cc8 <ADC_Enable+0xc4>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00d      	beq.n	8003c60 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	f043 0210 	orr.w	r2, r3, #16
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c54:	f043 0201 	orr.w	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e02f      	b.n	8003cc0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003c70:	f7ff fa40 	bl	80030f4 <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c76:	e01b      	b.n	8003cb0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c78:	f7ff fa3c 	bl	80030f4 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d914      	bls.n	8003cb0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d00d      	beq.n	8003cb0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	f043 0210 	orr.w	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e007      	b.n	8003cc0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d1dc      	bne.n	8003c78 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	8000003f 	.word	0x8000003f

08003ccc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <ADC_Disable+0x2c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <ADC_Disable+0x2c>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <ADC_Disable+0x2e>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d047      	beq.n	8003d8e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 030d 	and.w	r3, r3, #13
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d10f      	bne.n	8003d2c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0202 	orr.w	r2, r2, #2
 8003d1a:	609a      	str	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2203      	movs	r2, #3
 8003d22:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003d24:	f7ff f9e6 	bl	80030f4 <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d2a:	e029      	b.n	8003d80 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	f043 0210 	orr.w	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3c:	f043 0201 	orr.w	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e023      	b.n	8003d90 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d48:	f7ff f9d4 	bl	80030f4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d914      	bls.n	8003d80 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10d      	bne.n	8003d80 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	f043 0210 	orr.w	r2, r3, #16
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d74:	f043 0201 	orr.w	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e007      	b.n	8003d90 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d0dc      	beq.n	8003d48 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <__NVIC_SetPriorityGrouping+0x44>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003db4:	4013      	ands	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dca:	4a04      	ldr	r2, [pc, #16]	@ (8003ddc <__NVIC_SetPriorityGrouping+0x44>)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	60d3      	str	r3, [r2, #12]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de4:	4b04      	ldr	r3, [pc, #16]	@ (8003df8 <__NVIC_GetPriorityGrouping+0x18>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	f003 0307 	and.w	r3, r3, #7
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	db0b      	blt.n	8003e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	f003 021f 	and.w	r2, r3, #31
 8003e14:	4907      	ldr	r1, [pc, #28]	@ (8003e34 <__NVIC_EnableIRQ+0x38>)
 8003e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000e100 	.word	0xe000e100

08003e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	db0a      	blt.n	8003e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	490c      	ldr	r1, [pc, #48]	@ (8003e84 <__NVIC_SetPriority+0x4c>)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	0112      	lsls	r2, r2, #4
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e60:	e00a      	b.n	8003e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4908      	ldr	r1, [pc, #32]	@ (8003e88 <__NVIC_SetPriority+0x50>)
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	3b04      	subs	r3, #4
 8003e70:	0112      	lsls	r2, r2, #4
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	440b      	add	r3, r1
 8003e76:	761a      	strb	r2, [r3, #24]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000e100 	.word	0xe000e100
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	@ 0x24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f1c3 0307 	rsb	r3, r3, #7
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	bf28      	it	cs
 8003eaa:	2304      	movcs	r3, #4
 8003eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d902      	bls.n	8003ebc <NVIC_EncodePriority+0x30>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3b03      	subs	r3, #3
 8003eba:	e000      	b.n	8003ebe <NVIC_EncodePriority+0x32>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	401a      	ands	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa01 f303 	lsl.w	r3, r1, r3
 8003ede:	43d9      	mvns	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee4:	4313      	orrs	r3, r2
         );
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3724      	adds	r7, #36	@ 0x24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
	...

08003ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f04:	d301      	bcc.n	8003f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f06:	2301      	movs	r3, #1
 8003f08:	e00f      	b.n	8003f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f34 <SysTick_Config+0x40>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f12:	210f      	movs	r1, #15
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	f7ff ff8e 	bl	8003e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f1c:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <SysTick_Config+0x40>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f22:	4b04      	ldr	r3, [pc, #16]	@ (8003f34 <SysTick_Config+0x40>)
 8003f24:	2207      	movs	r2, #7
 8003f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	e000e010 	.word	0xe000e010

08003f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ff29 	bl	8003d98 <__NVIC_SetPriorityGrouping>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	4603      	mov	r3, r0
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f60:	f7ff ff3e 	bl	8003de0 <__NVIC_GetPriorityGrouping>
 8003f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	6978      	ldr	r0, [r7, #20]
 8003f6c:	f7ff ff8e 	bl	8003e8c <NVIC_EncodePriority>
 8003f70:	4602      	mov	r2, r0
 8003f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff5d 	bl	8003e38 <__NVIC_SetPriority>
}
 8003f7e:	bf00      	nop
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff31 	bl	8003dfc <__NVIC_EnableIRQ>
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ffa2 	bl	8003ef4 <SysTick_Config>
 8003fb0:	4603      	mov	r3, r0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e037      	b.n	8004040 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003fe6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003fea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f940 	bl	80042a8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_DMA_Start_IT+0x20>
 8004064:	2302      	movs	r3, #2
 8004066:	e04a      	b.n	80040fe <HAL_DMA_Start_IT+0xb6>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004076:	2b01      	cmp	r3, #1
 8004078:	d13a      	bne.n	80040f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f8d4 	bl	800424c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 020e 	orr.w	r2, r2, #14
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e00f      	b.n	80040de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 020a 	orr.w	r2, r2, #10
 80040cc:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0204 	bic.w	r2, r2, #4
 80040dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e005      	b.n	80040fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
 80040fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	2204      	movs	r2, #4
 8004124:	409a      	lsls	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4013      	ands	r3, r2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d024      	beq.n	8004178 <HAL_DMA_IRQHandler+0x72>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01f      	beq.n	8004178 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d107      	bne.n	8004156 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0204 	bic.w	r2, r2, #4
 8004154:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415e:	2104      	movs	r1, #4
 8004160:	fa01 f202 	lsl.w	r2, r1, r2
 8004164:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d06a      	beq.n	8004244 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004176:	e065      	b.n	8004244 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	2202      	movs	r2, #2
 800417e:	409a      	lsls	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4013      	ands	r3, r2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02c      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdc>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d027      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 020a 	bic.w	r2, r2, #10
 80041ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c0:	2102      	movs	r1, #2
 80041c2:	fa01 f202 	lsl.w	r2, r1, r2
 80041c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d035      	beq.n	8004244 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80041e0:	e030      	b.n	8004244 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	2208      	movs	r2, #8
 80041e8:	409a      	lsls	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d028      	beq.n	8004244 <HAL_DMA_IRQHandler+0x13e>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d023      	beq.n	8004244 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 020e 	bic.w	r2, r2, #14
 800420a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004214:	2101      	movs	r1, #1
 8004216:	fa01 f202 	lsl.w	r2, r1, r2
 800421a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
    }
  }
}
 8004242:	e7ff      	b.n	8004244 <HAL_DMA_IRQHandler+0x13e>
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004262:	2101      	movs	r1, #1
 8004264:	fa01 f202 	lsl.w	r2, r1, r2
 8004268:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b10      	cmp	r3, #16
 8004278:	d108      	bne.n	800428c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800428a:	e007      	b.n	800429c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b09      	ldr	r3, [pc, #36]	@ (80042dc <DMA_CalcBaseAndBitshift+0x34>)
 80042b8:	4413      	add	r3, r2
 80042ba:	4a09      	ldr	r2, [pc, #36]	@ (80042e0 <DMA_CalcBaseAndBitshift+0x38>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	009a      	lsls	r2, r3, #2
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a06      	ldr	r2, [pc, #24]	@ (80042e4 <DMA_CalcBaseAndBitshift+0x3c>)
 80042cc:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	bffdfff8 	.word	0xbffdfff8
 80042e0:	cccccccd 	.word	0xcccccccd
 80042e4:	40020000 	.word	0x40020000

080042e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042f6:	e14e      	b.n	8004596 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2101      	movs	r1, #1
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	4013      	ands	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8140 	beq.w	8004590 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b01      	cmp	r3, #1
 800431a:	d005      	beq.n	8004328 <HAL_GPIO_Init+0x40>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d130      	bne.n	800438a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800435e:	2201      	movs	r2, #1
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	f003 0201 	and.w	r2, r3, #1
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b03      	cmp	r3, #3
 8004394:	d017      	beq.n	80043c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	2203      	movs	r2, #3
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4013      	ands	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d123      	bne.n	800441a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	08da      	lsrs	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3208      	adds	r2, #8
 80043da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	220f      	movs	r2, #15
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	08da      	lsrs	r2, r3, #3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3208      	adds	r2, #8
 8004414:	6939      	ldr	r1, [r7, #16]
 8004416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	2203      	movs	r2, #3
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4013      	ands	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 0203 	and.w	r2, r3, #3
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 809a 	beq.w	8004590 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445c:	4b55      	ldr	r3, [pc, #340]	@ (80045b4 <HAL_GPIO_Init+0x2cc>)
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	4a54      	ldr	r2, [pc, #336]	@ (80045b4 <HAL_GPIO_Init+0x2cc>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	6193      	str	r3, [r2, #24]
 8004468:	4b52      	ldr	r3, [pc, #328]	@ (80045b4 <HAL_GPIO_Init+0x2cc>)
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004474:	4a50      	ldr	r2, [pc, #320]	@ (80045b8 <HAL_GPIO_Init+0x2d0>)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	089b      	lsrs	r3, r3, #2
 800447a:	3302      	adds	r3, #2
 800447c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	220f      	movs	r2, #15
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800449e:	d013      	beq.n	80044c8 <HAL_GPIO_Init+0x1e0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a46      	ldr	r2, [pc, #280]	@ (80045bc <HAL_GPIO_Init+0x2d4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00d      	beq.n	80044c4 <HAL_GPIO_Init+0x1dc>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a45      	ldr	r2, [pc, #276]	@ (80045c0 <HAL_GPIO_Init+0x2d8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d007      	beq.n	80044c0 <HAL_GPIO_Init+0x1d8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a44      	ldr	r2, [pc, #272]	@ (80045c4 <HAL_GPIO_Init+0x2dc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d101      	bne.n	80044bc <HAL_GPIO_Init+0x1d4>
 80044b8:	2303      	movs	r3, #3
 80044ba:	e006      	b.n	80044ca <HAL_GPIO_Init+0x1e2>
 80044bc:	2305      	movs	r3, #5
 80044be:	e004      	b.n	80044ca <HAL_GPIO_Init+0x1e2>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e002      	b.n	80044ca <HAL_GPIO_Init+0x1e2>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <HAL_GPIO_Init+0x1e2>
 80044c8:	2300      	movs	r3, #0
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	f002 0203 	and.w	r2, r2, #3
 80044d0:	0092      	lsls	r2, r2, #2
 80044d2:	4093      	lsls	r3, r2
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044da:	4937      	ldr	r1, [pc, #220]	@ (80045b8 <HAL_GPIO_Init+0x2d0>)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	3302      	adds	r3, #2
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044e8:	4b37      	ldr	r3, [pc, #220]	@ (80045c8 <HAL_GPIO_Init+0x2e0>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800450c:	4a2e      	ldr	r2, [pc, #184]	@ (80045c8 <HAL_GPIO_Init+0x2e0>)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004512:	4b2d      	ldr	r3, [pc, #180]	@ (80045c8 <HAL_GPIO_Init+0x2e0>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	43db      	mvns	r3, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004536:	4a24      	ldr	r2, [pc, #144]	@ (80045c8 <HAL_GPIO_Init+0x2e0>)
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800453c:	4b22      	ldr	r3, [pc, #136]	@ (80045c8 <HAL_GPIO_Init+0x2e0>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	43db      	mvns	r3, r3
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4013      	ands	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004560:	4a19      	ldr	r2, [pc, #100]	@ (80045c8 <HAL_GPIO_Init+0x2e0>)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004566:	4b18      	ldr	r3, [pc, #96]	@ (80045c8 <HAL_GPIO_Init+0x2e0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	43db      	mvns	r3, r3
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4013      	ands	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800458a:	4a0f      	ldr	r2, [pc, #60]	@ (80045c8 <HAL_GPIO_Init+0x2e0>)
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	3301      	adds	r3, #1
 8004594:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f47f aea9 	bne.w	80042f8 <HAL_GPIO_Init+0x10>
  }
}
 80045a6:	bf00      	nop
 80045a8:	bf00      	nop
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40010000 	.word	0x40010000
 80045bc:	48000400 	.word	0x48000400
 80045c0:	48000800 	.word	0x48000800
 80045c4:	48000c00 	.word	0x48000c00
 80045c8:	40010400 	.word	0x40010400

080045cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	807b      	strh	r3, [r7, #2]
 80045d8:	4613      	mov	r3, r2
 80045da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045dc:	787b      	ldrb	r3, [r7, #1]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045e8:	e002      	b.n	80045f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045ea:	887a      	ldrh	r2, [r7, #2]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004606:	4b08      	ldr	r3, [pc, #32]	@ (8004628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	4013      	ands	r3, r2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d006      	beq.n	8004620 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004612:	4a05      	ldr	r2, [pc, #20]	@ (8004628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fbd2 	bl	8001dc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40010400 	.word	0x40010400

0800462c <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8004630:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a04      	ldr	r2, [pc, #16]	@ (8004648 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800463a:	6013      	str	r3, [r2, #0]
}
 800463c:	bf00      	nop
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40007000 	.word	0x40007000

0800464c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004652:	af00      	add	r7, sp, #0
 8004654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004658:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800465c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800465e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f000 bff4 	b.w	800565a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004676:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 816d 	beq.w	8004962 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004688:	4bb4      	ldr	r3, [pc, #720]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 030c 	and.w	r3, r3, #12
 8004690:	2b04      	cmp	r3, #4
 8004692:	d00c      	beq.n	80046ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004694:	4bb1      	ldr	r3, [pc, #708]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b08      	cmp	r3, #8
 800469e:	d157      	bne.n	8004750 <HAL_RCC_OscConfig+0x104>
 80046a0:	4bae      	ldr	r3, [pc, #696]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ac:	d150      	bne.n	8004750 <HAL_RCC_OscConfig+0x104>
 80046ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046b2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
  return result;
 80046c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80046ce:	d802      	bhi.n	80046d6 <HAL_RCC_OscConfig+0x8a>
 80046d0:	4ba2      	ldr	r3, [pc, #648]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	e015      	b.n	8004702 <HAL_RCC_OscConfig+0xb6>
 80046d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046da:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80046ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046ee:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80046f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80046f6:	fa93 f3a3 	rbit	r3, r3
 80046fa:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80046fe:	4b97      	ldr	r3, [pc, #604]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004706:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800470a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800470e:	fa92 f2a2 	rbit	r2, r2
 8004712:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004716:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800471a:	fab2 f282 	clz	r2, r2
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	f042 0220 	orr.w	r2, r2, #32
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	f002 021f 	and.w	r2, r2, #31
 800472a:	2101      	movs	r1, #1
 800472c:	fa01 f202 	lsl.w	r2, r1, r2
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8114 	beq.w	8004960 <HAL_RCC_OscConfig+0x314>
 8004738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f040 810b 	bne.w	8004960 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f000 bf85 	b.w	800565a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004750:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004754:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004760:	d106      	bne.n	8004770 <HAL_RCC_OscConfig+0x124>
 8004762:	4b7e      	ldr	r3, [pc, #504]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7d      	ldr	r2, [pc, #500]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e036      	b.n	80047de <HAL_RCC_OscConfig+0x192>
 8004770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004774:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10c      	bne.n	800479a <HAL_RCC_OscConfig+0x14e>
 8004780:	4b76      	ldr	r3, [pc, #472]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a75      	ldr	r2, [pc, #468]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 8004786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b73      	ldr	r3, [pc, #460]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a72      	ldr	r2, [pc, #456]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 8004792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e021      	b.n	80047de <HAL_RCC_OscConfig+0x192>
 800479a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800479e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047aa:	d10c      	bne.n	80047c6 <HAL_RCC_OscConfig+0x17a>
 80047ac:	4b6b      	ldr	r3, [pc, #428]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a6a      	ldr	r2, [pc, #424]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80047b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4b68      	ldr	r3, [pc, #416]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a67      	ldr	r2, [pc, #412]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80047be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	e00b      	b.n	80047de <HAL_RCC_OscConfig+0x192>
 80047c6:	4b65      	ldr	r3, [pc, #404]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a64      	ldr	r2, [pc, #400]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	4b62      	ldr	r3, [pc, #392]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a61      	ldr	r2, [pc, #388]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80047d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047de:	4b5f      	ldr	r3, [pc, #380]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	f023 020f 	bic.w	r2, r3, #15
 80047e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	495a      	ldr	r1, [pc, #360]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d054      	beq.n	80048b2 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fe fc74 	bl	80030f4 <HAL_GetTick>
 800480c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004812:	f7fe fc6f 	bl	80030f4 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	@ 0x64
 8004820:	d902      	bls.n	8004828 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	f000 bf19 	b.w	800565a <HAL_RCC_OscConfig+0x100e>
 8004828:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800482c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004834:	fa93 f3a3 	rbit	r3, r3
 8004838:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800483c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b3f      	cmp	r3, #63	@ 0x3f
 8004848:	d802      	bhi.n	8004850 <HAL_RCC_OscConfig+0x204>
 800484a:	4b44      	ldr	r3, [pc, #272]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	e015      	b.n	800487c <HAL_RCC_OscConfig+0x230>
 8004850:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004854:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004864:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004868:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800486c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004870:	fa93 f3a3 	rbit	r3, r3
 8004874:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004878:	4b38      	ldr	r3, [pc, #224]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004880:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004884:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004888:	fa92 f2a2 	rbit	r2, r2
 800488c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004890:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004894:	fab2 f282 	clz	r2, r2
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	f042 0220 	orr.w	r2, r2, #32
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	f002 021f 	and.w	r2, r2, #31
 80048a4:	2101      	movs	r1, #1
 80048a6:	fa01 f202 	lsl.w	r2, r1, r2
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0b0      	beq.n	8004812 <HAL_RCC_OscConfig+0x1c6>
 80048b0:	e057      	b.n	8004962 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b2:	f7fe fc1f 	bl	80030f4 <HAL_GetTick>
 80048b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fe fc1a 	bl	80030f4 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b64      	cmp	r3, #100	@ 0x64
 80048ca:	d902      	bls.n	80048d2 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	f000 bec4 	b.w	800565a <HAL_RCC_OscConfig+0x100e>
 80048d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048d6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80048de:	fa93 f3a3 	rbit	r3, r3
 80048e2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80048e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	fab3 f383 	clz	r3, r3
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80048f2:	d802      	bhi.n	80048fa <HAL_RCC_OscConfig+0x2ae>
 80048f4:	4b19      	ldr	r3, [pc, #100]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	e015      	b.n	8004926 <HAL_RCC_OscConfig+0x2da>
 80048fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048fe:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004902:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004906:	fa93 f3a3 	rbit	r3, r3
 800490a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800490e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004912:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004916:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004922:	4b0e      	ldr	r3, [pc, #56]	@ (800495c <HAL_RCC_OscConfig+0x310>)
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800492a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800492e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004932:	fa92 f2a2 	rbit	r2, r2
 8004936:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800493a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800493e:	fab2 f282 	clz	r2, r2
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	f042 0220 	orr.w	r2, r2, #32
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	f002 021f 	and.w	r2, r2, #31
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f202 	lsl.w	r2, r1, r2
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1b0      	bne.n	80048bc <HAL_RCC_OscConfig+0x270>
 800495a:	e002      	b.n	8004962 <HAL_RCC_OscConfig+0x316>
 800495c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 816c 	beq.w	8004c50 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004978:	4bcc      	ldr	r3, [pc, #816]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 030c 	and.w	r3, r3, #12
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004984:	4bc9      	ldr	r3, [pc, #804]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b08      	cmp	r3, #8
 800498e:	d16d      	bne.n	8004a6c <HAL_RCC_OscConfig+0x420>
 8004990:	4bc6      	ldr	r3, [pc, #792]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d167      	bne.n	8004a6c <HAL_RCC_OscConfig+0x420>
 800499c:	2302      	movs	r3, #2
 800499e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80049ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b2:	fab3 f383 	clz	r3, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80049ba:	d802      	bhi.n	80049c2 <HAL_RCC_OscConfig+0x376>
 80049bc:	4bbb      	ldr	r3, [pc, #748]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	e013      	b.n	80049ea <HAL_RCC_OscConfig+0x39e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80049cc:	fa93 f3a3 	rbit	r3, r3
 80049d0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80049d4:	2302      	movs	r3, #2
 80049d6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80049da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80049de:	fa93 f3a3 	rbit	r3, r3
 80049e2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80049e6:	4bb1      	ldr	r3, [pc, #708]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	2202      	movs	r2, #2
 80049ec:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80049f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80049f4:	fa92 f2a2 	rbit	r2, r2
 80049f8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80049fc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004a00:	fab2 f282 	clz	r2, r2
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	f042 0220 	orr.w	r2, r2, #32
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	f002 021f 	and.w	r2, r2, #31
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f202 	lsl.w	r2, r1, r2
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <HAL_RCC_OscConfig+0x3e6>
 8004a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d002      	beq.n	8004a32 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f000 be14 	b.w	800565a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a32:	4b9e      	ldr	r3, [pc, #632]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	21f8      	movs	r1, #248	@ 0xf8
 8004a48:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004a50:	fa91 f1a1 	rbit	r1, r1
 8004a54:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004a58:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004a5c:	fab1 f181 	clz	r1, r1
 8004a60:	b2c9      	uxtb	r1, r1
 8004a62:	408b      	lsls	r3, r1
 8004a64:	4991      	ldr	r1, [pc, #580]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6a:	e0f1      	b.n	8004c50 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8083 	beq.w	8004b84 <HAL_RCC_OscConfig+0x538>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a84:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004a88:	fa93 f3a3 	rbit	r3, r3
 8004a8c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004a90:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a9e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fe fb23 	bl	80030f4 <HAL_GetTick>
 8004aae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab4:	f7fe fb1e 	bl	80030f4 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d902      	bls.n	8004aca <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	f000 bdc8 	b.w	800565a <HAL_RCC_OscConfig+0x100e>
 8004aca:	2302      	movs	r3, #2
 8004acc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004adc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae0:	fab3 f383 	clz	r3, r3
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ae8:	d802      	bhi.n	8004af0 <HAL_RCC_OscConfig+0x4a4>
 8004aea:	4b70      	ldr	r3, [pc, #448]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	e013      	b.n	8004b18 <HAL_RCC_OscConfig+0x4cc>
 8004af0:	2302      	movs	r3, #2
 8004af2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004afa:	fa93 f3a3 	rbit	r3, r3
 8004afe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004b02:	2302      	movs	r3, #2
 8004b04:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004b08:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004b14:	4b65      	ldr	r3, [pc, #404]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004b1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004b22:	fa92 f2a2 	rbit	r2, r2
 8004b26:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004b2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004b2e:	fab2 f282 	clz	r2, r2
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	f042 0220 	orr.w	r2, r2, #32
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	f002 021f 	and.w	r2, r2, #31
 8004b3e:	2101      	movs	r1, #1
 8004b40:	fa01 f202 	lsl.w	r2, r1, r2
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0b4      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4a:	4b58      	ldr	r3, [pc, #352]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	21f8      	movs	r1, #248	@ 0xf8
 8004b60:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b64:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004b68:	fa91 f1a1 	rbit	r1, r1
 8004b6c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004b70:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004b74:	fab1 f181 	clz	r1, r1
 8004b78:	b2c9      	uxtb	r1, r1
 8004b7a:	408b      	lsls	r3, r1
 8004b7c:	494b      	ldr	r1, [pc, #300]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
 8004b82:	e065      	b.n	8004c50 <HAL_RCC_OscConfig+0x604>
 8004b84:	2301      	movs	r3, #1
 8004b86:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004b8e:	fa93 f3a3 	rbit	r3, r3
 8004b92:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004b96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9a:	fab3 f383 	clz	r3, r3
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ba4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	461a      	mov	r2, r3
 8004bac:	2300      	movs	r3, #0
 8004bae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb0:	f7fe faa0 	bl	80030f4 <HAL_GetTick>
 8004bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb8:	e00a      	b.n	8004bd0 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bba:	f7fe fa9b 	bl	80030f4 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d902      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	f000 bd45 	b.w	800565a <HAL_RCC_OscConfig+0x100e>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004bda:	fa93 f3a3 	rbit	r3, r3
 8004bde:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	fab3 f383 	clz	r3, r3
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b3f      	cmp	r3, #63	@ 0x3f
 8004bee:	d802      	bhi.n	8004bf6 <HAL_RCC_OscConfig+0x5aa>
 8004bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	e013      	b.n	8004c1e <HAL_RCC_OscConfig+0x5d2>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004c08:	2302      	movs	r3, #2
 8004c0a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004c0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004c12:	fa93 f3a3 	rbit	r3, r3
 8004c16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004c1a:	4b24      	ldr	r3, [pc, #144]	@ (8004cac <HAL_RCC_OscConfig+0x660>)
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004c24:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004c28:	fa92 f2a2 	rbit	r2, r2
 8004c2c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004c30:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004c34:	fab2 f282 	clz	r2, r2
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	f042 0220 	orr.w	r2, r2, #32
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	f002 021f 	and.w	r2, r2, #31
 8004c44:	2101      	movs	r1, #1
 8004c46:	fa01 f202 	lsl.w	r2, r1, r2
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1b4      	bne.n	8004bba <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8115 	beq.w	8004e90 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d07e      	beq.n	8004d74 <HAL_RCC_OscConfig+0x728>
 8004c76:	2301      	movs	r3, #1
 8004c78:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8c:	fab3 f383 	clz	r3, r3
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <HAL_RCC_OscConfig+0x664>)
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca0:	f7fe fa28 	bl	80030f4 <HAL_GetTick>
 8004ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca8:	e00f      	b.n	8004cca <HAL_RCC_OscConfig+0x67e>
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb4:	f7fe fa1e 	bl	80030f4 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d902      	bls.n	8004cca <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	f000 bcc8 	b.w	800565a <HAL_RCC_OscConfig+0x100e>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004cd4:	fa93 f3a3 	rbit	r3, r3
 8004cd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	fa93 f2a3 	rbit	r2, r3
 8004cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d08:	2202      	movs	r2, #2
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	fa93 f2a3 	rbit	r2, r3
 8004d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004d22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d24:	4bb0      	ldr	r3, [pc, #704]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004d26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004d30:	2102      	movs	r1, #2
 8004d32:	6019      	str	r1, [r3, #0]
 8004d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	fa93 f1a3 	rbit	r1, r3
 8004d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004d4a:	6019      	str	r1, [r3, #0]
  return result;
 8004d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d50:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	2101      	movs	r1, #1
 8004d68:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0a0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x668>
 8004d72:	e08d      	b.n	8004e90 <HAL_RCC_OscConfig+0x844>
 8004d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	fa93 f2a3 	rbit	r2, r3
 8004d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d92:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004d96:	601a      	str	r2, [r3, #0]
  return result;
 8004d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d9c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004da0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da2:	fab3 f383 	clz	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b90      	ldr	r3, [pc, #576]	@ (8004fec <HAL_RCC_OscConfig+0x9a0>)
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	461a      	mov	r2, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db6:	f7fe f99d 	bl	80030f4 <HAL_GetTick>
 8004dba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc0:	f7fe f998 	bl	80030f4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d902      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	f000 bc42 	b.w	800565a <HAL_RCC_OscConfig+0x100e>
 8004dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dda:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004dde:	2202      	movs	r2, #2
 8004de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004de6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	fa93 f2a3 	rbit	r2, r3
 8004df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004df4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dfe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004e02:	2202      	movs	r2, #2
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e0a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	fa93 f2a3 	rbit	r2, r3
 8004e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004e26:	2202      	movs	r2, #2
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e2e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	fa93 f2a3 	rbit	r2, r3
 8004e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e3c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004e40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e42:	4b69      	ldr	r3, [pc, #420]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004e44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e4a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004e4e:	2102      	movs	r1, #2
 8004e50:	6019      	str	r1, [r3, #0]
 8004e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e56:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	fa93 f1a3 	rbit	r1, r3
 8004e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004e68:	6019      	str	r1, [r3, #0]
  return result;
 8004e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e6e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	fab3 f383 	clz	r3, r3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2101      	movs	r1, #1
 8004e86:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d197      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 819e 	beq.w	80051e2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eac:	4b4e      	ldr	r3, [pc, #312]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d116      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec2:	61d3      	str	r3, [r2, #28]
 8004ec4:	4b48      	ldr	r3, [pc, #288]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eda:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004ede:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee6:	4b42      	ldr	r3, [pc, #264]	@ (8004ff0 <HAL_RCC_OscConfig+0x9a4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d11a      	bne.n	8004f28 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ff0 <HAL_RCC_OscConfig+0x9a4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ff0 <HAL_RCC_OscConfig+0x9a4>)
 8004ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004efc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004efe:	f7fe f8f9 	bl	80030f4 <HAL_GetTick>
 8004f02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f06:	e009      	b.n	8004f1c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f08:	f7fe f8f4 	bl	80030f4 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b64      	cmp	r3, #100	@ 0x64
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e39e      	b.n	800565a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1c:	4b34      	ldr	r3, [pc, #208]	@ (8004ff0 <HAL_RCC_OscConfig+0x9a4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ef      	beq.n	8004f08 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x8fa>
 8004f38:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6213      	str	r3, [r2, #32]
 8004f44:	e035      	b.n	8004fb2 <HAL_RCC_OscConfig+0x966>
 8004f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x924>
 8004f56:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	4a23      	ldr	r2, [pc, #140]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	6213      	str	r3, [r2, #32]
 8004f62:	4b21      	ldr	r3, [pc, #132]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	4a20      	ldr	r2, [pc, #128]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004f68:	f023 0304 	bic.w	r3, r3, #4
 8004f6c:	6213      	str	r3, [r2, #32]
 8004f6e:	e020      	b.n	8004fb2 <HAL_RCC_OscConfig+0x966>
 8004f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	2b05      	cmp	r3, #5
 8004f7e:	d10c      	bne.n	8004f9a <HAL_RCC_OscConfig+0x94e>
 8004f80:	4b19      	ldr	r3, [pc, #100]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	4a18      	ldr	r2, [pc, #96]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004f86:	f043 0304 	orr.w	r3, r3, #4
 8004f8a:	6213      	str	r3, [r2, #32]
 8004f8c:	4b16      	ldr	r3, [pc, #88]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	4a15      	ldr	r2, [pc, #84]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	6213      	str	r3, [r2, #32]
 8004f98:	e00b      	b.n	8004fb2 <HAL_RCC_OscConfig+0x966>
 8004f9a:	4b13      	ldr	r3, [pc, #76]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4a12      	ldr	r2, [pc, #72]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	6213      	str	r3, [r2, #32]
 8004fa6:	4b10      	ldr	r3, [pc, #64]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	4a0f      	ldr	r2, [pc, #60]	@ (8004fe8 <HAL_RCC_OscConfig+0x99c>)
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8087 	beq.w	80050d2 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc4:	f7fe f896 	bl	80030f4 <HAL_GetTick>
 8004fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fcc:	e012      	b.n	8004ff4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fce:	f7fe f891 	bl	80030f4 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d908      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e339      	b.n	800565a <HAL_RCC_OscConfig+0x100e>
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	10908120 	.word	0x10908120
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ff8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005004:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	fa93 f2a3 	rbit	r2, r3
 800500e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005012:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800501c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005020:	2202      	movs	r2, #2
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005028:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	fa93 f2a3 	rbit	r2, r3
 8005032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005036:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800503a:	601a      	str	r2, [r3, #0]
  return result;
 800503c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005040:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005044:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005046:	fab3 f383 	clz	r3, r3
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_RCC_OscConfig+0xa10>
 8005056:	4b98      	ldr	r3, [pc, #608]	@ (80052b8 <HAL_RCC_OscConfig+0xc6c>)
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	e013      	b.n	8005084 <HAL_RCC_OscConfig+0xa38>
 800505c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005060:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005064:	2202      	movs	r2, #2
 8005066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800506c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	fa93 f2a3 	rbit	r2, r3
 8005076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800507a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	4b8d      	ldr	r3, [pc, #564]	@ (80052b8 <HAL_RCC_OscConfig+0xc6c>)
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005088:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800508c:	2102      	movs	r1, #2
 800508e:	6011      	str	r1, [r2, #0]
 8005090:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005094:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	fa92 f1a2 	rbit	r1, r2
 800509e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050a2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80050a6:	6011      	str	r1, [r2, #0]
  return result;
 80050a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050ac:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	fab2 f282 	clz	r2, r2
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	f002 021f 	and.w	r2, r2, #31
 80050c2:	2101      	movs	r1, #1
 80050c4:	fa01 f202 	lsl.w	r2, r1, r2
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f43f af7f 	beq.w	8004fce <HAL_RCC_OscConfig+0x982>
 80050d0:	e07d      	b.n	80051ce <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d2:	f7fe f80f 	bl	80030f4 <HAL_GetTick>
 80050d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050da:	e00b      	b.n	80050f4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050dc:	f7fe f80a 	bl	80030f4 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e2b2      	b.n	800565a <HAL_RCC_OscConfig+0x100e>
 80050f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050f8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80050fc:	2202      	movs	r2, #2
 80050fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005104:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	fa93 f2a3 	rbit	r2, r3
 800510e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005112:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800511c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005120:	2202      	movs	r2, #2
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005128:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	fa93 f2a3 	rbit	r2, r3
 8005132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005136:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800513a:	601a      	str	r2, [r3, #0]
  return result;
 800513c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005140:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005144:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <HAL_RCC_OscConfig+0xb10>
 8005156:	4b58      	ldr	r3, [pc, #352]	@ (80052b8 <HAL_RCC_OscConfig+0xc6c>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	e013      	b.n	8005184 <HAL_RCC_OscConfig+0xb38>
 800515c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005160:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005164:	2202      	movs	r2, #2
 8005166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800516c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	fa93 f2a3 	rbit	r2, r3
 8005176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800517a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	4b4d      	ldr	r3, [pc, #308]	@ (80052b8 <HAL_RCC_OscConfig+0xc6c>)
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005188:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800518c:	2102      	movs	r1, #2
 800518e:	6011      	str	r1, [r2, #0]
 8005190:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005194:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	fa92 f1a2 	rbit	r1, r2
 800519e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051a2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80051a6:	6011      	str	r1, [r2, #0]
  return result;
 80051a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051ac:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	fab2 f282 	clz	r2, r2
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	f002 021f 	and.w	r2, r2, #31
 80051c2:	2101      	movs	r1, #1
 80051c4:	fa01 f202 	lsl.w	r2, r1, r2
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d186      	bne.n	80050dc <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051ce:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d6:	4b38      	ldr	r3, [pc, #224]	@ (80052b8 <HAL_RCC_OscConfig+0xc6c>)
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	4a37      	ldr	r2, [pc, #220]	@ (80052b8 <HAL_RCC_OscConfig+0xc6c>)
 80051dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 8232 	beq.w	8005658 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051f4:	4b30      	ldr	r3, [pc, #192]	@ (80052b8 <HAL_RCC_OscConfig+0xc6c>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 030c 	and.w	r3, r3, #12
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	f000 8201 	beq.w	8005604 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005206:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	2b02      	cmp	r3, #2
 8005210:	f040 8157 	bne.w	80054c2 <HAL_RCC_OscConfig+0xe76>
 8005214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005218:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800521c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005226:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	fa93 f2a3 	rbit	r2, r3
 8005230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005234:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005238:	601a      	str	r2, [r3, #0]
  return result;
 800523a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800523e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005242:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005244:	fab3 f383 	clz	r3, r3
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800524e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	461a      	mov	r2, r3
 8005256:	2300      	movs	r3, #0
 8005258:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525a:	f7fd ff4b 	bl	80030f4 <HAL_GetTick>
 800525e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005262:	e009      	b.n	8005278 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005264:	f7fd ff46 	bl	80030f4 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e1f0      	b.n	800565a <HAL_RCC_OscConfig+0x100e>
 8005278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800527c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005280:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800528a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	fa93 f2a3 	rbit	r2, r3
 8005294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005298:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800529c:	601a      	str	r2, [r3, #0]
  return result;
 800529e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052a2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80052a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052a8:	fab3 f383 	clz	r3, r3
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80052b0:	d804      	bhi.n	80052bc <HAL_RCC_OscConfig+0xc70>
 80052b2:	4b01      	ldr	r3, [pc, #4]	@ (80052b8 <HAL_RCC_OscConfig+0xc6c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	e029      	b.n	800530c <HAL_RCC_OscConfig+0xcc0>
 80052b8:	40021000 	.word	0x40021000
 80052bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052c0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80052c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	fa93 f2a3 	rbit	r2, r3
 80052d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052dc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052e6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80052ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052f4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	fa93 f2a3 	rbit	r2, r3
 80052fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005302:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	4bc3      	ldr	r3, [pc, #780]	@ (8005618 <HAL_RCC_OscConfig+0xfcc>)
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005310:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005314:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005318:	6011      	str	r1, [r2, #0]
 800531a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800531e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	fa92 f1a2 	rbit	r1, r2
 8005328:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800532c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005330:	6011      	str	r1, [r2, #0]
  return result;
 8005332:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005336:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	fab2 f282 	clz	r2, r2
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	f042 0220 	orr.w	r2, r2, #32
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	f002 021f 	and.w	r2, r2, #31
 800534c:	2101      	movs	r1, #1
 800534e:	fa01 f202 	lsl.w	r2, r1, r2
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d185      	bne.n	8005264 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005358:	4baf      	ldr	r3, [pc, #700]	@ (8005618 <HAL_RCC_OscConfig+0xfcc>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005364:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800536c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005370:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	430b      	orrs	r3, r1
 800537a:	49a7      	ldr	r1, [pc, #668]	@ (8005618 <HAL_RCC_OscConfig+0xfcc>)
 800537c:	4313      	orrs	r3, r2
 800537e:	604b      	str	r3, [r1, #4]
 8005380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005384:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005388:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800538c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005392:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	fa93 f2a3 	rbit	r2, r3
 800539c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053a0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80053a4:	601a      	str	r2, [r3, #0]
  return result;
 80053a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053aa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80053ae:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b0:	fab3 f383 	clz	r3, r3
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80053ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	461a      	mov	r2, r3
 80053c2:	2301      	movs	r3, #1
 80053c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c6:	f7fd fe95 	bl	80030f4 <HAL_GetTick>
 80053ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053ce:	e009      	b.n	80053e4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fd fe90 	bl	80030f4 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e13a      	b.n	800565a <HAL_RCC_OscConfig+0x100e>
 80053e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053e8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80053ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053f6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	fa93 f2a3 	rbit	r2, r3
 8005400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005404:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005408:	601a      	str	r2, [r3, #0]
  return result;
 800540a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800540e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005412:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005414:	fab3 f383 	clz	r3, r3
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b3f      	cmp	r3, #63	@ 0x3f
 800541c:	d802      	bhi.n	8005424 <HAL_RCC_OscConfig+0xdd8>
 800541e:	4b7e      	ldr	r3, [pc, #504]	@ (8005618 <HAL_RCC_OscConfig+0xfcc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	e027      	b.n	8005474 <HAL_RCC_OscConfig+0xe28>
 8005424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005428:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800542c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005436:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	fa93 f2a3 	rbit	r2, r3
 8005440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005444:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800544e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005452:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800545c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	fa93 f2a3 	rbit	r2, r3
 8005466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800546a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	4b69      	ldr	r3, [pc, #420]	@ (8005618 <HAL_RCC_OscConfig+0xfcc>)
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005478:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800547c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005480:	6011      	str	r1, [r2, #0]
 8005482:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005486:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	fa92 f1a2 	rbit	r1, r2
 8005490:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005494:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005498:	6011      	str	r1, [r2, #0]
  return result;
 800549a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800549e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	fab2 f282 	clz	r2, r2
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	f042 0220 	orr.w	r2, r2, #32
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	f002 021f 	and.w	r2, r2, #31
 80054b4:	2101      	movs	r1, #1
 80054b6:	fa01 f202 	lsl.w	r2, r1, r2
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d087      	beq.n	80053d0 <HAL_RCC_OscConfig+0xd84>
 80054c0:	e0ca      	b.n	8005658 <HAL_RCC_OscConfig+0x100c>
 80054c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054c6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80054ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054d4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	fa93 f2a3 	rbit	r2, r3
 80054de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054e2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80054e6:	601a      	str	r2, [r3, #0]
  return result;
 80054e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054ec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80054f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f2:	fab3 f383 	clz	r3, r3
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80054fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	461a      	mov	r2, r3
 8005504:	2300      	movs	r3, #0
 8005506:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005508:	f7fd fdf4 	bl	80030f4 <HAL_GetTick>
 800550c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005510:	e009      	b.n	8005526 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005512:	f7fd fdef 	bl	80030f4 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e099      	b.n	800565a <HAL_RCC_OscConfig+0x100e>
 8005526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800552a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800552e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005538:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	fa93 f2a3 	rbit	r2, r3
 8005542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005546:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800554a:	601a      	str	r2, [r3, #0]
  return result;
 800554c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005550:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005554:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005556:	fab3 f383 	clz	r3, r3
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b3f      	cmp	r3, #63	@ 0x3f
 800555e:	d802      	bhi.n	8005566 <HAL_RCC_OscConfig+0xf1a>
 8005560:	4b2d      	ldr	r3, [pc, #180]	@ (8005618 <HAL_RCC_OscConfig+0xfcc>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	e027      	b.n	80055b6 <HAL_RCC_OscConfig+0xf6a>
 8005566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800556a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800556e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005578:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	fa93 f2a3 	rbit	r2, r3
 8005582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005586:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005590:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005594:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800559e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	fa93 f2a3 	rbit	r2, r3
 80055a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055ac:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	4b19      	ldr	r3, [pc, #100]	@ (8005618 <HAL_RCC_OscConfig+0xfcc>)
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80055ba:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80055be:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80055c2:	6011      	str	r1, [r2, #0]
 80055c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80055c8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	fa92 f1a2 	rbit	r1, r2
 80055d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80055d6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80055da:	6011      	str	r1, [r2, #0]
  return result;
 80055dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80055e0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	fab2 f282 	clz	r2, r2
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	f042 0220 	orr.w	r2, r2, #32
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	f002 021f 	and.w	r2, r2, #31
 80055f6:	2101      	movs	r1, #1
 80055f8:	fa01 f202 	lsl.w	r2, r1, r2
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d187      	bne.n	8005512 <HAL_RCC_OscConfig+0xec6>
 8005602:	e029      	b.n	8005658 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005608:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d103      	bne.n	800561c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e020      	b.n	800565a <HAL_RCC_OscConfig+0x100e>
 8005618:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800561c:	4b11      	ldr	r3, [pc, #68]	@ (8005664 <HAL_RCC_OscConfig+0x1018>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005624:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005628:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800562c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005630:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	429a      	cmp	r2, r3
 800563a:	d10b      	bne.n	8005654 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800563c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005640:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005648:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000

08005668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b09e      	sub	sp, #120	@ 0x78
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e154      	b.n	800592a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005680:	4b89      	ldr	r3, [pc, #548]	@ (80058a8 <HAL_RCC_ClockConfig+0x240>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d910      	bls.n	80056b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568e:	4b86      	ldr	r3, [pc, #536]	@ (80058a8 <HAL_RCC_ClockConfig+0x240>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f023 0207 	bic.w	r2, r3, #7
 8005696:	4984      	ldr	r1, [pc, #528]	@ (80058a8 <HAL_RCC_ClockConfig+0x240>)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	4313      	orrs	r3, r2
 800569c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b82      	ldr	r3, [pc, #520]	@ (80058a8 <HAL_RCC_ClockConfig+0x240>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e13c      	b.n	800592a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056bc:	4b7b      	ldr	r3, [pc, #492]	@ (80058ac <HAL_RCC_ClockConfig+0x244>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4978      	ldr	r1, [pc, #480]	@ (80058ac <HAL_RCC_ClockConfig+0x244>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 80cd 	beq.w	8005876 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d137      	bne.n	8005754 <HAL_RCC_ClockConfig+0xec>
 80056e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056ec:	fa93 f3a3 	rbit	r3, r3
 80056f0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80056f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f4:	fab3 f383 	clz	r3, r3
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80056fc:	d802      	bhi.n	8005704 <HAL_RCC_ClockConfig+0x9c>
 80056fe:	4b6b      	ldr	r3, [pc, #428]	@ (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	e00f      	b.n	8005724 <HAL_RCC_ClockConfig+0xbc>
 8005704:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800570c:	fa93 f3a3 	rbit	r3, r3
 8005710:	667b      	str	r3, [r7, #100]	@ 0x64
 8005712:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005716:	663b      	str	r3, [r7, #96]	@ 0x60
 8005718:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800571a:	fa93 f3a3 	rbit	r3, r3
 800571e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005720:	4b62      	ldr	r3, [pc, #392]	@ (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005724:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005728:	65ba      	str	r2, [r7, #88]	@ 0x58
 800572a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800572c:	fa92 f2a2 	rbit	r2, r2
 8005730:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005732:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005734:	fab2 f282 	clz	r2, r2
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	f042 0220 	orr.w	r2, r2, #32
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	f002 021f 	and.w	r2, r2, #31
 8005744:	2101      	movs	r1, #1
 8005746:	fa01 f202 	lsl.w	r2, r1, r2
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d171      	bne.n	8005834 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e0ea      	b.n	800592a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d137      	bne.n	80057cc <HAL_RCC_ClockConfig+0x164>
 800575c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005760:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005764:	fa93 f3a3 	rbit	r3, r3
 8005768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800576a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576c:	fab3 f383 	clz	r3, r3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b3f      	cmp	r3, #63	@ 0x3f
 8005774:	d802      	bhi.n	800577c <HAL_RCC_ClockConfig+0x114>
 8005776:	4b4d      	ldr	r3, [pc, #308]	@ (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	e00f      	b.n	800579c <HAL_RCC_ClockConfig+0x134>
 800577c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005780:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005784:	fa93 f3a3 	rbit	r3, r3
 8005788:	647b      	str	r3, [r7, #68]	@ 0x44
 800578a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800578e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005792:	fa93 f3a3 	rbit	r3, r3
 8005796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005798:	4b44      	ldr	r3, [pc, #272]	@ (80058ac <HAL_RCC_ClockConfig+0x244>)
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80057a0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80057a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057a4:	fa92 f2a2 	rbit	r2, r2
 80057a8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80057aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057ac:	fab2 f282 	clz	r2, r2
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	f042 0220 	orr.w	r2, r2, #32
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	f002 021f 	and.w	r2, r2, #31
 80057bc:	2101      	movs	r1, #1
 80057be:	fa01 f202 	lsl.w	r2, r1, r2
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d135      	bne.n	8005834 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0ae      	b.n	800592a <HAL_RCC_ClockConfig+0x2c2>
 80057cc:	2302      	movs	r3, #2
 80057ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	fa93 f3a3 	rbit	r3, r3
 80057d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80057d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057da:	fab3 f383 	clz	r3, r3
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80057e2:	d802      	bhi.n	80057ea <HAL_RCC_ClockConfig+0x182>
 80057e4:	4b31      	ldr	r3, [pc, #196]	@ (80058ac <HAL_RCC_ClockConfig+0x244>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	e00d      	b.n	8005806 <HAL_RCC_ClockConfig+0x19e>
 80057ea:	2302      	movs	r3, #2
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	fa93 f3a3 	rbit	r3, r3
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f6:	2302      	movs	r3, #2
 80057f8:	623b      	str	r3, [r7, #32]
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	fa93 f3a3 	rbit	r3, r3
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	4b2a      	ldr	r3, [pc, #168]	@ (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	2202      	movs	r2, #2
 8005808:	61ba      	str	r2, [r7, #24]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	fa92 f2a2 	rbit	r2, r2
 8005810:	617a      	str	r2, [r7, #20]
  return result;
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	fab2 f282 	clz	r2, r2
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	f042 0220 	orr.w	r2, r2, #32
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	f002 021f 	and.w	r2, r2, #31
 8005824:	2101      	movs	r1, #1
 8005826:	fa01 f202 	lsl.w	r2, r1, r2
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e07a      	b.n	800592a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005834:	4b1d      	ldr	r3, [pc, #116]	@ (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f023 0203 	bic.w	r2, r3, #3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	491a      	ldr	r1, [pc, #104]	@ (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005842:	4313      	orrs	r3, r2
 8005844:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005846:	f7fd fc55 	bl	80030f4 <HAL_GetTick>
 800584a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584c:	e00a      	b.n	8005864 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584e:	f7fd fc51 	bl	80030f4 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e062      	b.n	800592a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005864:	4b11      	ldr	r3, [pc, #68]	@ (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f003 020c 	and.w	r2, r3, #12
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	429a      	cmp	r2, r3
 8005874:	d1eb      	bne.n	800584e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005876:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <HAL_RCC_ClockConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d215      	bcs.n	80058b0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005884:	4b08      	ldr	r3, [pc, #32]	@ (80058a8 <HAL_RCC_ClockConfig+0x240>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f023 0207 	bic.w	r2, r3, #7
 800588c:	4906      	ldr	r1, [pc, #24]	@ (80058a8 <HAL_RCC_ClockConfig+0x240>)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	4313      	orrs	r3, r2
 8005892:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005894:	4b04      	ldr	r3, [pc, #16]	@ (80058a8 <HAL_RCC_ClockConfig+0x240>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d006      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e041      	b.n	800592a <HAL_RCC_ClockConfig+0x2c2>
 80058a6:	bf00      	nop
 80058a8:	40022000 	.word	0x40022000
 80058ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005934 <HAL_RCC_ClockConfig+0x2cc>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	491a      	ldr	r1, [pc, #104]	@ (8005934 <HAL_RCC_ClockConfig+0x2cc>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058da:	4b16      	ldr	r3, [pc, #88]	@ (8005934 <HAL_RCC_ClockConfig+0x2cc>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4912      	ldr	r1, [pc, #72]	@ (8005934 <HAL_RCC_ClockConfig+0x2cc>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80058ee:	f000 f829 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 80058f2:	4601      	mov	r1, r0
 80058f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005934 <HAL_RCC_ClockConfig+0x2cc>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058fc:	22f0      	movs	r2, #240	@ 0xf0
 80058fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	fa92 f2a2 	rbit	r2, r2
 8005906:	60fa      	str	r2, [r7, #12]
  return result;
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	fab2 f282 	clz	r2, r2
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	40d3      	lsrs	r3, r2
 8005912:	4a09      	ldr	r2, [pc, #36]	@ (8005938 <HAL_RCC_ClockConfig+0x2d0>)
 8005914:	5cd3      	ldrb	r3, [r2, r3]
 8005916:	fa21 f303 	lsr.w	r3, r1, r3
 800591a:	4a08      	ldr	r2, [pc, #32]	@ (800593c <HAL_RCC_ClockConfig+0x2d4>)
 800591c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800591e:	4b08      	ldr	r3, [pc, #32]	@ (8005940 <HAL_RCC_ClockConfig+0x2d8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f7fd fba2 	bl	800306c <HAL_InitTick>
  
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3778      	adds	r7, #120	@ 0x78
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000
 8005938:	0800a9bc 	.word	0x0800a9bc
 800593c:	20000014 	.word	0x20000014
 8005940:	20000018 	.word	0x20000018

08005944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	2300      	movs	r3, #0
 8005958:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800595e:	4b1e      	ldr	r3, [pc, #120]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b04      	cmp	r3, #4
 800596c:	d002      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x30>
 800596e:	2b08      	cmp	r3, #8
 8005970:	d003      	beq.n	800597a <HAL_RCC_GetSysClockFreq+0x36>
 8005972:	e026      	b.n	80059c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005974:	4b19      	ldr	r3, [pc, #100]	@ (80059dc <HAL_RCC_GetSysClockFreq+0x98>)
 8005976:	613b      	str	r3, [r7, #16]
      break;
 8005978:	e026      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	0c9b      	lsrs	r3, r3, #18
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	4a17      	ldr	r2, [pc, #92]	@ (80059e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005984:	5cd3      	ldrb	r3, [r2, r3]
 8005986:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005988:	4b13      	ldr	r3, [pc, #76]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x94>)
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	4a14      	ldr	r2, [pc, #80]	@ (80059e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005992:	5cd3      	ldrb	r3, [r2, r3]
 8005994:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80059a0:	4a0e      	ldr	r2, [pc, #56]	@ (80059dc <HAL_RCC_GetSysClockFreq+0x98>)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	e004      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a0c      	ldr	r2, [pc, #48]	@ (80059e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80059b6:	fb02 f303 	mul.w	r3, r2, r3
 80059ba:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	613b      	str	r3, [r7, #16]
      break;
 80059c0:	e002      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059c2:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <HAL_RCC_GetSysClockFreq+0x98>)
 80059c4:	613b      	str	r3, [r7, #16]
      break;
 80059c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059c8:	693b      	ldr	r3, [r7, #16]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000
 80059dc:	007a1200 	.word	0x007a1200
 80059e0:	0800a9d4 	.word	0x0800a9d4
 80059e4:	0800a9e4 	.word	0x0800a9e4
 80059e8:	003d0900 	.word	0x003d0900

080059ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059f0:	4b03      	ldr	r3, [pc, #12]	@ (8005a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80059f2:	681b      	ldr	r3, [r3, #0]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	20000014 	.word	0x20000014

08005a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005a0a:	f7ff ffef 	bl	80059ec <HAL_RCC_GetHCLKFreq>
 8005a0e:	4601      	mov	r1, r0
 8005a10:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a18:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005a1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	fa92 f2a2 	rbit	r2, r2
 8005a24:	603a      	str	r2, [r7, #0]
  return result;
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	fab2 f282 	clz	r2, r2
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	40d3      	lsrs	r3, r2
 8005a30:	4a04      	ldr	r2, [pc, #16]	@ (8005a44 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005a32:	5cd3      	ldrb	r3, [r2, r3]
 8005a34:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40021000 	.word	0x40021000
 8005a44:	0800a9cc 	.word	0x0800a9cc

08005a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005a4e:	f7ff ffcd 	bl	80059ec <HAL_RCC_GetHCLKFreq>
 8005a52:	4601      	mov	r1, r0
 8005a54:	4b0b      	ldr	r3, [pc, #44]	@ (8005a84 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005a5c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005a60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	fa92 f2a2 	rbit	r2, r2
 8005a68:	603a      	str	r2, [r7, #0]
  return result;
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	fab2 f282 	clz	r2, r2
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	40d3      	lsrs	r3, r2
 8005a74:	4a04      	ldr	r2, [pc, #16]	@ (8005a88 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005a76:	5cd3      	ldrb	r3, [r2, r3]
 8005a78:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40021000 	.word	0x40021000
 8005a88:	0800a9cc 	.word	0x0800a9cc

08005a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b092      	sub	sp, #72	@ 0x48
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 80d2 	beq.w	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10e      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005abc:	4b4a      	ldr	r3, [pc, #296]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	4a49      	ldr	r2, [pc, #292]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac6:	61d3      	str	r3, [r2, #28]
 8005ac8:	4b47      	ldr	r3, [pc, #284]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ada:	4b44      	ldr	r3, [pc, #272]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d118      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ae6:	4b41      	ldr	r3, [pc, #260]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a40      	ldr	r2, [pc, #256]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005af0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005af2:	f7fd faff 	bl	80030f4 <HAL_GetTick>
 8005af6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af8:	e008      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afa:	f7fd fafb 	bl	80030f4 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b64      	cmp	r3, #100	@ 0x64
 8005b06:	d901      	bls.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e149      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0c:	4b37      	ldr	r3, [pc, #220]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0f0      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b18:	4b33      	ldr	r3, [pc, #204]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8082 	beq.w	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d07a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b38:	4b2b      	ldr	r3, [pc, #172]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	fa93 f3a3 	rbit	r3, r3
 8005b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b52:	fab3 f383 	clz	r3, r3
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4b25      	ldr	r3, [pc, #148]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	461a      	mov	r2, r3
 8005b62:	2301      	movs	r3, #1
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	fa93 f3a3 	rbit	r3, r3
 8005b72:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b76:	fab3 f383 	clz	r3, r3
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	461a      	mov	r2, r3
 8005b86:	2300      	movs	r3, #0
 8005b88:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b8a:	4a17      	ldr	r2, [pc, #92]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b8e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d049      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9a:	f7fd faab 	bl	80030f4 <HAL_GetTick>
 8005b9e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba0:	e00a      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fd faa7 	bl	80030f4 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e0f3      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbe:	fa93 f3a3 	rbit	r3, r3
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	fa93 f3a3 	rbit	r3, r3
 8005bce:	61fb      	str	r3, [r7, #28]
  return result;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd2:	fab3 f383 	clz	r3, r3
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d108      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005be2:	4b01      	ldr	r3, [pc, #4]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	e00d      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005be8:	40021000 	.word	0x40021000
 8005bec:	40007000 	.word	0x40007000
 8005bf0:	10908100 	.word	0x10908100
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	fa93 f3a3 	rbit	r3, r3
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	4b69      	ldr	r3, [pc, #420]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	2202      	movs	r2, #2
 8005c06:	613a      	str	r2, [r7, #16]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	fa92 f2a2 	rbit	r2, r2
 8005c0e:	60fa      	str	r2, [r7, #12]
  return result;
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	fab2 f282 	clz	r2, r2
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	f002 021f 	and.w	r2, r2, #31
 8005c22:	2101      	movs	r1, #1
 8005c24:	fa01 f202 	lsl.w	r2, r1, r2
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0b9      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005c2e:	4b5e      	ldr	r3, [pc, #376]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	495b      	ldr	r1, [pc, #364]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d105      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c48:	4b57      	ldr	r3, [pc, #348]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	4a56      	ldr	r2, [pc, #344]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c60:	4b51      	ldr	r3, [pc, #324]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c64:	f023 0203 	bic.w	r2, r3, #3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	494e      	ldr	r1, [pc, #312]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	f023 0210 	bic.w	r2, r3, #16
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	4947      	ldr	r1, [pc, #284]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005c9c:	4b42      	ldr	r3, [pc, #264]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca8:	493f      	ldr	r1, [pc, #252]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d008      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cba:	4b3b      	ldr	r3, [pc, #236]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cbe:	f023 0220 	bic.w	r2, r3, #32
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	4938      	ldr	r1, [pc, #224]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d008      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cd8:	4b33      	ldr	r3, [pc, #204]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cdc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	4930      	ldr	r1, [pc, #192]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d008      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	4929      	ldr	r1, [pc, #164]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005d14:	4b24      	ldr	r3, [pc, #144]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	4921      	ldr	r1, [pc, #132]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d32:	4b1d      	ldr	r3, [pc, #116]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	491a      	ldr	r1, [pc, #104]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005d50:	4b15      	ldr	r3, [pc, #84]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d54:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5c:	4912      	ldr	r1, [pc, #72]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d72:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7a:	490b      	ldr	r1, [pc, #44]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d008      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005d8c:	4b06      	ldr	r3, [pc, #24]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	4903      	ldr	r1, [pc, #12]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3748      	adds	r7, #72	@ 0x48
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40021000 	.word	0x40021000

08005dac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e073      	b.n	8005eaa <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	7f5b      	ldrb	r3, [r3, #29]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d105      	bne.n	8005dd8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fc fefc 	bl	8002bd0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d055      	beq.n	8005e98 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	22ca      	movs	r2, #202	@ 0xca
 8005df2:	625a      	str	r2, [r3, #36]	@ 0x24
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2253      	movs	r2, #83	@ 0x53
 8005dfa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f99d 	bl	800613c <RTC_EnterInitMode>
 8005e02:	4603      	mov	r3, r0
 8005e04:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d12c      	bne.n	8005e66 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e1e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6899      	ldr	r1, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	68d2      	ldr	r2, [r2, #12]
 8005e46:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6919      	ldr	r1, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	041a      	lsls	r2, r3, #16
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f9a4 	bl	80061aa <RTC_ExitInitMode>
 8005e62:	4603      	mov	r3, r0
 8005e64:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d110      	bne.n	8005e8e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e7a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	22ff      	movs	r2, #255	@ 0xff
 8005e94:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e96:	e001      	b.n	8005e9c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005eb2:	b590      	push	{r4, r7, lr}
 8005eb4:	b087      	sub	sp, #28
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	7f1b      	ldrb	r3, [r3, #28]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_RTC_SetTime+0x1c>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e087      	b.n	8005fde <HAL_RTC_SetTime+0x12c>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d126      	bne.n	8005f2e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 f97b 	bl	80061f4 <RTC_ByteToBcd2>
 8005efe:	4603      	mov	r3, r0
 8005f00:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f974 	bl	80061f4 <RTC_ByteToBcd2>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f10:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	789b      	ldrb	r3, [r3, #2]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 f96c 	bl	80061f4 <RTC_ByteToBcd2>
 8005f1c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f1e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	78db      	ldrb	r3, [r3, #3]
 8005f26:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e018      	b.n	8005f60 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f4e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f54:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	78db      	ldrb	r3, [r3, #3]
 8005f5a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	22ca      	movs	r2, #202	@ 0xca
 8005f66:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2253      	movs	r2, #83	@ 0x53
 8005f6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f8e3 	bl	800613c <RTC_EnterInitMode>
 8005f76:	4603      	mov	r3, r0
 8005f78:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005f7a:	7cfb      	ldrb	r3, [r7, #19]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d120      	bne.n	8005fc2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005f8a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005f8e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f9e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6899      	ldr	r1, [r3, #8]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f8f6 	bl	80061aa <RTC_ExitInitMode>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005fc2:	7cfb      	ldrb	r3, [r7, #19]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	22ff      	movs	r2, #255	@ 0xff
 8005fd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	771a      	strb	r2, [r3, #28]

  return status;
 8005fdc:	7cfb      	ldrb	r3, [r7, #19]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd90      	pop	{r4, r7, pc}

08005fe6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fe6:	b590      	push	{r4, r7, lr}
 8005fe8:	b087      	sub	sp, #28
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	7f1b      	ldrb	r3, [r3, #28]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_RTC_SetDate+0x1c>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e071      	b.n	80060e6 <HAL_RTC_SetDate+0x100>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2202      	movs	r2, #2
 800600c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10e      	bne.n	8006032 <HAL_RTC_SetDate+0x4c>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	f023 0310 	bic.w	r3, r3, #16
 8006028:	b2db      	uxtb	r3, r3
 800602a:	330a      	adds	r3, #10
 800602c:	b2da      	uxtb	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11c      	bne.n	8006072 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	78db      	ldrb	r3, [r3, #3]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 f8d9 	bl	80061f4 <RTC_ByteToBcd2>
 8006042:	4603      	mov	r3, r0
 8006044:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 f8d2 	bl	80061f4 <RTC_ByteToBcd2>
 8006050:	4603      	mov	r3, r0
 8006052:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006054:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	789b      	ldrb	r3, [r3, #2]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 f8ca 	bl	80061f4 <RTC_ByteToBcd2>
 8006060:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006062:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	e00e      	b.n	8006090 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	78db      	ldrb	r3, [r3, #3]
 8006076:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800607e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006084:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	22ca      	movs	r2, #202	@ 0xca
 8006096:	625a      	str	r2, [r3, #36]	@ 0x24
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2253      	movs	r2, #83	@ 0x53
 800609e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f84b 	bl	800613c <RTC_EnterInitMode>
 80060a6:	4603      	mov	r3, r0
 80060a8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80060aa:	7cfb      	ldrb	r3, [r7, #19]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10c      	bne.n	80060ca <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80060ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80060be:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f872 	bl	80061aa <RTC_ExitInitMode>
 80060c6:	4603      	mov	r3, r0
 80060c8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80060ca:	7cfb      	ldrb	r3, [r7, #19]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	22ff      	movs	r2, #255	@ 0xff
 80060dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	771a      	strb	r2, [r3, #28]

  return status;
 80060e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd90      	pop	{r4, r7, pc}
	...

080060f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a0d      	ldr	r2, [pc, #52]	@ (8006138 <HAL_RTC_WaitForSynchro+0x48>)
 8006102:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006104:	f7fc fff6 	bl	80030f4 <HAL_GetTick>
 8006108:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800610a:	e009      	b.n	8006120 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800610c:	f7fc fff2 	bl	80030f4 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800611a:	d901      	bls.n	8006120 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e007      	b.n	8006130 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0ee      	beq.n	800610c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	00017f5f 	.word	0x00017f5f

0800613c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d122      	bne.n	80061a0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006168:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800616a:	f7fc ffc3 	bl	80030f4 <HAL_GetTick>
 800616e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006170:	e00c      	b.n	800618c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006172:	f7fc ffbf 	bl	80030f4 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006180:	d904      	bls.n	800618c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2204      	movs	r2, #4
 8006186:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <RTC_EnterInitMode+0x64>
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d1e8      	bne.n	8006172 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061c4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff ff8b 	bl	80060f0 <HAL_RTC_WaitForSynchro>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2204      	movs	r2, #4
 80061e4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	4603      	mov	r3, r0
 80061fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006202:	e005      	b.n	8006210 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	3b0a      	subs	r3, #10
 800620e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	2b09      	cmp	r3, #9
 8006214:	d8f6      	bhi.n	8006204 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	b2da      	uxtb	r2, r3
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	4313      	orrs	r3, r2
 8006222:	b2db      	uxtb	r3, r3
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e09d      	b.n	800637e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d108      	bne.n	800625c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006252:	d009      	beq.n	8006268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	61da      	str	r2, [r3, #28]
 800625a:	e005      	b.n	8006268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fc fcca 	bl	8002c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800629e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062a8:	d902      	bls.n	80062b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	e002      	b.n	80062b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80062be:	d007      	beq.n	80062d0 <HAL_SPI_Init+0xa0>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062c8:	d002      	beq.n	80062d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006312:	ea42 0103 	orr.w	r1, r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	0c1b      	lsrs	r3, r3, #16
 800632c:	f003 0204 	and.w	r2, r3, #4
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006334:	f003 0310 	and.w	r3, r3, #16
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800634c:	ea42 0103 	orr.w	r1, r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69da      	ldr	r2, [r3, #28]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800636c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b088      	sub	sp, #32
 800638a:	af00      	add	r7, sp, #0
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	603b      	str	r3, [r7, #0]
 8006392:	4613      	mov	r3, r2
 8006394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_SPI_Transmit+0x22>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e15f      	b.n	8006668 <HAL_SPI_Transmit+0x2e2>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063b0:	f7fc fea0 	bl	80030f4 <HAL_GetTick>
 80063b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063b6:	88fb      	ldrh	r3, [r7, #6]
 80063b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d002      	beq.n	80063cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063c6:	2302      	movs	r3, #2
 80063c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ca:	e148      	b.n	800665e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_SPI_Transmit+0x52>
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d102      	bne.n	80063de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063dc:	e13f      	b.n	800665e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2203      	movs	r2, #3
 80063e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	88fa      	ldrh	r2, [r7, #6]
 80063f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	88fa      	ldrh	r2, [r7, #6]
 80063fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006428:	d10f      	bne.n	800644a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006438:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006448:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006454:	2b40      	cmp	r3, #64	@ 0x40
 8006456:	d007      	beq.n	8006468 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006466:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006470:	d94f      	bls.n	8006512 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_SPI_Transmit+0xfa>
 800647a:	8afb      	ldrh	r3, [r7, #22]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d142      	bne.n	8006506 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006484:	881a      	ldrh	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006490:	1c9a      	adds	r2, r3, #2
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064a4:	e02f      	b.n	8006506 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d112      	bne.n	80064da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b8:	881a      	ldrh	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064d8:	e015      	b.n	8006506 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064da:	f7fc fe0b 	bl	80030f4 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d803      	bhi.n	80064f2 <HAL_SPI_Transmit+0x16c>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d102      	bne.n	80064f8 <HAL_SPI_Transmit+0x172>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d106      	bne.n	8006506 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006504:	e0ab      	b.n	800665e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1ca      	bne.n	80064a6 <HAL_SPI_Transmit+0x120>
 8006510:	e080      	b.n	8006614 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_SPI_Transmit+0x19a>
 800651a:	8afb      	ldrh	r3, [r7, #22]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d174      	bne.n	800660a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b01      	cmp	r3, #1
 8006528:	d912      	bls.n	8006550 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	1c9a      	adds	r2, r3, #2
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b02      	subs	r3, #2
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800654e:	e05c      	b.n	800660a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	7812      	ldrb	r2, [r2, #0]
 800655c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006576:	e048      	b.n	800660a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b02      	cmp	r3, #2
 8006584:	d12b      	bne.n	80065de <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d912      	bls.n	80065b6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006594:	881a      	ldrh	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a0:	1c9a      	adds	r2, r3, #2
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b02      	subs	r3, #2
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065b4:	e029      	b.n	800660a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	7812      	ldrb	r2, [r2, #0]
 80065c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065dc:	e015      	b.n	800660a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065de:	f7fc fd89 	bl	80030f4 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d803      	bhi.n	80065f6 <HAL_SPI_Transmit+0x270>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f4:	d102      	bne.n	80065fc <HAL_SPI_Transmit+0x276>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d106      	bne.n	800660a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006608:	e029      	b.n	800665e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1b1      	bne.n	8006578 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f947 	bl	80068ac <SPI_EndRxTxTransaction>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e003      	b.n	800665e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006666:	7ffb      	ldrb	r3, [r7, #31]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3720      	adds	r7, #32
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	4613      	mov	r3, r2
 800667e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006680:	f7fc fd38 	bl	80030f4 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006688:	1a9b      	subs	r3, r3, r2
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	4413      	add	r3, r2
 800668e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006690:	f7fc fd30 	bl	80030f4 <HAL_GetTick>
 8006694:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006696:	4b39      	ldr	r3, [pc, #228]	@ (800677c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	015b      	lsls	r3, r3, #5
 800669c:	0d1b      	lsrs	r3, r3, #20
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	fb02 f303 	mul.w	r3, r2, r3
 80066a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066a6:	e054      	b.n	8006752 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d050      	beq.n	8006752 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066b0:	f7fc fd20 	bl	80030f4 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d902      	bls.n	80066c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d13d      	bne.n	8006742 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066de:	d111      	bne.n	8006704 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066e8:	d004      	beq.n	80066f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f2:	d107      	bne.n	8006704 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006702:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800670c:	d10f      	bne.n	800672e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800672c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e017      	b.n	8006772 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	3b01      	subs	r3, #1
 8006750:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4013      	ands	r3, r2
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	429a      	cmp	r2, r3
 8006760:	bf0c      	ite	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	2300      	movne	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	429a      	cmp	r2, r3
 800676e:	d19b      	bne.n	80066a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3720      	adds	r7, #32
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000014 	.word	0x20000014

08006780 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08a      	sub	sp, #40	@ 0x28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006792:	f7fc fcaf 	bl	80030f4 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679a:	1a9b      	subs	r3, r3, r2
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	4413      	add	r3, r2
 80067a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80067a2:	f7fc fca7 	bl	80030f4 <HAL_GetTick>
 80067a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80067b0:	4b3d      	ldr	r3, [pc, #244]	@ (80068a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	00da      	lsls	r2, r3, #3
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	0d1b      	lsrs	r3, r3, #20
 80067c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80067c8:	e060      	b.n	800688c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80067d0:	d107      	bne.n	80067e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d050      	beq.n	800688c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067ea:	f7fc fc83 	bl	80030f4 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d902      	bls.n	8006800 <SPI_WaitFifoStateUntilTimeout+0x80>
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d13d      	bne.n	800687c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800680e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006818:	d111      	bne.n	800683e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006822:	d004      	beq.n	800682e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800682c:	d107      	bne.n	800683e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800683c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006846:	d10f      	bne.n	8006868 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006866:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e010      	b.n	800689e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	3b01      	subs	r3, #1
 800688a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4013      	ands	r3, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	429a      	cmp	r2, r3
 800689a:	d196      	bne.n	80067ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3728      	adds	r7, #40	@ 0x28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000014 	.word	0x20000014

080068ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af02      	add	r7, sp, #8
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2200      	movs	r2, #0
 80068c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7ff ff5b 	bl	8006780 <SPI_WaitFifoStateUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d007      	beq.n	80068e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068d4:	f043 0220 	orr.w	r2, r3, #32
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e027      	b.n	8006930 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	2180      	movs	r1, #128	@ 0x80
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff fec0 	bl	8006670 <SPI_WaitFlagStateUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d007      	beq.n	8006906 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068fa:	f043 0220 	orr.w	r2, r3, #32
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e014      	b.n	8006930 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2200      	movs	r2, #0
 800690e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff ff34 	bl	8006780 <SPI_WaitFifoStateUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e000      	b.n	8006930 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e049      	b.n	80069de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d106      	bne.n	8006964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fc f9a0 	bl	8002ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f000 fa28 	bl	8006dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d020      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01b      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0202 	mvn.w	r2, #2
 8006a1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f9ad 	bl	8006d90 <HAL_TIM_IC_CaptureCallback>
 8006a36:	e005      	b.n	8006a44 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f99f 	bl	8006d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9b0 	bl	8006da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d020      	beq.n	8006a96 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01b      	beq.n	8006a96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f06f 0204 	mvn.w	r2, #4
 8006a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f987 	bl	8006d90 <HAL_TIM_IC_CaptureCallback>
 8006a82:	e005      	b.n	8006a90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f979 	bl	8006d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f98a 	bl	8006da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d020      	beq.n	8006ae2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01b      	beq.n	8006ae2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f06f 0208 	mvn.w	r2, #8
 8006ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2204      	movs	r2, #4
 8006ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	f003 0303 	and.w	r3, r3, #3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f961 	bl	8006d90 <HAL_TIM_IC_CaptureCallback>
 8006ace:	e005      	b.n	8006adc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f953 	bl	8006d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f964 	bl	8006da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d020      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f003 0310 	and.w	r3, r3, #16
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d01b      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f06f 0210 	mvn.w	r2, #16
 8006afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2208      	movs	r2, #8
 8006b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f93b 	bl	8006d90 <HAL_TIM_IC_CaptureCallback>
 8006b1a:	e005      	b.n	8006b28 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f92d 	bl	8006d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f93e 	bl	8006da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00c      	beq.n	8006b52 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d007      	beq.n	8006b52 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f06f 0201 	mvn.w	r2, #1
 8006b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7fb f94d 	bl	8001dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00c      	beq.n	8006b76 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d007      	beq.n	8006b76 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 faaf 	bl	80070d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00c      	beq.n	8006b9a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 faa7 	bl	80070e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00c      	beq.n	8006bbe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d007      	beq.n	8006bbe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f8fd 	bl	8006db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00c      	beq.n	8006be2 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f06f 0220 	mvn.w	r2, #32
 8006bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fa6f 	bl	80070c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_TIM_ConfigClockSource+0x1c>
 8006c02:	2302      	movs	r3, #2
 8006c04:	e0b6      	b.n	8006d74 <HAL_TIM_ConfigClockSource+0x18a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c24:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c30:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c42:	d03e      	beq.n	8006cc2 <HAL_TIM_ConfigClockSource+0xd8>
 8006c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c48:	f200 8087 	bhi.w	8006d5a <HAL_TIM_ConfigClockSource+0x170>
 8006c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c50:	f000 8086 	beq.w	8006d60 <HAL_TIM_ConfigClockSource+0x176>
 8006c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c58:	d87f      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x170>
 8006c5a:	2b70      	cmp	r3, #112	@ 0x70
 8006c5c:	d01a      	beq.n	8006c94 <HAL_TIM_ConfigClockSource+0xaa>
 8006c5e:	2b70      	cmp	r3, #112	@ 0x70
 8006c60:	d87b      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x170>
 8006c62:	2b60      	cmp	r3, #96	@ 0x60
 8006c64:	d050      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x11e>
 8006c66:	2b60      	cmp	r3, #96	@ 0x60
 8006c68:	d877      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x170>
 8006c6a:	2b50      	cmp	r3, #80	@ 0x50
 8006c6c:	d03c      	beq.n	8006ce8 <HAL_TIM_ConfigClockSource+0xfe>
 8006c6e:	2b50      	cmp	r3, #80	@ 0x50
 8006c70:	d873      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x170>
 8006c72:	2b40      	cmp	r3, #64	@ 0x40
 8006c74:	d058      	beq.n	8006d28 <HAL_TIM_ConfigClockSource+0x13e>
 8006c76:	2b40      	cmp	r3, #64	@ 0x40
 8006c78:	d86f      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x170>
 8006c7a:	2b30      	cmp	r3, #48	@ 0x30
 8006c7c:	d064      	beq.n	8006d48 <HAL_TIM_ConfigClockSource+0x15e>
 8006c7e:	2b30      	cmp	r3, #48	@ 0x30
 8006c80:	d86b      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x170>
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d060      	beq.n	8006d48 <HAL_TIM_ConfigClockSource+0x15e>
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d867      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x170>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d05c      	beq.n	8006d48 <HAL_TIM_ConfigClockSource+0x15e>
 8006c8e:	2b10      	cmp	r3, #16
 8006c90:	d05a      	beq.n	8006d48 <HAL_TIM_ConfigClockSource+0x15e>
 8006c92:	e062      	b.n	8006d5a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ca4:	f000 f986 	bl	8006fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006cb6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	609a      	str	r2, [r3, #8]
      break;
 8006cc0:	e04f      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cd2:	f000 f96f 	bl	8006fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ce4:	609a      	str	r2, [r3, #8]
      break;
 8006ce6:	e03c      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f000 f8e3 	bl	8006ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2150      	movs	r1, #80	@ 0x50
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 f93c 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 8006d06:	e02c      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d14:	461a      	mov	r2, r3
 8006d16:	f000 f902 	bl	8006f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2160      	movs	r1, #96	@ 0x60
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 f92c 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 8006d26:	e01c      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d34:	461a      	mov	r2, r3
 8006d36:	f000 f8c3 	bl	8006ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2140      	movs	r1, #64	@ 0x40
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 f91c 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 8006d46:	e00c      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f000 f913 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 8006d58:	e003      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5e:	e000      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a34      	ldr	r2, [pc, #208]	@ (8006eb0 <TIM_Base_SetConfig+0xe4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d003      	beq.n	8006dec <TIM_Base_SetConfig+0x20>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dea:	d108      	bne.n	8006dfe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a2b      	ldr	r2, [pc, #172]	@ (8006eb0 <TIM_Base_SetConfig+0xe4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00f      	beq.n	8006e26 <TIM_Base_SetConfig+0x5a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0c:	d00b      	beq.n	8006e26 <TIM_Base_SetConfig+0x5a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a28      	ldr	r2, [pc, #160]	@ (8006eb4 <TIM_Base_SetConfig+0xe8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d007      	beq.n	8006e26 <TIM_Base_SetConfig+0x5a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a27      	ldr	r2, [pc, #156]	@ (8006eb8 <TIM_Base_SetConfig+0xec>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_Base_SetConfig+0x5a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a26      	ldr	r2, [pc, #152]	@ (8006ebc <TIM_Base_SetConfig+0xf0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d108      	bne.n	8006e38 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a14      	ldr	r2, [pc, #80]	@ (8006eb0 <TIM_Base_SetConfig+0xe4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00b      	beq.n	8006e7c <TIM_Base_SetConfig+0xb0>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a13      	ldr	r2, [pc, #76]	@ (8006eb4 <TIM_Base_SetConfig+0xe8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d007      	beq.n	8006e7c <TIM_Base_SetConfig+0xb0>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a12      	ldr	r2, [pc, #72]	@ (8006eb8 <TIM_Base_SetConfig+0xec>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d003      	beq.n	8006e7c <TIM_Base_SetConfig+0xb0>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a11      	ldr	r2, [pc, #68]	@ (8006ebc <TIM_Base_SetConfig+0xf0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d103      	bne.n	8006e84 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d105      	bne.n	8006ea2 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f023 0201 	bic.w	r2, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	611a      	str	r2, [r3, #16]
  }
}
 8006ea2:	bf00      	nop
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40012c00 	.word	0x40012c00
 8006eb4:	40014000 	.word	0x40014000
 8006eb8:	40014400 	.word	0x40014400
 8006ebc:	40014800 	.word	0x40014800

08006ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f023 030a 	bic.w	r3, r3, #10
 8006efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	f023 0210 	bic.w	r2, r3, #16
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	031b      	lsls	r3, r3, #12
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f043 0307 	orr.w	r3, r3, #7
 8006fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	609a      	str	r2, [r3, #8]
}
 8006fa8:	bf00      	nop
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	021a      	lsls	r2, r3, #8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	609a      	str	r2, [r3, #8]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007004:	2b01      	cmp	r3, #1
 8007006:	d101      	bne.n	800700c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007008:	2302      	movs	r3, #2
 800700a:	e04f      	b.n	80070ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a21      	ldr	r2, [pc, #132]	@ (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d108      	bne.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800703c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4313      	orrs	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800704e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a14      	ldr	r2, [pc, #80]	@ (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d009      	beq.n	8007080 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007074:	d004      	beq.n	8007080 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a10      	ldr	r2, [pc, #64]	@ (80070bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d10c      	bne.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	4313      	orrs	r3, r2
 8007090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	40012c00 	.word	0x40012c00
 80070bc:	40014000 	.word	0x40014000

080070c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e040      	b.n	8007190 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fb fdf8 	bl	8002d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2224      	movs	r2, #36	@ 0x24
 8007128:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f95e 	bl	8007404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f825 	bl	8007198 <UART_SetConfig>
 800714e:	4603      	mov	r3, r0
 8007150:	2b01      	cmp	r3, #1
 8007152:	d101      	bne.n	8007158 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e01b      	b.n	8007190 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0201 	orr.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f9dd 	bl	8007548 <UART_CheckIdleState>
 800718e:	4603      	mov	r3, r0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4b8a      	ldr	r3, [pc, #552]	@ (80073ec <UART_SetConfig+0x254>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	6979      	ldr	r1, [r7, #20]
 80071cc:	430b      	orrs	r3, r1
 80071ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	430a      	orrs	r2, r1
 8007208:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a78      	ldr	r2, [pc, #480]	@ (80073f0 <UART_SetConfig+0x258>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d120      	bne.n	8007256 <UART_SetConfig+0xbe>
 8007214:	4b77      	ldr	r3, [pc, #476]	@ (80073f4 <UART_SetConfig+0x25c>)
 8007216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007218:	f003 0303 	and.w	r3, r3, #3
 800721c:	2b03      	cmp	r3, #3
 800721e:	d817      	bhi.n	8007250 <UART_SetConfig+0xb8>
 8007220:	a201      	add	r2, pc, #4	@ (adr r2, 8007228 <UART_SetConfig+0x90>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	08007239 	.word	0x08007239
 800722c:	08007245 	.word	0x08007245
 8007230:	0800724b 	.word	0x0800724b
 8007234:	0800723f 	.word	0x0800723f
 8007238:	2300      	movs	r3, #0
 800723a:	77fb      	strb	r3, [r7, #31]
 800723c:	e01d      	b.n	800727a <UART_SetConfig+0xe2>
 800723e:	2302      	movs	r3, #2
 8007240:	77fb      	strb	r3, [r7, #31]
 8007242:	e01a      	b.n	800727a <UART_SetConfig+0xe2>
 8007244:	2304      	movs	r3, #4
 8007246:	77fb      	strb	r3, [r7, #31]
 8007248:	e017      	b.n	800727a <UART_SetConfig+0xe2>
 800724a:	2308      	movs	r3, #8
 800724c:	77fb      	strb	r3, [r7, #31]
 800724e:	e014      	b.n	800727a <UART_SetConfig+0xe2>
 8007250:	2310      	movs	r3, #16
 8007252:	77fb      	strb	r3, [r7, #31]
 8007254:	e011      	b.n	800727a <UART_SetConfig+0xe2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a67      	ldr	r2, [pc, #412]	@ (80073f8 <UART_SetConfig+0x260>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d102      	bne.n	8007266 <UART_SetConfig+0xce>
 8007260:	2300      	movs	r3, #0
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	e009      	b.n	800727a <UART_SetConfig+0xe2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a64      	ldr	r2, [pc, #400]	@ (80073fc <UART_SetConfig+0x264>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d102      	bne.n	8007276 <UART_SetConfig+0xde>
 8007270:	2300      	movs	r3, #0
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e001      	b.n	800727a <UART_SetConfig+0xe2>
 8007276:	2310      	movs	r3, #16
 8007278:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007282:	d15a      	bne.n	800733a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007284:	7ffb      	ldrb	r3, [r7, #31]
 8007286:	2b08      	cmp	r3, #8
 8007288:	d827      	bhi.n	80072da <UART_SetConfig+0x142>
 800728a:	a201      	add	r2, pc, #4	@ (adr r2, 8007290 <UART_SetConfig+0xf8>)
 800728c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007290:	080072b5 	.word	0x080072b5
 8007294:	080072bd 	.word	0x080072bd
 8007298:	080072c5 	.word	0x080072c5
 800729c:	080072db 	.word	0x080072db
 80072a0:	080072cb 	.word	0x080072cb
 80072a4:	080072db 	.word	0x080072db
 80072a8:	080072db 	.word	0x080072db
 80072ac:	080072db 	.word	0x080072db
 80072b0:	080072d3 	.word	0x080072d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b4:	f7fe fba6 	bl	8005a04 <HAL_RCC_GetPCLK1Freq>
 80072b8:	61b8      	str	r0, [r7, #24]
        break;
 80072ba:	e013      	b.n	80072e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072bc:	f7fe fbc4 	bl	8005a48 <HAL_RCC_GetPCLK2Freq>
 80072c0:	61b8      	str	r0, [r7, #24]
        break;
 80072c2:	e00f      	b.n	80072e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072c4:	4b4e      	ldr	r3, [pc, #312]	@ (8007400 <UART_SetConfig+0x268>)
 80072c6:	61bb      	str	r3, [r7, #24]
        break;
 80072c8:	e00c      	b.n	80072e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ca:	f7fe fb3b 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 80072ce:	61b8      	str	r0, [r7, #24]
        break;
 80072d0:	e008      	b.n	80072e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072d6:	61bb      	str	r3, [r7, #24]
        break;
 80072d8:	e004      	b.n	80072e4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	77bb      	strb	r3, [r7, #30]
        break;
 80072e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d074      	beq.n	80073d4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	005a      	lsls	r2, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	441a      	add	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	2b0f      	cmp	r3, #15
 8007304:	d916      	bls.n	8007334 <UART_SetConfig+0x19c>
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800730c:	d212      	bcs.n	8007334 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	b29b      	uxth	r3, r3
 8007312:	f023 030f 	bic.w	r3, r3, #15
 8007316:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	b29b      	uxth	r3, r3
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	b29a      	uxth	r2, r3
 8007324:	89fb      	ldrh	r3, [r7, #14]
 8007326:	4313      	orrs	r3, r2
 8007328:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	89fa      	ldrh	r2, [r7, #14]
 8007330:	60da      	str	r2, [r3, #12]
 8007332:	e04f      	b.n	80073d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	77bb      	strb	r3, [r7, #30]
 8007338:	e04c      	b.n	80073d4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800733a:	7ffb      	ldrb	r3, [r7, #31]
 800733c:	2b08      	cmp	r3, #8
 800733e:	d828      	bhi.n	8007392 <UART_SetConfig+0x1fa>
 8007340:	a201      	add	r2, pc, #4	@ (adr r2, 8007348 <UART_SetConfig+0x1b0>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	0800736d 	.word	0x0800736d
 800734c:	08007375 	.word	0x08007375
 8007350:	0800737d 	.word	0x0800737d
 8007354:	08007393 	.word	0x08007393
 8007358:	08007383 	.word	0x08007383
 800735c:	08007393 	.word	0x08007393
 8007360:	08007393 	.word	0x08007393
 8007364:	08007393 	.word	0x08007393
 8007368:	0800738b 	.word	0x0800738b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800736c:	f7fe fb4a 	bl	8005a04 <HAL_RCC_GetPCLK1Freq>
 8007370:	61b8      	str	r0, [r7, #24]
        break;
 8007372:	e013      	b.n	800739c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007374:	f7fe fb68 	bl	8005a48 <HAL_RCC_GetPCLK2Freq>
 8007378:	61b8      	str	r0, [r7, #24]
        break;
 800737a:	e00f      	b.n	800739c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800737c:	4b20      	ldr	r3, [pc, #128]	@ (8007400 <UART_SetConfig+0x268>)
 800737e:	61bb      	str	r3, [r7, #24]
        break;
 8007380:	e00c      	b.n	800739c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007382:	f7fe fadf 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 8007386:	61b8      	str	r0, [r7, #24]
        break;
 8007388:	e008      	b.n	800739c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800738a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800738e:	61bb      	str	r3, [r7, #24]
        break;
 8007390:	e004      	b.n	800739c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	77bb      	strb	r3, [r7, #30]
        break;
 800739a:	bf00      	nop
    }

    if (pclk != 0U)
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d018      	beq.n	80073d4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	085a      	lsrs	r2, r3, #1
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	441a      	add	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b0f      	cmp	r3, #15
 80073ba:	d909      	bls.n	80073d0 <UART_SetConfig+0x238>
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073c2:	d205      	bcs.n	80073d0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60da      	str	r2, [r3, #12]
 80073ce:	e001      	b.n	80073d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80073e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3720      	adds	r7, #32
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	efff69f3 	.word	0xefff69f3
 80073f0:	40013800 	.word	0x40013800
 80073f4:	40021000 	.word	0x40021000
 80073f8:	40004400 	.word	0x40004400
 80073fc:	40004800 	.word	0x40004800
 8007400:	007a1200 	.word	0x007a1200

08007404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	f003 0308 	and.w	r3, r3, #8
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007498:	f003 0310 	and.w	r3, r3, #16
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ba:	f003 0320 	and.w	r3, r3, #32
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01a      	beq.n	800751a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007502:	d10a      	bne.n	800751a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	605a      	str	r2, [r3, #4]
  }
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b098      	sub	sp, #96	@ 0x60
 800754c:	af02      	add	r7, sp, #8
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007558:	f7fb fdcc 	bl	80030f4 <HAL_GetTick>
 800755c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b08      	cmp	r3, #8
 800756a:	d12e      	bne.n	80075ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800756c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007574:	2200      	movs	r2, #0
 8007576:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f88c 	bl	8007698 <UART_WaitOnFlagUntilTimeout>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d021      	beq.n	80075ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800759a:	653b      	str	r3, [r7, #80]	@ 0x50
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80075a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e6      	bne.n	8007586 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e062      	b.n	8007690 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d149      	bne.n	800766c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075e0:	2200      	movs	r2, #0
 80075e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f856 	bl	8007698 <UART_WaitOnFlagUntilTimeout>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d03c      	beq.n	800766c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	623b      	str	r3, [r7, #32]
   return(result);
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007610:	633b      	str	r3, [r7, #48]	@ 0x30
 8007612:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800761e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e6      	bne.n	80075f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3308      	adds	r3, #8
 800762a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	60fb      	str	r3, [r7, #12]
   return(result);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0301 	bic.w	r3, r3, #1
 800763a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3308      	adds	r3, #8
 8007642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007644:	61fa      	str	r2, [r7, #28]
 8007646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	69b9      	ldr	r1, [r7, #24]
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	617b      	str	r3, [r7, #20]
   return(result);
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e5      	bne.n	8007624 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e011      	b.n	8007690 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2220      	movs	r2, #32
 8007670:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2220      	movs	r2, #32
 8007676:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3758      	adds	r7, #88	@ 0x58
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	4613      	mov	r3, r2
 80076a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a8:	e04f      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b0:	d04b      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076b2:	f7fb fd1f 	bl	80030f4 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d302      	bcc.n	80076c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e04e      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d037      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0xb2>
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b80      	cmp	r3, #128	@ 0x80
 80076de:	d034      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0xb2>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b40      	cmp	r3, #64	@ 0x40
 80076e4:	d031      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d110      	bne.n	8007716 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2208      	movs	r2, #8
 80076fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f838 	bl	8007772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2208      	movs	r2, #8
 8007706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e029      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007724:	d111      	bne.n	800774a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800772e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f81e 	bl	8007772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2220      	movs	r2, #32
 800773a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e00f      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4013      	ands	r3, r2
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	429a      	cmp	r2, r3
 8007758:	bf0c      	ite	eq
 800775a:	2301      	moveq	r3, #1
 800775c:	2300      	movne	r3, #0
 800775e:	b2db      	uxtb	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	429a      	cmp	r2, r3
 8007766:	d0a0      	beq.n	80076aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007772:	b480      	push	{r7}
 8007774:	b095      	sub	sp, #84	@ 0x54
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800778e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007798:	643b      	str	r3, [r7, #64]	@ 0x40
 800779a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800779e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e6      	bne.n	800777a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3308      	adds	r3, #8
 80077ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e5      	bne.n	80077ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d118      	bne.n	800781a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f023 0310 	bic.w	r3, r3, #16
 80077fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007806:	61bb      	str	r3, [r7, #24]
 8007808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6979      	ldr	r1, [r7, #20]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	613b      	str	r3, [r7, #16]
   return(result);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e6      	bne.n	80077e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800782e:	bf00      	nop
 8007830:	3754      	adds	r7, #84	@ 0x54
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <__cvt>:
 800783a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800783e:	ec57 6b10 	vmov	r6, r7, d0
 8007842:	2f00      	cmp	r7, #0
 8007844:	460c      	mov	r4, r1
 8007846:	4619      	mov	r1, r3
 8007848:	463b      	mov	r3, r7
 800784a:	bfbb      	ittet	lt
 800784c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007850:	461f      	movlt	r7, r3
 8007852:	2300      	movge	r3, #0
 8007854:	232d      	movlt	r3, #45	@ 0x2d
 8007856:	700b      	strb	r3, [r1, #0]
 8007858:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800785a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800785e:	4691      	mov	r9, r2
 8007860:	f023 0820 	bic.w	r8, r3, #32
 8007864:	bfbc      	itt	lt
 8007866:	4632      	movlt	r2, r6
 8007868:	4616      	movlt	r6, r2
 800786a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800786e:	d005      	beq.n	800787c <__cvt+0x42>
 8007870:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007874:	d100      	bne.n	8007878 <__cvt+0x3e>
 8007876:	3401      	adds	r4, #1
 8007878:	2102      	movs	r1, #2
 800787a:	e000      	b.n	800787e <__cvt+0x44>
 800787c:	2103      	movs	r1, #3
 800787e:	ab03      	add	r3, sp, #12
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	ab02      	add	r3, sp, #8
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	ec47 6b10 	vmov	d0, r6, r7
 800788a:	4653      	mov	r3, sl
 800788c:	4622      	mov	r2, r4
 800788e:	f000 fe37 	bl	8008500 <_dtoa_r>
 8007892:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007896:	4605      	mov	r5, r0
 8007898:	d119      	bne.n	80078ce <__cvt+0x94>
 800789a:	f019 0f01 	tst.w	r9, #1
 800789e:	d00e      	beq.n	80078be <__cvt+0x84>
 80078a0:	eb00 0904 	add.w	r9, r0, r4
 80078a4:	2200      	movs	r2, #0
 80078a6:	2300      	movs	r3, #0
 80078a8:	4630      	mov	r0, r6
 80078aa:	4639      	mov	r1, r7
 80078ac:	f7f9 f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 80078b0:	b108      	cbz	r0, 80078b6 <__cvt+0x7c>
 80078b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80078b6:	2230      	movs	r2, #48	@ 0x30
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	454b      	cmp	r3, r9
 80078bc:	d31e      	bcc.n	80078fc <__cvt+0xc2>
 80078be:	9b03      	ldr	r3, [sp, #12]
 80078c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078c2:	1b5b      	subs	r3, r3, r5
 80078c4:	4628      	mov	r0, r5
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	b004      	add	sp, #16
 80078ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078d2:	eb00 0904 	add.w	r9, r0, r4
 80078d6:	d1e5      	bne.n	80078a4 <__cvt+0x6a>
 80078d8:	7803      	ldrb	r3, [r0, #0]
 80078da:	2b30      	cmp	r3, #48	@ 0x30
 80078dc:	d10a      	bne.n	80078f4 <__cvt+0xba>
 80078de:	2200      	movs	r2, #0
 80078e0:	2300      	movs	r3, #0
 80078e2:	4630      	mov	r0, r6
 80078e4:	4639      	mov	r1, r7
 80078e6:	f7f9 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80078ea:	b918      	cbnz	r0, 80078f4 <__cvt+0xba>
 80078ec:	f1c4 0401 	rsb	r4, r4, #1
 80078f0:	f8ca 4000 	str.w	r4, [sl]
 80078f4:	f8da 3000 	ldr.w	r3, [sl]
 80078f8:	4499      	add	r9, r3
 80078fa:	e7d3      	b.n	80078a4 <__cvt+0x6a>
 80078fc:	1c59      	adds	r1, r3, #1
 80078fe:	9103      	str	r1, [sp, #12]
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	e7d9      	b.n	80078b8 <__cvt+0x7e>

08007904 <__exponent>:
 8007904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007906:	2900      	cmp	r1, #0
 8007908:	bfba      	itte	lt
 800790a:	4249      	neglt	r1, r1
 800790c:	232d      	movlt	r3, #45	@ 0x2d
 800790e:	232b      	movge	r3, #43	@ 0x2b
 8007910:	2909      	cmp	r1, #9
 8007912:	7002      	strb	r2, [r0, #0]
 8007914:	7043      	strb	r3, [r0, #1]
 8007916:	dd29      	ble.n	800796c <__exponent+0x68>
 8007918:	f10d 0307 	add.w	r3, sp, #7
 800791c:	461d      	mov	r5, r3
 800791e:	270a      	movs	r7, #10
 8007920:	461a      	mov	r2, r3
 8007922:	fbb1 f6f7 	udiv	r6, r1, r7
 8007926:	fb07 1416 	mls	r4, r7, r6, r1
 800792a:	3430      	adds	r4, #48	@ 0x30
 800792c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007930:	460c      	mov	r4, r1
 8007932:	2c63      	cmp	r4, #99	@ 0x63
 8007934:	f103 33ff 	add.w	r3, r3, #4294967295
 8007938:	4631      	mov	r1, r6
 800793a:	dcf1      	bgt.n	8007920 <__exponent+0x1c>
 800793c:	3130      	adds	r1, #48	@ 0x30
 800793e:	1e94      	subs	r4, r2, #2
 8007940:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007944:	1c41      	adds	r1, r0, #1
 8007946:	4623      	mov	r3, r4
 8007948:	42ab      	cmp	r3, r5
 800794a:	d30a      	bcc.n	8007962 <__exponent+0x5e>
 800794c:	f10d 0309 	add.w	r3, sp, #9
 8007950:	1a9b      	subs	r3, r3, r2
 8007952:	42ac      	cmp	r4, r5
 8007954:	bf88      	it	hi
 8007956:	2300      	movhi	r3, #0
 8007958:	3302      	adds	r3, #2
 800795a:	4403      	add	r3, r0
 800795c:	1a18      	subs	r0, r3, r0
 800795e:	b003      	add	sp, #12
 8007960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007962:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007966:	f801 6f01 	strb.w	r6, [r1, #1]!
 800796a:	e7ed      	b.n	8007948 <__exponent+0x44>
 800796c:	2330      	movs	r3, #48	@ 0x30
 800796e:	3130      	adds	r1, #48	@ 0x30
 8007970:	7083      	strb	r3, [r0, #2]
 8007972:	70c1      	strb	r1, [r0, #3]
 8007974:	1d03      	adds	r3, r0, #4
 8007976:	e7f1      	b.n	800795c <__exponent+0x58>

08007978 <_printf_float>:
 8007978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	b08d      	sub	sp, #52	@ 0x34
 800797e:	460c      	mov	r4, r1
 8007980:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007984:	4616      	mov	r6, r2
 8007986:	461f      	mov	r7, r3
 8007988:	4605      	mov	r5, r0
 800798a:	f000 fcb9 	bl	8008300 <_localeconv_r>
 800798e:	6803      	ldr	r3, [r0, #0]
 8007990:	9304      	str	r3, [sp, #16]
 8007992:	4618      	mov	r0, r3
 8007994:	f7f8 fc6c 	bl	8000270 <strlen>
 8007998:	2300      	movs	r3, #0
 800799a:	930a      	str	r3, [sp, #40]	@ 0x28
 800799c:	f8d8 3000 	ldr.w	r3, [r8]
 80079a0:	9005      	str	r0, [sp, #20]
 80079a2:	3307      	adds	r3, #7
 80079a4:	f023 0307 	bic.w	r3, r3, #7
 80079a8:	f103 0208 	add.w	r2, r3, #8
 80079ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80079b0:	f8d4 b000 	ldr.w	fp, [r4]
 80079b4:	f8c8 2000 	str.w	r2, [r8]
 80079b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80079c0:	9307      	str	r3, [sp, #28]
 80079c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80079c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80079ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ce:	4b9c      	ldr	r3, [pc, #624]	@ (8007c40 <_printf_float+0x2c8>)
 80079d0:	f04f 32ff 	mov.w	r2, #4294967295
 80079d4:	f7f9 f8aa 	bl	8000b2c <__aeabi_dcmpun>
 80079d8:	bb70      	cbnz	r0, 8007a38 <_printf_float+0xc0>
 80079da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079de:	4b98      	ldr	r3, [pc, #608]	@ (8007c40 <_printf_float+0x2c8>)
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295
 80079e4:	f7f9 f884 	bl	8000af0 <__aeabi_dcmple>
 80079e8:	bb30      	cbnz	r0, 8007a38 <_printf_float+0xc0>
 80079ea:	2200      	movs	r2, #0
 80079ec:	2300      	movs	r3, #0
 80079ee:	4640      	mov	r0, r8
 80079f0:	4649      	mov	r1, r9
 80079f2:	f7f9 f873 	bl	8000adc <__aeabi_dcmplt>
 80079f6:	b110      	cbz	r0, 80079fe <_printf_float+0x86>
 80079f8:	232d      	movs	r3, #45	@ 0x2d
 80079fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079fe:	4a91      	ldr	r2, [pc, #580]	@ (8007c44 <_printf_float+0x2cc>)
 8007a00:	4b91      	ldr	r3, [pc, #580]	@ (8007c48 <_printf_float+0x2d0>)
 8007a02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007a06:	bf8c      	ite	hi
 8007a08:	4690      	movhi	r8, r2
 8007a0a:	4698      	movls	r8, r3
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	6123      	str	r3, [r4, #16]
 8007a10:	f02b 0304 	bic.w	r3, fp, #4
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	f04f 0900 	mov.w	r9, #0
 8007a1a:	9700      	str	r7, [sp, #0]
 8007a1c:	4633      	mov	r3, r6
 8007a1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007a20:	4621      	mov	r1, r4
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 f9d2 	bl	8007dcc <_printf_common>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f040 808d 	bne.w	8007b48 <_printf_float+0x1d0>
 8007a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a32:	b00d      	add	sp, #52	@ 0x34
 8007a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a38:	4642      	mov	r2, r8
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	4649      	mov	r1, r9
 8007a40:	f7f9 f874 	bl	8000b2c <__aeabi_dcmpun>
 8007a44:	b140      	cbz	r0, 8007a58 <_printf_float+0xe0>
 8007a46:	464b      	mov	r3, r9
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	bfbc      	itt	lt
 8007a4c:	232d      	movlt	r3, #45	@ 0x2d
 8007a4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a52:	4a7e      	ldr	r2, [pc, #504]	@ (8007c4c <_printf_float+0x2d4>)
 8007a54:	4b7e      	ldr	r3, [pc, #504]	@ (8007c50 <_printf_float+0x2d8>)
 8007a56:	e7d4      	b.n	8007a02 <_printf_float+0x8a>
 8007a58:	6863      	ldr	r3, [r4, #4]
 8007a5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a5e:	9206      	str	r2, [sp, #24]
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	d13b      	bne.n	8007adc <_printf_float+0x164>
 8007a64:	2306      	movs	r3, #6
 8007a66:	6063      	str	r3, [r4, #4]
 8007a68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	6022      	str	r2, [r4, #0]
 8007a70:	9303      	str	r3, [sp, #12]
 8007a72:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a74:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a78:	ab09      	add	r3, sp, #36	@ 0x24
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	ec49 8b10 	vmov	d0, r8, r9
 8007a82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a86:	4628      	mov	r0, r5
 8007a88:	f7ff fed7 	bl	800783a <__cvt>
 8007a8c:	9b06      	ldr	r3, [sp, #24]
 8007a8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a90:	2b47      	cmp	r3, #71	@ 0x47
 8007a92:	4680      	mov	r8, r0
 8007a94:	d129      	bne.n	8007aea <_printf_float+0x172>
 8007a96:	1cc8      	adds	r0, r1, #3
 8007a98:	db02      	blt.n	8007aa0 <_printf_float+0x128>
 8007a9a:	6863      	ldr	r3, [r4, #4]
 8007a9c:	4299      	cmp	r1, r3
 8007a9e:	dd41      	ble.n	8007b24 <_printf_float+0x1ac>
 8007aa0:	f1aa 0a02 	sub.w	sl, sl, #2
 8007aa4:	fa5f fa8a 	uxtb.w	sl, sl
 8007aa8:	3901      	subs	r1, #1
 8007aaa:	4652      	mov	r2, sl
 8007aac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ab0:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ab2:	f7ff ff27 	bl	8007904 <__exponent>
 8007ab6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ab8:	1813      	adds	r3, r2, r0
 8007aba:	2a01      	cmp	r2, #1
 8007abc:	4681      	mov	r9, r0
 8007abe:	6123      	str	r3, [r4, #16]
 8007ac0:	dc02      	bgt.n	8007ac8 <_printf_float+0x150>
 8007ac2:	6822      	ldr	r2, [r4, #0]
 8007ac4:	07d2      	lsls	r2, r2, #31
 8007ac6:	d501      	bpl.n	8007acc <_printf_float+0x154>
 8007ac8:	3301      	adds	r3, #1
 8007aca:	6123      	str	r3, [r4, #16]
 8007acc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0a2      	beq.n	8007a1a <_printf_float+0xa2>
 8007ad4:	232d      	movs	r3, #45	@ 0x2d
 8007ad6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ada:	e79e      	b.n	8007a1a <_printf_float+0xa2>
 8007adc:	9a06      	ldr	r2, [sp, #24]
 8007ade:	2a47      	cmp	r2, #71	@ 0x47
 8007ae0:	d1c2      	bne.n	8007a68 <_printf_float+0xf0>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1c0      	bne.n	8007a68 <_printf_float+0xf0>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e7bd      	b.n	8007a66 <_printf_float+0xee>
 8007aea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007aee:	d9db      	bls.n	8007aa8 <_printf_float+0x130>
 8007af0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007af4:	d118      	bne.n	8007b28 <_printf_float+0x1b0>
 8007af6:	2900      	cmp	r1, #0
 8007af8:	6863      	ldr	r3, [r4, #4]
 8007afa:	dd0b      	ble.n	8007b14 <_printf_float+0x19c>
 8007afc:	6121      	str	r1, [r4, #16]
 8007afe:	b913      	cbnz	r3, 8007b06 <_printf_float+0x18e>
 8007b00:	6822      	ldr	r2, [r4, #0]
 8007b02:	07d0      	lsls	r0, r2, #31
 8007b04:	d502      	bpl.n	8007b0c <_printf_float+0x194>
 8007b06:	3301      	adds	r3, #1
 8007b08:	440b      	add	r3, r1
 8007b0a:	6123      	str	r3, [r4, #16]
 8007b0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007b0e:	f04f 0900 	mov.w	r9, #0
 8007b12:	e7db      	b.n	8007acc <_printf_float+0x154>
 8007b14:	b913      	cbnz	r3, 8007b1c <_printf_float+0x1a4>
 8007b16:	6822      	ldr	r2, [r4, #0]
 8007b18:	07d2      	lsls	r2, r2, #31
 8007b1a:	d501      	bpl.n	8007b20 <_printf_float+0x1a8>
 8007b1c:	3302      	adds	r3, #2
 8007b1e:	e7f4      	b.n	8007b0a <_printf_float+0x192>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e7f2      	b.n	8007b0a <_printf_float+0x192>
 8007b24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b2a:	4299      	cmp	r1, r3
 8007b2c:	db05      	blt.n	8007b3a <_printf_float+0x1c2>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	6121      	str	r1, [r4, #16]
 8007b32:	07d8      	lsls	r0, r3, #31
 8007b34:	d5ea      	bpl.n	8007b0c <_printf_float+0x194>
 8007b36:	1c4b      	adds	r3, r1, #1
 8007b38:	e7e7      	b.n	8007b0a <_printf_float+0x192>
 8007b3a:	2900      	cmp	r1, #0
 8007b3c:	bfd4      	ite	le
 8007b3e:	f1c1 0202 	rsble	r2, r1, #2
 8007b42:	2201      	movgt	r2, #1
 8007b44:	4413      	add	r3, r2
 8007b46:	e7e0      	b.n	8007b0a <_printf_float+0x192>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	055a      	lsls	r2, r3, #21
 8007b4c:	d407      	bmi.n	8007b5e <_printf_float+0x1e6>
 8007b4e:	6923      	ldr	r3, [r4, #16]
 8007b50:	4642      	mov	r2, r8
 8007b52:	4631      	mov	r1, r6
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d12b      	bne.n	8007bb4 <_printf_float+0x23c>
 8007b5c:	e767      	b.n	8007a2e <_printf_float+0xb6>
 8007b5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b62:	f240 80dd 	bls.w	8007d20 <_printf_float+0x3a8>
 8007b66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f7f8 ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d033      	beq.n	8007bde <_printf_float+0x266>
 8007b76:	4a37      	ldr	r2, [pc, #220]	@ (8007c54 <_printf_float+0x2dc>)
 8007b78:	2301      	movs	r3, #1
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	47b8      	blx	r7
 8007b80:	3001      	adds	r0, #1
 8007b82:	f43f af54 	beq.w	8007a2e <_printf_float+0xb6>
 8007b86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b8a:	4543      	cmp	r3, r8
 8007b8c:	db02      	blt.n	8007b94 <_printf_float+0x21c>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	07d8      	lsls	r0, r3, #31
 8007b92:	d50f      	bpl.n	8007bb4 <_printf_float+0x23c>
 8007b94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f43f af45 	beq.w	8007a2e <_printf_float+0xb6>
 8007ba4:	f04f 0900 	mov.w	r9, #0
 8007ba8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bac:	f104 0a1a 	add.w	sl, r4, #26
 8007bb0:	45c8      	cmp	r8, r9
 8007bb2:	dc09      	bgt.n	8007bc8 <_printf_float+0x250>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	079b      	lsls	r3, r3, #30
 8007bb8:	f100 8103 	bmi.w	8007dc2 <_printf_float+0x44a>
 8007bbc:	68e0      	ldr	r0, [r4, #12]
 8007bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bc0:	4298      	cmp	r0, r3
 8007bc2:	bfb8      	it	lt
 8007bc4:	4618      	movlt	r0, r3
 8007bc6:	e734      	b.n	8007a32 <_printf_float+0xba>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4652      	mov	r2, sl
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4628      	mov	r0, r5
 8007bd0:	47b8      	blx	r7
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	f43f af2b 	beq.w	8007a2e <_printf_float+0xb6>
 8007bd8:	f109 0901 	add.w	r9, r9, #1
 8007bdc:	e7e8      	b.n	8007bb0 <_printf_float+0x238>
 8007bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	dc39      	bgt.n	8007c58 <_printf_float+0x2e0>
 8007be4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c54 <_printf_float+0x2dc>)
 8007be6:	2301      	movs	r3, #1
 8007be8:	4631      	mov	r1, r6
 8007bea:	4628      	mov	r0, r5
 8007bec:	47b8      	blx	r7
 8007bee:	3001      	adds	r0, #1
 8007bf0:	f43f af1d 	beq.w	8007a2e <_printf_float+0xb6>
 8007bf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007bf8:	ea59 0303 	orrs.w	r3, r9, r3
 8007bfc:	d102      	bne.n	8007c04 <_printf_float+0x28c>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	07d9      	lsls	r1, r3, #31
 8007c02:	d5d7      	bpl.n	8007bb4 <_printf_float+0x23c>
 8007c04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c08:	4631      	mov	r1, r6
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	47b8      	blx	r7
 8007c0e:	3001      	adds	r0, #1
 8007c10:	f43f af0d 	beq.w	8007a2e <_printf_float+0xb6>
 8007c14:	f04f 0a00 	mov.w	sl, #0
 8007c18:	f104 0b1a 	add.w	fp, r4, #26
 8007c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c1e:	425b      	negs	r3, r3
 8007c20:	4553      	cmp	r3, sl
 8007c22:	dc01      	bgt.n	8007c28 <_printf_float+0x2b0>
 8007c24:	464b      	mov	r3, r9
 8007c26:	e793      	b.n	8007b50 <_printf_float+0x1d8>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	465a      	mov	r2, fp
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4628      	mov	r0, r5
 8007c30:	47b8      	blx	r7
 8007c32:	3001      	adds	r0, #1
 8007c34:	f43f aefb 	beq.w	8007a2e <_printf_float+0xb6>
 8007c38:	f10a 0a01 	add.w	sl, sl, #1
 8007c3c:	e7ee      	b.n	8007c1c <_printf_float+0x2a4>
 8007c3e:	bf00      	nop
 8007c40:	7fefffff 	.word	0x7fefffff
 8007c44:	0800a9f8 	.word	0x0800a9f8
 8007c48:	0800a9f4 	.word	0x0800a9f4
 8007c4c:	0800aa00 	.word	0x0800aa00
 8007c50:	0800a9fc 	.word	0x0800a9fc
 8007c54:	0800aa04 	.word	0x0800aa04
 8007c58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c5e:	4553      	cmp	r3, sl
 8007c60:	bfa8      	it	ge
 8007c62:	4653      	movge	r3, sl
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	4699      	mov	r9, r3
 8007c68:	dc36      	bgt.n	8007cd8 <_printf_float+0x360>
 8007c6a:	f04f 0b00 	mov.w	fp, #0
 8007c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c72:	f104 021a 	add.w	r2, r4, #26
 8007c76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c78:	9306      	str	r3, [sp, #24]
 8007c7a:	eba3 0309 	sub.w	r3, r3, r9
 8007c7e:	455b      	cmp	r3, fp
 8007c80:	dc31      	bgt.n	8007ce6 <_printf_float+0x36e>
 8007c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c84:	459a      	cmp	sl, r3
 8007c86:	dc3a      	bgt.n	8007cfe <_printf_float+0x386>
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	07da      	lsls	r2, r3, #31
 8007c8c:	d437      	bmi.n	8007cfe <_printf_float+0x386>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c90:	ebaa 0903 	sub.w	r9, sl, r3
 8007c94:	9b06      	ldr	r3, [sp, #24]
 8007c96:	ebaa 0303 	sub.w	r3, sl, r3
 8007c9a:	4599      	cmp	r9, r3
 8007c9c:	bfa8      	it	ge
 8007c9e:	4699      	movge	r9, r3
 8007ca0:	f1b9 0f00 	cmp.w	r9, #0
 8007ca4:	dc33      	bgt.n	8007d0e <_printf_float+0x396>
 8007ca6:	f04f 0800 	mov.w	r8, #0
 8007caa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cae:	f104 0b1a 	add.w	fp, r4, #26
 8007cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb4:	ebaa 0303 	sub.w	r3, sl, r3
 8007cb8:	eba3 0309 	sub.w	r3, r3, r9
 8007cbc:	4543      	cmp	r3, r8
 8007cbe:	f77f af79 	ble.w	8007bb4 <_printf_float+0x23c>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	465a      	mov	r2, fp
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b8      	blx	r7
 8007ccc:	3001      	adds	r0, #1
 8007cce:	f43f aeae 	beq.w	8007a2e <_printf_float+0xb6>
 8007cd2:	f108 0801 	add.w	r8, r8, #1
 8007cd6:	e7ec      	b.n	8007cb2 <_printf_float+0x33a>
 8007cd8:	4642      	mov	r2, r8
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b8      	blx	r7
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d1c2      	bne.n	8007c6a <_printf_float+0x2f2>
 8007ce4:	e6a3      	b.n	8007a2e <_printf_float+0xb6>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4628      	mov	r0, r5
 8007cec:	9206      	str	r2, [sp, #24]
 8007cee:	47b8      	blx	r7
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	f43f ae9c 	beq.w	8007a2e <_printf_float+0xb6>
 8007cf6:	9a06      	ldr	r2, [sp, #24]
 8007cf8:	f10b 0b01 	add.w	fp, fp, #1
 8007cfc:	e7bb      	b.n	8007c76 <_printf_float+0x2fe>
 8007cfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d02:	4631      	mov	r1, r6
 8007d04:	4628      	mov	r0, r5
 8007d06:	47b8      	blx	r7
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d1c0      	bne.n	8007c8e <_printf_float+0x316>
 8007d0c:	e68f      	b.n	8007a2e <_printf_float+0xb6>
 8007d0e:	9a06      	ldr	r2, [sp, #24]
 8007d10:	464b      	mov	r3, r9
 8007d12:	4442      	add	r2, r8
 8007d14:	4631      	mov	r1, r6
 8007d16:	4628      	mov	r0, r5
 8007d18:	47b8      	blx	r7
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	d1c3      	bne.n	8007ca6 <_printf_float+0x32e>
 8007d1e:	e686      	b.n	8007a2e <_printf_float+0xb6>
 8007d20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d24:	f1ba 0f01 	cmp.w	sl, #1
 8007d28:	dc01      	bgt.n	8007d2e <_printf_float+0x3b6>
 8007d2a:	07db      	lsls	r3, r3, #31
 8007d2c:	d536      	bpl.n	8007d9c <_printf_float+0x424>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4642      	mov	r2, r8
 8007d32:	4631      	mov	r1, r6
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b8      	blx	r7
 8007d38:	3001      	adds	r0, #1
 8007d3a:	f43f ae78 	beq.w	8007a2e <_printf_float+0xb6>
 8007d3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d42:	4631      	mov	r1, r6
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b8      	blx	r7
 8007d48:	3001      	adds	r0, #1
 8007d4a:	f43f ae70 	beq.w	8007a2e <_printf_float+0xb6>
 8007d4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d52:	2200      	movs	r2, #0
 8007d54:	2300      	movs	r3, #0
 8007d56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d5a:	f7f8 feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d5e:	b9c0      	cbnz	r0, 8007d92 <_printf_float+0x41a>
 8007d60:	4653      	mov	r3, sl
 8007d62:	f108 0201 	add.w	r2, r8, #1
 8007d66:	4631      	mov	r1, r6
 8007d68:	4628      	mov	r0, r5
 8007d6a:	47b8      	blx	r7
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d10c      	bne.n	8007d8a <_printf_float+0x412>
 8007d70:	e65d      	b.n	8007a2e <_printf_float+0xb6>
 8007d72:	2301      	movs	r3, #1
 8007d74:	465a      	mov	r2, fp
 8007d76:	4631      	mov	r1, r6
 8007d78:	4628      	mov	r0, r5
 8007d7a:	47b8      	blx	r7
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	f43f ae56 	beq.w	8007a2e <_printf_float+0xb6>
 8007d82:	f108 0801 	add.w	r8, r8, #1
 8007d86:	45d0      	cmp	r8, sl
 8007d88:	dbf3      	blt.n	8007d72 <_printf_float+0x3fa>
 8007d8a:	464b      	mov	r3, r9
 8007d8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d90:	e6df      	b.n	8007b52 <_printf_float+0x1da>
 8007d92:	f04f 0800 	mov.w	r8, #0
 8007d96:	f104 0b1a 	add.w	fp, r4, #26
 8007d9a:	e7f4      	b.n	8007d86 <_printf_float+0x40e>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4642      	mov	r2, r8
 8007da0:	e7e1      	b.n	8007d66 <_printf_float+0x3ee>
 8007da2:	2301      	movs	r3, #1
 8007da4:	464a      	mov	r2, r9
 8007da6:	4631      	mov	r1, r6
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b8      	blx	r7
 8007dac:	3001      	adds	r0, #1
 8007dae:	f43f ae3e 	beq.w	8007a2e <_printf_float+0xb6>
 8007db2:	f108 0801 	add.w	r8, r8, #1
 8007db6:	68e3      	ldr	r3, [r4, #12]
 8007db8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007dba:	1a5b      	subs	r3, r3, r1
 8007dbc:	4543      	cmp	r3, r8
 8007dbe:	dcf0      	bgt.n	8007da2 <_printf_float+0x42a>
 8007dc0:	e6fc      	b.n	8007bbc <_printf_float+0x244>
 8007dc2:	f04f 0800 	mov.w	r8, #0
 8007dc6:	f104 0919 	add.w	r9, r4, #25
 8007dca:	e7f4      	b.n	8007db6 <_printf_float+0x43e>

08007dcc <_printf_common>:
 8007dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	4616      	mov	r6, r2
 8007dd2:	4698      	mov	r8, r3
 8007dd4:	688a      	ldr	r2, [r1, #8]
 8007dd6:	690b      	ldr	r3, [r1, #16]
 8007dd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	bfb8      	it	lt
 8007de0:	4613      	movlt	r3, r2
 8007de2:	6033      	str	r3, [r6, #0]
 8007de4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007de8:	4607      	mov	r7, r0
 8007dea:	460c      	mov	r4, r1
 8007dec:	b10a      	cbz	r2, 8007df2 <_printf_common+0x26>
 8007dee:	3301      	adds	r3, #1
 8007df0:	6033      	str	r3, [r6, #0]
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	0699      	lsls	r1, r3, #26
 8007df6:	bf42      	ittt	mi
 8007df8:	6833      	ldrmi	r3, [r6, #0]
 8007dfa:	3302      	addmi	r3, #2
 8007dfc:	6033      	strmi	r3, [r6, #0]
 8007dfe:	6825      	ldr	r5, [r4, #0]
 8007e00:	f015 0506 	ands.w	r5, r5, #6
 8007e04:	d106      	bne.n	8007e14 <_printf_common+0x48>
 8007e06:	f104 0a19 	add.w	sl, r4, #25
 8007e0a:	68e3      	ldr	r3, [r4, #12]
 8007e0c:	6832      	ldr	r2, [r6, #0]
 8007e0e:	1a9b      	subs	r3, r3, r2
 8007e10:	42ab      	cmp	r3, r5
 8007e12:	dc26      	bgt.n	8007e62 <_printf_common+0x96>
 8007e14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	3b00      	subs	r3, #0
 8007e1c:	bf18      	it	ne
 8007e1e:	2301      	movne	r3, #1
 8007e20:	0692      	lsls	r2, r2, #26
 8007e22:	d42b      	bmi.n	8007e7c <_printf_common+0xb0>
 8007e24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e28:	4641      	mov	r1, r8
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	47c8      	blx	r9
 8007e2e:	3001      	adds	r0, #1
 8007e30:	d01e      	beq.n	8007e70 <_printf_common+0xa4>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	6922      	ldr	r2, [r4, #16]
 8007e36:	f003 0306 	and.w	r3, r3, #6
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	bf02      	ittt	eq
 8007e3e:	68e5      	ldreq	r5, [r4, #12]
 8007e40:	6833      	ldreq	r3, [r6, #0]
 8007e42:	1aed      	subeq	r5, r5, r3
 8007e44:	68a3      	ldr	r3, [r4, #8]
 8007e46:	bf0c      	ite	eq
 8007e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e4c:	2500      	movne	r5, #0
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	bfc4      	itt	gt
 8007e52:	1a9b      	subgt	r3, r3, r2
 8007e54:	18ed      	addgt	r5, r5, r3
 8007e56:	2600      	movs	r6, #0
 8007e58:	341a      	adds	r4, #26
 8007e5a:	42b5      	cmp	r5, r6
 8007e5c:	d11a      	bne.n	8007e94 <_printf_common+0xc8>
 8007e5e:	2000      	movs	r0, #0
 8007e60:	e008      	b.n	8007e74 <_printf_common+0xa8>
 8007e62:	2301      	movs	r3, #1
 8007e64:	4652      	mov	r2, sl
 8007e66:	4641      	mov	r1, r8
 8007e68:	4638      	mov	r0, r7
 8007e6a:	47c8      	blx	r9
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d103      	bne.n	8007e78 <_printf_common+0xac>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295
 8007e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e78:	3501      	adds	r5, #1
 8007e7a:	e7c6      	b.n	8007e0a <_printf_common+0x3e>
 8007e7c:	18e1      	adds	r1, r4, r3
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	2030      	movs	r0, #48	@ 0x30
 8007e82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e86:	4422      	add	r2, r4
 8007e88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e90:	3302      	adds	r3, #2
 8007e92:	e7c7      	b.n	8007e24 <_printf_common+0x58>
 8007e94:	2301      	movs	r3, #1
 8007e96:	4622      	mov	r2, r4
 8007e98:	4641      	mov	r1, r8
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	47c8      	blx	r9
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d0e6      	beq.n	8007e70 <_printf_common+0xa4>
 8007ea2:	3601      	adds	r6, #1
 8007ea4:	e7d9      	b.n	8007e5a <_printf_common+0x8e>
	...

08007ea8 <_printf_i>:
 8007ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eac:	7e0f      	ldrb	r7, [r1, #24]
 8007eae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007eb0:	2f78      	cmp	r7, #120	@ 0x78
 8007eb2:	4691      	mov	r9, r2
 8007eb4:	4680      	mov	r8, r0
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	469a      	mov	sl, r3
 8007eba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ebe:	d807      	bhi.n	8007ed0 <_printf_i+0x28>
 8007ec0:	2f62      	cmp	r7, #98	@ 0x62
 8007ec2:	d80a      	bhi.n	8007eda <_printf_i+0x32>
 8007ec4:	2f00      	cmp	r7, #0
 8007ec6:	f000 80d1 	beq.w	800806c <_printf_i+0x1c4>
 8007eca:	2f58      	cmp	r7, #88	@ 0x58
 8007ecc:	f000 80b8 	beq.w	8008040 <_printf_i+0x198>
 8007ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ed4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ed8:	e03a      	b.n	8007f50 <_printf_i+0xa8>
 8007eda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ede:	2b15      	cmp	r3, #21
 8007ee0:	d8f6      	bhi.n	8007ed0 <_printf_i+0x28>
 8007ee2:	a101      	add	r1, pc, #4	@ (adr r1, 8007ee8 <_printf_i+0x40>)
 8007ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f55 	.word	0x08007f55
 8007ef0:	08007ed1 	.word	0x08007ed1
 8007ef4:	08007ed1 	.word	0x08007ed1
 8007ef8:	08007ed1 	.word	0x08007ed1
 8007efc:	08007ed1 	.word	0x08007ed1
 8007f00:	08007f55 	.word	0x08007f55
 8007f04:	08007ed1 	.word	0x08007ed1
 8007f08:	08007ed1 	.word	0x08007ed1
 8007f0c:	08007ed1 	.word	0x08007ed1
 8007f10:	08007ed1 	.word	0x08007ed1
 8007f14:	08008053 	.word	0x08008053
 8007f18:	08007f7f 	.word	0x08007f7f
 8007f1c:	0800800d 	.word	0x0800800d
 8007f20:	08007ed1 	.word	0x08007ed1
 8007f24:	08007ed1 	.word	0x08007ed1
 8007f28:	08008075 	.word	0x08008075
 8007f2c:	08007ed1 	.word	0x08007ed1
 8007f30:	08007f7f 	.word	0x08007f7f
 8007f34:	08007ed1 	.word	0x08007ed1
 8007f38:	08007ed1 	.word	0x08007ed1
 8007f3c:	08008015 	.word	0x08008015
 8007f40:	6833      	ldr	r3, [r6, #0]
 8007f42:	1d1a      	adds	r2, r3, #4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6032      	str	r2, [r6, #0]
 8007f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f50:	2301      	movs	r3, #1
 8007f52:	e09c      	b.n	800808e <_printf_i+0x1e6>
 8007f54:	6833      	ldr	r3, [r6, #0]
 8007f56:	6820      	ldr	r0, [r4, #0]
 8007f58:	1d19      	adds	r1, r3, #4
 8007f5a:	6031      	str	r1, [r6, #0]
 8007f5c:	0606      	lsls	r6, r0, #24
 8007f5e:	d501      	bpl.n	8007f64 <_printf_i+0xbc>
 8007f60:	681d      	ldr	r5, [r3, #0]
 8007f62:	e003      	b.n	8007f6c <_printf_i+0xc4>
 8007f64:	0645      	lsls	r5, r0, #25
 8007f66:	d5fb      	bpl.n	8007f60 <_printf_i+0xb8>
 8007f68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f6c:	2d00      	cmp	r5, #0
 8007f6e:	da03      	bge.n	8007f78 <_printf_i+0xd0>
 8007f70:	232d      	movs	r3, #45	@ 0x2d
 8007f72:	426d      	negs	r5, r5
 8007f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f78:	4858      	ldr	r0, [pc, #352]	@ (80080dc <_printf_i+0x234>)
 8007f7a:	230a      	movs	r3, #10
 8007f7c:	e011      	b.n	8007fa2 <_printf_i+0xfa>
 8007f7e:	6821      	ldr	r1, [r4, #0]
 8007f80:	6833      	ldr	r3, [r6, #0]
 8007f82:	0608      	lsls	r0, r1, #24
 8007f84:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f88:	d402      	bmi.n	8007f90 <_printf_i+0xe8>
 8007f8a:	0649      	lsls	r1, r1, #25
 8007f8c:	bf48      	it	mi
 8007f8e:	b2ad      	uxthmi	r5, r5
 8007f90:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f92:	4852      	ldr	r0, [pc, #328]	@ (80080dc <_printf_i+0x234>)
 8007f94:	6033      	str	r3, [r6, #0]
 8007f96:	bf14      	ite	ne
 8007f98:	230a      	movne	r3, #10
 8007f9a:	2308      	moveq	r3, #8
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fa2:	6866      	ldr	r6, [r4, #4]
 8007fa4:	60a6      	str	r6, [r4, #8]
 8007fa6:	2e00      	cmp	r6, #0
 8007fa8:	db05      	blt.n	8007fb6 <_printf_i+0x10e>
 8007faa:	6821      	ldr	r1, [r4, #0]
 8007fac:	432e      	orrs	r6, r5
 8007fae:	f021 0104 	bic.w	r1, r1, #4
 8007fb2:	6021      	str	r1, [r4, #0]
 8007fb4:	d04b      	beq.n	800804e <_printf_i+0x1a6>
 8007fb6:	4616      	mov	r6, r2
 8007fb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fbc:	fb03 5711 	mls	r7, r3, r1, r5
 8007fc0:	5dc7      	ldrb	r7, [r0, r7]
 8007fc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fc6:	462f      	mov	r7, r5
 8007fc8:	42bb      	cmp	r3, r7
 8007fca:	460d      	mov	r5, r1
 8007fcc:	d9f4      	bls.n	8007fb8 <_printf_i+0x110>
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d10b      	bne.n	8007fea <_printf_i+0x142>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	07df      	lsls	r7, r3, #31
 8007fd6:	d508      	bpl.n	8007fea <_printf_i+0x142>
 8007fd8:	6923      	ldr	r3, [r4, #16]
 8007fda:	6861      	ldr	r1, [r4, #4]
 8007fdc:	4299      	cmp	r1, r3
 8007fde:	bfde      	ittt	le
 8007fe0:	2330      	movle	r3, #48	@ 0x30
 8007fe2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fe6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fea:	1b92      	subs	r2, r2, r6
 8007fec:	6122      	str	r2, [r4, #16]
 8007fee:	f8cd a000 	str.w	sl, [sp]
 8007ff2:	464b      	mov	r3, r9
 8007ff4:	aa03      	add	r2, sp, #12
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4640      	mov	r0, r8
 8007ffa:	f7ff fee7 	bl	8007dcc <_printf_common>
 8007ffe:	3001      	adds	r0, #1
 8008000:	d14a      	bne.n	8008098 <_printf_i+0x1f0>
 8008002:	f04f 30ff 	mov.w	r0, #4294967295
 8008006:	b004      	add	sp, #16
 8008008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	f043 0320 	orr.w	r3, r3, #32
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	4832      	ldr	r0, [pc, #200]	@ (80080e0 <_printf_i+0x238>)
 8008016:	2778      	movs	r7, #120	@ 0x78
 8008018:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	6831      	ldr	r1, [r6, #0]
 8008020:	061f      	lsls	r7, r3, #24
 8008022:	f851 5b04 	ldr.w	r5, [r1], #4
 8008026:	d402      	bmi.n	800802e <_printf_i+0x186>
 8008028:	065f      	lsls	r7, r3, #25
 800802a:	bf48      	it	mi
 800802c:	b2ad      	uxthmi	r5, r5
 800802e:	6031      	str	r1, [r6, #0]
 8008030:	07d9      	lsls	r1, r3, #31
 8008032:	bf44      	itt	mi
 8008034:	f043 0320 	orrmi.w	r3, r3, #32
 8008038:	6023      	strmi	r3, [r4, #0]
 800803a:	b11d      	cbz	r5, 8008044 <_printf_i+0x19c>
 800803c:	2310      	movs	r3, #16
 800803e:	e7ad      	b.n	8007f9c <_printf_i+0xf4>
 8008040:	4826      	ldr	r0, [pc, #152]	@ (80080dc <_printf_i+0x234>)
 8008042:	e7e9      	b.n	8008018 <_printf_i+0x170>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	f023 0320 	bic.w	r3, r3, #32
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	e7f6      	b.n	800803c <_printf_i+0x194>
 800804e:	4616      	mov	r6, r2
 8008050:	e7bd      	b.n	8007fce <_printf_i+0x126>
 8008052:	6833      	ldr	r3, [r6, #0]
 8008054:	6825      	ldr	r5, [r4, #0]
 8008056:	6961      	ldr	r1, [r4, #20]
 8008058:	1d18      	adds	r0, r3, #4
 800805a:	6030      	str	r0, [r6, #0]
 800805c:	062e      	lsls	r6, r5, #24
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	d501      	bpl.n	8008066 <_printf_i+0x1be>
 8008062:	6019      	str	r1, [r3, #0]
 8008064:	e002      	b.n	800806c <_printf_i+0x1c4>
 8008066:	0668      	lsls	r0, r5, #25
 8008068:	d5fb      	bpl.n	8008062 <_printf_i+0x1ba>
 800806a:	8019      	strh	r1, [r3, #0]
 800806c:	2300      	movs	r3, #0
 800806e:	6123      	str	r3, [r4, #16]
 8008070:	4616      	mov	r6, r2
 8008072:	e7bc      	b.n	8007fee <_printf_i+0x146>
 8008074:	6833      	ldr	r3, [r6, #0]
 8008076:	1d1a      	adds	r2, r3, #4
 8008078:	6032      	str	r2, [r6, #0]
 800807a:	681e      	ldr	r6, [r3, #0]
 800807c:	6862      	ldr	r2, [r4, #4]
 800807e:	2100      	movs	r1, #0
 8008080:	4630      	mov	r0, r6
 8008082:	f7f8 f8a5 	bl	80001d0 <memchr>
 8008086:	b108      	cbz	r0, 800808c <_printf_i+0x1e4>
 8008088:	1b80      	subs	r0, r0, r6
 800808a:	6060      	str	r0, [r4, #4]
 800808c:	6863      	ldr	r3, [r4, #4]
 800808e:	6123      	str	r3, [r4, #16]
 8008090:	2300      	movs	r3, #0
 8008092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008096:	e7aa      	b.n	8007fee <_printf_i+0x146>
 8008098:	6923      	ldr	r3, [r4, #16]
 800809a:	4632      	mov	r2, r6
 800809c:	4649      	mov	r1, r9
 800809e:	4640      	mov	r0, r8
 80080a0:	47d0      	blx	sl
 80080a2:	3001      	adds	r0, #1
 80080a4:	d0ad      	beq.n	8008002 <_printf_i+0x15a>
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	079b      	lsls	r3, r3, #30
 80080aa:	d413      	bmi.n	80080d4 <_printf_i+0x22c>
 80080ac:	68e0      	ldr	r0, [r4, #12]
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	4298      	cmp	r0, r3
 80080b2:	bfb8      	it	lt
 80080b4:	4618      	movlt	r0, r3
 80080b6:	e7a6      	b.n	8008006 <_printf_i+0x15e>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4632      	mov	r2, r6
 80080bc:	4649      	mov	r1, r9
 80080be:	4640      	mov	r0, r8
 80080c0:	47d0      	blx	sl
 80080c2:	3001      	adds	r0, #1
 80080c4:	d09d      	beq.n	8008002 <_printf_i+0x15a>
 80080c6:	3501      	adds	r5, #1
 80080c8:	68e3      	ldr	r3, [r4, #12]
 80080ca:	9903      	ldr	r1, [sp, #12]
 80080cc:	1a5b      	subs	r3, r3, r1
 80080ce:	42ab      	cmp	r3, r5
 80080d0:	dcf2      	bgt.n	80080b8 <_printf_i+0x210>
 80080d2:	e7eb      	b.n	80080ac <_printf_i+0x204>
 80080d4:	2500      	movs	r5, #0
 80080d6:	f104 0619 	add.w	r6, r4, #25
 80080da:	e7f5      	b.n	80080c8 <_printf_i+0x220>
 80080dc:	0800aa06 	.word	0x0800aa06
 80080e0:	0800aa17 	.word	0x0800aa17

080080e4 <std>:
 80080e4:	2300      	movs	r3, #0
 80080e6:	b510      	push	{r4, lr}
 80080e8:	4604      	mov	r4, r0
 80080ea:	e9c0 3300 	strd	r3, r3, [r0]
 80080ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080f2:	6083      	str	r3, [r0, #8]
 80080f4:	8181      	strh	r1, [r0, #12]
 80080f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80080f8:	81c2      	strh	r2, [r0, #14]
 80080fa:	6183      	str	r3, [r0, #24]
 80080fc:	4619      	mov	r1, r3
 80080fe:	2208      	movs	r2, #8
 8008100:	305c      	adds	r0, #92	@ 0x5c
 8008102:	f000 f8f4 	bl	80082ee <memset>
 8008106:	4b0d      	ldr	r3, [pc, #52]	@ (800813c <std+0x58>)
 8008108:	6263      	str	r3, [r4, #36]	@ 0x24
 800810a:	4b0d      	ldr	r3, [pc, #52]	@ (8008140 <std+0x5c>)
 800810c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800810e:	4b0d      	ldr	r3, [pc, #52]	@ (8008144 <std+0x60>)
 8008110:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008112:	4b0d      	ldr	r3, [pc, #52]	@ (8008148 <std+0x64>)
 8008114:	6323      	str	r3, [r4, #48]	@ 0x30
 8008116:	4b0d      	ldr	r3, [pc, #52]	@ (800814c <std+0x68>)
 8008118:	6224      	str	r4, [r4, #32]
 800811a:	429c      	cmp	r4, r3
 800811c:	d006      	beq.n	800812c <std+0x48>
 800811e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008122:	4294      	cmp	r4, r2
 8008124:	d002      	beq.n	800812c <std+0x48>
 8008126:	33d0      	adds	r3, #208	@ 0xd0
 8008128:	429c      	cmp	r4, r3
 800812a:	d105      	bne.n	8008138 <std+0x54>
 800812c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008134:	f000 b958 	b.w	80083e8 <__retarget_lock_init_recursive>
 8008138:	bd10      	pop	{r4, pc}
 800813a:	bf00      	nop
 800813c:	08008269 	.word	0x08008269
 8008140:	0800828b 	.word	0x0800828b
 8008144:	080082c3 	.word	0x080082c3
 8008148:	080082e7 	.word	0x080082e7
 800814c:	20000450 	.word	0x20000450

08008150 <stdio_exit_handler>:
 8008150:	4a02      	ldr	r2, [pc, #8]	@ (800815c <stdio_exit_handler+0xc>)
 8008152:	4903      	ldr	r1, [pc, #12]	@ (8008160 <stdio_exit_handler+0x10>)
 8008154:	4803      	ldr	r0, [pc, #12]	@ (8008164 <stdio_exit_handler+0x14>)
 8008156:	f000 b869 	b.w	800822c <_fwalk_sglue>
 800815a:	bf00      	nop
 800815c:	20000020 	.word	0x20000020
 8008160:	08009a9d 	.word	0x08009a9d
 8008164:	20000030 	.word	0x20000030

08008168 <cleanup_stdio>:
 8008168:	6841      	ldr	r1, [r0, #4]
 800816a:	4b0c      	ldr	r3, [pc, #48]	@ (800819c <cleanup_stdio+0x34>)
 800816c:	4299      	cmp	r1, r3
 800816e:	b510      	push	{r4, lr}
 8008170:	4604      	mov	r4, r0
 8008172:	d001      	beq.n	8008178 <cleanup_stdio+0x10>
 8008174:	f001 fc92 	bl	8009a9c <_fflush_r>
 8008178:	68a1      	ldr	r1, [r4, #8]
 800817a:	4b09      	ldr	r3, [pc, #36]	@ (80081a0 <cleanup_stdio+0x38>)
 800817c:	4299      	cmp	r1, r3
 800817e:	d002      	beq.n	8008186 <cleanup_stdio+0x1e>
 8008180:	4620      	mov	r0, r4
 8008182:	f001 fc8b 	bl	8009a9c <_fflush_r>
 8008186:	68e1      	ldr	r1, [r4, #12]
 8008188:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <cleanup_stdio+0x3c>)
 800818a:	4299      	cmp	r1, r3
 800818c:	d004      	beq.n	8008198 <cleanup_stdio+0x30>
 800818e:	4620      	mov	r0, r4
 8008190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008194:	f001 bc82 	b.w	8009a9c <_fflush_r>
 8008198:	bd10      	pop	{r4, pc}
 800819a:	bf00      	nop
 800819c:	20000450 	.word	0x20000450
 80081a0:	200004b8 	.word	0x200004b8
 80081a4:	20000520 	.word	0x20000520

080081a8 <global_stdio_init.part.0>:
 80081a8:	b510      	push	{r4, lr}
 80081aa:	4b0b      	ldr	r3, [pc, #44]	@ (80081d8 <global_stdio_init.part.0+0x30>)
 80081ac:	4c0b      	ldr	r4, [pc, #44]	@ (80081dc <global_stdio_init.part.0+0x34>)
 80081ae:	4a0c      	ldr	r2, [pc, #48]	@ (80081e0 <global_stdio_init.part.0+0x38>)
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	4620      	mov	r0, r4
 80081b4:	2200      	movs	r2, #0
 80081b6:	2104      	movs	r1, #4
 80081b8:	f7ff ff94 	bl	80080e4 <std>
 80081bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081c0:	2201      	movs	r2, #1
 80081c2:	2109      	movs	r1, #9
 80081c4:	f7ff ff8e 	bl	80080e4 <std>
 80081c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081cc:	2202      	movs	r2, #2
 80081ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d2:	2112      	movs	r1, #18
 80081d4:	f7ff bf86 	b.w	80080e4 <std>
 80081d8:	20000588 	.word	0x20000588
 80081dc:	20000450 	.word	0x20000450
 80081e0:	08008151 	.word	0x08008151

080081e4 <__sfp_lock_acquire>:
 80081e4:	4801      	ldr	r0, [pc, #4]	@ (80081ec <__sfp_lock_acquire+0x8>)
 80081e6:	f000 b900 	b.w	80083ea <__retarget_lock_acquire_recursive>
 80081ea:	bf00      	nop
 80081ec:	20000591 	.word	0x20000591

080081f0 <__sfp_lock_release>:
 80081f0:	4801      	ldr	r0, [pc, #4]	@ (80081f8 <__sfp_lock_release+0x8>)
 80081f2:	f000 b8fb 	b.w	80083ec <__retarget_lock_release_recursive>
 80081f6:	bf00      	nop
 80081f8:	20000591 	.word	0x20000591

080081fc <__sinit>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	4604      	mov	r4, r0
 8008200:	f7ff fff0 	bl	80081e4 <__sfp_lock_acquire>
 8008204:	6a23      	ldr	r3, [r4, #32]
 8008206:	b11b      	cbz	r3, 8008210 <__sinit+0x14>
 8008208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800820c:	f7ff bff0 	b.w	80081f0 <__sfp_lock_release>
 8008210:	4b04      	ldr	r3, [pc, #16]	@ (8008224 <__sinit+0x28>)
 8008212:	6223      	str	r3, [r4, #32]
 8008214:	4b04      	ldr	r3, [pc, #16]	@ (8008228 <__sinit+0x2c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1f5      	bne.n	8008208 <__sinit+0xc>
 800821c:	f7ff ffc4 	bl	80081a8 <global_stdio_init.part.0>
 8008220:	e7f2      	b.n	8008208 <__sinit+0xc>
 8008222:	bf00      	nop
 8008224:	08008169 	.word	0x08008169
 8008228:	20000588 	.word	0x20000588

0800822c <_fwalk_sglue>:
 800822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008230:	4607      	mov	r7, r0
 8008232:	4688      	mov	r8, r1
 8008234:	4614      	mov	r4, r2
 8008236:	2600      	movs	r6, #0
 8008238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800823c:	f1b9 0901 	subs.w	r9, r9, #1
 8008240:	d505      	bpl.n	800824e <_fwalk_sglue+0x22>
 8008242:	6824      	ldr	r4, [r4, #0]
 8008244:	2c00      	cmp	r4, #0
 8008246:	d1f7      	bne.n	8008238 <_fwalk_sglue+0xc>
 8008248:	4630      	mov	r0, r6
 800824a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d907      	bls.n	8008264 <_fwalk_sglue+0x38>
 8008254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008258:	3301      	adds	r3, #1
 800825a:	d003      	beq.n	8008264 <_fwalk_sglue+0x38>
 800825c:	4629      	mov	r1, r5
 800825e:	4638      	mov	r0, r7
 8008260:	47c0      	blx	r8
 8008262:	4306      	orrs	r6, r0
 8008264:	3568      	adds	r5, #104	@ 0x68
 8008266:	e7e9      	b.n	800823c <_fwalk_sglue+0x10>

08008268 <__sread>:
 8008268:	b510      	push	{r4, lr}
 800826a:	460c      	mov	r4, r1
 800826c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008270:	f000 f86c 	bl	800834c <_read_r>
 8008274:	2800      	cmp	r0, #0
 8008276:	bfab      	itete	ge
 8008278:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800827a:	89a3      	ldrhlt	r3, [r4, #12]
 800827c:	181b      	addge	r3, r3, r0
 800827e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008282:	bfac      	ite	ge
 8008284:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008286:	81a3      	strhlt	r3, [r4, #12]
 8008288:	bd10      	pop	{r4, pc}

0800828a <__swrite>:
 800828a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800828e:	461f      	mov	r7, r3
 8008290:	898b      	ldrh	r3, [r1, #12]
 8008292:	05db      	lsls	r3, r3, #23
 8008294:	4605      	mov	r5, r0
 8008296:	460c      	mov	r4, r1
 8008298:	4616      	mov	r6, r2
 800829a:	d505      	bpl.n	80082a8 <__swrite+0x1e>
 800829c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a0:	2302      	movs	r3, #2
 80082a2:	2200      	movs	r2, #0
 80082a4:	f000 f840 	bl	8008328 <_lseek_r>
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	4632      	mov	r2, r6
 80082b6:	463b      	mov	r3, r7
 80082b8:	4628      	mov	r0, r5
 80082ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082be:	f000 b857 	b.w	8008370 <_write_r>

080082c2 <__sseek>:
 80082c2:	b510      	push	{r4, lr}
 80082c4:	460c      	mov	r4, r1
 80082c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ca:	f000 f82d 	bl	8008328 <_lseek_r>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	bf15      	itete	ne
 80082d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082de:	81a3      	strheq	r3, [r4, #12]
 80082e0:	bf18      	it	ne
 80082e2:	81a3      	strhne	r3, [r4, #12]
 80082e4:	bd10      	pop	{r4, pc}

080082e6 <__sclose>:
 80082e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ea:	f000 b80d 	b.w	8008308 <_close_r>

080082ee <memset>:
 80082ee:	4402      	add	r2, r0
 80082f0:	4603      	mov	r3, r0
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d100      	bne.n	80082f8 <memset+0xa>
 80082f6:	4770      	bx	lr
 80082f8:	f803 1b01 	strb.w	r1, [r3], #1
 80082fc:	e7f9      	b.n	80082f2 <memset+0x4>
	...

08008300 <_localeconv_r>:
 8008300:	4800      	ldr	r0, [pc, #0]	@ (8008304 <_localeconv_r+0x4>)
 8008302:	4770      	bx	lr
 8008304:	2000016c 	.word	0x2000016c

08008308 <_close_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d06      	ldr	r5, [pc, #24]	@ (8008324 <_close_r+0x1c>)
 800830c:	2300      	movs	r3, #0
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	f7fa fdee 	bl	8002ef4 <_close>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_close_r+0x1a>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_close_r+0x1a>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	2000058c 	.word	0x2000058c

08008328 <_lseek_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4d07      	ldr	r5, [pc, #28]	@ (8008348 <_lseek_r+0x20>)
 800832c:	4604      	mov	r4, r0
 800832e:	4608      	mov	r0, r1
 8008330:	4611      	mov	r1, r2
 8008332:	2200      	movs	r2, #0
 8008334:	602a      	str	r2, [r5, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	f7fa fe03 	bl	8002f42 <_lseek>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_lseek_r+0x1e>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b103      	cbz	r3, 8008346 <_lseek_r+0x1e>
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	2000058c 	.word	0x2000058c

0800834c <_read_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d07      	ldr	r5, [pc, #28]	@ (800836c <_read_r+0x20>)
 8008350:	4604      	mov	r4, r0
 8008352:	4608      	mov	r0, r1
 8008354:	4611      	mov	r1, r2
 8008356:	2200      	movs	r2, #0
 8008358:	602a      	str	r2, [r5, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	f7fa fd91 	bl	8002e82 <_read>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_read_r+0x1e>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_read_r+0x1e>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	2000058c 	.word	0x2000058c

08008370 <_write_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d07      	ldr	r5, [pc, #28]	@ (8008390 <_write_r+0x20>)
 8008374:	4604      	mov	r4, r0
 8008376:	4608      	mov	r0, r1
 8008378:	4611      	mov	r1, r2
 800837a:	2200      	movs	r2, #0
 800837c:	602a      	str	r2, [r5, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	f7fa fd9c 	bl	8002ebc <_write>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d102      	bne.n	800838e <_write_r+0x1e>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	b103      	cbz	r3, 800838e <_write_r+0x1e>
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	2000058c 	.word	0x2000058c

08008394 <__errno>:
 8008394:	4b01      	ldr	r3, [pc, #4]	@ (800839c <__errno+0x8>)
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	2000002c 	.word	0x2000002c

080083a0 <__libc_init_array>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4d0d      	ldr	r5, [pc, #52]	@ (80083d8 <__libc_init_array+0x38>)
 80083a4:	4c0d      	ldr	r4, [pc, #52]	@ (80083dc <__libc_init_array+0x3c>)
 80083a6:	1b64      	subs	r4, r4, r5
 80083a8:	10a4      	asrs	r4, r4, #2
 80083aa:	2600      	movs	r6, #0
 80083ac:	42a6      	cmp	r6, r4
 80083ae:	d109      	bne.n	80083c4 <__libc_init_array+0x24>
 80083b0:	4d0b      	ldr	r5, [pc, #44]	@ (80083e0 <__libc_init_array+0x40>)
 80083b2:	4c0c      	ldr	r4, [pc, #48]	@ (80083e4 <__libc_init_array+0x44>)
 80083b4:	f001 fec0 	bl	800a138 <_init>
 80083b8:	1b64      	subs	r4, r4, r5
 80083ba:	10a4      	asrs	r4, r4, #2
 80083bc:	2600      	movs	r6, #0
 80083be:	42a6      	cmp	r6, r4
 80083c0:	d105      	bne.n	80083ce <__libc_init_array+0x2e>
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c8:	4798      	blx	r3
 80083ca:	3601      	adds	r6, #1
 80083cc:	e7ee      	b.n	80083ac <__libc_init_array+0xc>
 80083ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d2:	4798      	blx	r3
 80083d4:	3601      	adds	r6, #1
 80083d6:	e7f2      	b.n	80083be <__libc_init_array+0x1e>
 80083d8:	0800ad74 	.word	0x0800ad74
 80083dc:	0800ad74 	.word	0x0800ad74
 80083e0:	0800ad74 	.word	0x0800ad74
 80083e4:	0800ad78 	.word	0x0800ad78

080083e8 <__retarget_lock_init_recursive>:
 80083e8:	4770      	bx	lr

080083ea <__retarget_lock_acquire_recursive>:
 80083ea:	4770      	bx	lr

080083ec <__retarget_lock_release_recursive>:
 80083ec:	4770      	bx	lr

080083ee <quorem>:
 80083ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f2:	6903      	ldr	r3, [r0, #16]
 80083f4:	690c      	ldr	r4, [r1, #16]
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	4607      	mov	r7, r0
 80083fa:	db7e      	blt.n	80084fa <quorem+0x10c>
 80083fc:	3c01      	subs	r4, #1
 80083fe:	f101 0814 	add.w	r8, r1, #20
 8008402:	00a3      	lsls	r3, r4, #2
 8008404:	f100 0514 	add.w	r5, r0, #20
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008418:	3301      	adds	r3, #1
 800841a:	429a      	cmp	r2, r3
 800841c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008420:	fbb2 f6f3 	udiv	r6, r2, r3
 8008424:	d32e      	bcc.n	8008484 <quorem+0x96>
 8008426:	f04f 0a00 	mov.w	sl, #0
 800842a:	46c4      	mov	ip, r8
 800842c:	46ae      	mov	lr, r5
 800842e:	46d3      	mov	fp, sl
 8008430:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008434:	b298      	uxth	r0, r3
 8008436:	fb06 a000 	mla	r0, r6, r0, sl
 800843a:	0c02      	lsrs	r2, r0, #16
 800843c:	0c1b      	lsrs	r3, r3, #16
 800843e:	fb06 2303 	mla	r3, r6, r3, r2
 8008442:	f8de 2000 	ldr.w	r2, [lr]
 8008446:	b280      	uxth	r0, r0
 8008448:	b292      	uxth	r2, r2
 800844a:	1a12      	subs	r2, r2, r0
 800844c:	445a      	add	r2, fp
 800844e:	f8de 0000 	ldr.w	r0, [lr]
 8008452:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008456:	b29b      	uxth	r3, r3
 8008458:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800845c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008460:	b292      	uxth	r2, r2
 8008462:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008466:	45e1      	cmp	r9, ip
 8008468:	f84e 2b04 	str.w	r2, [lr], #4
 800846c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008470:	d2de      	bcs.n	8008430 <quorem+0x42>
 8008472:	9b00      	ldr	r3, [sp, #0]
 8008474:	58eb      	ldr	r3, [r5, r3]
 8008476:	b92b      	cbnz	r3, 8008484 <quorem+0x96>
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	3b04      	subs	r3, #4
 800847c:	429d      	cmp	r5, r3
 800847e:	461a      	mov	r2, r3
 8008480:	d32f      	bcc.n	80084e2 <quorem+0xf4>
 8008482:	613c      	str	r4, [r7, #16]
 8008484:	4638      	mov	r0, r7
 8008486:	f001 f97d 	bl	8009784 <__mcmp>
 800848a:	2800      	cmp	r0, #0
 800848c:	db25      	blt.n	80084da <quorem+0xec>
 800848e:	4629      	mov	r1, r5
 8008490:	2000      	movs	r0, #0
 8008492:	f858 2b04 	ldr.w	r2, [r8], #4
 8008496:	f8d1 c000 	ldr.w	ip, [r1]
 800849a:	fa1f fe82 	uxth.w	lr, r2
 800849e:	fa1f f38c 	uxth.w	r3, ip
 80084a2:	eba3 030e 	sub.w	r3, r3, lr
 80084a6:	4403      	add	r3, r0
 80084a8:	0c12      	lsrs	r2, r2, #16
 80084aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80084ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084b8:	45c1      	cmp	r9, r8
 80084ba:	f841 3b04 	str.w	r3, [r1], #4
 80084be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084c2:	d2e6      	bcs.n	8008492 <quorem+0xa4>
 80084c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084cc:	b922      	cbnz	r2, 80084d8 <quorem+0xea>
 80084ce:	3b04      	subs	r3, #4
 80084d0:	429d      	cmp	r5, r3
 80084d2:	461a      	mov	r2, r3
 80084d4:	d30b      	bcc.n	80084ee <quorem+0x100>
 80084d6:	613c      	str	r4, [r7, #16]
 80084d8:	3601      	adds	r6, #1
 80084da:	4630      	mov	r0, r6
 80084dc:	b003      	add	sp, #12
 80084de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e2:	6812      	ldr	r2, [r2, #0]
 80084e4:	3b04      	subs	r3, #4
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	d1cb      	bne.n	8008482 <quorem+0x94>
 80084ea:	3c01      	subs	r4, #1
 80084ec:	e7c6      	b.n	800847c <quorem+0x8e>
 80084ee:	6812      	ldr	r2, [r2, #0]
 80084f0:	3b04      	subs	r3, #4
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	d1ef      	bne.n	80084d6 <quorem+0xe8>
 80084f6:	3c01      	subs	r4, #1
 80084f8:	e7ea      	b.n	80084d0 <quorem+0xe2>
 80084fa:	2000      	movs	r0, #0
 80084fc:	e7ee      	b.n	80084dc <quorem+0xee>
	...

08008500 <_dtoa_r>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	69c7      	ldr	r7, [r0, #28]
 8008506:	b097      	sub	sp, #92	@ 0x5c
 8008508:	ed8d 0b04 	vstr	d0, [sp, #16]
 800850c:	ec55 4b10 	vmov	r4, r5, d0
 8008510:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008512:	9107      	str	r1, [sp, #28]
 8008514:	4681      	mov	r9, r0
 8008516:	920c      	str	r2, [sp, #48]	@ 0x30
 8008518:	9311      	str	r3, [sp, #68]	@ 0x44
 800851a:	b97f      	cbnz	r7, 800853c <_dtoa_r+0x3c>
 800851c:	2010      	movs	r0, #16
 800851e:	f000 fe09 	bl	8009134 <malloc>
 8008522:	4602      	mov	r2, r0
 8008524:	f8c9 001c 	str.w	r0, [r9, #28]
 8008528:	b920      	cbnz	r0, 8008534 <_dtoa_r+0x34>
 800852a:	4ba9      	ldr	r3, [pc, #676]	@ (80087d0 <_dtoa_r+0x2d0>)
 800852c:	21ef      	movs	r1, #239	@ 0xef
 800852e:	48a9      	ldr	r0, [pc, #676]	@ (80087d4 <_dtoa_r+0x2d4>)
 8008530:	f001 fafa 	bl	8009b28 <__assert_func>
 8008534:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008538:	6007      	str	r7, [r0, #0]
 800853a:	60c7      	str	r7, [r0, #12]
 800853c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008540:	6819      	ldr	r1, [r3, #0]
 8008542:	b159      	cbz	r1, 800855c <_dtoa_r+0x5c>
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	604a      	str	r2, [r1, #4]
 8008548:	2301      	movs	r3, #1
 800854a:	4093      	lsls	r3, r2
 800854c:	608b      	str	r3, [r1, #8]
 800854e:	4648      	mov	r0, r9
 8008550:	f000 fee6 	bl	8009320 <_Bfree>
 8008554:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	1e2b      	subs	r3, r5, #0
 800855e:	bfb9      	ittee	lt
 8008560:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008564:	9305      	strlt	r3, [sp, #20]
 8008566:	2300      	movge	r3, #0
 8008568:	6033      	strge	r3, [r6, #0]
 800856a:	9f05      	ldr	r7, [sp, #20]
 800856c:	4b9a      	ldr	r3, [pc, #616]	@ (80087d8 <_dtoa_r+0x2d8>)
 800856e:	bfbc      	itt	lt
 8008570:	2201      	movlt	r2, #1
 8008572:	6032      	strlt	r2, [r6, #0]
 8008574:	43bb      	bics	r3, r7
 8008576:	d112      	bne.n	800859e <_dtoa_r+0x9e>
 8008578:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800857a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008584:	4323      	orrs	r3, r4
 8008586:	f000 855a 	beq.w	800903e <_dtoa_r+0xb3e>
 800858a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800858c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80087ec <_dtoa_r+0x2ec>
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 855c 	beq.w	800904e <_dtoa_r+0xb4e>
 8008596:	f10a 0303 	add.w	r3, sl, #3
 800859a:	f000 bd56 	b.w	800904a <_dtoa_r+0xb4a>
 800859e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80085a2:	2200      	movs	r2, #0
 80085a4:	ec51 0b17 	vmov	r0, r1, d7
 80085a8:	2300      	movs	r3, #0
 80085aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80085ae:	f7f8 fa8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80085b2:	4680      	mov	r8, r0
 80085b4:	b158      	cbz	r0, 80085ce <_dtoa_r+0xce>
 80085b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80085b8:	2301      	movs	r3, #1
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085be:	b113      	cbz	r3, 80085c6 <_dtoa_r+0xc6>
 80085c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80085c2:	4b86      	ldr	r3, [pc, #536]	@ (80087dc <_dtoa_r+0x2dc>)
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80087f0 <_dtoa_r+0x2f0>
 80085ca:	f000 bd40 	b.w	800904e <_dtoa_r+0xb4e>
 80085ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80085d2:	aa14      	add	r2, sp, #80	@ 0x50
 80085d4:	a915      	add	r1, sp, #84	@ 0x54
 80085d6:	4648      	mov	r0, r9
 80085d8:	f001 f984 	bl	80098e4 <__d2b>
 80085dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80085e0:	9002      	str	r0, [sp, #8]
 80085e2:	2e00      	cmp	r6, #0
 80085e4:	d078      	beq.n	80086d8 <_dtoa_r+0x1d8>
 80085e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80085ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80085fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008600:	4619      	mov	r1, r3
 8008602:	2200      	movs	r2, #0
 8008604:	4b76      	ldr	r3, [pc, #472]	@ (80087e0 <_dtoa_r+0x2e0>)
 8008606:	f7f7 fe3f 	bl	8000288 <__aeabi_dsub>
 800860a:	a36b      	add	r3, pc, #428	@ (adr r3, 80087b8 <_dtoa_r+0x2b8>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f7f7 fff2 	bl	80005f8 <__aeabi_dmul>
 8008614:	a36a      	add	r3, pc, #424	@ (adr r3, 80087c0 <_dtoa_r+0x2c0>)
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	f7f7 fe37 	bl	800028c <__adddf3>
 800861e:	4604      	mov	r4, r0
 8008620:	4630      	mov	r0, r6
 8008622:	460d      	mov	r5, r1
 8008624:	f7f7 ff7e 	bl	8000524 <__aeabi_i2d>
 8008628:	a367      	add	r3, pc, #412	@ (adr r3, 80087c8 <_dtoa_r+0x2c8>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	f7f7 ffe3 	bl	80005f8 <__aeabi_dmul>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4620      	mov	r0, r4
 8008638:	4629      	mov	r1, r5
 800863a:	f7f7 fe27 	bl	800028c <__adddf3>
 800863e:	4604      	mov	r4, r0
 8008640:	460d      	mov	r5, r1
 8008642:	f7f8 fa89 	bl	8000b58 <__aeabi_d2iz>
 8008646:	2200      	movs	r2, #0
 8008648:	4607      	mov	r7, r0
 800864a:	2300      	movs	r3, #0
 800864c:	4620      	mov	r0, r4
 800864e:	4629      	mov	r1, r5
 8008650:	f7f8 fa44 	bl	8000adc <__aeabi_dcmplt>
 8008654:	b140      	cbz	r0, 8008668 <_dtoa_r+0x168>
 8008656:	4638      	mov	r0, r7
 8008658:	f7f7 ff64 	bl	8000524 <__aeabi_i2d>
 800865c:	4622      	mov	r2, r4
 800865e:	462b      	mov	r3, r5
 8008660:	f7f8 fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8008664:	b900      	cbnz	r0, 8008668 <_dtoa_r+0x168>
 8008666:	3f01      	subs	r7, #1
 8008668:	2f16      	cmp	r7, #22
 800866a:	d852      	bhi.n	8008712 <_dtoa_r+0x212>
 800866c:	4b5d      	ldr	r3, [pc, #372]	@ (80087e4 <_dtoa_r+0x2e4>)
 800866e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800867a:	f7f8 fa2f 	bl	8000adc <__aeabi_dcmplt>
 800867e:	2800      	cmp	r0, #0
 8008680:	d049      	beq.n	8008716 <_dtoa_r+0x216>
 8008682:	3f01      	subs	r7, #1
 8008684:	2300      	movs	r3, #0
 8008686:	9310      	str	r3, [sp, #64]	@ 0x40
 8008688:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800868a:	1b9b      	subs	r3, r3, r6
 800868c:	1e5a      	subs	r2, r3, #1
 800868e:	bf45      	ittet	mi
 8008690:	f1c3 0301 	rsbmi	r3, r3, #1
 8008694:	9300      	strmi	r3, [sp, #0]
 8008696:	2300      	movpl	r3, #0
 8008698:	2300      	movmi	r3, #0
 800869a:	9206      	str	r2, [sp, #24]
 800869c:	bf54      	ite	pl
 800869e:	9300      	strpl	r3, [sp, #0]
 80086a0:	9306      	strmi	r3, [sp, #24]
 80086a2:	2f00      	cmp	r7, #0
 80086a4:	db39      	blt.n	800871a <_dtoa_r+0x21a>
 80086a6:	9b06      	ldr	r3, [sp, #24]
 80086a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80086aa:	443b      	add	r3, r7
 80086ac:	9306      	str	r3, [sp, #24]
 80086ae:	2300      	movs	r3, #0
 80086b0:	9308      	str	r3, [sp, #32]
 80086b2:	9b07      	ldr	r3, [sp, #28]
 80086b4:	2b09      	cmp	r3, #9
 80086b6:	d863      	bhi.n	8008780 <_dtoa_r+0x280>
 80086b8:	2b05      	cmp	r3, #5
 80086ba:	bfc4      	itt	gt
 80086bc:	3b04      	subgt	r3, #4
 80086be:	9307      	strgt	r3, [sp, #28]
 80086c0:	9b07      	ldr	r3, [sp, #28]
 80086c2:	f1a3 0302 	sub.w	r3, r3, #2
 80086c6:	bfcc      	ite	gt
 80086c8:	2400      	movgt	r4, #0
 80086ca:	2401      	movle	r4, #1
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d863      	bhi.n	8008798 <_dtoa_r+0x298>
 80086d0:	e8df f003 	tbb	[pc, r3]
 80086d4:	2b375452 	.word	0x2b375452
 80086d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80086dc:	441e      	add	r6, r3
 80086de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	bfc1      	itttt	gt
 80086e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80086ea:	409f      	lslgt	r7, r3
 80086ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80086f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80086f4:	bfd6      	itet	le
 80086f6:	f1c3 0320 	rsble	r3, r3, #32
 80086fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80086fe:	fa04 f003 	lslle.w	r0, r4, r3
 8008702:	f7f7 feff 	bl	8000504 <__aeabi_ui2d>
 8008706:	2201      	movs	r2, #1
 8008708:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800870c:	3e01      	subs	r6, #1
 800870e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008710:	e776      	b.n	8008600 <_dtoa_r+0x100>
 8008712:	2301      	movs	r3, #1
 8008714:	e7b7      	b.n	8008686 <_dtoa_r+0x186>
 8008716:	9010      	str	r0, [sp, #64]	@ 0x40
 8008718:	e7b6      	b.n	8008688 <_dtoa_r+0x188>
 800871a:	9b00      	ldr	r3, [sp, #0]
 800871c:	1bdb      	subs	r3, r3, r7
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	427b      	negs	r3, r7
 8008722:	9308      	str	r3, [sp, #32]
 8008724:	2300      	movs	r3, #0
 8008726:	930d      	str	r3, [sp, #52]	@ 0x34
 8008728:	e7c3      	b.n	80086b2 <_dtoa_r+0x1b2>
 800872a:	2301      	movs	r3, #1
 800872c:	9309      	str	r3, [sp, #36]	@ 0x24
 800872e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008730:	eb07 0b03 	add.w	fp, r7, r3
 8008734:	f10b 0301 	add.w	r3, fp, #1
 8008738:	2b01      	cmp	r3, #1
 800873a:	9303      	str	r3, [sp, #12]
 800873c:	bfb8      	it	lt
 800873e:	2301      	movlt	r3, #1
 8008740:	e006      	b.n	8008750 <_dtoa_r+0x250>
 8008742:	2301      	movs	r3, #1
 8008744:	9309      	str	r3, [sp, #36]	@ 0x24
 8008746:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008748:	2b00      	cmp	r3, #0
 800874a:	dd28      	ble.n	800879e <_dtoa_r+0x29e>
 800874c:	469b      	mov	fp, r3
 800874e:	9303      	str	r3, [sp, #12]
 8008750:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008754:	2100      	movs	r1, #0
 8008756:	2204      	movs	r2, #4
 8008758:	f102 0514 	add.w	r5, r2, #20
 800875c:	429d      	cmp	r5, r3
 800875e:	d926      	bls.n	80087ae <_dtoa_r+0x2ae>
 8008760:	6041      	str	r1, [r0, #4]
 8008762:	4648      	mov	r0, r9
 8008764:	f000 fd9c 	bl	80092a0 <_Balloc>
 8008768:	4682      	mov	sl, r0
 800876a:	2800      	cmp	r0, #0
 800876c:	d142      	bne.n	80087f4 <_dtoa_r+0x2f4>
 800876e:	4b1e      	ldr	r3, [pc, #120]	@ (80087e8 <_dtoa_r+0x2e8>)
 8008770:	4602      	mov	r2, r0
 8008772:	f240 11af 	movw	r1, #431	@ 0x1af
 8008776:	e6da      	b.n	800852e <_dtoa_r+0x2e>
 8008778:	2300      	movs	r3, #0
 800877a:	e7e3      	b.n	8008744 <_dtoa_r+0x244>
 800877c:	2300      	movs	r3, #0
 800877e:	e7d5      	b.n	800872c <_dtoa_r+0x22c>
 8008780:	2401      	movs	r4, #1
 8008782:	2300      	movs	r3, #0
 8008784:	9307      	str	r3, [sp, #28]
 8008786:	9409      	str	r4, [sp, #36]	@ 0x24
 8008788:	f04f 3bff 	mov.w	fp, #4294967295
 800878c:	2200      	movs	r2, #0
 800878e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008792:	2312      	movs	r3, #18
 8008794:	920c      	str	r2, [sp, #48]	@ 0x30
 8008796:	e7db      	b.n	8008750 <_dtoa_r+0x250>
 8008798:	2301      	movs	r3, #1
 800879a:	9309      	str	r3, [sp, #36]	@ 0x24
 800879c:	e7f4      	b.n	8008788 <_dtoa_r+0x288>
 800879e:	f04f 0b01 	mov.w	fp, #1
 80087a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80087a6:	465b      	mov	r3, fp
 80087a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80087ac:	e7d0      	b.n	8008750 <_dtoa_r+0x250>
 80087ae:	3101      	adds	r1, #1
 80087b0:	0052      	lsls	r2, r2, #1
 80087b2:	e7d1      	b.n	8008758 <_dtoa_r+0x258>
 80087b4:	f3af 8000 	nop.w
 80087b8:	636f4361 	.word	0x636f4361
 80087bc:	3fd287a7 	.word	0x3fd287a7
 80087c0:	8b60c8b3 	.word	0x8b60c8b3
 80087c4:	3fc68a28 	.word	0x3fc68a28
 80087c8:	509f79fb 	.word	0x509f79fb
 80087cc:	3fd34413 	.word	0x3fd34413
 80087d0:	0800aa35 	.word	0x0800aa35
 80087d4:	0800aa4c 	.word	0x0800aa4c
 80087d8:	7ff00000 	.word	0x7ff00000
 80087dc:	0800aa05 	.word	0x0800aa05
 80087e0:	3ff80000 	.word	0x3ff80000
 80087e4:	0800aba0 	.word	0x0800aba0
 80087e8:	0800aaa4 	.word	0x0800aaa4
 80087ec:	0800aa31 	.word	0x0800aa31
 80087f0:	0800aa04 	.word	0x0800aa04
 80087f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087f8:	6018      	str	r0, [r3, #0]
 80087fa:	9b03      	ldr	r3, [sp, #12]
 80087fc:	2b0e      	cmp	r3, #14
 80087fe:	f200 80a1 	bhi.w	8008944 <_dtoa_r+0x444>
 8008802:	2c00      	cmp	r4, #0
 8008804:	f000 809e 	beq.w	8008944 <_dtoa_r+0x444>
 8008808:	2f00      	cmp	r7, #0
 800880a:	dd33      	ble.n	8008874 <_dtoa_r+0x374>
 800880c:	4b9c      	ldr	r3, [pc, #624]	@ (8008a80 <_dtoa_r+0x580>)
 800880e:	f007 020f 	and.w	r2, r7, #15
 8008812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008816:	ed93 7b00 	vldr	d7, [r3]
 800881a:	05f8      	lsls	r0, r7, #23
 800881c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008820:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008824:	d516      	bpl.n	8008854 <_dtoa_r+0x354>
 8008826:	4b97      	ldr	r3, [pc, #604]	@ (8008a84 <_dtoa_r+0x584>)
 8008828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800882c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008830:	f7f8 f80c 	bl	800084c <__aeabi_ddiv>
 8008834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008838:	f004 040f 	and.w	r4, r4, #15
 800883c:	2603      	movs	r6, #3
 800883e:	4d91      	ldr	r5, [pc, #580]	@ (8008a84 <_dtoa_r+0x584>)
 8008840:	b954      	cbnz	r4, 8008858 <_dtoa_r+0x358>
 8008842:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008846:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800884a:	f7f7 ffff 	bl	800084c <__aeabi_ddiv>
 800884e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008852:	e028      	b.n	80088a6 <_dtoa_r+0x3a6>
 8008854:	2602      	movs	r6, #2
 8008856:	e7f2      	b.n	800883e <_dtoa_r+0x33e>
 8008858:	07e1      	lsls	r1, r4, #31
 800885a:	d508      	bpl.n	800886e <_dtoa_r+0x36e>
 800885c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008860:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008864:	f7f7 fec8 	bl	80005f8 <__aeabi_dmul>
 8008868:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800886c:	3601      	adds	r6, #1
 800886e:	1064      	asrs	r4, r4, #1
 8008870:	3508      	adds	r5, #8
 8008872:	e7e5      	b.n	8008840 <_dtoa_r+0x340>
 8008874:	f000 80af 	beq.w	80089d6 <_dtoa_r+0x4d6>
 8008878:	427c      	negs	r4, r7
 800887a:	4b81      	ldr	r3, [pc, #516]	@ (8008a80 <_dtoa_r+0x580>)
 800887c:	4d81      	ldr	r5, [pc, #516]	@ (8008a84 <_dtoa_r+0x584>)
 800887e:	f004 020f 	and.w	r2, r4, #15
 8008882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800888e:	f7f7 feb3 	bl	80005f8 <__aeabi_dmul>
 8008892:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008896:	1124      	asrs	r4, r4, #4
 8008898:	2300      	movs	r3, #0
 800889a:	2602      	movs	r6, #2
 800889c:	2c00      	cmp	r4, #0
 800889e:	f040 808f 	bne.w	80089c0 <_dtoa_r+0x4c0>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1d3      	bne.n	800884e <_dtoa_r+0x34e>
 80088a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 8094 	beq.w	80089da <_dtoa_r+0x4da>
 80088b2:	4b75      	ldr	r3, [pc, #468]	@ (8008a88 <_dtoa_r+0x588>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	4620      	mov	r0, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	f7f8 f90f 	bl	8000adc <__aeabi_dcmplt>
 80088be:	2800      	cmp	r0, #0
 80088c0:	f000 808b 	beq.w	80089da <_dtoa_r+0x4da>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 8087 	beq.w	80089da <_dtoa_r+0x4da>
 80088cc:	f1bb 0f00 	cmp.w	fp, #0
 80088d0:	dd34      	ble.n	800893c <_dtoa_r+0x43c>
 80088d2:	4620      	mov	r0, r4
 80088d4:	4b6d      	ldr	r3, [pc, #436]	@ (8008a8c <_dtoa_r+0x58c>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	4629      	mov	r1, r5
 80088da:	f7f7 fe8d 	bl	80005f8 <__aeabi_dmul>
 80088de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088e2:	f107 38ff 	add.w	r8, r7, #4294967295
 80088e6:	3601      	adds	r6, #1
 80088e8:	465c      	mov	r4, fp
 80088ea:	4630      	mov	r0, r6
 80088ec:	f7f7 fe1a 	bl	8000524 <__aeabi_i2d>
 80088f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088f4:	f7f7 fe80 	bl	80005f8 <__aeabi_dmul>
 80088f8:	4b65      	ldr	r3, [pc, #404]	@ (8008a90 <_dtoa_r+0x590>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	f7f7 fcc6 	bl	800028c <__adddf3>
 8008900:	4605      	mov	r5, r0
 8008902:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008906:	2c00      	cmp	r4, #0
 8008908:	d16a      	bne.n	80089e0 <_dtoa_r+0x4e0>
 800890a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800890e:	4b61      	ldr	r3, [pc, #388]	@ (8008a94 <_dtoa_r+0x594>)
 8008910:	2200      	movs	r2, #0
 8008912:	f7f7 fcb9 	bl	8000288 <__aeabi_dsub>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800891e:	462a      	mov	r2, r5
 8008920:	4633      	mov	r3, r6
 8008922:	f7f8 f8f9 	bl	8000b18 <__aeabi_dcmpgt>
 8008926:	2800      	cmp	r0, #0
 8008928:	f040 8298 	bne.w	8008e5c <_dtoa_r+0x95c>
 800892c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008930:	462a      	mov	r2, r5
 8008932:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008936:	f7f8 f8d1 	bl	8000adc <__aeabi_dcmplt>
 800893a:	bb38      	cbnz	r0, 800898c <_dtoa_r+0x48c>
 800893c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008940:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008944:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008946:	2b00      	cmp	r3, #0
 8008948:	f2c0 8157 	blt.w	8008bfa <_dtoa_r+0x6fa>
 800894c:	2f0e      	cmp	r7, #14
 800894e:	f300 8154 	bgt.w	8008bfa <_dtoa_r+0x6fa>
 8008952:	4b4b      	ldr	r3, [pc, #300]	@ (8008a80 <_dtoa_r+0x580>)
 8008954:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008958:	ed93 7b00 	vldr	d7, [r3]
 800895c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800895e:	2b00      	cmp	r3, #0
 8008960:	ed8d 7b00 	vstr	d7, [sp]
 8008964:	f280 80e5 	bge.w	8008b32 <_dtoa_r+0x632>
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	f300 80e1 	bgt.w	8008b32 <_dtoa_r+0x632>
 8008970:	d10c      	bne.n	800898c <_dtoa_r+0x48c>
 8008972:	4b48      	ldr	r3, [pc, #288]	@ (8008a94 <_dtoa_r+0x594>)
 8008974:	2200      	movs	r2, #0
 8008976:	ec51 0b17 	vmov	r0, r1, d7
 800897a:	f7f7 fe3d 	bl	80005f8 <__aeabi_dmul>
 800897e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008982:	f7f8 f8bf 	bl	8000b04 <__aeabi_dcmpge>
 8008986:	2800      	cmp	r0, #0
 8008988:	f000 8266 	beq.w	8008e58 <_dtoa_r+0x958>
 800898c:	2400      	movs	r4, #0
 800898e:	4625      	mov	r5, r4
 8008990:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008992:	4656      	mov	r6, sl
 8008994:	ea6f 0803 	mvn.w	r8, r3
 8008998:	2700      	movs	r7, #0
 800899a:	4621      	mov	r1, r4
 800899c:	4648      	mov	r0, r9
 800899e:	f000 fcbf 	bl	8009320 <_Bfree>
 80089a2:	2d00      	cmp	r5, #0
 80089a4:	f000 80bd 	beq.w	8008b22 <_dtoa_r+0x622>
 80089a8:	b12f      	cbz	r7, 80089b6 <_dtoa_r+0x4b6>
 80089aa:	42af      	cmp	r7, r5
 80089ac:	d003      	beq.n	80089b6 <_dtoa_r+0x4b6>
 80089ae:	4639      	mov	r1, r7
 80089b0:	4648      	mov	r0, r9
 80089b2:	f000 fcb5 	bl	8009320 <_Bfree>
 80089b6:	4629      	mov	r1, r5
 80089b8:	4648      	mov	r0, r9
 80089ba:	f000 fcb1 	bl	8009320 <_Bfree>
 80089be:	e0b0      	b.n	8008b22 <_dtoa_r+0x622>
 80089c0:	07e2      	lsls	r2, r4, #31
 80089c2:	d505      	bpl.n	80089d0 <_dtoa_r+0x4d0>
 80089c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089c8:	f7f7 fe16 	bl	80005f8 <__aeabi_dmul>
 80089cc:	3601      	adds	r6, #1
 80089ce:	2301      	movs	r3, #1
 80089d0:	1064      	asrs	r4, r4, #1
 80089d2:	3508      	adds	r5, #8
 80089d4:	e762      	b.n	800889c <_dtoa_r+0x39c>
 80089d6:	2602      	movs	r6, #2
 80089d8:	e765      	b.n	80088a6 <_dtoa_r+0x3a6>
 80089da:	9c03      	ldr	r4, [sp, #12]
 80089dc:	46b8      	mov	r8, r7
 80089de:	e784      	b.n	80088ea <_dtoa_r+0x3ea>
 80089e0:	4b27      	ldr	r3, [pc, #156]	@ (8008a80 <_dtoa_r+0x580>)
 80089e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089ec:	4454      	add	r4, sl
 80089ee:	2900      	cmp	r1, #0
 80089f0:	d054      	beq.n	8008a9c <_dtoa_r+0x59c>
 80089f2:	4929      	ldr	r1, [pc, #164]	@ (8008a98 <_dtoa_r+0x598>)
 80089f4:	2000      	movs	r0, #0
 80089f6:	f7f7 ff29 	bl	800084c <__aeabi_ddiv>
 80089fa:	4633      	mov	r3, r6
 80089fc:	462a      	mov	r2, r5
 80089fe:	f7f7 fc43 	bl	8000288 <__aeabi_dsub>
 8008a02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a06:	4656      	mov	r6, sl
 8008a08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a0c:	f7f8 f8a4 	bl	8000b58 <__aeabi_d2iz>
 8008a10:	4605      	mov	r5, r0
 8008a12:	f7f7 fd87 	bl	8000524 <__aeabi_i2d>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a1e:	f7f7 fc33 	bl	8000288 <__aeabi_dsub>
 8008a22:	3530      	adds	r5, #48	@ 0x30
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a2c:	f806 5b01 	strb.w	r5, [r6], #1
 8008a30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a34:	f7f8 f852 	bl	8000adc <__aeabi_dcmplt>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d172      	bne.n	8008b22 <_dtoa_r+0x622>
 8008a3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a40:	4911      	ldr	r1, [pc, #68]	@ (8008a88 <_dtoa_r+0x588>)
 8008a42:	2000      	movs	r0, #0
 8008a44:	f7f7 fc20 	bl	8000288 <__aeabi_dsub>
 8008a48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a4c:	f7f8 f846 	bl	8000adc <__aeabi_dcmplt>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	f040 80b4 	bne.w	8008bbe <_dtoa_r+0x6be>
 8008a56:	42a6      	cmp	r6, r4
 8008a58:	f43f af70 	beq.w	800893c <_dtoa_r+0x43c>
 8008a5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a60:	4b0a      	ldr	r3, [pc, #40]	@ (8008a8c <_dtoa_r+0x58c>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	f7f7 fdc8 	bl	80005f8 <__aeabi_dmul>
 8008a68:	4b08      	ldr	r3, [pc, #32]	@ (8008a8c <_dtoa_r+0x58c>)
 8008a6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a6e:	2200      	movs	r2, #0
 8008a70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a74:	f7f7 fdc0 	bl	80005f8 <__aeabi_dmul>
 8008a78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a7c:	e7c4      	b.n	8008a08 <_dtoa_r+0x508>
 8008a7e:	bf00      	nop
 8008a80:	0800aba0 	.word	0x0800aba0
 8008a84:	0800ab78 	.word	0x0800ab78
 8008a88:	3ff00000 	.word	0x3ff00000
 8008a8c:	40240000 	.word	0x40240000
 8008a90:	401c0000 	.word	0x401c0000
 8008a94:	40140000 	.word	0x40140000
 8008a98:	3fe00000 	.word	0x3fe00000
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f7f7 fdaa 	bl	80005f8 <__aeabi_dmul>
 8008aa4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008aa8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008aaa:	4656      	mov	r6, sl
 8008aac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ab0:	f7f8 f852 	bl	8000b58 <__aeabi_d2iz>
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	f7f7 fd35 	bl	8000524 <__aeabi_i2d>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ac2:	f7f7 fbe1 	bl	8000288 <__aeabi_dsub>
 8008ac6:	3530      	adds	r5, #48	@ 0x30
 8008ac8:	f806 5b01 	strb.w	r5, [r6], #1
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	42a6      	cmp	r6, r4
 8008ad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ad6:	f04f 0200 	mov.w	r2, #0
 8008ada:	d124      	bne.n	8008b26 <_dtoa_r+0x626>
 8008adc:	4baf      	ldr	r3, [pc, #700]	@ (8008d9c <_dtoa_r+0x89c>)
 8008ade:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ae2:	f7f7 fbd3 	bl	800028c <__adddf3>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008aee:	f7f8 f813 	bl	8000b18 <__aeabi_dcmpgt>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d163      	bne.n	8008bbe <_dtoa_r+0x6be>
 8008af6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008afa:	49a8      	ldr	r1, [pc, #672]	@ (8008d9c <_dtoa_r+0x89c>)
 8008afc:	2000      	movs	r0, #0
 8008afe:	f7f7 fbc3 	bl	8000288 <__aeabi_dsub>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b0a:	f7f7 ffe7 	bl	8000adc <__aeabi_dcmplt>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	f43f af14 	beq.w	800893c <_dtoa_r+0x43c>
 8008b14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008b16:	1e73      	subs	r3, r6, #1
 8008b18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b1e:	2b30      	cmp	r3, #48	@ 0x30
 8008b20:	d0f8      	beq.n	8008b14 <_dtoa_r+0x614>
 8008b22:	4647      	mov	r7, r8
 8008b24:	e03b      	b.n	8008b9e <_dtoa_r+0x69e>
 8008b26:	4b9e      	ldr	r3, [pc, #632]	@ (8008da0 <_dtoa_r+0x8a0>)
 8008b28:	f7f7 fd66 	bl	80005f8 <__aeabi_dmul>
 8008b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b30:	e7bc      	b.n	8008aac <_dtoa_r+0x5ac>
 8008b32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008b36:	4656      	mov	r6, sl
 8008b38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 fe84 	bl	800084c <__aeabi_ddiv>
 8008b44:	f7f8 f808 	bl	8000b58 <__aeabi_d2iz>
 8008b48:	4680      	mov	r8, r0
 8008b4a:	f7f7 fceb 	bl	8000524 <__aeabi_i2d>
 8008b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b52:	f7f7 fd51 	bl	80005f8 <__aeabi_dmul>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b62:	f7f7 fb91 	bl	8000288 <__aeabi_dsub>
 8008b66:	f806 4b01 	strb.w	r4, [r6], #1
 8008b6a:	9d03      	ldr	r5, [sp, #12]
 8008b6c:	eba6 040a 	sub.w	r4, r6, sl
 8008b70:	42a5      	cmp	r5, r4
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	d133      	bne.n	8008be0 <_dtoa_r+0x6e0>
 8008b78:	f7f7 fb88 	bl	800028c <__adddf3>
 8008b7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b80:	4604      	mov	r4, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	f7f7 ffc8 	bl	8000b18 <__aeabi_dcmpgt>
 8008b88:	b9c0      	cbnz	r0, 8008bbc <_dtoa_r+0x6bc>
 8008b8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	4629      	mov	r1, r5
 8008b92:	f7f7 ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b96:	b110      	cbz	r0, 8008b9e <_dtoa_r+0x69e>
 8008b98:	f018 0f01 	tst.w	r8, #1
 8008b9c:	d10e      	bne.n	8008bbc <_dtoa_r+0x6bc>
 8008b9e:	9902      	ldr	r1, [sp, #8]
 8008ba0:	4648      	mov	r0, r9
 8008ba2:	f000 fbbd 	bl	8009320 <_Bfree>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	7033      	strb	r3, [r6, #0]
 8008baa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008bac:	3701      	adds	r7, #1
 8008bae:	601f      	str	r7, [r3, #0]
 8008bb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f000 824b 	beq.w	800904e <_dtoa_r+0xb4e>
 8008bb8:	601e      	str	r6, [r3, #0]
 8008bba:	e248      	b.n	800904e <_dtoa_r+0xb4e>
 8008bbc:	46b8      	mov	r8, r7
 8008bbe:	4633      	mov	r3, r6
 8008bc0:	461e      	mov	r6, r3
 8008bc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bc6:	2a39      	cmp	r2, #57	@ 0x39
 8008bc8:	d106      	bne.n	8008bd8 <_dtoa_r+0x6d8>
 8008bca:	459a      	cmp	sl, r3
 8008bcc:	d1f8      	bne.n	8008bc0 <_dtoa_r+0x6c0>
 8008bce:	2230      	movs	r2, #48	@ 0x30
 8008bd0:	f108 0801 	add.w	r8, r8, #1
 8008bd4:	f88a 2000 	strb.w	r2, [sl]
 8008bd8:	781a      	ldrb	r2, [r3, #0]
 8008bda:	3201      	adds	r2, #1
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	e7a0      	b.n	8008b22 <_dtoa_r+0x622>
 8008be0:	4b6f      	ldr	r3, [pc, #444]	@ (8008da0 <_dtoa_r+0x8a0>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	f7f7 fd08 	bl	80005f8 <__aeabi_dmul>
 8008be8:	2200      	movs	r2, #0
 8008bea:	2300      	movs	r3, #0
 8008bec:	4604      	mov	r4, r0
 8008bee:	460d      	mov	r5, r1
 8008bf0:	f7f7 ff6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d09f      	beq.n	8008b38 <_dtoa_r+0x638>
 8008bf8:	e7d1      	b.n	8008b9e <_dtoa_r+0x69e>
 8008bfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bfc:	2a00      	cmp	r2, #0
 8008bfe:	f000 80ea 	beq.w	8008dd6 <_dtoa_r+0x8d6>
 8008c02:	9a07      	ldr	r2, [sp, #28]
 8008c04:	2a01      	cmp	r2, #1
 8008c06:	f300 80cd 	bgt.w	8008da4 <_dtoa_r+0x8a4>
 8008c0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	f000 80c1 	beq.w	8008d94 <_dtoa_r+0x894>
 8008c12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c16:	9c08      	ldr	r4, [sp, #32]
 8008c18:	9e00      	ldr	r6, [sp, #0]
 8008c1a:	9a00      	ldr	r2, [sp, #0]
 8008c1c:	441a      	add	r2, r3
 8008c1e:	9200      	str	r2, [sp, #0]
 8008c20:	9a06      	ldr	r2, [sp, #24]
 8008c22:	2101      	movs	r1, #1
 8008c24:	441a      	add	r2, r3
 8008c26:	4648      	mov	r0, r9
 8008c28:	9206      	str	r2, [sp, #24]
 8008c2a:	f000 fc2d 	bl	8009488 <__i2b>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	b166      	cbz	r6, 8008c4c <_dtoa_r+0x74c>
 8008c32:	9b06      	ldr	r3, [sp, #24]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dd09      	ble.n	8008c4c <_dtoa_r+0x74c>
 8008c38:	42b3      	cmp	r3, r6
 8008c3a:	9a00      	ldr	r2, [sp, #0]
 8008c3c:	bfa8      	it	ge
 8008c3e:	4633      	movge	r3, r6
 8008c40:	1ad2      	subs	r2, r2, r3
 8008c42:	9200      	str	r2, [sp, #0]
 8008c44:	9a06      	ldr	r2, [sp, #24]
 8008c46:	1af6      	subs	r6, r6, r3
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	9306      	str	r3, [sp, #24]
 8008c4c:	9b08      	ldr	r3, [sp, #32]
 8008c4e:	b30b      	cbz	r3, 8008c94 <_dtoa_r+0x794>
 8008c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 80c6 	beq.w	8008de4 <_dtoa_r+0x8e4>
 8008c58:	2c00      	cmp	r4, #0
 8008c5a:	f000 80c0 	beq.w	8008dde <_dtoa_r+0x8de>
 8008c5e:	4629      	mov	r1, r5
 8008c60:	4622      	mov	r2, r4
 8008c62:	4648      	mov	r0, r9
 8008c64:	f000 fcc8 	bl	80095f8 <__pow5mult>
 8008c68:	9a02      	ldr	r2, [sp, #8]
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	4648      	mov	r0, r9
 8008c70:	f000 fc20 	bl	80094b4 <__multiply>
 8008c74:	9902      	ldr	r1, [sp, #8]
 8008c76:	4680      	mov	r8, r0
 8008c78:	4648      	mov	r0, r9
 8008c7a:	f000 fb51 	bl	8009320 <_Bfree>
 8008c7e:	9b08      	ldr	r3, [sp, #32]
 8008c80:	1b1b      	subs	r3, r3, r4
 8008c82:	9308      	str	r3, [sp, #32]
 8008c84:	f000 80b1 	beq.w	8008dea <_dtoa_r+0x8ea>
 8008c88:	9a08      	ldr	r2, [sp, #32]
 8008c8a:	4641      	mov	r1, r8
 8008c8c:	4648      	mov	r0, r9
 8008c8e:	f000 fcb3 	bl	80095f8 <__pow5mult>
 8008c92:	9002      	str	r0, [sp, #8]
 8008c94:	2101      	movs	r1, #1
 8008c96:	4648      	mov	r0, r9
 8008c98:	f000 fbf6 	bl	8009488 <__i2b>
 8008c9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 81d8 	beq.w	8009056 <_dtoa_r+0xb56>
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	4601      	mov	r1, r0
 8008caa:	4648      	mov	r0, r9
 8008cac:	f000 fca4 	bl	80095f8 <__pow5mult>
 8008cb0:	9b07      	ldr	r3, [sp, #28]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	f300 809f 	bgt.w	8008df8 <_dtoa_r+0x8f8>
 8008cba:	9b04      	ldr	r3, [sp, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f040 8097 	bne.w	8008df0 <_dtoa_r+0x8f0>
 8008cc2:	9b05      	ldr	r3, [sp, #20]
 8008cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f040 8093 	bne.w	8008df4 <_dtoa_r+0x8f4>
 8008cce:	9b05      	ldr	r3, [sp, #20]
 8008cd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cd4:	0d1b      	lsrs	r3, r3, #20
 8008cd6:	051b      	lsls	r3, r3, #20
 8008cd8:	b133      	cbz	r3, 8008ce8 <_dtoa_r+0x7e8>
 8008cda:	9b00      	ldr	r3, [sp, #0]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	9b06      	ldr	r3, [sp, #24]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	9306      	str	r3, [sp, #24]
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	9308      	str	r3, [sp, #32]
 8008cea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 81b8 	beq.w	8009062 <_dtoa_r+0xb62>
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cf8:	6918      	ldr	r0, [r3, #16]
 8008cfa:	f000 fb79 	bl	80093f0 <__hi0bits>
 8008cfe:	f1c0 0020 	rsb	r0, r0, #32
 8008d02:	9b06      	ldr	r3, [sp, #24]
 8008d04:	4418      	add	r0, r3
 8008d06:	f010 001f 	ands.w	r0, r0, #31
 8008d0a:	f000 8082 	beq.w	8008e12 <_dtoa_r+0x912>
 8008d0e:	f1c0 0320 	rsb	r3, r0, #32
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	dd73      	ble.n	8008dfe <_dtoa_r+0x8fe>
 8008d16:	9b00      	ldr	r3, [sp, #0]
 8008d18:	f1c0 001c 	rsb	r0, r0, #28
 8008d1c:	4403      	add	r3, r0
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	9b06      	ldr	r3, [sp, #24]
 8008d22:	4403      	add	r3, r0
 8008d24:	4406      	add	r6, r0
 8008d26:	9306      	str	r3, [sp, #24]
 8008d28:	9b00      	ldr	r3, [sp, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dd05      	ble.n	8008d3a <_dtoa_r+0x83a>
 8008d2e:	9902      	ldr	r1, [sp, #8]
 8008d30:	461a      	mov	r2, r3
 8008d32:	4648      	mov	r0, r9
 8008d34:	f000 fcba 	bl	80096ac <__lshift>
 8008d38:	9002      	str	r0, [sp, #8]
 8008d3a:	9b06      	ldr	r3, [sp, #24]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	dd05      	ble.n	8008d4c <_dtoa_r+0x84c>
 8008d40:	4621      	mov	r1, r4
 8008d42:	461a      	mov	r2, r3
 8008d44:	4648      	mov	r0, r9
 8008d46:	f000 fcb1 	bl	80096ac <__lshift>
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d061      	beq.n	8008e16 <_dtoa_r+0x916>
 8008d52:	9802      	ldr	r0, [sp, #8]
 8008d54:	4621      	mov	r1, r4
 8008d56:	f000 fd15 	bl	8009784 <__mcmp>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	da5b      	bge.n	8008e16 <_dtoa_r+0x916>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9902      	ldr	r1, [sp, #8]
 8008d62:	220a      	movs	r2, #10
 8008d64:	4648      	mov	r0, r9
 8008d66:	f000 fafd 	bl	8009364 <__multadd>
 8008d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d6c:	9002      	str	r0, [sp, #8]
 8008d6e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 8177 	beq.w	8009066 <_dtoa_r+0xb66>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	220a      	movs	r2, #10
 8008d7e:	4648      	mov	r0, r9
 8008d80:	f000 faf0 	bl	8009364 <__multadd>
 8008d84:	f1bb 0f00 	cmp.w	fp, #0
 8008d88:	4605      	mov	r5, r0
 8008d8a:	dc6f      	bgt.n	8008e6c <_dtoa_r+0x96c>
 8008d8c:	9b07      	ldr	r3, [sp, #28]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	dc49      	bgt.n	8008e26 <_dtoa_r+0x926>
 8008d92:	e06b      	b.n	8008e6c <_dtoa_r+0x96c>
 8008d94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d9a:	e73c      	b.n	8008c16 <_dtoa_r+0x716>
 8008d9c:	3fe00000 	.word	0x3fe00000
 8008da0:	40240000 	.word	0x40240000
 8008da4:	9b03      	ldr	r3, [sp, #12]
 8008da6:	1e5c      	subs	r4, r3, #1
 8008da8:	9b08      	ldr	r3, [sp, #32]
 8008daa:	42a3      	cmp	r3, r4
 8008dac:	db09      	blt.n	8008dc2 <_dtoa_r+0x8c2>
 8008dae:	1b1c      	subs	r4, r3, r4
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f6bf af30 	bge.w	8008c18 <_dtoa_r+0x718>
 8008db8:	9b00      	ldr	r3, [sp, #0]
 8008dba:	9a03      	ldr	r2, [sp, #12]
 8008dbc:	1a9e      	subs	r6, r3, r2
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e72b      	b.n	8008c1a <_dtoa_r+0x71a>
 8008dc2:	9b08      	ldr	r3, [sp, #32]
 8008dc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008dc6:	9408      	str	r4, [sp, #32]
 8008dc8:	1ae3      	subs	r3, r4, r3
 8008dca:	441a      	add	r2, r3
 8008dcc:	9e00      	ldr	r6, [sp, #0]
 8008dce:	9b03      	ldr	r3, [sp, #12]
 8008dd0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008dd2:	2400      	movs	r4, #0
 8008dd4:	e721      	b.n	8008c1a <_dtoa_r+0x71a>
 8008dd6:	9c08      	ldr	r4, [sp, #32]
 8008dd8:	9e00      	ldr	r6, [sp, #0]
 8008dda:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008ddc:	e728      	b.n	8008c30 <_dtoa_r+0x730>
 8008dde:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008de2:	e751      	b.n	8008c88 <_dtoa_r+0x788>
 8008de4:	9a08      	ldr	r2, [sp, #32]
 8008de6:	9902      	ldr	r1, [sp, #8]
 8008de8:	e750      	b.n	8008c8c <_dtoa_r+0x78c>
 8008dea:	f8cd 8008 	str.w	r8, [sp, #8]
 8008dee:	e751      	b.n	8008c94 <_dtoa_r+0x794>
 8008df0:	2300      	movs	r3, #0
 8008df2:	e779      	b.n	8008ce8 <_dtoa_r+0x7e8>
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	e777      	b.n	8008ce8 <_dtoa_r+0x7e8>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	9308      	str	r3, [sp, #32]
 8008dfc:	e779      	b.n	8008cf2 <_dtoa_r+0x7f2>
 8008dfe:	d093      	beq.n	8008d28 <_dtoa_r+0x828>
 8008e00:	9a00      	ldr	r2, [sp, #0]
 8008e02:	331c      	adds	r3, #28
 8008e04:	441a      	add	r2, r3
 8008e06:	9200      	str	r2, [sp, #0]
 8008e08:	9a06      	ldr	r2, [sp, #24]
 8008e0a:	441a      	add	r2, r3
 8008e0c:	441e      	add	r6, r3
 8008e0e:	9206      	str	r2, [sp, #24]
 8008e10:	e78a      	b.n	8008d28 <_dtoa_r+0x828>
 8008e12:	4603      	mov	r3, r0
 8008e14:	e7f4      	b.n	8008e00 <_dtoa_r+0x900>
 8008e16:	9b03      	ldr	r3, [sp, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	46b8      	mov	r8, r7
 8008e1c:	dc20      	bgt.n	8008e60 <_dtoa_r+0x960>
 8008e1e:	469b      	mov	fp, r3
 8008e20:	9b07      	ldr	r3, [sp, #28]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	dd1e      	ble.n	8008e64 <_dtoa_r+0x964>
 8008e26:	f1bb 0f00 	cmp.w	fp, #0
 8008e2a:	f47f adb1 	bne.w	8008990 <_dtoa_r+0x490>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	465b      	mov	r3, fp
 8008e32:	2205      	movs	r2, #5
 8008e34:	4648      	mov	r0, r9
 8008e36:	f000 fa95 	bl	8009364 <__multadd>
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	9802      	ldr	r0, [sp, #8]
 8008e40:	f000 fca0 	bl	8009784 <__mcmp>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	f77f ada3 	ble.w	8008990 <_dtoa_r+0x490>
 8008e4a:	4656      	mov	r6, sl
 8008e4c:	2331      	movs	r3, #49	@ 0x31
 8008e4e:	f806 3b01 	strb.w	r3, [r6], #1
 8008e52:	f108 0801 	add.w	r8, r8, #1
 8008e56:	e59f      	b.n	8008998 <_dtoa_r+0x498>
 8008e58:	9c03      	ldr	r4, [sp, #12]
 8008e5a:	46b8      	mov	r8, r7
 8008e5c:	4625      	mov	r5, r4
 8008e5e:	e7f4      	b.n	8008e4a <_dtoa_r+0x94a>
 8008e60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 8101 	beq.w	800906e <_dtoa_r+0xb6e>
 8008e6c:	2e00      	cmp	r6, #0
 8008e6e:	dd05      	ble.n	8008e7c <_dtoa_r+0x97c>
 8008e70:	4629      	mov	r1, r5
 8008e72:	4632      	mov	r2, r6
 8008e74:	4648      	mov	r0, r9
 8008e76:	f000 fc19 	bl	80096ac <__lshift>
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	9b08      	ldr	r3, [sp, #32]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d05c      	beq.n	8008f3c <_dtoa_r+0xa3c>
 8008e82:	6869      	ldr	r1, [r5, #4]
 8008e84:	4648      	mov	r0, r9
 8008e86:	f000 fa0b 	bl	80092a0 <_Balloc>
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	b928      	cbnz	r0, 8008e9a <_dtoa_r+0x99a>
 8008e8e:	4b82      	ldr	r3, [pc, #520]	@ (8009098 <_dtoa_r+0xb98>)
 8008e90:	4602      	mov	r2, r0
 8008e92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e96:	f7ff bb4a 	b.w	800852e <_dtoa_r+0x2e>
 8008e9a:	692a      	ldr	r2, [r5, #16]
 8008e9c:	3202      	adds	r2, #2
 8008e9e:	0092      	lsls	r2, r2, #2
 8008ea0:	f105 010c 	add.w	r1, r5, #12
 8008ea4:	300c      	adds	r0, #12
 8008ea6:	f000 fe31 	bl	8009b0c <memcpy>
 8008eaa:	2201      	movs	r2, #1
 8008eac:	4631      	mov	r1, r6
 8008eae:	4648      	mov	r0, r9
 8008eb0:	f000 fbfc 	bl	80096ac <__lshift>
 8008eb4:	f10a 0301 	add.w	r3, sl, #1
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	eb0a 030b 	add.w	r3, sl, fp
 8008ebe:	9308      	str	r3, [sp, #32]
 8008ec0:	9b04      	ldr	r3, [sp, #16]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	462f      	mov	r7, r5
 8008ec8:	9306      	str	r3, [sp, #24]
 8008eca:	4605      	mov	r5, r0
 8008ecc:	9b00      	ldr	r3, [sp, #0]
 8008ece:	9802      	ldr	r0, [sp, #8]
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ed6:	f7ff fa8a 	bl	80083ee <quorem>
 8008eda:	4603      	mov	r3, r0
 8008edc:	3330      	adds	r3, #48	@ 0x30
 8008ede:	9003      	str	r0, [sp, #12]
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	9802      	ldr	r0, [sp, #8]
 8008ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ee6:	f000 fc4d 	bl	8009784 <__mcmp>
 8008eea:	462a      	mov	r2, r5
 8008eec:	9004      	str	r0, [sp, #16]
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4648      	mov	r0, r9
 8008ef2:	f000 fc63 	bl	80097bc <__mdiff>
 8008ef6:	68c2      	ldr	r2, [r0, #12]
 8008ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008efa:	4606      	mov	r6, r0
 8008efc:	bb02      	cbnz	r2, 8008f40 <_dtoa_r+0xa40>
 8008efe:	4601      	mov	r1, r0
 8008f00:	9802      	ldr	r0, [sp, #8]
 8008f02:	f000 fc3f 	bl	8009784 <__mcmp>
 8008f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f08:	4602      	mov	r2, r0
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4648      	mov	r0, r9
 8008f0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f12:	f000 fa05 	bl	8009320 <_Bfree>
 8008f16:	9b07      	ldr	r3, [sp, #28]
 8008f18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f1a:	9e00      	ldr	r6, [sp, #0]
 8008f1c:	ea42 0103 	orr.w	r1, r2, r3
 8008f20:	9b06      	ldr	r3, [sp, #24]
 8008f22:	4319      	orrs	r1, r3
 8008f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f26:	d10d      	bne.n	8008f44 <_dtoa_r+0xa44>
 8008f28:	2b39      	cmp	r3, #57	@ 0x39
 8008f2a:	d027      	beq.n	8008f7c <_dtoa_r+0xa7c>
 8008f2c:	9a04      	ldr	r2, [sp, #16]
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	dd01      	ble.n	8008f36 <_dtoa_r+0xa36>
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	3331      	adds	r3, #49	@ 0x31
 8008f36:	f88b 3000 	strb.w	r3, [fp]
 8008f3a:	e52e      	b.n	800899a <_dtoa_r+0x49a>
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	e7b9      	b.n	8008eb4 <_dtoa_r+0x9b4>
 8008f40:	2201      	movs	r2, #1
 8008f42:	e7e2      	b.n	8008f0a <_dtoa_r+0xa0a>
 8008f44:	9904      	ldr	r1, [sp, #16]
 8008f46:	2900      	cmp	r1, #0
 8008f48:	db04      	blt.n	8008f54 <_dtoa_r+0xa54>
 8008f4a:	9807      	ldr	r0, [sp, #28]
 8008f4c:	4301      	orrs	r1, r0
 8008f4e:	9806      	ldr	r0, [sp, #24]
 8008f50:	4301      	orrs	r1, r0
 8008f52:	d120      	bne.n	8008f96 <_dtoa_r+0xa96>
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	ddee      	ble.n	8008f36 <_dtoa_r+0xa36>
 8008f58:	9902      	ldr	r1, [sp, #8]
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	4648      	mov	r0, r9
 8008f60:	f000 fba4 	bl	80096ac <__lshift>
 8008f64:	4621      	mov	r1, r4
 8008f66:	9002      	str	r0, [sp, #8]
 8008f68:	f000 fc0c 	bl	8009784 <__mcmp>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	9b00      	ldr	r3, [sp, #0]
 8008f70:	dc02      	bgt.n	8008f78 <_dtoa_r+0xa78>
 8008f72:	d1e0      	bne.n	8008f36 <_dtoa_r+0xa36>
 8008f74:	07da      	lsls	r2, r3, #31
 8008f76:	d5de      	bpl.n	8008f36 <_dtoa_r+0xa36>
 8008f78:	2b39      	cmp	r3, #57	@ 0x39
 8008f7a:	d1da      	bne.n	8008f32 <_dtoa_r+0xa32>
 8008f7c:	2339      	movs	r3, #57	@ 0x39
 8008f7e:	f88b 3000 	strb.w	r3, [fp]
 8008f82:	4633      	mov	r3, r6
 8008f84:	461e      	mov	r6, r3
 8008f86:	3b01      	subs	r3, #1
 8008f88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f8c:	2a39      	cmp	r2, #57	@ 0x39
 8008f8e:	d04e      	beq.n	800902e <_dtoa_r+0xb2e>
 8008f90:	3201      	adds	r2, #1
 8008f92:	701a      	strb	r2, [r3, #0]
 8008f94:	e501      	b.n	800899a <_dtoa_r+0x49a>
 8008f96:	2a00      	cmp	r2, #0
 8008f98:	dd03      	ble.n	8008fa2 <_dtoa_r+0xaa2>
 8008f9a:	2b39      	cmp	r3, #57	@ 0x39
 8008f9c:	d0ee      	beq.n	8008f7c <_dtoa_r+0xa7c>
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	e7c9      	b.n	8008f36 <_dtoa_r+0xa36>
 8008fa2:	9a00      	ldr	r2, [sp, #0]
 8008fa4:	9908      	ldr	r1, [sp, #32]
 8008fa6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008faa:	428a      	cmp	r2, r1
 8008fac:	d028      	beq.n	8009000 <_dtoa_r+0xb00>
 8008fae:	9902      	ldr	r1, [sp, #8]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	220a      	movs	r2, #10
 8008fb4:	4648      	mov	r0, r9
 8008fb6:	f000 f9d5 	bl	8009364 <__multadd>
 8008fba:	42af      	cmp	r7, r5
 8008fbc:	9002      	str	r0, [sp, #8]
 8008fbe:	f04f 0300 	mov.w	r3, #0
 8008fc2:	f04f 020a 	mov.w	r2, #10
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	4648      	mov	r0, r9
 8008fca:	d107      	bne.n	8008fdc <_dtoa_r+0xadc>
 8008fcc:	f000 f9ca 	bl	8009364 <__multadd>
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	4605      	mov	r5, r0
 8008fd4:	9b00      	ldr	r3, [sp, #0]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	e777      	b.n	8008ecc <_dtoa_r+0x9cc>
 8008fdc:	f000 f9c2 	bl	8009364 <__multadd>
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	220a      	movs	r2, #10
 8008fe8:	4648      	mov	r0, r9
 8008fea:	f000 f9bb 	bl	8009364 <__multadd>
 8008fee:	4605      	mov	r5, r0
 8008ff0:	e7f0      	b.n	8008fd4 <_dtoa_r+0xad4>
 8008ff2:	f1bb 0f00 	cmp.w	fp, #0
 8008ff6:	bfcc      	ite	gt
 8008ff8:	465e      	movgt	r6, fp
 8008ffa:	2601      	movle	r6, #1
 8008ffc:	4456      	add	r6, sl
 8008ffe:	2700      	movs	r7, #0
 8009000:	9902      	ldr	r1, [sp, #8]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	2201      	movs	r2, #1
 8009006:	4648      	mov	r0, r9
 8009008:	f000 fb50 	bl	80096ac <__lshift>
 800900c:	4621      	mov	r1, r4
 800900e:	9002      	str	r0, [sp, #8]
 8009010:	f000 fbb8 	bl	8009784 <__mcmp>
 8009014:	2800      	cmp	r0, #0
 8009016:	dcb4      	bgt.n	8008f82 <_dtoa_r+0xa82>
 8009018:	d102      	bne.n	8009020 <_dtoa_r+0xb20>
 800901a:	9b00      	ldr	r3, [sp, #0]
 800901c:	07db      	lsls	r3, r3, #31
 800901e:	d4b0      	bmi.n	8008f82 <_dtoa_r+0xa82>
 8009020:	4633      	mov	r3, r6
 8009022:	461e      	mov	r6, r3
 8009024:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009028:	2a30      	cmp	r2, #48	@ 0x30
 800902a:	d0fa      	beq.n	8009022 <_dtoa_r+0xb22>
 800902c:	e4b5      	b.n	800899a <_dtoa_r+0x49a>
 800902e:	459a      	cmp	sl, r3
 8009030:	d1a8      	bne.n	8008f84 <_dtoa_r+0xa84>
 8009032:	2331      	movs	r3, #49	@ 0x31
 8009034:	f108 0801 	add.w	r8, r8, #1
 8009038:	f88a 3000 	strb.w	r3, [sl]
 800903c:	e4ad      	b.n	800899a <_dtoa_r+0x49a>
 800903e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009040:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800909c <_dtoa_r+0xb9c>
 8009044:	b11b      	cbz	r3, 800904e <_dtoa_r+0xb4e>
 8009046:	f10a 0308 	add.w	r3, sl, #8
 800904a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	4650      	mov	r0, sl
 8009050:	b017      	add	sp, #92	@ 0x5c
 8009052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009056:	9b07      	ldr	r3, [sp, #28]
 8009058:	2b01      	cmp	r3, #1
 800905a:	f77f ae2e 	ble.w	8008cba <_dtoa_r+0x7ba>
 800905e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009060:	9308      	str	r3, [sp, #32]
 8009062:	2001      	movs	r0, #1
 8009064:	e64d      	b.n	8008d02 <_dtoa_r+0x802>
 8009066:	f1bb 0f00 	cmp.w	fp, #0
 800906a:	f77f aed9 	ble.w	8008e20 <_dtoa_r+0x920>
 800906e:	4656      	mov	r6, sl
 8009070:	9802      	ldr	r0, [sp, #8]
 8009072:	4621      	mov	r1, r4
 8009074:	f7ff f9bb 	bl	80083ee <quorem>
 8009078:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800907c:	f806 3b01 	strb.w	r3, [r6], #1
 8009080:	eba6 020a 	sub.w	r2, r6, sl
 8009084:	4593      	cmp	fp, r2
 8009086:	ddb4      	ble.n	8008ff2 <_dtoa_r+0xaf2>
 8009088:	9902      	ldr	r1, [sp, #8]
 800908a:	2300      	movs	r3, #0
 800908c:	220a      	movs	r2, #10
 800908e:	4648      	mov	r0, r9
 8009090:	f000 f968 	bl	8009364 <__multadd>
 8009094:	9002      	str	r0, [sp, #8]
 8009096:	e7eb      	b.n	8009070 <_dtoa_r+0xb70>
 8009098:	0800aaa4 	.word	0x0800aaa4
 800909c:	0800aa28 	.word	0x0800aa28

080090a0 <_free_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4605      	mov	r5, r0
 80090a4:	2900      	cmp	r1, #0
 80090a6:	d041      	beq.n	800912c <_free_r+0x8c>
 80090a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ac:	1f0c      	subs	r4, r1, #4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bfb8      	it	lt
 80090b2:	18e4      	addlt	r4, r4, r3
 80090b4:	f000 f8e8 	bl	8009288 <__malloc_lock>
 80090b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009130 <_free_r+0x90>)
 80090ba:	6813      	ldr	r3, [r2, #0]
 80090bc:	b933      	cbnz	r3, 80090cc <_free_r+0x2c>
 80090be:	6063      	str	r3, [r4, #4]
 80090c0:	6014      	str	r4, [r2, #0]
 80090c2:	4628      	mov	r0, r5
 80090c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090c8:	f000 b8e4 	b.w	8009294 <__malloc_unlock>
 80090cc:	42a3      	cmp	r3, r4
 80090ce:	d908      	bls.n	80090e2 <_free_r+0x42>
 80090d0:	6820      	ldr	r0, [r4, #0]
 80090d2:	1821      	adds	r1, r4, r0
 80090d4:	428b      	cmp	r3, r1
 80090d6:	bf01      	itttt	eq
 80090d8:	6819      	ldreq	r1, [r3, #0]
 80090da:	685b      	ldreq	r3, [r3, #4]
 80090dc:	1809      	addeq	r1, r1, r0
 80090de:	6021      	streq	r1, [r4, #0]
 80090e0:	e7ed      	b.n	80090be <_free_r+0x1e>
 80090e2:	461a      	mov	r2, r3
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	b10b      	cbz	r3, 80090ec <_free_r+0x4c>
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	d9fa      	bls.n	80090e2 <_free_r+0x42>
 80090ec:	6811      	ldr	r1, [r2, #0]
 80090ee:	1850      	adds	r0, r2, r1
 80090f0:	42a0      	cmp	r0, r4
 80090f2:	d10b      	bne.n	800910c <_free_r+0x6c>
 80090f4:	6820      	ldr	r0, [r4, #0]
 80090f6:	4401      	add	r1, r0
 80090f8:	1850      	adds	r0, r2, r1
 80090fa:	4283      	cmp	r3, r0
 80090fc:	6011      	str	r1, [r2, #0]
 80090fe:	d1e0      	bne.n	80090c2 <_free_r+0x22>
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	6053      	str	r3, [r2, #4]
 8009106:	4408      	add	r0, r1
 8009108:	6010      	str	r0, [r2, #0]
 800910a:	e7da      	b.n	80090c2 <_free_r+0x22>
 800910c:	d902      	bls.n	8009114 <_free_r+0x74>
 800910e:	230c      	movs	r3, #12
 8009110:	602b      	str	r3, [r5, #0]
 8009112:	e7d6      	b.n	80090c2 <_free_r+0x22>
 8009114:	6820      	ldr	r0, [r4, #0]
 8009116:	1821      	adds	r1, r4, r0
 8009118:	428b      	cmp	r3, r1
 800911a:	bf04      	itt	eq
 800911c:	6819      	ldreq	r1, [r3, #0]
 800911e:	685b      	ldreq	r3, [r3, #4]
 8009120:	6063      	str	r3, [r4, #4]
 8009122:	bf04      	itt	eq
 8009124:	1809      	addeq	r1, r1, r0
 8009126:	6021      	streq	r1, [r4, #0]
 8009128:	6054      	str	r4, [r2, #4]
 800912a:	e7ca      	b.n	80090c2 <_free_r+0x22>
 800912c:	bd38      	pop	{r3, r4, r5, pc}
 800912e:	bf00      	nop
 8009130:	20000598 	.word	0x20000598

08009134 <malloc>:
 8009134:	4b02      	ldr	r3, [pc, #8]	@ (8009140 <malloc+0xc>)
 8009136:	4601      	mov	r1, r0
 8009138:	6818      	ldr	r0, [r3, #0]
 800913a:	f000 b825 	b.w	8009188 <_malloc_r>
 800913e:	bf00      	nop
 8009140:	2000002c 	.word	0x2000002c

08009144 <sbrk_aligned>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4e0f      	ldr	r6, [pc, #60]	@ (8009184 <sbrk_aligned+0x40>)
 8009148:	460c      	mov	r4, r1
 800914a:	6831      	ldr	r1, [r6, #0]
 800914c:	4605      	mov	r5, r0
 800914e:	b911      	cbnz	r1, 8009156 <sbrk_aligned+0x12>
 8009150:	f000 fccc 	bl	8009aec <_sbrk_r>
 8009154:	6030      	str	r0, [r6, #0]
 8009156:	4621      	mov	r1, r4
 8009158:	4628      	mov	r0, r5
 800915a:	f000 fcc7 	bl	8009aec <_sbrk_r>
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	d103      	bne.n	800916a <sbrk_aligned+0x26>
 8009162:	f04f 34ff 	mov.w	r4, #4294967295
 8009166:	4620      	mov	r0, r4
 8009168:	bd70      	pop	{r4, r5, r6, pc}
 800916a:	1cc4      	adds	r4, r0, #3
 800916c:	f024 0403 	bic.w	r4, r4, #3
 8009170:	42a0      	cmp	r0, r4
 8009172:	d0f8      	beq.n	8009166 <sbrk_aligned+0x22>
 8009174:	1a21      	subs	r1, r4, r0
 8009176:	4628      	mov	r0, r5
 8009178:	f000 fcb8 	bl	8009aec <_sbrk_r>
 800917c:	3001      	adds	r0, #1
 800917e:	d1f2      	bne.n	8009166 <sbrk_aligned+0x22>
 8009180:	e7ef      	b.n	8009162 <sbrk_aligned+0x1e>
 8009182:	bf00      	nop
 8009184:	20000594 	.word	0x20000594

08009188 <_malloc_r>:
 8009188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800918c:	1ccd      	adds	r5, r1, #3
 800918e:	f025 0503 	bic.w	r5, r5, #3
 8009192:	3508      	adds	r5, #8
 8009194:	2d0c      	cmp	r5, #12
 8009196:	bf38      	it	cc
 8009198:	250c      	movcc	r5, #12
 800919a:	2d00      	cmp	r5, #0
 800919c:	4606      	mov	r6, r0
 800919e:	db01      	blt.n	80091a4 <_malloc_r+0x1c>
 80091a0:	42a9      	cmp	r1, r5
 80091a2:	d904      	bls.n	80091ae <_malloc_r+0x26>
 80091a4:	230c      	movs	r3, #12
 80091a6:	6033      	str	r3, [r6, #0]
 80091a8:	2000      	movs	r0, #0
 80091aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009284 <_malloc_r+0xfc>
 80091b2:	f000 f869 	bl	8009288 <__malloc_lock>
 80091b6:	f8d8 3000 	ldr.w	r3, [r8]
 80091ba:	461c      	mov	r4, r3
 80091bc:	bb44      	cbnz	r4, 8009210 <_malloc_r+0x88>
 80091be:	4629      	mov	r1, r5
 80091c0:	4630      	mov	r0, r6
 80091c2:	f7ff ffbf 	bl	8009144 <sbrk_aligned>
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	4604      	mov	r4, r0
 80091ca:	d158      	bne.n	800927e <_malloc_r+0xf6>
 80091cc:	f8d8 4000 	ldr.w	r4, [r8]
 80091d0:	4627      	mov	r7, r4
 80091d2:	2f00      	cmp	r7, #0
 80091d4:	d143      	bne.n	800925e <_malloc_r+0xd6>
 80091d6:	2c00      	cmp	r4, #0
 80091d8:	d04b      	beq.n	8009272 <_malloc_r+0xea>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	4639      	mov	r1, r7
 80091de:	4630      	mov	r0, r6
 80091e0:	eb04 0903 	add.w	r9, r4, r3
 80091e4:	f000 fc82 	bl	8009aec <_sbrk_r>
 80091e8:	4581      	cmp	r9, r0
 80091ea:	d142      	bne.n	8009272 <_malloc_r+0xea>
 80091ec:	6821      	ldr	r1, [r4, #0]
 80091ee:	1a6d      	subs	r5, r5, r1
 80091f0:	4629      	mov	r1, r5
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7ff ffa6 	bl	8009144 <sbrk_aligned>
 80091f8:	3001      	adds	r0, #1
 80091fa:	d03a      	beq.n	8009272 <_malloc_r+0xea>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	442b      	add	r3, r5
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	f8d8 3000 	ldr.w	r3, [r8]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	bb62      	cbnz	r2, 8009264 <_malloc_r+0xdc>
 800920a:	f8c8 7000 	str.w	r7, [r8]
 800920e:	e00f      	b.n	8009230 <_malloc_r+0xa8>
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	1b52      	subs	r2, r2, r5
 8009214:	d420      	bmi.n	8009258 <_malloc_r+0xd0>
 8009216:	2a0b      	cmp	r2, #11
 8009218:	d917      	bls.n	800924a <_malloc_r+0xc2>
 800921a:	1961      	adds	r1, r4, r5
 800921c:	42a3      	cmp	r3, r4
 800921e:	6025      	str	r5, [r4, #0]
 8009220:	bf18      	it	ne
 8009222:	6059      	strne	r1, [r3, #4]
 8009224:	6863      	ldr	r3, [r4, #4]
 8009226:	bf08      	it	eq
 8009228:	f8c8 1000 	streq.w	r1, [r8]
 800922c:	5162      	str	r2, [r4, r5]
 800922e:	604b      	str	r3, [r1, #4]
 8009230:	4630      	mov	r0, r6
 8009232:	f000 f82f 	bl	8009294 <__malloc_unlock>
 8009236:	f104 000b 	add.w	r0, r4, #11
 800923a:	1d23      	adds	r3, r4, #4
 800923c:	f020 0007 	bic.w	r0, r0, #7
 8009240:	1ac2      	subs	r2, r0, r3
 8009242:	bf1c      	itt	ne
 8009244:	1a1b      	subne	r3, r3, r0
 8009246:	50a3      	strne	r3, [r4, r2]
 8009248:	e7af      	b.n	80091aa <_malloc_r+0x22>
 800924a:	6862      	ldr	r2, [r4, #4]
 800924c:	42a3      	cmp	r3, r4
 800924e:	bf0c      	ite	eq
 8009250:	f8c8 2000 	streq.w	r2, [r8]
 8009254:	605a      	strne	r2, [r3, #4]
 8009256:	e7eb      	b.n	8009230 <_malloc_r+0xa8>
 8009258:	4623      	mov	r3, r4
 800925a:	6864      	ldr	r4, [r4, #4]
 800925c:	e7ae      	b.n	80091bc <_malloc_r+0x34>
 800925e:	463c      	mov	r4, r7
 8009260:	687f      	ldr	r7, [r7, #4]
 8009262:	e7b6      	b.n	80091d2 <_malloc_r+0x4a>
 8009264:	461a      	mov	r2, r3
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	42a3      	cmp	r3, r4
 800926a:	d1fb      	bne.n	8009264 <_malloc_r+0xdc>
 800926c:	2300      	movs	r3, #0
 800926e:	6053      	str	r3, [r2, #4]
 8009270:	e7de      	b.n	8009230 <_malloc_r+0xa8>
 8009272:	230c      	movs	r3, #12
 8009274:	6033      	str	r3, [r6, #0]
 8009276:	4630      	mov	r0, r6
 8009278:	f000 f80c 	bl	8009294 <__malloc_unlock>
 800927c:	e794      	b.n	80091a8 <_malloc_r+0x20>
 800927e:	6005      	str	r5, [r0, #0]
 8009280:	e7d6      	b.n	8009230 <_malloc_r+0xa8>
 8009282:	bf00      	nop
 8009284:	20000598 	.word	0x20000598

08009288 <__malloc_lock>:
 8009288:	4801      	ldr	r0, [pc, #4]	@ (8009290 <__malloc_lock+0x8>)
 800928a:	f7ff b8ae 	b.w	80083ea <__retarget_lock_acquire_recursive>
 800928e:	bf00      	nop
 8009290:	20000590 	.word	0x20000590

08009294 <__malloc_unlock>:
 8009294:	4801      	ldr	r0, [pc, #4]	@ (800929c <__malloc_unlock+0x8>)
 8009296:	f7ff b8a9 	b.w	80083ec <__retarget_lock_release_recursive>
 800929a:	bf00      	nop
 800929c:	20000590 	.word	0x20000590

080092a0 <_Balloc>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	69c6      	ldr	r6, [r0, #28]
 80092a4:	4604      	mov	r4, r0
 80092a6:	460d      	mov	r5, r1
 80092a8:	b976      	cbnz	r6, 80092c8 <_Balloc+0x28>
 80092aa:	2010      	movs	r0, #16
 80092ac:	f7ff ff42 	bl	8009134 <malloc>
 80092b0:	4602      	mov	r2, r0
 80092b2:	61e0      	str	r0, [r4, #28]
 80092b4:	b920      	cbnz	r0, 80092c0 <_Balloc+0x20>
 80092b6:	4b18      	ldr	r3, [pc, #96]	@ (8009318 <_Balloc+0x78>)
 80092b8:	4818      	ldr	r0, [pc, #96]	@ (800931c <_Balloc+0x7c>)
 80092ba:	216b      	movs	r1, #107	@ 0x6b
 80092bc:	f000 fc34 	bl	8009b28 <__assert_func>
 80092c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092c4:	6006      	str	r6, [r0, #0]
 80092c6:	60c6      	str	r6, [r0, #12]
 80092c8:	69e6      	ldr	r6, [r4, #28]
 80092ca:	68f3      	ldr	r3, [r6, #12]
 80092cc:	b183      	cbz	r3, 80092f0 <_Balloc+0x50>
 80092ce:	69e3      	ldr	r3, [r4, #28]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092d6:	b9b8      	cbnz	r0, 8009308 <_Balloc+0x68>
 80092d8:	2101      	movs	r1, #1
 80092da:	fa01 f605 	lsl.w	r6, r1, r5
 80092de:	1d72      	adds	r2, r6, #5
 80092e0:	0092      	lsls	r2, r2, #2
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fc3e 	bl	8009b64 <_calloc_r>
 80092e8:	b160      	cbz	r0, 8009304 <_Balloc+0x64>
 80092ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092ee:	e00e      	b.n	800930e <_Balloc+0x6e>
 80092f0:	2221      	movs	r2, #33	@ 0x21
 80092f2:	2104      	movs	r1, #4
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 fc35 	bl	8009b64 <_calloc_r>
 80092fa:	69e3      	ldr	r3, [r4, #28]
 80092fc:	60f0      	str	r0, [r6, #12]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e4      	bne.n	80092ce <_Balloc+0x2e>
 8009304:	2000      	movs	r0, #0
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	6802      	ldr	r2, [r0, #0]
 800930a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800930e:	2300      	movs	r3, #0
 8009310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009314:	e7f7      	b.n	8009306 <_Balloc+0x66>
 8009316:	bf00      	nop
 8009318:	0800aa35 	.word	0x0800aa35
 800931c:	0800aab5 	.word	0x0800aab5

08009320 <_Bfree>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	69c6      	ldr	r6, [r0, #28]
 8009324:	4605      	mov	r5, r0
 8009326:	460c      	mov	r4, r1
 8009328:	b976      	cbnz	r6, 8009348 <_Bfree+0x28>
 800932a:	2010      	movs	r0, #16
 800932c:	f7ff ff02 	bl	8009134 <malloc>
 8009330:	4602      	mov	r2, r0
 8009332:	61e8      	str	r0, [r5, #28]
 8009334:	b920      	cbnz	r0, 8009340 <_Bfree+0x20>
 8009336:	4b09      	ldr	r3, [pc, #36]	@ (800935c <_Bfree+0x3c>)
 8009338:	4809      	ldr	r0, [pc, #36]	@ (8009360 <_Bfree+0x40>)
 800933a:	218f      	movs	r1, #143	@ 0x8f
 800933c:	f000 fbf4 	bl	8009b28 <__assert_func>
 8009340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009344:	6006      	str	r6, [r0, #0]
 8009346:	60c6      	str	r6, [r0, #12]
 8009348:	b13c      	cbz	r4, 800935a <_Bfree+0x3a>
 800934a:	69eb      	ldr	r3, [r5, #28]
 800934c:	6862      	ldr	r2, [r4, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009354:	6021      	str	r1, [r4, #0]
 8009356:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	0800aa35 	.word	0x0800aa35
 8009360:	0800aab5 	.word	0x0800aab5

08009364 <__multadd>:
 8009364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	690d      	ldr	r5, [r1, #16]
 800936a:	4607      	mov	r7, r0
 800936c:	460c      	mov	r4, r1
 800936e:	461e      	mov	r6, r3
 8009370:	f101 0c14 	add.w	ip, r1, #20
 8009374:	2000      	movs	r0, #0
 8009376:	f8dc 3000 	ldr.w	r3, [ip]
 800937a:	b299      	uxth	r1, r3
 800937c:	fb02 6101 	mla	r1, r2, r1, r6
 8009380:	0c1e      	lsrs	r6, r3, #16
 8009382:	0c0b      	lsrs	r3, r1, #16
 8009384:	fb02 3306 	mla	r3, r2, r6, r3
 8009388:	b289      	uxth	r1, r1
 800938a:	3001      	adds	r0, #1
 800938c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009390:	4285      	cmp	r5, r0
 8009392:	f84c 1b04 	str.w	r1, [ip], #4
 8009396:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800939a:	dcec      	bgt.n	8009376 <__multadd+0x12>
 800939c:	b30e      	cbz	r6, 80093e2 <__multadd+0x7e>
 800939e:	68a3      	ldr	r3, [r4, #8]
 80093a0:	42ab      	cmp	r3, r5
 80093a2:	dc19      	bgt.n	80093d8 <__multadd+0x74>
 80093a4:	6861      	ldr	r1, [r4, #4]
 80093a6:	4638      	mov	r0, r7
 80093a8:	3101      	adds	r1, #1
 80093aa:	f7ff ff79 	bl	80092a0 <_Balloc>
 80093ae:	4680      	mov	r8, r0
 80093b0:	b928      	cbnz	r0, 80093be <__multadd+0x5a>
 80093b2:	4602      	mov	r2, r0
 80093b4:	4b0c      	ldr	r3, [pc, #48]	@ (80093e8 <__multadd+0x84>)
 80093b6:	480d      	ldr	r0, [pc, #52]	@ (80093ec <__multadd+0x88>)
 80093b8:	21ba      	movs	r1, #186	@ 0xba
 80093ba:	f000 fbb5 	bl	8009b28 <__assert_func>
 80093be:	6922      	ldr	r2, [r4, #16]
 80093c0:	3202      	adds	r2, #2
 80093c2:	f104 010c 	add.w	r1, r4, #12
 80093c6:	0092      	lsls	r2, r2, #2
 80093c8:	300c      	adds	r0, #12
 80093ca:	f000 fb9f 	bl	8009b0c <memcpy>
 80093ce:	4621      	mov	r1, r4
 80093d0:	4638      	mov	r0, r7
 80093d2:	f7ff ffa5 	bl	8009320 <_Bfree>
 80093d6:	4644      	mov	r4, r8
 80093d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093dc:	3501      	adds	r5, #1
 80093de:	615e      	str	r6, [r3, #20]
 80093e0:	6125      	str	r5, [r4, #16]
 80093e2:	4620      	mov	r0, r4
 80093e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e8:	0800aaa4 	.word	0x0800aaa4
 80093ec:	0800aab5 	.word	0x0800aab5

080093f0 <__hi0bits>:
 80093f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80093f4:	4603      	mov	r3, r0
 80093f6:	bf36      	itet	cc
 80093f8:	0403      	lslcc	r3, r0, #16
 80093fa:	2000      	movcs	r0, #0
 80093fc:	2010      	movcc	r0, #16
 80093fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009402:	bf3c      	itt	cc
 8009404:	021b      	lslcc	r3, r3, #8
 8009406:	3008      	addcc	r0, #8
 8009408:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800940c:	bf3c      	itt	cc
 800940e:	011b      	lslcc	r3, r3, #4
 8009410:	3004      	addcc	r0, #4
 8009412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009416:	bf3c      	itt	cc
 8009418:	009b      	lslcc	r3, r3, #2
 800941a:	3002      	addcc	r0, #2
 800941c:	2b00      	cmp	r3, #0
 800941e:	db05      	blt.n	800942c <__hi0bits+0x3c>
 8009420:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009424:	f100 0001 	add.w	r0, r0, #1
 8009428:	bf08      	it	eq
 800942a:	2020      	moveq	r0, #32
 800942c:	4770      	bx	lr

0800942e <__lo0bits>:
 800942e:	6803      	ldr	r3, [r0, #0]
 8009430:	4602      	mov	r2, r0
 8009432:	f013 0007 	ands.w	r0, r3, #7
 8009436:	d00b      	beq.n	8009450 <__lo0bits+0x22>
 8009438:	07d9      	lsls	r1, r3, #31
 800943a:	d421      	bmi.n	8009480 <__lo0bits+0x52>
 800943c:	0798      	lsls	r0, r3, #30
 800943e:	bf49      	itett	mi
 8009440:	085b      	lsrmi	r3, r3, #1
 8009442:	089b      	lsrpl	r3, r3, #2
 8009444:	2001      	movmi	r0, #1
 8009446:	6013      	strmi	r3, [r2, #0]
 8009448:	bf5c      	itt	pl
 800944a:	6013      	strpl	r3, [r2, #0]
 800944c:	2002      	movpl	r0, #2
 800944e:	4770      	bx	lr
 8009450:	b299      	uxth	r1, r3
 8009452:	b909      	cbnz	r1, 8009458 <__lo0bits+0x2a>
 8009454:	0c1b      	lsrs	r3, r3, #16
 8009456:	2010      	movs	r0, #16
 8009458:	b2d9      	uxtb	r1, r3
 800945a:	b909      	cbnz	r1, 8009460 <__lo0bits+0x32>
 800945c:	3008      	adds	r0, #8
 800945e:	0a1b      	lsrs	r3, r3, #8
 8009460:	0719      	lsls	r1, r3, #28
 8009462:	bf04      	itt	eq
 8009464:	091b      	lsreq	r3, r3, #4
 8009466:	3004      	addeq	r0, #4
 8009468:	0799      	lsls	r1, r3, #30
 800946a:	bf04      	itt	eq
 800946c:	089b      	lsreq	r3, r3, #2
 800946e:	3002      	addeq	r0, #2
 8009470:	07d9      	lsls	r1, r3, #31
 8009472:	d403      	bmi.n	800947c <__lo0bits+0x4e>
 8009474:	085b      	lsrs	r3, r3, #1
 8009476:	f100 0001 	add.w	r0, r0, #1
 800947a:	d003      	beq.n	8009484 <__lo0bits+0x56>
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	4770      	bx	lr
 8009480:	2000      	movs	r0, #0
 8009482:	4770      	bx	lr
 8009484:	2020      	movs	r0, #32
 8009486:	4770      	bx	lr

08009488 <__i2b>:
 8009488:	b510      	push	{r4, lr}
 800948a:	460c      	mov	r4, r1
 800948c:	2101      	movs	r1, #1
 800948e:	f7ff ff07 	bl	80092a0 <_Balloc>
 8009492:	4602      	mov	r2, r0
 8009494:	b928      	cbnz	r0, 80094a2 <__i2b+0x1a>
 8009496:	4b05      	ldr	r3, [pc, #20]	@ (80094ac <__i2b+0x24>)
 8009498:	4805      	ldr	r0, [pc, #20]	@ (80094b0 <__i2b+0x28>)
 800949a:	f240 1145 	movw	r1, #325	@ 0x145
 800949e:	f000 fb43 	bl	8009b28 <__assert_func>
 80094a2:	2301      	movs	r3, #1
 80094a4:	6144      	str	r4, [r0, #20]
 80094a6:	6103      	str	r3, [r0, #16]
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	bf00      	nop
 80094ac:	0800aaa4 	.word	0x0800aaa4
 80094b0:	0800aab5 	.word	0x0800aab5

080094b4 <__multiply>:
 80094b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	4617      	mov	r7, r2
 80094ba:	690a      	ldr	r2, [r1, #16]
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	429a      	cmp	r2, r3
 80094c0:	bfa8      	it	ge
 80094c2:	463b      	movge	r3, r7
 80094c4:	4689      	mov	r9, r1
 80094c6:	bfa4      	itt	ge
 80094c8:	460f      	movge	r7, r1
 80094ca:	4699      	movge	r9, r3
 80094cc:	693d      	ldr	r5, [r7, #16]
 80094ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	eb05 060a 	add.w	r6, r5, sl
 80094da:	42b3      	cmp	r3, r6
 80094dc:	b085      	sub	sp, #20
 80094de:	bfb8      	it	lt
 80094e0:	3101      	addlt	r1, #1
 80094e2:	f7ff fedd 	bl	80092a0 <_Balloc>
 80094e6:	b930      	cbnz	r0, 80094f6 <__multiply+0x42>
 80094e8:	4602      	mov	r2, r0
 80094ea:	4b41      	ldr	r3, [pc, #260]	@ (80095f0 <__multiply+0x13c>)
 80094ec:	4841      	ldr	r0, [pc, #260]	@ (80095f4 <__multiply+0x140>)
 80094ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80094f2:	f000 fb19 	bl	8009b28 <__assert_func>
 80094f6:	f100 0414 	add.w	r4, r0, #20
 80094fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80094fe:	4623      	mov	r3, r4
 8009500:	2200      	movs	r2, #0
 8009502:	4573      	cmp	r3, lr
 8009504:	d320      	bcc.n	8009548 <__multiply+0x94>
 8009506:	f107 0814 	add.w	r8, r7, #20
 800950a:	f109 0114 	add.w	r1, r9, #20
 800950e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009512:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009516:	9302      	str	r3, [sp, #8]
 8009518:	1beb      	subs	r3, r5, r7
 800951a:	3b15      	subs	r3, #21
 800951c:	f023 0303 	bic.w	r3, r3, #3
 8009520:	3304      	adds	r3, #4
 8009522:	3715      	adds	r7, #21
 8009524:	42bd      	cmp	r5, r7
 8009526:	bf38      	it	cc
 8009528:	2304      	movcc	r3, #4
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	9b02      	ldr	r3, [sp, #8]
 800952e:	9103      	str	r1, [sp, #12]
 8009530:	428b      	cmp	r3, r1
 8009532:	d80c      	bhi.n	800954e <__multiply+0x9a>
 8009534:	2e00      	cmp	r6, #0
 8009536:	dd03      	ble.n	8009540 <__multiply+0x8c>
 8009538:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800953c:	2b00      	cmp	r3, #0
 800953e:	d055      	beq.n	80095ec <__multiply+0x138>
 8009540:	6106      	str	r6, [r0, #16]
 8009542:	b005      	add	sp, #20
 8009544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009548:	f843 2b04 	str.w	r2, [r3], #4
 800954c:	e7d9      	b.n	8009502 <__multiply+0x4e>
 800954e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009552:	f1ba 0f00 	cmp.w	sl, #0
 8009556:	d01f      	beq.n	8009598 <__multiply+0xe4>
 8009558:	46c4      	mov	ip, r8
 800955a:	46a1      	mov	r9, r4
 800955c:	2700      	movs	r7, #0
 800955e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009562:	f8d9 3000 	ldr.w	r3, [r9]
 8009566:	fa1f fb82 	uxth.w	fp, r2
 800956a:	b29b      	uxth	r3, r3
 800956c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009570:	443b      	add	r3, r7
 8009572:	f8d9 7000 	ldr.w	r7, [r9]
 8009576:	0c12      	lsrs	r2, r2, #16
 8009578:	0c3f      	lsrs	r7, r7, #16
 800957a:	fb0a 7202 	mla	r2, sl, r2, r7
 800957e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009582:	b29b      	uxth	r3, r3
 8009584:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009588:	4565      	cmp	r5, ip
 800958a:	f849 3b04 	str.w	r3, [r9], #4
 800958e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009592:	d8e4      	bhi.n	800955e <__multiply+0xaa>
 8009594:	9b01      	ldr	r3, [sp, #4]
 8009596:	50e7      	str	r7, [r4, r3]
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800959e:	3104      	adds	r1, #4
 80095a0:	f1b9 0f00 	cmp.w	r9, #0
 80095a4:	d020      	beq.n	80095e8 <__multiply+0x134>
 80095a6:	6823      	ldr	r3, [r4, #0]
 80095a8:	4647      	mov	r7, r8
 80095aa:	46a4      	mov	ip, r4
 80095ac:	f04f 0a00 	mov.w	sl, #0
 80095b0:	f8b7 b000 	ldrh.w	fp, [r7]
 80095b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80095b8:	fb09 220b 	mla	r2, r9, fp, r2
 80095bc:	4452      	add	r2, sl
 80095be:	b29b      	uxth	r3, r3
 80095c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095c4:	f84c 3b04 	str.w	r3, [ip], #4
 80095c8:	f857 3b04 	ldr.w	r3, [r7], #4
 80095cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095d0:	f8bc 3000 	ldrh.w	r3, [ip]
 80095d4:	fb09 330a 	mla	r3, r9, sl, r3
 80095d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80095dc:	42bd      	cmp	r5, r7
 80095de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095e2:	d8e5      	bhi.n	80095b0 <__multiply+0xfc>
 80095e4:	9a01      	ldr	r2, [sp, #4]
 80095e6:	50a3      	str	r3, [r4, r2]
 80095e8:	3404      	adds	r4, #4
 80095ea:	e79f      	b.n	800952c <__multiply+0x78>
 80095ec:	3e01      	subs	r6, #1
 80095ee:	e7a1      	b.n	8009534 <__multiply+0x80>
 80095f0:	0800aaa4 	.word	0x0800aaa4
 80095f4:	0800aab5 	.word	0x0800aab5

080095f8 <__pow5mult>:
 80095f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095fc:	4615      	mov	r5, r2
 80095fe:	f012 0203 	ands.w	r2, r2, #3
 8009602:	4607      	mov	r7, r0
 8009604:	460e      	mov	r6, r1
 8009606:	d007      	beq.n	8009618 <__pow5mult+0x20>
 8009608:	4c25      	ldr	r4, [pc, #148]	@ (80096a0 <__pow5mult+0xa8>)
 800960a:	3a01      	subs	r2, #1
 800960c:	2300      	movs	r3, #0
 800960e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009612:	f7ff fea7 	bl	8009364 <__multadd>
 8009616:	4606      	mov	r6, r0
 8009618:	10ad      	asrs	r5, r5, #2
 800961a:	d03d      	beq.n	8009698 <__pow5mult+0xa0>
 800961c:	69fc      	ldr	r4, [r7, #28]
 800961e:	b97c      	cbnz	r4, 8009640 <__pow5mult+0x48>
 8009620:	2010      	movs	r0, #16
 8009622:	f7ff fd87 	bl	8009134 <malloc>
 8009626:	4602      	mov	r2, r0
 8009628:	61f8      	str	r0, [r7, #28]
 800962a:	b928      	cbnz	r0, 8009638 <__pow5mult+0x40>
 800962c:	4b1d      	ldr	r3, [pc, #116]	@ (80096a4 <__pow5mult+0xac>)
 800962e:	481e      	ldr	r0, [pc, #120]	@ (80096a8 <__pow5mult+0xb0>)
 8009630:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009634:	f000 fa78 	bl	8009b28 <__assert_func>
 8009638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800963c:	6004      	str	r4, [r0, #0]
 800963e:	60c4      	str	r4, [r0, #12]
 8009640:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009648:	b94c      	cbnz	r4, 800965e <__pow5mult+0x66>
 800964a:	f240 2171 	movw	r1, #625	@ 0x271
 800964e:	4638      	mov	r0, r7
 8009650:	f7ff ff1a 	bl	8009488 <__i2b>
 8009654:	2300      	movs	r3, #0
 8009656:	f8c8 0008 	str.w	r0, [r8, #8]
 800965a:	4604      	mov	r4, r0
 800965c:	6003      	str	r3, [r0, #0]
 800965e:	f04f 0900 	mov.w	r9, #0
 8009662:	07eb      	lsls	r3, r5, #31
 8009664:	d50a      	bpl.n	800967c <__pow5mult+0x84>
 8009666:	4631      	mov	r1, r6
 8009668:	4622      	mov	r2, r4
 800966a:	4638      	mov	r0, r7
 800966c:	f7ff ff22 	bl	80094b4 <__multiply>
 8009670:	4631      	mov	r1, r6
 8009672:	4680      	mov	r8, r0
 8009674:	4638      	mov	r0, r7
 8009676:	f7ff fe53 	bl	8009320 <_Bfree>
 800967a:	4646      	mov	r6, r8
 800967c:	106d      	asrs	r5, r5, #1
 800967e:	d00b      	beq.n	8009698 <__pow5mult+0xa0>
 8009680:	6820      	ldr	r0, [r4, #0]
 8009682:	b938      	cbnz	r0, 8009694 <__pow5mult+0x9c>
 8009684:	4622      	mov	r2, r4
 8009686:	4621      	mov	r1, r4
 8009688:	4638      	mov	r0, r7
 800968a:	f7ff ff13 	bl	80094b4 <__multiply>
 800968e:	6020      	str	r0, [r4, #0]
 8009690:	f8c0 9000 	str.w	r9, [r0]
 8009694:	4604      	mov	r4, r0
 8009696:	e7e4      	b.n	8009662 <__pow5mult+0x6a>
 8009698:	4630      	mov	r0, r6
 800969a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800969e:	bf00      	nop
 80096a0:	0800ab68 	.word	0x0800ab68
 80096a4:	0800aa35 	.word	0x0800aa35
 80096a8:	0800aab5 	.word	0x0800aab5

080096ac <__lshift>:
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	460c      	mov	r4, r1
 80096b2:	6849      	ldr	r1, [r1, #4]
 80096b4:	6923      	ldr	r3, [r4, #16]
 80096b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096ba:	68a3      	ldr	r3, [r4, #8]
 80096bc:	4607      	mov	r7, r0
 80096be:	4691      	mov	r9, r2
 80096c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096c4:	f108 0601 	add.w	r6, r8, #1
 80096c8:	42b3      	cmp	r3, r6
 80096ca:	db0b      	blt.n	80096e4 <__lshift+0x38>
 80096cc:	4638      	mov	r0, r7
 80096ce:	f7ff fde7 	bl	80092a0 <_Balloc>
 80096d2:	4605      	mov	r5, r0
 80096d4:	b948      	cbnz	r0, 80096ea <__lshift+0x3e>
 80096d6:	4602      	mov	r2, r0
 80096d8:	4b28      	ldr	r3, [pc, #160]	@ (800977c <__lshift+0xd0>)
 80096da:	4829      	ldr	r0, [pc, #164]	@ (8009780 <__lshift+0xd4>)
 80096dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80096e0:	f000 fa22 	bl	8009b28 <__assert_func>
 80096e4:	3101      	adds	r1, #1
 80096e6:	005b      	lsls	r3, r3, #1
 80096e8:	e7ee      	b.n	80096c8 <__lshift+0x1c>
 80096ea:	2300      	movs	r3, #0
 80096ec:	f100 0114 	add.w	r1, r0, #20
 80096f0:	f100 0210 	add.w	r2, r0, #16
 80096f4:	4618      	mov	r0, r3
 80096f6:	4553      	cmp	r3, sl
 80096f8:	db33      	blt.n	8009762 <__lshift+0xb6>
 80096fa:	6920      	ldr	r0, [r4, #16]
 80096fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009700:	f104 0314 	add.w	r3, r4, #20
 8009704:	f019 091f 	ands.w	r9, r9, #31
 8009708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800970c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009710:	d02b      	beq.n	800976a <__lshift+0xbe>
 8009712:	f1c9 0e20 	rsb	lr, r9, #32
 8009716:	468a      	mov	sl, r1
 8009718:	2200      	movs	r2, #0
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	fa00 f009 	lsl.w	r0, r0, r9
 8009720:	4310      	orrs	r0, r2
 8009722:	f84a 0b04 	str.w	r0, [sl], #4
 8009726:	f853 2b04 	ldr.w	r2, [r3], #4
 800972a:	459c      	cmp	ip, r3
 800972c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009730:	d8f3      	bhi.n	800971a <__lshift+0x6e>
 8009732:	ebac 0304 	sub.w	r3, ip, r4
 8009736:	3b15      	subs	r3, #21
 8009738:	f023 0303 	bic.w	r3, r3, #3
 800973c:	3304      	adds	r3, #4
 800973e:	f104 0015 	add.w	r0, r4, #21
 8009742:	4560      	cmp	r0, ip
 8009744:	bf88      	it	hi
 8009746:	2304      	movhi	r3, #4
 8009748:	50ca      	str	r2, [r1, r3]
 800974a:	b10a      	cbz	r2, 8009750 <__lshift+0xa4>
 800974c:	f108 0602 	add.w	r6, r8, #2
 8009750:	3e01      	subs	r6, #1
 8009752:	4638      	mov	r0, r7
 8009754:	612e      	str	r6, [r5, #16]
 8009756:	4621      	mov	r1, r4
 8009758:	f7ff fde2 	bl	8009320 <_Bfree>
 800975c:	4628      	mov	r0, r5
 800975e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009762:	f842 0f04 	str.w	r0, [r2, #4]!
 8009766:	3301      	adds	r3, #1
 8009768:	e7c5      	b.n	80096f6 <__lshift+0x4a>
 800976a:	3904      	subs	r1, #4
 800976c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009770:	f841 2f04 	str.w	r2, [r1, #4]!
 8009774:	459c      	cmp	ip, r3
 8009776:	d8f9      	bhi.n	800976c <__lshift+0xc0>
 8009778:	e7ea      	b.n	8009750 <__lshift+0xa4>
 800977a:	bf00      	nop
 800977c:	0800aaa4 	.word	0x0800aaa4
 8009780:	0800aab5 	.word	0x0800aab5

08009784 <__mcmp>:
 8009784:	690a      	ldr	r2, [r1, #16]
 8009786:	4603      	mov	r3, r0
 8009788:	6900      	ldr	r0, [r0, #16]
 800978a:	1a80      	subs	r0, r0, r2
 800978c:	b530      	push	{r4, r5, lr}
 800978e:	d10e      	bne.n	80097ae <__mcmp+0x2a>
 8009790:	3314      	adds	r3, #20
 8009792:	3114      	adds	r1, #20
 8009794:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009798:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800979c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097a4:	4295      	cmp	r5, r2
 80097a6:	d003      	beq.n	80097b0 <__mcmp+0x2c>
 80097a8:	d205      	bcs.n	80097b6 <__mcmp+0x32>
 80097aa:	f04f 30ff 	mov.w	r0, #4294967295
 80097ae:	bd30      	pop	{r4, r5, pc}
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	d3f3      	bcc.n	800979c <__mcmp+0x18>
 80097b4:	e7fb      	b.n	80097ae <__mcmp+0x2a>
 80097b6:	2001      	movs	r0, #1
 80097b8:	e7f9      	b.n	80097ae <__mcmp+0x2a>
	...

080097bc <__mdiff>:
 80097bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c0:	4689      	mov	r9, r1
 80097c2:	4606      	mov	r6, r0
 80097c4:	4611      	mov	r1, r2
 80097c6:	4648      	mov	r0, r9
 80097c8:	4614      	mov	r4, r2
 80097ca:	f7ff ffdb 	bl	8009784 <__mcmp>
 80097ce:	1e05      	subs	r5, r0, #0
 80097d0:	d112      	bne.n	80097f8 <__mdiff+0x3c>
 80097d2:	4629      	mov	r1, r5
 80097d4:	4630      	mov	r0, r6
 80097d6:	f7ff fd63 	bl	80092a0 <_Balloc>
 80097da:	4602      	mov	r2, r0
 80097dc:	b928      	cbnz	r0, 80097ea <__mdiff+0x2e>
 80097de:	4b3f      	ldr	r3, [pc, #252]	@ (80098dc <__mdiff+0x120>)
 80097e0:	f240 2137 	movw	r1, #567	@ 0x237
 80097e4:	483e      	ldr	r0, [pc, #248]	@ (80098e0 <__mdiff+0x124>)
 80097e6:	f000 f99f 	bl	8009b28 <__assert_func>
 80097ea:	2301      	movs	r3, #1
 80097ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097f0:	4610      	mov	r0, r2
 80097f2:	b003      	add	sp, #12
 80097f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f8:	bfbc      	itt	lt
 80097fa:	464b      	movlt	r3, r9
 80097fc:	46a1      	movlt	r9, r4
 80097fe:	4630      	mov	r0, r6
 8009800:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009804:	bfba      	itte	lt
 8009806:	461c      	movlt	r4, r3
 8009808:	2501      	movlt	r5, #1
 800980a:	2500      	movge	r5, #0
 800980c:	f7ff fd48 	bl	80092a0 <_Balloc>
 8009810:	4602      	mov	r2, r0
 8009812:	b918      	cbnz	r0, 800981c <__mdiff+0x60>
 8009814:	4b31      	ldr	r3, [pc, #196]	@ (80098dc <__mdiff+0x120>)
 8009816:	f240 2145 	movw	r1, #581	@ 0x245
 800981a:	e7e3      	b.n	80097e4 <__mdiff+0x28>
 800981c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009820:	6926      	ldr	r6, [r4, #16]
 8009822:	60c5      	str	r5, [r0, #12]
 8009824:	f109 0310 	add.w	r3, r9, #16
 8009828:	f109 0514 	add.w	r5, r9, #20
 800982c:	f104 0e14 	add.w	lr, r4, #20
 8009830:	f100 0b14 	add.w	fp, r0, #20
 8009834:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009838:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	46d9      	mov	r9, fp
 8009840:	f04f 0c00 	mov.w	ip, #0
 8009844:	9b01      	ldr	r3, [sp, #4]
 8009846:	f85e 0b04 	ldr.w	r0, [lr], #4
 800984a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800984e:	9301      	str	r3, [sp, #4]
 8009850:	fa1f f38a 	uxth.w	r3, sl
 8009854:	4619      	mov	r1, r3
 8009856:	b283      	uxth	r3, r0
 8009858:	1acb      	subs	r3, r1, r3
 800985a:	0c00      	lsrs	r0, r0, #16
 800985c:	4463      	add	r3, ip
 800985e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009862:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009866:	b29b      	uxth	r3, r3
 8009868:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800986c:	4576      	cmp	r6, lr
 800986e:	f849 3b04 	str.w	r3, [r9], #4
 8009872:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009876:	d8e5      	bhi.n	8009844 <__mdiff+0x88>
 8009878:	1b33      	subs	r3, r6, r4
 800987a:	3b15      	subs	r3, #21
 800987c:	f023 0303 	bic.w	r3, r3, #3
 8009880:	3415      	adds	r4, #21
 8009882:	3304      	adds	r3, #4
 8009884:	42a6      	cmp	r6, r4
 8009886:	bf38      	it	cc
 8009888:	2304      	movcc	r3, #4
 800988a:	441d      	add	r5, r3
 800988c:	445b      	add	r3, fp
 800988e:	461e      	mov	r6, r3
 8009890:	462c      	mov	r4, r5
 8009892:	4544      	cmp	r4, r8
 8009894:	d30e      	bcc.n	80098b4 <__mdiff+0xf8>
 8009896:	f108 0103 	add.w	r1, r8, #3
 800989a:	1b49      	subs	r1, r1, r5
 800989c:	f021 0103 	bic.w	r1, r1, #3
 80098a0:	3d03      	subs	r5, #3
 80098a2:	45a8      	cmp	r8, r5
 80098a4:	bf38      	it	cc
 80098a6:	2100      	movcc	r1, #0
 80098a8:	440b      	add	r3, r1
 80098aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098ae:	b191      	cbz	r1, 80098d6 <__mdiff+0x11a>
 80098b0:	6117      	str	r7, [r2, #16]
 80098b2:	e79d      	b.n	80097f0 <__mdiff+0x34>
 80098b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80098b8:	46e6      	mov	lr, ip
 80098ba:	0c08      	lsrs	r0, r1, #16
 80098bc:	fa1c fc81 	uxtah	ip, ip, r1
 80098c0:	4471      	add	r1, lr
 80098c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80098c6:	b289      	uxth	r1, r1
 80098c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80098cc:	f846 1b04 	str.w	r1, [r6], #4
 80098d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098d4:	e7dd      	b.n	8009892 <__mdiff+0xd6>
 80098d6:	3f01      	subs	r7, #1
 80098d8:	e7e7      	b.n	80098aa <__mdiff+0xee>
 80098da:	bf00      	nop
 80098dc:	0800aaa4 	.word	0x0800aaa4
 80098e0:	0800aab5 	.word	0x0800aab5

080098e4 <__d2b>:
 80098e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098e8:	460f      	mov	r7, r1
 80098ea:	2101      	movs	r1, #1
 80098ec:	ec59 8b10 	vmov	r8, r9, d0
 80098f0:	4616      	mov	r6, r2
 80098f2:	f7ff fcd5 	bl	80092a0 <_Balloc>
 80098f6:	4604      	mov	r4, r0
 80098f8:	b930      	cbnz	r0, 8009908 <__d2b+0x24>
 80098fa:	4602      	mov	r2, r0
 80098fc:	4b23      	ldr	r3, [pc, #140]	@ (800998c <__d2b+0xa8>)
 80098fe:	4824      	ldr	r0, [pc, #144]	@ (8009990 <__d2b+0xac>)
 8009900:	f240 310f 	movw	r1, #783	@ 0x30f
 8009904:	f000 f910 	bl	8009b28 <__assert_func>
 8009908:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800990c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009910:	b10d      	cbz	r5, 8009916 <__d2b+0x32>
 8009912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	f1b8 0300 	subs.w	r3, r8, #0
 800991c:	d023      	beq.n	8009966 <__d2b+0x82>
 800991e:	4668      	mov	r0, sp
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	f7ff fd84 	bl	800942e <__lo0bits>
 8009926:	e9dd 1200 	ldrd	r1, r2, [sp]
 800992a:	b1d0      	cbz	r0, 8009962 <__d2b+0x7e>
 800992c:	f1c0 0320 	rsb	r3, r0, #32
 8009930:	fa02 f303 	lsl.w	r3, r2, r3
 8009934:	430b      	orrs	r3, r1
 8009936:	40c2      	lsrs	r2, r0
 8009938:	6163      	str	r3, [r4, #20]
 800993a:	9201      	str	r2, [sp, #4]
 800993c:	9b01      	ldr	r3, [sp, #4]
 800993e:	61a3      	str	r3, [r4, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	bf0c      	ite	eq
 8009944:	2201      	moveq	r2, #1
 8009946:	2202      	movne	r2, #2
 8009948:	6122      	str	r2, [r4, #16]
 800994a:	b1a5      	cbz	r5, 8009976 <__d2b+0x92>
 800994c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009950:	4405      	add	r5, r0
 8009952:	603d      	str	r5, [r7, #0]
 8009954:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009958:	6030      	str	r0, [r6, #0]
 800995a:	4620      	mov	r0, r4
 800995c:	b003      	add	sp, #12
 800995e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009962:	6161      	str	r1, [r4, #20]
 8009964:	e7ea      	b.n	800993c <__d2b+0x58>
 8009966:	a801      	add	r0, sp, #4
 8009968:	f7ff fd61 	bl	800942e <__lo0bits>
 800996c:	9b01      	ldr	r3, [sp, #4]
 800996e:	6163      	str	r3, [r4, #20]
 8009970:	3020      	adds	r0, #32
 8009972:	2201      	movs	r2, #1
 8009974:	e7e8      	b.n	8009948 <__d2b+0x64>
 8009976:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800997a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800997e:	6038      	str	r0, [r7, #0]
 8009980:	6918      	ldr	r0, [r3, #16]
 8009982:	f7ff fd35 	bl	80093f0 <__hi0bits>
 8009986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800998a:	e7e5      	b.n	8009958 <__d2b+0x74>
 800998c:	0800aaa4 	.word	0x0800aaa4
 8009990:	0800aab5 	.word	0x0800aab5

08009994 <__sflush_r>:
 8009994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999c:	0716      	lsls	r6, r2, #28
 800999e:	4605      	mov	r5, r0
 80099a0:	460c      	mov	r4, r1
 80099a2:	d454      	bmi.n	8009a4e <__sflush_r+0xba>
 80099a4:	684b      	ldr	r3, [r1, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	dc02      	bgt.n	80099b0 <__sflush_r+0x1c>
 80099aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	dd48      	ble.n	8009a42 <__sflush_r+0xae>
 80099b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099b2:	2e00      	cmp	r6, #0
 80099b4:	d045      	beq.n	8009a42 <__sflush_r+0xae>
 80099b6:	2300      	movs	r3, #0
 80099b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099bc:	682f      	ldr	r7, [r5, #0]
 80099be:	6a21      	ldr	r1, [r4, #32]
 80099c0:	602b      	str	r3, [r5, #0]
 80099c2:	d030      	beq.n	8009a26 <__sflush_r+0x92>
 80099c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	0759      	lsls	r1, r3, #29
 80099ca:	d505      	bpl.n	80099d8 <__sflush_r+0x44>
 80099cc:	6863      	ldr	r3, [r4, #4]
 80099ce:	1ad2      	subs	r2, r2, r3
 80099d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099d2:	b10b      	cbz	r3, 80099d8 <__sflush_r+0x44>
 80099d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099d6:	1ad2      	subs	r2, r2, r3
 80099d8:	2300      	movs	r3, #0
 80099da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099dc:	6a21      	ldr	r1, [r4, #32]
 80099de:	4628      	mov	r0, r5
 80099e0:	47b0      	blx	r6
 80099e2:	1c43      	adds	r3, r0, #1
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	d106      	bne.n	80099f6 <__sflush_r+0x62>
 80099e8:	6829      	ldr	r1, [r5, #0]
 80099ea:	291d      	cmp	r1, #29
 80099ec:	d82b      	bhi.n	8009a46 <__sflush_r+0xb2>
 80099ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009a98 <__sflush_r+0x104>)
 80099f0:	40ca      	lsrs	r2, r1
 80099f2:	07d6      	lsls	r6, r2, #31
 80099f4:	d527      	bpl.n	8009a46 <__sflush_r+0xb2>
 80099f6:	2200      	movs	r2, #0
 80099f8:	6062      	str	r2, [r4, #4]
 80099fa:	04d9      	lsls	r1, r3, #19
 80099fc:	6922      	ldr	r2, [r4, #16]
 80099fe:	6022      	str	r2, [r4, #0]
 8009a00:	d504      	bpl.n	8009a0c <__sflush_r+0x78>
 8009a02:	1c42      	adds	r2, r0, #1
 8009a04:	d101      	bne.n	8009a0a <__sflush_r+0x76>
 8009a06:	682b      	ldr	r3, [r5, #0]
 8009a08:	b903      	cbnz	r3, 8009a0c <__sflush_r+0x78>
 8009a0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a0e:	602f      	str	r7, [r5, #0]
 8009a10:	b1b9      	cbz	r1, 8009a42 <__sflush_r+0xae>
 8009a12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a16:	4299      	cmp	r1, r3
 8009a18:	d002      	beq.n	8009a20 <__sflush_r+0x8c>
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f7ff fb40 	bl	80090a0 <_free_r>
 8009a20:	2300      	movs	r3, #0
 8009a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a24:	e00d      	b.n	8009a42 <__sflush_r+0xae>
 8009a26:	2301      	movs	r3, #1
 8009a28:	4628      	mov	r0, r5
 8009a2a:	47b0      	blx	r6
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	1c50      	adds	r0, r2, #1
 8009a30:	d1c9      	bne.n	80099c6 <__sflush_r+0x32>
 8009a32:	682b      	ldr	r3, [r5, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0c6      	beq.n	80099c6 <__sflush_r+0x32>
 8009a38:	2b1d      	cmp	r3, #29
 8009a3a:	d001      	beq.n	8009a40 <__sflush_r+0xac>
 8009a3c:	2b16      	cmp	r3, #22
 8009a3e:	d11e      	bne.n	8009a7e <__sflush_r+0xea>
 8009a40:	602f      	str	r7, [r5, #0]
 8009a42:	2000      	movs	r0, #0
 8009a44:	e022      	b.n	8009a8c <__sflush_r+0xf8>
 8009a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a4a:	b21b      	sxth	r3, r3
 8009a4c:	e01b      	b.n	8009a86 <__sflush_r+0xf2>
 8009a4e:	690f      	ldr	r7, [r1, #16]
 8009a50:	2f00      	cmp	r7, #0
 8009a52:	d0f6      	beq.n	8009a42 <__sflush_r+0xae>
 8009a54:	0793      	lsls	r3, r2, #30
 8009a56:	680e      	ldr	r6, [r1, #0]
 8009a58:	bf08      	it	eq
 8009a5a:	694b      	ldreq	r3, [r1, #20]
 8009a5c:	600f      	str	r7, [r1, #0]
 8009a5e:	bf18      	it	ne
 8009a60:	2300      	movne	r3, #0
 8009a62:	eba6 0807 	sub.w	r8, r6, r7
 8009a66:	608b      	str	r3, [r1, #8]
 8009a68:	f1b8 0f00 	cmp.w	r8, #0
 8009a6c:	dde9      	ble.n	8009a42 <__sflush_r+0xae>
 8009a6e:	6a21      	ldr	r1, [r4, #32]
 8009a70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a72:	4643      	mov	r3, r8
 8009a74:	463a      	mov	r2, r7
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b0      	blx	r6
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	dc08      	bgt.n	8009a90 <__sflush_r+0xfc>
 8009a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a86:	81a3      	strh	r3, [r4, #12]
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a90:	4407      	add	r7, r0
 8009a92:	eba8 0800 	sub.w	r8, r8, r0
 8009a96:	e7e7      	b.n	8009a68 <__sflush_r+0xd4>
 8009a98:	20400001 	.word	0x20400001

08009a9c <_fflush_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	690b      	ldr	r3, [r1, #16]
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	b913      	cbnz	r3, 8009aac <_fflush_r+0x10>
 8009aa6:	2500      	movs	r5, #0
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	b118      	cbz	r0, 8009ab6 <_fflush_r+0x1a>
 8009aae:	6a03      	ldr	r3, [r0, #32]
 8009ab0:	b90b      	cbnz	r3, 8009ab6 <_fflush_r+0x1a>
 8009ab2:	f7fe fba3 	bl	80081fc <__sinit>
 8009ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0f3      	beq.n	8009aa6 <_fflush_r+0xa>
 8009abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ac0:	07d0      	lsls	r0, r2, #31
 8009ac2:	d404      	bmi.n	8009ace <_fflush_r+0x32>
 8009ac4:	0599      	lsls	r1, r3, #22
 8009ac6:	d402      	bmi.n	8009ace <_fflush_r+0x32>
 8009ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009aca:	f7fe fc8e 	bl	80083ea <__retarget_lock_acquire_recursive>
 8009ace:	4628      	mov	r0, r5
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	f7ff ff5f 	bl	8009994 <__sflush_r>
 8009ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ad8:	07da      	lsls	r2, r3, #31
 8009ada:	4605      	mov	r5, r0
 8009adc:	d4e4      	bmi.n	8009aa8 <_fflush_r+0xc>
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	059b      	lsls	r3, r3, #22
 8009ae2:	d4e1      	bmi.n	8009aa8 <_fflush_r+0xc>
 8009ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ae6:	f7fe fc81 	bl	80083ec <__retarget_lock_release_recursive>
 8009aea:	e7dd      	b.n	8009aa8 <_fflush_r+0xc>

08009aec <_sbrk_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4d06      	ldr	r5, [pc, #24]	@ (8009b08 <_sbrk_r+0x1c>)
 8009af0:	2300      	movs	r3, #0
 8009af2:	4604      	mov	r4, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	f7f9 fa30 	bl	8002f5c <_sbrk>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_sbrk_r+0x1a>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_sbrk_r+0x1a>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	2000058c 	.word	0x2000058c

08009b0c <memcpy>:
 8009b0c:	440a      	add	r2, r1
 8009b0e:	4291      	cmp	r1, r2
 8009b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b14:	d100      	bne.n	8009b18 <memcpy+0xc>
 8009b16:	4770      	bx	lr
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b22:	4291      	cmp	r1, r2
 8009b24:	d1f9      	bne.n	8009b1a <memcpy+0xe>
 8009b26:	bd10      	pop	{r4, pc}

08009b28 <__assert_func>:
 8009b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b2a:	4614      	mov	r4, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4b09      	ldr	r3, [pc, #36]	@ (8009b54 <__assert_func+0x2c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4605      	mov	r5, r0
 8009b34:	68d8      	ldr	r0, [r3, #12]
 8009b36:	b14c      	cbz	r4, 8009b4c <__assert_func+0x24>
 8009b38:	4b07      	ldr	r3, [pc, #28]	@ (8009b58 <__assert_func+0x30>)
 8009b3a:	9100      	str	r1, [sp, #0]
 8009b3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b40:	4906      	ldr	r1, [pc, #24]	@ (8009b5c <__assert_func+0x34>)
 8009b42:	462b      	mov	r3, r5
 8009b44:	f000 f842 	bl	8009bcc <fiprintf>
 8009b48:	f000 f852 	bl	8009bf0 <abort>
 8009b4c:	4b04      	ldr	r3, [pc, #16]	@ (8009b60 <__assert_func+0x38>)
 8009b4e:	461c      	mov	r4, r3
 8009b50:	e7f3      	b.n	8009b3a <__assert_func+0x12>
 8009b52:	bf00      	nop
 8009b54:	2000002c 	.word	0x2000002c
 8009b58:	0800ab18 	.word	0x0800ab18
 8009b5c:	0800ab25 	.word	0x0800ab25
 8009b60:	0800ab53 	.word	0x0800ab53

08009b64 <_calloc_r>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	fba1 5402 	umull	r5, r4, r1, r2
 8009b6a:	b934      	cbnz	r4, 8009b7a <_calloc_r+0x16>
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	f7ff fb0b 	bl	8009188 <_malloc_r>
 8009b72:	4606      	mov	r6, r0
 8009b74:	b928      	cbnz	r0, 8009b82 <_calloc_r+0x1e>
 8009b76:	4630      	mov	r0, r6
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	220c      	movs	r2, #12
 8009b7c:	6002      	str	r2, [r0, #0]
 8009b7e:	2600      	movs	r6, #0
 8009b80:	e7f9      	b.n	8009b76 <_calloc_r+0x12>
 8009b82:	462a      	mov	r2, r5
 8009b84:	4621      	mov	r1, r4
 8009b86:	f7fe fbb2 	bl	80082ee <memset>
 8009b8a:	e7f4      	b.n	8009b76 <_calloc_r+0x12>

08009b8c <__ascii_mbtowc>:
 8009b8c:	b082      	sub	sp, #8
 8009b8e:	b901      	cbnz	r1, 8009b92 <__ascii_mbtowc+0x6>
 8009b90:	a901      	add	r1, sp, #4
 8009b92:	b142      	cbz	r2, 8009ba6 <__ascii_mbtowc+0x1a>
 8009b94:	b14b      	cbz	r3, 8009baa <__ascii_mbtowc+0x1e>
 8009b96:	7813      	ldrb	r3, [r2, #0]
 8009b98:	600b      	str	r3, [r1, #0]
 8009b9a:	7812      	ldrb	r2, [r2, #0]
 8009b9c:	1e10      	subs	r0, r2, #0
 8009b9e:	bf18      	it	ne
 8009ba0:	2001      	movne	r0, #1
 8009ba2:	b002      	add	sp, #8
 8009ba4:	4770      	bx	lr
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	e7fb      	b.n	8009ba2 <__ascii_mbtowc+0x16>
 8009baa:	f06f 0001 	mvn.w	r0, #1
 8009bae:	e7f8      	b.n	8009ba2 <__ascii_mbtowc+0x16>

08009bb0 <__ascii_wctomb>:
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	4608      	mov	r0, r1
 8009bb4:	b141      	cbz	r1, 8009bc8 <__ascii_wctomb+0x18>
 8009bb6:	2aff      	cmp	r2, #255	@ 0xff
 8009bb8:	d904      	bls.n	8009bc4 <__ascii_wctomb+0x14>
 8009bba:	228a      	movs	r2, #138	@ 0x8a
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc2:	4770      	bx	lr
 8009bc4:	700a      	strb	r2, [r1, #0]
 8009bc6:	2001      	movs	r0, #1
 8009bc8:	4770      	bx	lr
	...

08009bcc <fiprintf>:
 8009bcc:	b40e      	push	{r1, r2, r3}
 8009bce:	b503      	push	{r0, r1, lr}
 8009bd0:	4601      	mov	r1, r0
 8009bd2:	ab03      	add	r3, sp, #12
 8009bd4:	4805      	ldr	r0, [pc, #20]	@ (8009bec <fiprintf+0x20>)
 8009bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bda:	6800      	ldr	r0, [r0, #0]
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	f000 f837 	bl	8009c50 <_vfiprintf_r>
 8009be2:	b002      	add	sp, #8
 8009be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009be8:	b003      	add	sp, #12
 8009bea:	4770      	bx	lr
 8009bec:	2000002c 	.word	0x2000002c

08009bf0 <abort>:
 8009bf0:	b508      	push	{r3, lr}
 8009bf2:	2006      	movs	r0, #6
 8009bf4:	f000 fa00 	bl	8009ff8 <raise>
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	f7f9 f937 	bl	8002e6c <_exit>

08009bfe <__sfputc_r>:
 8009bfe:	6893      	ldr	r3, [r2, #8]
 8009c00:	3b01      	subs	r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	b410      	push	{r4}
 8009c06:	6093      	str	r3, [r2, #8]
 8009c08:	da08      	bge.n	8009c1c <__sfputc_r+0x1e>
 8009c0a:	6994      	ldr	r4, [r2, #24]
 8009c0c:	42a3      	cmp	r3, r4
 8009c0e:	db01      	blt.n	8009c14 <__sfputc_r+0x16>
 8009c10:	290a      	cmp	r1, #10
 8009c12:	d103      	bne.n	8009c1c <__sfputc_r+0x1e>
 8009c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c18:	f000 b932 	b.w	8009e80 <__swbuf_r>
 8009c1c:	6813      	ldr	r3, [r2, #0]
 8009c1e:	1c58      	adds	r0, r3, #1
 8009c20:	6010      	str	r0, [r2, #0]
 8009c22:	7019      	strb	r1, [r3, #0]
 8009c24:	4608      	mov	r0, r1
 8009c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <__sfputs_r>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	4606      	mov	r6, r0
 8009c30:	460f      	mov	r7, r1
 8009c32:	4614      	mov	r4, r2
 8009c34:	18d5      	adds	r5, r2, r3
 8009c36:	42ac      	cmp	r4, r5
 8009c38:	d101      	bne.n	8009c3e <__sfputs_r+0x12>
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	e007      	b.n	8009c4e <__sfputs_r+0x22>
 8009c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c42:	463a      	mov	r2, r7
 8009c44:	4630      	mov	r0, r6
 8009c46:	f7ff ffda 	bl	8009bfe <__sfputc_r>
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	d1f3      	bne.n	8009c36 <__sfputs_r+0xa>
 8009c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c50 <_vfiprintf_r>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	460d      	mov	r5, r1
 8009c56:	b09d      	sub	sp, #116	@ 0x74
 8009c58:	4614      	mov	r4, r2
 8009c5a:	4698      	mov	r8, r3
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	b118      	cbz	r0, 8009c68 <_vfiprintf_r+0x18>
 8009c60:	6a03      	ldr	r3, [r0, #32]
 8009c62:	b90b      	cbnz	r3, 8009c68 <_vfiprintf_r+0x18>
 8009c64:	f7fe faca 	bl	80081fc <__sinit>
 8009c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c6a:	07d9      	lsls	r1, r3, #31
 8009c6c:	d405      	bmi.n	8009c7a <_vfiprintf_r+0x2a>
 8009c6e:	89ab      	ldrh	r3, [r5, #12]
 8009c70:	059a      	lsls	r2, r3, #22
 8009c72:	d402      	bmi.n	8009c7a <_vfiprintf_r+0x2a>
 8009c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c76:	f7fe fbb8 	bl	80083ea <__retarget_lock_acquire_recursive>
 8009c7a:	89ab      	ldrh	r3, [r5, #12]
 8009c7c:	071b      	lsls	r3, r3, #28
 8009c7e:	d501      	bpl.n	8009c84 <_vfiprintf_r+0x34>
 8009c80:	692b      	ldr	r3, [r5, #16]
 8009c82:	b99b      	cbnz	r3, 8009cac <_vfiprintf_r+0x5c>
 8009c84:	4629      	mov	r1, r5
 8009c86:	4630      	mov	r0, r6
 8009c88:	f000 f938 	bl	8009efc <__swsetup_r>
 8009c8c:	b170      	cbz	r0, 8009cac <_vfiprintf_r+0x5c>
 8009c8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c90:	07dc      	lsls	r4, r3, #31
 8009c92:	d504      	bpl.n	8009c9e <_vfiprintf_r+0x4e>
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	b01d      	add	sp, #116	@ 0x74
 8009c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9e:	89ab      	ldrh	r3, [r5, #12]
 8009ca0:	0598      	lsls	r0, r3, #22
 8009ca2:	d4f7      	bmi.n	8009c94 <_vfiprintf_r+0x44>
 8009ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ca6:	f7fe fba1 	bl	80083ec <__retarget_lock_release_recursive>
 8009caa:	e7f3      	b.n	8009c94 <_vfiprintf_r+0x44>
 8009cac:	2300      	movs	r3, #0
 8009cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cba:	2330      	movs	r3, #48	@ 0x30
 8009cbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e6c <_vfiprintf_r+0x21c>
 8009cc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cc4:	f04f 0901 	mov.w	r9, #1
 8009cc8:	4623      	mov	r3, r4
 8009cca:	469a      	mov	sl, r3
 8009ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd0:	b10a      	cbz	r2, 8009cd6 <_vfiprintf_r+0x86>
 8009cd2:	2a25      	cmp	r2, #37	@ 0x25
 8009cd4:	d1f9      	bne.n	8009cca <_vfiprintf_r+0x7a>
 8009cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009cda:	d00b      	beq.n	8009cf4 <_vfiprintf_r+0xa4>
 8009cdc:	465b      	mov	r3, fp
 8009cde:	4622      	mov	r2, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7ff ffa2 	bl	8009c2c <__sfputs_r>
 8009ce8:	3001      	adds	r0, #1
 8009cea:	f000 80a7 	beq.w	8009e3c <_vfiprintf_r+0x1ec>
 8009cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cf0:	445a      	add	r2, fp
 8009cf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 809f 	beq.w	8009e3c <_vfiprintf_r+0x1ec>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f04f 32ff 	mov.w	r2, #4294967295
 8009d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d08:	f10a 0a01 	add.w	sl, sl, #1
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d16:	4654      	mov	r4, sl
 8009d18:	2205      	movs	r2, #5
 8009d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1e:	4853      	ldr	r0, [pc, #332]	@ (8009e6c <_vfiprintf_r+0x21c>)
 8009d20:	f7f6 fa56 	bl	80001d0 <memchr>
 8009d24:	9a04      	ldr	r2, [sp, #16]
 8009d26:	b9d8      	cbnz	r0, 8009d60 <_vfiprintf_r+0x110>
 8009d28:	06d1      	lsls	r1, r2, #27
 8009d2a:	bf44      	itt	mi
 8009d2c:	2320      	movmi	r3, #32
 8009d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d32:	0713      	lsls	r3, r2, #28
 8009d34:	bf44      	itt	mi
 8009d36:	232b      	movmi	r3, #43	@ 0x2b
 8009d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d42:	d015      	beq.n	8009d70 <_vfiprintf_r+0x120>
 8009d44:	9a07      	ldr	r2, [sp, #28]
 8009d46:	4654      	mov	r4, sl
 8009d48:	2000      	movs	r0, #0
 8009d4a:	f04f 0c0a 	mov.w	ip, #10
 8009d4e:	4621      	mov	r1, r4
 8009d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d54:	3b30      	subs	r3, #48	@ 0x30
 8009d56:	2b09      	cmp	r3, #9
 8009d58:	d94b      	bls.n	8009df2 <_vfiprintf_r+0x1a2>
 8009d5a:	b1b0      	cbz	r0, 8009d8a <_vfiprintf_r+0x13a>
 8009d5c:	9207      	str	r2, [sp, #28]
 8009d5e:	e014      	b.n	8009d8a <_vfiprintf_r+0x13a>
 8009d60:	eba0 0308 	sub.w	r3, r0, r8
 8009d64:	fa09 f303 	lsl.w	r3, r9, r3
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	46a2      	mov	sl, r4
 8009d6e:	e7d2      	b.n	8009d16 <_vfiprintf_r+0xc6>
 8009d70:	9b03      	ldr	r3, [sp, #12]
 8009d72:	1d19      	adds	r1, r3, #4
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	9103      	str	r1, [sp, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bfbb      	ittet	lt
 8009d7c:	425b      	neglt	r3, r3
 8009d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d82:	9307      	strge	r3, [sp, #28]
 8009d84:	9307      	strlt	r3, [sp, #28]
 8009d86:	bfb8      	it	lt
 8009d88:	9204      	strlt	r2, [sp, #16]
 8009d8a:	7823      	ldrb	r3, [r4, #0]
 8009d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d8e:	d10a      	bne.n	8009da6 <_vfiprintf_r+0x156>
 8009d90:	7863      	ldrb	r3, [r4, #1]
 8009d92:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d94:	d132      	bne.n	8009dfc <_vfiprintf_r+0x1ac>
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	1d1a      	adds	r2, r3, #4
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	9203      	str	r2, [sp, #12]
 8009d9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009da2:	3402      	adds	r4, #2
 8009da4:	9305      	str	r3, [sp, #20]
 8009da6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e7c <_vfiprintf_r+0x22c>
 8009daa:	7821      	ldrb	r1, [r4, #0]
 8009dac:	2203      	movs	r2, #3
 8009dae:	4650      	mov	r0, sl
 8009db0:	f7f6 fa0e 	bl	80001d0 <memchr>
 8009db4:	b138      	cbz	r0, 8009dc6 <_vfiprintf_r+0x176>
 8009db6:	9b04      	ldr	r3, [sp, #16]
 8009db8:	eba0 000a 	sub.w	r0, r0, sl
 8009dbc:	2240      	movs	r2, #64	@ 0x40
 8009dbe:	4082      	lsls	r2, r0
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	3401      	adds	r4, #1
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dca:	4829      	ldr	r0, [pc, #164]	@ (8009e70 <_vfiprintf_r+0x220>)
 8009dcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dd0:	2206      	movs	r2, #6
 8009dd2:	f7f6 f9fd 	bl	80001d0 <memchr>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d03f      	beq.n	8009e5a <_vfiprintf_r+0x20a>
 8009dda:	4b26      	ldr	r3, [pc, #152]	@ (8009e74 <_vfiprintf_r+0x224>)
 8009ddc:	bb1b      	cbnz	r3, 8009e26 <_vfiprintf_r+0x1d6>
 8009dde:	9b03      	ldr	r3, [sp, #12]
 8009de0:	3307      	adds	r3, #7
 8009de2:	f023 0307 	bic.w	r3, r3, #7
 8009de6:	3308      	adds	r3, #8
 8009de8:	9303      	str	r3, [sp, #12]
 8009dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dec:	443b      	add	r3, r7
 8009dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8009df0:	e76a      	b.n	8009cc8 <_vfiprintf_r+0x78>
 8009df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009df6:	460c      	mov	r4, r1
 8009df8:	2001      	movs	r0, #1
 8009dfa:	e7a8      	b.n	8009d4e <_vfiprintf_r+0xfe>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	3401      	adds	r4, #1
 8009e00:	9305      	str	r3, [sp, #20]
 8009e02:	4619      	mov	r1, r3
 8009e04:	f04f 0c0a 	mov.w	ip, #10
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e0e:	3a30      	subs	r2, #48	@ 0x30
 8009e10:	2a09      	cmp	r2, #9
 8009e12:	d903      	bls.n	8009e1c <_vfiprintf_r+0x1cc>
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0c6      	beq.n	8009da6 <_vfiprintf_r+0x156>
 8009e18:	9105      	str	r1, [sp, #20]
 8009e1a:	e7c4      	b.n	8009da6 <_vfiprintf_r+0x156>
 8009e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e20:	4604      	mov	r4, r0
 8009e22:	2301      	movs	r3, #1
 8009e24:	e7f0      	b.n	8009e08 <_vfiprintf_r+0x1b8>
 8009e26:	ab03      	add	r3, sp, #12
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	462a      	mov	r2, r5
 8009e2c:	4b12      	ldr	r3, [pc, #72]	@ (8009e78 <_vfiprintf_r+0x228>)
 8009e2e:	a904      	add	r1, sp, #16
 8009e30:	4630      	mov	r0, r6
 8009e32:	f7fd fda1 	bl	8007978 <_printf_float>
 8009e36:	4607      	mov	r7, r0
 8009e38:	1c78      	adds	r0, r7, #1
 8009e3a:	d1d6      	bne.n	8009dea <_vfiprintf_r+0x19a>
 8009e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e3e:	07d9      	lsls	r1, r3, #31
 8009e40:	d405      	bmi.n	8009e4e <_vfiprintf_r+0x1fe>
 8009e42:	89ab      	ldrh	r3, [r5, #12]
 8009e44:	059a      	lsls	r2, r3, #22
 8009e46:	d402      	bmi.n	8009e4e <_vfiprintf_r+0x1fe>
 8009e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e4a:	f7fe facf 	bl	80083ec <__retarget_lock_release_recursive>
 8009e4e:	89ab      	ldrh	r3, [r5, #12]
 8009e50:	065b      	lsls	r3, r3, #25
 8009e52:	f53f af1f 	bmi.w	8009c94 <_vfiprintf_r+0x44>
 8009e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e58:	e71e      	b.n	8009c98 <_vfiprintf_r+0x48>
 8009e5a:	ab03      	add	r3, sp, #12
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	462a      	mov	r2, r5
 8009e60:	4b05      	ldr	r3, [pc, #20]	@ (8009e78 <_vfiprintf_r+0x228>)
 8009e62:	a904      	add	r1, sp, #16
 8009e64:	4630      	mov	r0, r6
 8009e66:	f7fe f81f 	bl	8007ea8 <_printf_i>
 8009e6a:	e7e4      	b.n	8009e36 <_vfiprintf_r+0x1e6>
 8009e6c:	0800ab54 	.word	0x0800ab54
 8009e70:	0800ab5e 	.word	0x0800ab5e
 8009e74:	08007979 	.word	0x08007979
 8009e78:	08009c2d 	.word	0x08009c2d
 8009e7c:	0800ab5a 	.word	0x0800ab5a

08009e80 <__swbuf_r>:
 8009e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e82:	460e      	mov	r6, r1
 8009e84:	4614      	mov	r4, r2
 8009e86:	4605      	mov	r5, r0
 8009e88:	b118      	cbz	r0, 8009e92 <__swbuf_r+0x12>
 8009e8a:	6a03      	ldr	r3, [r0, #32]
 8009e8c:	b90b      	cbnz	r3, 8009e92 <__swbuf_r+0x12>
 8009e8e:	f7fe f9b5 	bl	80081fc <__sinit>
 8009e92:	69a3      	ldr	r3, [r4, #24]
 8009e94:	60a3      	str	r3, [r4, #8]
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	071a      	lsls	r2, r3, #28
 8009e9a:	d501      	bpl.n	8009ea0 <__swbuf_r+0x20>
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	b943      	cbnz	r3, 8009eb2 <__swbuf_r+0x32>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 f82a 	bl	8009efc <__swsetup_r>
 8009ea8:	b118      	cbz	r0, 8009eb2 <__swbuf_r+0x32>
 8009eaa:	f04f 37ff 	mov.w	r7, #4294967295
 8009eae:	4638      	mov	r0, r7
 8009eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	6922      	ldr	r2, [r4, #16]
 8009eb6:	1a98      	subs	r0, r3, r2
 8009eb8:	6963      	ldr	r3, [r4, #20]
 8009eba:	b2f6      	uxtb	r6, r6
 8009ebc:	4283      	cmp	r3, r0
 8009ebe:	4637      	mov	r7, r6
 8009ec0:	dc05      	bgt.n	8009ece <__swbuf_r+0x4e>
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	f7ff fde9 	bl	8009a9c <_fflush_r>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d1ed      	bne.n	8009eaa <__swbuf_r+0x2a>
 8009ece:	68a3      	ldr	r3, [r4, #8]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	60a3      	str	r3, [r4, #8]
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	1c5a      	adds	r2, r3, #1
 8009ed8:	6022      	str	r2, [r4, #0]
 8009eda:	701e      	strb	r6, [r3, #0]
 8009edc:	6962      	ldr	r2, [r4, #20]
 8009ede:	1c43      	adds	r3, r0, #1
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d004      	beq.n	8009eee <__swbuf_r+0x6e>
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	07db      	lsls	r3, r3, #31
 8009ee8:	d5e1      	bpl.n	8009eae <__swbuf_r+0x2e>
 8009eea:	2e0a      	cmp	r6, #10
 8009eec:	d1df      	bne.n	8009eae <__swbuf_r+0x2e>
 8009eee:	4621      	mov	r1, r4
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f7ff fdd3 	bl	8009a9c <_fflush_r>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d0d9      	beq.n	8009eae <__swbuf_r+0x2e>
 8009efa:	e7d6      	b.n	8009eaa <__swbuf_r+0x2a>

08009efc <__swsetup_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4b29      	ldr	r3, [pc, #164]	@ (8009fa4 <__swsetup_r+0xa8>)
 8009f00:	4605      	mov	r5, r0
 8009f02:	6818      	ldr	r0, [r3, #0]
 8009f04:	460c      	mov	r4, r1
 8009f06:	b118      	cbz	r0, 8009f10 <__swsetup_r+0x14>
 8009f08:	6a03      	ldr	r3, [r0, #32]
 8009f0a:	b90b      	cbnz	r3, 8009f10 <__swsetup_r+0x14>
 8009f0c:	f7fe f976 	bl	80081fc <__sinit>
 8009f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f14:	0719      	lsls	r1, r3, #28
 8009f16:	d422      	bmi.n	8009f5e <__swsetup_r+0x62>
 8009f18:	06da      	lsls	r2, r3, #27
 8009f1a:	d407      	bmi.n	8009f2c <__swsetup_r+0x30>
 8009f1c:	2209      	movs	r2, #9
 8009f1e:	602a      	str	r2, [r5, #0]
 8009f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2a:	e033      	b.n	8009f94 <__swsetup_r+0x98>
 8009f2c:	0758      	lsls	r0, r3, #29
 8009f2e:	d512      	bpl.n	8009f56 <__swsetup_r+0x5a>
 8009f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f32:	b141      	cbz	r1, 8009f46 <__swsetup_r+0x4a>
 8009f34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f38:	4299      	cmp	r1, r3
 8009f3a:	d002      	beq.n	8009f42 <__swsetup_r+0x46>
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f7ff f8af 	bl	80090a0 <_free_r>
 8009f42:	2300      	movs	r3, #0
 8009f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	2300      	movs	r3, #0
 8009f50:	6063      	str	r3, [r4, #4]
 8009f52:	6923      	ldr	r3, [r4, #16]
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	f043 0308 	orr.w	r3, r3, #8
 8009f5c:	81a3      	strh	r3, [r4, #12]
 8009f5e:	6923      	ldr	r3, [r4, #16]
 8009f60:	b94b      	cbnz	r3, 8009f76 <__swsetup_r+0x7a>
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f6c:	d003      	beq.n	8009f76 <__swsetup_r+0x7a>
 8009f6e:	4621      	mov	r1, r4
 8009f70:	4628      	mov	r0, r5
 8009f72:	f000 f883 	bl	800a07c <__smakebuf_r>
 8009f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f7a:	f013 0201 	ands.w	r2, r3, #1
 8009f7e:	d00a      	beq.n	8009f96 <__swsetup_r+0x9a>
 8009f80:	2200      	movs	r2, #0
 8009f82:	60a2      	str	r2, [r4, #8]
 8009f84:	6962      	ldr	r2, [r4, #20]
 8009f86:	4252      	negs	r2, r2
 8009f88:	61a2      	str	r2, [r4, #24]
 8009f8a:	6922      	ldr	r2, [r4, #16]
 8009f8c:	b942      	cbnz	r2, 8009fa0 <__swsetup_r+0xa4>
 8009f8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f92:	d1c5      	bne.n	8009f20 <__swsetup_r+0x24>
 8009f94:	bd38      	pop	{r3, r4, r5, pc}
 8009f96:	0799      	lsls	r1, r3, #30
 8009f98:	bf58      	it	pl
 8009f9a:	6962      	ldrpl	r2, [r4, #20]
 8009f9c:	60a2      	str	r2, [r4, #8]
 8009f9e:	e7f4      	b.n	8009f8a <__swsetup_r+0x8e>
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	e7f7      	b.n	8009f94 <__swsetup_r+0x98>
 8009fa4:	2000002c 	.word	0x2000002c

08009fa8 <_raise_r>:
 8009fa8:	291f      	cmp	r1, #31
 8009faa:	b538      	push	{r3, r4, r5, lr}
 8009fac:	4605      	mov	r5, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	d904      	bls.n	8009fbc <_raise_r+0x14>
 8009fb2:	2316      	movs	r3, #22
 8009fb4:	6003      	str	r3, [r0, #0]
 8009fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fbe:	b112      	cbz	r2, 8009fc6 <_raise_r+0x1e>
 8009fc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fc4:	b94b      	cbnz	r3, 8009fda <_raise_r+0x32>
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f000 f830 	bl	800a02c <_getpid_r>
 8009fcc:	4622      	mov	r2, r4
 8009fce:	4601      	mov	r1, r0
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fd6:	f000 b817 	b.w	800a008 <_kill_r>
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d00a      	beq.n	8009ff4 <_raise_r+0x4c>
 8009fde:	1c59      	adds	r1, r3, #1
 8009fe0:	d103      	bne.n	8009fea <_raise_r+0x42>
 8009fe2:	2316      	movs	r3, #22
 8009fe4:	6003      	str	r3, [r0, #0]
 8009fe6:	2001      	movs	r0, #1
 8009fe8:	e7e7      	b.n	8009fba <_raise_r+0x12>
 8009fea:	2100      	movs	r1, #0
 8009fec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4798      	blx	r3
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e7e0      	b.n	8009fba <_raise_r+0x12>

08009ff8 <raise>:
 8009ff8:	4b02      	ldr	r3, [pc, #8]	@ (800a004 <raise+0xc>)
 8009ffa:	4601      	mov	r1, r0
 8009ffc:	6818      	ldr	r0, [r3, #0]
 8009ffe:	f7ff bfd3 	b.w	8009fa8 <_raise_r>
 800a002:	bf00      	nop
 800a004:	2000002c 	.word	0x2000002c

0800a008 <_kill_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4d07      	ldr	r5, [pc, #28]	@ (800a028 <_kill_r+0x20>)
 800a00c:	2300      	movs	r3, #0
 800a00e:	4604      	mov	r4, r0
 800a010:	4608      	mov	r0, r1
 800a012:	4611      	mov	r1, r2
 800a014:	602b      	str	r3, [r5, #0]
 800a016:	f7f8 ff19 	bl	8002e4c <_kill>
 800a01a:	1c43      	adds	r3, r0, #1
 800a01c:	d102      	bne.n	800a024 <_kill_r+0x1c>
 800a01e:	682b      	ldr	r3, [r5, #0]
 800a020:	b103      	cbz	r3, 800a024 <_kill_r+0x1c>
 800a022:	6023      	str	r3, [r4, #0]
 800a024:	bd38      	pop	{r3, r4, r5, pc}
 800a026:	bf00      	nop
 800a028:	2000058c 	.word	0x2000058c

0800a02c <_getpid_r>:
 800a02c:	f7f8 bf06 	b.w	8002e3c <_getpid>

0800a030 <__swhatbuf_r>:
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	460c      	mov	r4, r1
 800a034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a038:	2900      	cmp	r1, #0
 800a03a:	b096      	sub	sp, #88	@ 0x58
 800a03c:	4615      	mov	r5, r2
 800a03e:	461e      	mov	r6, r3
 800a040:	da0d      	bge.n	800a05e <__swhatbuf_r+0x2e>
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a048:	f04f 0100 	mov.w	r1, #0
 800a04c:	bf14      	ite	ne
 800a04e:	2340      	movne	r3, #64	@ 0x40
 800a050:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a054:	2000      	movs	r0, #0
 800a056:	6031      	str	r1, [r6, #0]
 800a058:	602b      	str	r3, [r5, #0]
 800a05a:	b016      	add	sp, #88	@ 0x58
 800a05c:	bd70      	pop	{r4, r5, r6, pc}
 800a05e:	466a      	mov	r2, sp
 800a060:	f000 f848 	bl	800a0f4 <_fstat_r>
 800a064:	2800      	cmp	r0, #0
 800a066:	dbec      	blt.n	800a042 <__swhatbuf_r+0x12>
 800a068:	9901      	ldr	r1, [sp, #4]
 800a06a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a06e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a072:	4259      	negs	r1, r3
 800a074:	4159      	adcs	r1, r3
 800a076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a07a:	e7eb      	b.n	800a054 <__swhatbuf_r+0x24>

0800a07c <__smakebuf_r>:
 800a07c:	898b      	ldrh	r3, [r1, #12]
 800a07e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a080:	079d      	lsls	r5, r3, #30
 800a082:	4606      	mov	r6, r0
 800a084:	460c      	mov	r4, r1
 800a086:	d507      	bpl.n	800a098 <__smakebuf_r+0x1c>
 800a088:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	6123      	str	r3, [r4, #16]
 800a090:	2301      	movs	r3, #1
 800a092:	6163      	str	r3, [r4, #20]
 800a094:	b003      	add	sp, #12
 800a096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a098:	ab01      	add	r3, sp, #4
 800a09a:	466a      	mov	r2, sp
 800a09c:	f7ff ffc8 	bl	800a030 <__swhatbuf_r>
 800a0a0:	9f00      	ldr	r7, [sp, #0]
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	4639      	mov	r1, r7
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f7ff f86e 	bl	8009188 <_malloc_r>
 800a0ac:	b948      	cbnz	r0, 800a0c2 <__smakebuf_r+0x46>
 800a0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0b2:	059a      	lsls	r2, r3, #22
 800a0b4:	d4ee      	bmi.n	800a094 <__smakebuf_r+0x18>
 800a0b6:	f023 0303 	bic.w	r3, r3, #3
 800a0ba:	f043 0302 	orr.w	r3, r3, #2
 800a0be:	81a3      	strh	r3, [r4, #12]
 800a0c0:	e7e2      	b.n	800a088 <__smakebuf_r+0xc>
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	6020      	str	r0, [r4, #0]
 800a0c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ca:	81a3      	strh	r3, [r4, #12]
 800a0cc:	9b01      	ldr	r3, [sp, #4]
 800a0ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a0d2:	b15b      	cbz	r3, 800a0ec <__smakebuf_r+0x70>
 800a0d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f000 f81d 	bl	800a118 <_isatty_r>
 800a0de:	b128      	cbz	r0, 800a0ec <__smakebuf_r+0x70>
 800a0e0:	89a3      	ldrh	r3, [r4, #12]
 800a0e2:	f023 0303 	bic.w	r3, r3, #3
 800a0e6:	f043 0301 	orr.w	r3, r3, #1
 800a0ea:	81a3      	strh	r3, [r4, #12]
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	431d      	orrs	r5, r3
 800a0f0:	81a5      	strh	r5, [r4, #12]
 800a0f2:	e7cf      	b.n	800a094 <__smakebuf_r+0x18>

0800a0f4 <_fstat_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d07      	ldr	r5, [pc, #28]	@ (800a114 <_fstat_r+0x20>)
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	4611      	mov	r1, r2
 800a100:	602b      	str	r3, [r5, #0]
 800a102:	f7f8 ff03 	bl	8002f0c <_fstat>
 800a106:	1c43      	adds	r3, r0, #1
 800a108:	d102      	bne.n	800a110 <_fstat_r+0x1c>
 800a10a:	682b      	ldr	r3, [r5, #0]
 800a10c:	b103      	cbz	r3, 800a110 <_fstat_r+0x1c>
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	bd38      	pop	{r3, r4, r5, pc}
 800a112:	bf00      	nop
 800a114:	2000058c 	.word	0x2000058c

0800a118 <_isatty_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d06      	ldr	r5, [pc, #24]	@ (800a134 <_isatty_r+0x1c>)
 800a11c:	2300      	movs	r3, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	602b      	str	r3, [r5, #0]
 800a124:	f7f8 ff02 	bl	8002f2c <_isatty>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d102      	bne.n	800a132 <_isatty_r+0x1a>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b103      	cbz	r3, 800a132 <_isatty_r+0x1a>
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	2000058c 	.word	0x2000058c

0800a138 <_init>:
 800a138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13a:	bf00      	nop
 800a13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13e:	bc08      	pop	{r3}
 800a140:	469e      	mov	lr, r3
 800a142:	4770      	bx	lr

0800a144 <_fini>:
 800a144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a146:	bf00      	nop
 800a148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a14a:	bc08      	pop	{r3}
 800a14c:	469e      	mov	lr, r3
 800a14e:	4770      	bx	lr
