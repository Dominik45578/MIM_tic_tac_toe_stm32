
ProjectIdentity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009510  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  080096a0  080096a0  0000a6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a294  0800a294  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a294  0800a294  0000b294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a29c  0800a29c  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a29c  0800a29c  0000b29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2a0  0800a2a0  0000b2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a2a4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200001e0  0800a484  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  0800a484  0000c594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001620b  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc4  00000000  00000000  0002241b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  000253e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc1  00000000  00000000  00026818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5a8  00000000  00000000  000277d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d80  00000000  00000000  00046d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b755a  00000000  00000000  0005fb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011705b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006564  00000000  00000000  001170a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011d604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009688 	.word	0x08009688

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009688 	.word	0x08009688

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <_sendCmd>:
#include "SSD1331.h"

static unsigned char CHR_X, CHR_Y;

void _sendCmd(uint8_t cmd)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET); // DC = 0 (komenda)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbc:	f002 ffae 	bl	8003b1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS = 0
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f002 ffa8 	bl	8003b1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8000bcc:	1df9      	adds	r1, r7, #7
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <_sendCmd+0x48>)
 8000bd6:	f004 fe7e 	bl	80058d6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);   // CS = 1
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2110      	movs	r1, #16
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be2:	f002 ff9b 	bl	8003b1c <HAL_GPIO_WritePin>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200002b4 	.word	0x200002b4

08000bf4 <_sendData>:

void _sendData(uint8_t data)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);   // DC = 1 (dane)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c08:	f002 ff88 	bl	8003b1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS = 0
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2110      	movs	r1, #16
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c14:	f002 ff82 	bl	8003b1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &data, 1, HAL_MAX_DELAY);
 8000c18:	1df9      	adds	r1, r7, #7
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4806      	ldr	r0, [pc, #24]	@ (8000c3c <_sendData+0x48>)
 8000c22:	f004 fe58 	bl	80058d6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);   // CS = 1
 8000c26:	2201      	movs	r2, #1
 8000c28:	2110      	movs	r1, #16
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f002 ff75 	bl	8003b1c <HAL_GPIO_WritePin>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200002b4 	.word	0x200002b4

08000c40 <SSD1331_init>:

// **POPRAWIONA FUNKCJA INICJALIZACJI**
void SSD1331_init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
    // Reset ekranu - KLUCZOWE!
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4e:	f002 ff65 	bl	8003b1c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c52:	200a      	movs	r0, #10
 8000c54:	f001 fd02 	bl	800265c <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c62:	f002 ff5b 	bl	8003b1c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c66:	200a      	movs	r0, #10
 8000c68:	f001 fcf8 	bl	800265c <HAL_Delay>

    // Inicjalizacja SSD1331 - KOMPLETNA SEKWENCJA
    _sendCmd(CMD_DISPLAY_OFF);                    // Wyłącz ekran podczas inicjalizacji
 8000c6c:	20ae      	movs	r0, #174	@ 0xae
 8000c6e:	f7ff ff9b 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_CONTRAST_A); _sendCmd(0x91); // Kontrast dla kolor A (czerwony)
 8000c72:	2081      	movs	r0, #129	@ 0x81
 8000c74:	f7ff ff98 	bl	8000ba8 <_sendCmd>
 8000c78:	2091      	movs	r0, #145	@ 0x91
 8000c7a:	f7ff ff95 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_CONTRAST_B); _sendCmd(0x50); // Kontrast dla kolor B (zielony)
 8000c7e:	2082      	movs	r0, #130	@ 0x82
 8000c80:	f7ff ff92 	bl	8000ba8 <_sendCmd>
 8000c84:	2050      	movs	r0, #80	@ 0x50
 8000c86:	f7ff ff8f 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_CONTRAST_C); _sendCmd(0x7D); // Kontrast dla kolor C (niebieski)
 8000c8a:	2083      	movs	r0, #131	@ 0x83
 8000c8c:	f7ff ff8c 	bl	8000ba8 <_sendCmd>
 8000c90:	207d      	movs	r0, #125	@ 0x7d
 8000c92:	f7ff ff89 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_MASTER_CURRENT_CONTROL); _sendCmd(0x06); // Kontrola głównego prądu
 8000c96:	2087      	movs	r0, #135	@ 0x87
 8000c98:	f7ff ff86 	bl	8000ba8 <_sendCmd>
 8000c9c:	2006      	movs	r0, #6
 8000c9e:	f7ff ff83 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_SPEED_A); _sendCmd(0x64);  // Prędkość ładowania A
 8000ca2:	208a      	movs	r0, #138	@ 0x8a
 8000ca4:	f7ff ff80 	bl	8000ba8 <_sendCmd>
 8000ca8:	2064      	movs	r0, #100	@ 0x64
 8000caa:	f7ff ff7d 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_SPEED_B); _sendCmd(0x78);  // Prędkość ładowania B
 8000cae:	208b      	movs	r0, #139	@ 0x8b
 8000cb0:	f7ff ff7a 	bl	8000ba8 <_sendCmd>
 8000cb4:	2078      	movs	r0, #120	@ 0x78
 8000cb6:	f7ff ff77 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_SPEED_C); _sendCmd(0x64);  // Prędkość ładowania C
 8000cba:	208c      	movs	r0, #140	@ 0x8c
 8000cbc:	f7ff ff74 	bl	8000ba8 <_sendCmd>
 8000cc0:	2064      	movs	r0, #100	@ 0x64
 8000cc2:	f7ff ff71 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_REMAP); _sendCmd(0x72);              // Mapowanie kolorów i orientacja
 8000cc6:	20a0      	movs	r0, #160	@ 0xa0
 8000cc8:	f7ff ff6e 	bl	8000ba8 <_sendCmd>
 8000ccc:	2072      	movs	r0, #114	@ 0x72
 8000cce:	f7ff ff6b 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_DISPLAY_START_LINE); _sendCmd(0x0);  // Linia startowa
 8000cd2:	20a1      	movs	r0, #161	@ 0xa1
 8000cd4:	f7ff ff68 	bl	8000ba8 <_sendCmd>
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff ff65 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_DISPLAY_OFFSET); _sendCmd(0x0);      // Offset wyświetlania
 8000cde:	20a2      	movs	r0, #162	@ 0xa2
 8000ce0:	f7ff ff62 	bl	8000ba8 <_sendCmd>
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff ff5f 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_NORMAL_DISPLAY);                         // Normalny tryb wyświetlania
 8000cea:	20a4      	movs	r0, #164	@ 0xa4
 8000cec:	f7ff ff5c 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_MULTIPLEX_RATIO); _sendCmd(0x3F);    // Współczynnik multipleks (64 linie)
 8000cf0:	20a8      	movs	r0, #168	@ 0xa8
 8000cf2:	f7ff ff59 	bl	8000ba8 <_sendCmd>
 8000cf6:	203f      	movs	r0, #63	@ 0x3f
 8000cf8:	f7ff ff56 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_MASTER_CONFIGURE); _sendCmd(0x8E);   // Konfiguracja główna
 8000cfc:	20ad      	movs	r0, #173	@ 0xad
 8000cfe:	f7ff ff53 	bl	8000ba8 <_sendCmd>
 8000d02:	208e      	movs	r0, #142	@ 0x8e
 8000d04:	f7ff ff50 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_POWER_SAVE_MODE); _sendCmd(0x00);        // Wyłącz tryb oszczędzania energii
 8000d08:	20b0      	movs	r0, #176	@ 0xb0
 8000d0a:	f7ff ff4d 	bl	8000ba8 <_sendCmd>
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff ff4a 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_PHASE_PERIOD_ADJUSTMENT); _sendCmd(0x31); // Regulacja okresu fazy
 8000d14:	20b1      	movs	r0, #177	@ 0xb1
 8000d16:	f7ff ff47 	bl	8000ba8 <_sendCmd>
 8000d1a:	2031      	movs	r0, #49	@ 0x31
 8000d1c:	f7ff ff44 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_DISPLAY_CLOCK_DIV); _sendCmd(0xF0);      // Dzielnik zegara wyświetlania
 8000d20:	20b3      	movs	r0, #179	@ 0xb3
 8000d22:	f7ff ff41 	bl	8000ba8 <_sendCmd>
 8000d26:	20f0      	movs	r0, #240	@ 0xf0
 8000d28:	f7ff ff3e 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_VOLTAGE); _sendCmd(0x3A);  // Napięcie ładowania wstępnego
 8000d2c:	20bb      	movs	r0, #187	@ 0xbb
 8000d2e:	f7ff ff3b 	bl	8000ba8 <_sendCmd>
 8000d32:	203a      	movs	r0, #58	@ 0x3a
 8000d34:	f7ff ff38 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_V_VOLTAGE); _sendCmd(0x3E);          // Napięcie V
 8000d38:	20be      	movs	r0, #190	@ 0xbe
 8000d3a:	f7ff ff35 	bl	8000ba8 <_sendCmd>
 8000d3e:	203e      	movs	r0, #62	@ 0x3e
 8000d40:	f7ff ff32 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_DEACTIVE_SCROLLING);                     // Wyłącz scrollowanie
 8000d44:	202e      	movs	r0, #46	@ 0x2e
 8000d46:	f7ff ff2f 	bl	8000ba8 <_sendCmd>

    // **KLUCZOWE - WŁĄCZ EKRAN NA KOŃCU**
    _sendCmd(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);           // Włącz ekran z normalną jasnością
 8000d4a:	20af      	movs	r0, #175	@ 0xaf
 8000d4c:	f7ff ff2c 	bl	8000ba8 <_sendCmd>

    HAL_Delay(100); // Daj czas na stabilizację
 8000d50:	2064      	movs	r0, #100	@ 0x64
 8000d52:	f001 fc83 	bl	800265c <HAL_Delay>
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <SSD1331_drawLine>:
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_SET);; //cs

}

void SSD1331_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000d5a:	b590      	push	{r4, r7, lr}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4604      	mov	r4, r0
 8000d62:	4608      	mov	r0, r1
 8000d64:	4611      	mov	r1, r2
 8000d66:	461a      	mov	r2, r3
 8000d68:	4623      	mov	r3, r4
 8000d6a:	80fb      	strh	r3, [r7, #6]
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	80bb      	strh	r3, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
 8000d74:	4613      	mov	r3, r2
 8000d76:	803b      	strh	r3, [r7, #0]
    if((x0 < 0) || (y0 < 0) || (x1 < 0) || (y1 < 0))
        return;

    if (x0 >= RGB_OLED_WIDTH)  x0 = RGB_OLED_WIDTH - 1;
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d7c:	d901      	bls.n	8000d82 <SSD1331_drawLine+0x28>
 8000d7e:	235f      	movs	r3, #95	@ 0x5f
 8000d80:	80fb      	strh	r3, [r7, #6]
    if (y0 >= RGB_OLED_HEIGHT) y0 = RGB_OLED_HEIGHT - 1;
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d86:	d901      	bls.n	8000d8c <SSD1331_drawLine+0x32>
 8000d88:	233f      	movs	r3, #63	@ 0x3f
 8000d8a:	80bb      	strh	r3, [r7, #4]
    if (x1 >= RGB_OLED_WIDTH)  x1 = RGB_OLED_WIDTH - 1;
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d90:	d901      	bls.n	8000d96 <SSD1331_drawLine+0x3c>
 8000d92:	235f      	movs	r3, #95	@ 0x5f
 8000d94:	807b      	strh	r3, [r7, #2]
    if (y1 >= RGB_OLED_HEIGHT) y1 = RGB_OLED_HEIGHT - 1;
 8000d96:	883b      	ldrh	r3, [r7, #0]
 8000d98:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d9a:	d901      	bls.n	8000da0 <SSD1331_drawLine+0x46>
 8000d9c:	233f      	movs	r3, #63	@ 0x3f
 8000d9e:	803b      	strh	r3, [r7, #0]

    _sendCmd(CMD_DRAW_LINE);//draw line
 8000da0:	2021      	movs	r0, #33	@ 0x21
 8000da2:	f7ff ff01 	bl	8000ba8 <_sendCmd>
    _sendCmd(x0);//start column
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fefc 	bl	8000ba8 <_sendCmd>
    _sendCmd(y0);//start row
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fef7 	bl	8000ba8 <_sendCmd>
    _sendCmd(x1);//end column
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fef2 	bl	8000ba8 <_sendCmd>
    _sendCmd(y1);//end row
 8000dc4:	883b      	ldrh	r3, [r7, #0]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff feed 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((color>>11)&0x1F));//R
 8000dce:	8b3b      	ldrh	r3, [r7, #24]
 8000dd0:	0adb      	lsrs	r3, r3, #11
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f003 031f 	and.w	r3, r3, #31
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fee3 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((color>>5)&0x3F));//G
 8000de2:	8b3b      	ldrh	r3, [r7, #24]
 8000de4:	095b      	lsrs	r3, r3, #5
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fed9 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)(color&0x1F));//B
 8000df6:	8b3b      	ldrh	r3, [r7, #24]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f003 031f 	and.w	r3, r3, #31
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fed1 	bl	8000ba8 <_sendCmd>
}
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd90      	pop	{r4, r7, pc}

08000e0c <SSD1331_drawFrame>:

void SSD1331_drawFrame(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t outColor, uint16_t fillColor)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4604      	mov	r4, r0
 8000e14:	4608      	mov	r0, r1
 8000e16:	4611      	mov	r1, r2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	80fb      	strh	r3, [r7, #6]
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80bb      	strh	r3, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	807b      	strh	r3, [r7, #2]
 8000e26:	4613      	mov	r3, r2
 8000e28:	803b      	strh	r3, [r7, #0]
    if((x0 < 0) || (y0 < 0) || (x1 < 0) || (y1 < 0))
        return;

    if (x0 >= RGB_OLED_WIDTH)  x0 = RGB_OLED_WIDTH - 1;
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000e2e:	d901      	bls.n	8000e34 <SSD1331_drawFrame+0x28>
 8000e30:	235f      	movs	r3, #95	@ 0x5f
 8000e32:	80fb      	strh	r3, [r7, #6]
    if (y0 >= RGB_OLED_HEIGHT) y0 = RGB_OLED_HEIGHT - 1;
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e38:	d901      	bls.n	8000e3e <SSD1331_drawFrame+0x32>
 8000e3a:	233f      	movs	r3, #63	@ 0x3f
 8000e3c:	80bb      	strh	r3, [r7, #4]
    if (x1 >= RGB_OLED_WIDTH)  x1 = RGB_OLED_WIDTH - 1;
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	2b5f      	cmp	r3, #95	@ 0x5f
 8000e42:	d901      	bls.n	8000e48 <SSD1331_drawFrame+0x3c>
 8000e44:	235f      	movs	r3, #95	@ 0x5f
 8000e46:	807b      	strh	r3, [r7, #2]
    if (y1 >= RGB_OLED_HEIGHT) y1 = RGB_OLED_HEIGHT - 1;
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e4c:	d901      	bls.n	8000e52 <SSD1331_drawFrame+0x46>
 8000e4e:	233f      	movs	r3, #63	@ 0x3f
 8000e50:	803b      	strh	r3, [r7, #0]

    _sendCmd(CMD_FILL_WINDOW);//fill window
 8000e52:	2026      	movs	r0, #38	@ 0x26
 8000e54:	f7ff fea8 	bl	8000ba8 <_sendCmd>
    _sendCmd(ENABLE_FILL);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff fea5 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_DRAW_RECTANGLE);//draw rectangle
 8000e5e:	2022      	movs	r0, #34	@ 0x22
 8000e60:	f7ff fea2 	bl	8000ba8 <_sendCmd>
    _sendCmd(x0);//start column
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe9d 	bl	8000ba8 <_sendCmd>
    _sendCmd(y0);//start row
 8000e6e:	88bb      	ldrh	r3, [r7, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fe98 	bl	8000ba8 <_sendCmd>
    _sendCmd(x1);//end column
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fe93 	bl	8000ba8 <_sendCmd>
    _sendCmd(y1);//end row
 8000e82:	883b      	ldrh	r3, [r7, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fe8e 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((outColor>>11)&0x1F));//R
 8000e8c:	8b3b      	ldrh	r3, [r7, #24]
 8000e8e:	0adb      	lsrs	r3, r3, #11
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fe84 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((outColor>>5)&0x3F));//G
 8000ea0:	8b3b      	ldrh	r3, [r7, #24]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe7a 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)(outColor&0x1F));//B
 8000eb4:	8b3b      	ldrh	r3, [r7, #24]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	f003 031f 	and.w	r3, r3, #31
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fe72 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((fillColor>>11)&0x1F));//R
 8000ec4:	8bbb      	ldrh	r3, [r7, #28]
 8000ec6:	0adb      	lsrs	r3, r3, #11
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fe68 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((fillColor>>5)&0x3F));//G
 8000ed8:	8bbb      	ldrh	r3, [r7, #28]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fe5e 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)(fillColor&0x1F));//B
 8000eec:	8bbb      	ldrh	r3, [r7, #28]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	f003 031f 	and.w	r3, r3, #31
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fe56 	bl	8000ba8 <_sendCmd>
}
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
	...

08000f04 <SSD1331_drawXOboard>:

}
void SSD1331_drawXOboard(
    uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
    uint16_t fillColor, uint16_t lineColor)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	4611      	mov	r1, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	4623      	mov	r3, r4
 8000f14:	80fb      	strh	r3, [r7, #6]
 8000f16:	4603      	mov	r3, r0
 8000f18:	80bb      	strh	r3, [r7, #4]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	807b      	strh	r3, [r7, #2]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	803b      	strh	r3, [r7, #0]
    // Rysuj ramkę z wypełnieniem
    SSD1331_drawFrame(x0, y0, x1, y1, lineColor, fillColor);
 8000f22:	883c      	ldrh	r4, [r7, #0]
 8000f24:	887a      	ldrh	r2, [r7, #2]
 8000f26:	88b9      	ldrh	r1, [r7, #4]
 8000f28:	88f8      	ldrh	r0, [r7, #6]
 8000f2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	4623      	mov	r3, r4
 8000f34:	f7ff ff6a 	bl	8000e0c <SSD1331_drawFrame>

    // Oblicz wymiary planszy
    uint16_t width  = x1 > x0 ? x1 - x0 : x0 - x1;
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d904      	bls.n	8000f4a <SSD1331_drawXOboard+0x46>
 8000f40:	887a      	ldrh	r2, [r7, #2]
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	e003      	b.n	8000f52 <SSD1331_drawXOboard+0x4e>
 8000f4a:	88fa      	ldrh	r2, [r7, #6]
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	82fb      	strh	r3, [r7, #22]
    uint16_t height = y1 > y0 ? y1 - y0 : y0 - y1;
 8000f54:	883a      	ldrh	r2, [r7, #0]
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d904      	bls.n	8000f66 <SSD1331_drawXOboard+0x62>
 8000f5c:	883a      	ldrh	r2, [r7, #0]
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	e003      	b.n	8000f6e <SSD1331_drawXOboard+0x6a>
 8000f66:	88ba      	ldrh	r2, [r7, #4]
 8000f68:	883b      	ldrh	r3, [r7, #0]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	82bb      	strh	r3, [r7, #20]

    // Pozycje linii pionowych (dzielą na 3 kolumny)
    uint16_t xA = x0 + width / 3;
 8000f70:	8afb      	ldrh	r3, [r7, #22]
 8000f72:	4a2a      	ldr	r2, [pc, #168]	@ (800101c <SSD1331_drawXOboard+0x118>)
 8000f74:	fba2 2303 	umull	r2, r3, r2, r3
 8000f78:	085b      	lsrs	r3, r3, #1
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	4413      	add	r3, r2
 8000f80:	827b      	strh	r3, [r7, #18]
    uint16_t xB = x0 + 2 * width / 3;
 8000f82:	8afb      	ldrh	r3, [r7, #22]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4a26      	ldr	r2, [pc, #152]	@ (8001020 <SSD1331_drawXOboard+0x11c>)
 8000f88:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8c:	17db      	asrs	r3, r3, #31
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	4413      	add	r3, r2
 8000f96:	823b      	strh	r3, [r7, #16]

    // Pozycje linii poziomych (dzielą na 3 wiersze)
    uint16_t yA = y0 + height / 3;
 8000f98:	8abb      	ldrh	r3, [r7, #20]
 8000f9a:	4a20      	ldr	r2, [pc, #128]	@ (800101c <SSD1331_drawXOboard+0x118>)
 8000f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa0:	085b      	lsrs	r3, r3, #1
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	81fb      	strh	r3, [r7, #14]
    uint16_t yB = y0 + 2 * height / 3;
 8000faa:	8abb      	ldrh	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <SSD1331_drawXOboard+0x11c>)
 8000fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb4:	17db      	asrs	r3, r3, #31
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	81bb      	strh	r3, [r7, #12]

    HAL_Delay(150);
 8000fc0:	2096      	movs	r0, #150	@ 0x96
 8000fc2:	f001 fb4b 	bl	800265c <HAL_Delay>
    // Rysuj linie pionowe
    SSD1331_drawLine(xA, y0, xA, y1, lineColor);
 8000fc6:	883c      	ldrh	r4, [r7, #0]
 8000fc8:	8a7a      	ldrh	r2, [r7, #18]
 8000fca:	88b9      	ldrh	r1, [r7, #4]
 8000fcc:	8a78      	ldrh	r0, [r7, #18]
 8000fce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	f7ff fec1 	bl	8000d5a <SSD1331_drawLine>
    SSD1331_drawLine(xB, y0, xB, y1, lineColor);
 8000fd8:	883c      	ldrh	r4, [r7, #0]
 8000fda:	8a3a      	ldrh	r2, [r7, #16]
 8000fdc:	88b9      	ldrh	r1, [r7, #4]
 8000fde:	8a38      	ldrh	r0, [r7, #16]
 8000fe0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	f7ff feb8 	bl	8000d5a <SSD1331_drawLine>

    HAL_Delay(150);
 8000fea:	2096      	movs	r0, #150	@ 0x96
 8000fec:	f001 fb36 	bl	800265c <HAL_Delay>
    // Rysuj linie poziome
    SSD1331_drawLine(x0, yA, x1, yA, lineColor);
 8000ff0:	89fc      	ldrh	r4, [r7, #14]
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	89f9      	ldrh	r1, [r7, #14]
 8000ff6:	88f8      	ldrh	r0, [r7, #6]
 8000ff8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4623      	mov	r3, r4
 8000ffe:	f7ff feac 	bl	8000d5a <SSD1331_drawLine>
    SSD1331_drawLine(x0, yB, x1, yB, lineColor);
 8001002:	89bc      	ldrh	r4, [r7, #12]
 8001004:	887a      	ldrh	r2, [r7, #2]
 8001006:	89b9      	ldrh	r1, [r7, #12]
 8001008:	88f8      	ldrh	r0, [r7, #6]
 800100a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	4623      	mov	r3, r4
 8001010:	f7ff fea3 	bl	8000d5a <SSD1331_drawLine>
}
 8001014:	bf00      	nop
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	aaaaaaab 	.word	0xaaaaaaab
 8001020:	55555556 	.word	0x55555556

08001024 <SSD1331_SetXY>:

// Set current position in cache
void SSD1331_SetXY(unsigned char x, unsigned char y) {
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
	CHR_X = x;
 8001034:	4a05      	ldr	r2, [pc, #20]	@ (800104c <SSD1331_SetXY+0x28>)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	7013      	strb	r3, [r2, #0]
	CHR_Y = y;
 800103a:	4a05      	ldr	r2, [pc, #20]	@ (8001050 <SSD1331_SetXY+0x2c>)
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	7013      	strb	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	200001fc 	.word	0x200001fc
 8001050:	200001fd 	.word	0x200001fd

08001054 <SSD1331_XY_INK>:

void SSD1331_XY_INK(LcdFontSize size) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	CHR_X += 6*size;
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	461a      	mov	r2, r3
 8001062:	0052      	lsls	r2, r2, #1
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <SSD1331_XY_INK+0x74>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <SSD1331_XY_INK+0x74>)
 8001074:	701a      	strb	r2, [r3, #0]
	if (CHR_X + 6*size > RGB_OLED_WIDTH) {
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <SSD1331_XY_INK+0x74>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	4613      	mov	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4413      	add	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	440b      	add	r3, r1
 8001088:	2b60      	cmp	r3, #96	@ 0x60
 800108a:	dd16      	ble.n	80010ba <SSD1331_XY_INK+0x66>
		CHR_X = 0;
 800108c:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <SSD1331_XY_INK+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
		CHR_Y += 8*size;
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <SSD1331_XY_INK+0x78>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4413      	add	r3, r2
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <SSD1331_XY_INK+0x78>)
 80010a2:	701a      	strb	r2, [r3, #0]
		if (CHR_Y + 8*size > RGB_OLED_HEIGHT) {
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <SSD1331_XY_INK+0x78>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	2b40      	cmp	r3, #64	@ 0x40
 80010b2:	dd02      	ble.n	80010ba <SSD1331_XY_INK+0x66>
			CHR_Y = 0;
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <SSD1331_XY_INK+0x78>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200001fc 	.word	0x200001fc
 80010cc:	200001fd 	.word	0x200001fd

080010d0 <SSD1331_Chr>:

void SSD1331_Chr(LcdFontSize size, unsigned char ch, uint16_t chr_color, uint16_t bg_color) {
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4604      	mov	r4, r0
 80010d8:	4608      	mov	r0, r1
 80010da:	4611      	mov	r1, r2
 80010dc:	461a      	mov	r2, r3
 80010de:	4623      	mov	r3, r4
 80010e0:	71fb      	strb	r3, [r7, #7]
 80010e2:	4603      	mov	r3, r0
 80010e4:	71bb      	strb	r3, [r7, #6]
 80010e6:	460b      	mov	r3, r1
 80010e8:	80bb      	strh	r3, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	807b      	strh	r3, [r7, #2]
	unsigned char y, x, sx, sy;
	uint16_t color;
	/////uint16_t cx=CHR_X*6*size;
	uint16_t cx=CHR_X;
 80010ee:	4b9b      	ldr	r3, [pc, #620]	@ (800135c <SSD1331_Chr+0x28c>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	823b      	strh	r3, [r7, #16]
	/////uint16_t cy=CHR_Y*8*size;
	uint16_t cy=CHR_Y;
 80010f4:	4b9a      	ldr	r3, [pc, #616]	@ (8001360 <SSD1331_Chr+0x290>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	81fb      	strh	r3, [r7, #14]

	if ( (cx + 6*size > RGB_OLED_WIDTH) || (cy + 8*size > RGB_OLED_HEIGHT) ) {
 80010fa:	8a39      	ldrh	r1, [r7, #16]
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	440b      	add	r3, r1
 8001108:	2b60      	cmp	r3, #96	@ 0x60
 800110a:	f300 816c 	bgt.w	80013e6 <SSD1331_Chr+0x316>
 800110e:	89fa      	ldrh	r2, [r7, #14]
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	2b40      	cmp	r3, #64	@ 0x40
 8001118:	f300 8165 	bgt.w	80013e6 <SSD1331_Chr+0x316>
		return;
	}

	// CHR
    if ( (ch >= 0x20) && (ch <= 0x7F) )
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b1f      	cmp	r3, #31
 8001120:	d907      	bls.n	8001132 <SSD1331_Chr+0x62>
 8001122:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db03      	blt.n	8001132 <SSD1331_Chr+0x62>
    {
        // offset in symbols table ASCII[0x20-0x7F]
        ch -= 32;
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	3b20      	subs	r3, #32
 800112e:	71bb      	strb	r3, [r7, #6]
 8001130:	e008      	b.n	8001144 <SSD1331_Chr+0x74>
    }
    else if (ch >= 0xC0)
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	2bbf      	cmp	r3, #191	@ 0xbf
 8001136:	d903      	bls.n	8001140 <SSD1331_Chr+0x70>
    {
        // offset in symbols table CP1251[0xC0-0xFF] (Cyrillic)
        ch -= 96;
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	3b60      	subs	r3, #96	@ 0x60
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	e001      	b.n	8001144 <SSD1331_Chr+0x74>
    }
    else
    {
        // Ignore unknown symbols
        ch = 95;
 8001140:	235f      	movs	r3, #95	@ 0x5f
 8001142:	71bb      	strb	r3, [r7, #6]
    }

    if ((size > FONT_1X) & (ch > 15) & (ch < 26)) {
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b01      	cmp	r3, #1
 8001148:	bf8c      	ite	hi
 800114a:	2301      	movhi	r3, #1
 800114c:	2300      	movls	r3, #0
 800114e:	b2da      	uxtb	r2, r3
 8001150:	79bb      	ldrb	r3, [r7, #6]
 8001152:	2b0f      	cmp	r3, #15
 8001154:	bf8c      	ite	hi
 8001156:	2301      	movhi	r3, #1
 8001158:	2300      	movls	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4013      	ands	r3, r2
 800115e:	b2db      	uxtb	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	2b19      	cmp	r3, #25
 8001166:	bf94      	ite	ls
 8001168:	2301      	movls	r3, #1
 800116a:	2300      	movhi	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a4 	beq.w	80012be <SSD1331_Chr+0x1ee>
        ch -= 16;
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	3b10      	subs	r3, #16
 800117a:	71bb      	strb	r3, [r7, #6]
    	for (sy = 0; sy<size; sy++) {
 800117c:	2300      	movs	r3, #0
 800117e:	753b      	strb	r3, [r7, #20]
 8001180:	e097      	b.n	80012b2 <SSD1331_Chr+0x1e2>
    	for (y = 0; y<8; y++ ) {
 8001182:	2300      	movs	r3, #0
 8001184:	75fb      	strb	r3, [r7, #23]
 8001186:	e08d      	b.n	80012a4 <SSD1331_Chr+0x1d4>
    		//set column point
    		_sendCmd(CMD_SET_COLUMN_ADDRESS);
 8001188:	2015      	movs	r0, #21
 800118a:	f7ff fd0d 	bl	8000ba8 <_sendCmd>
    		_sendCmd(cx);
 800118e:	8a3b      	ldrh	r3, [r7, #16]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fd08 	bl	8000ba8 <_sendCmd>
    		_sendCmd(RGB_OLED_WIDTH-1);
 8001198:	205f      	movs	r0, #95	@ 0x5f
 800119a:	f7ff fd05 	bl	8000ba8 <_sendCmd>
    		//set row point
    		_sendCmd(CMD_SET_ROW_ADDRESS);
 800119e:	2075      	movs	r0, #117	@ 0x75
 80011a0:	f7ff fd02 	bl	8000ba8 <_sendCmd>
    		_sendCmd(y + cy + sy*8);
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	4413      	add	r3, r2
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	7d3b      	ldrb	r3, [r7, #20]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4413      	add	r3, r2
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fcf5 	bl	8000ba8 <_sendCmd>
    		_sendCmd(RGB_OLED_HEIGHT-1);
 80011be:	203f      	movs	r0, #63	@ 0x3f
 80011c0:	f7ff fcf2 	bl	8000ba8 <_sendCmd>
    		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin,GPIO_PIN_SET);//cs
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ce:	f002 fca5 	bl	8003b1c <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_RESET); //cs
 80011d2:	2200      	movs	r2, #0
 80011d4:	2110      	movs	r1, #16
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011da:	f002 fc9f 	bl	8003b1c <HAL_GPIO_WritePin>
    		for (x = 0; x < 5*size; x++ ) {
 80011de:	2300      	movs	r3, #0
 80011e0:	75bb      	strb	r3, [r7, #22]
 80011e2:	e055      	b.n	8001290 <SSD1331_Chr+0x1c0>
    			if ( (((BigNumbers[ch][x+sy*10] >> y) & 0x01 ) & (size == FONT_2X)) |
 80011e4:	79ba      	ldrb	r2, [r7, #6]
 80011e6:	7db8      	ldrb	r0, [r7, #22]
 80011e8:	7d39      	ldrb	r1, [r7, #20]
 80011ea:	460b      	mov	r3, r1
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	18c1      	adds	r1, r0, r3
 80011f4:	485b      	ldr	r0, [pc, #364]	@ (8001364 <SSD1331_Chr+0x294>)
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4403      	add	r3, r0
 8001200:	440b      	add	r3, r1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	fa42 f303 	asr.w	r3, r2, r3
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	b2da      	uxtb	r2, r3
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b02      	cmp	r3, #2
 8001216:	bf0c      	ite	eq
 8001218:	2301      	moveq	r3, #1
 800121a:	2300      	movne	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4013      	ands	r3, r2
 8001220:	b2d8      	uxtb	r0, r3
    				 (((LargeNumbers[ch][x+sy*20] >> y) & 0x01 ) & (size == FONT_4X))
 8001222:	79ba      	ldrb	r2, [r7, #6]
 8001224:	7dbc      	ldrb	r4, [r7, #22]
 8001226:	7d39      	ldrb	r1, [r7, #20]
 8001228:	460b      	mov	r3, r1
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	18e1      	adds	r1, r4, r3
 8001232:	4c4d      	ldr	r4, [pc, #308]	@ (8001368 <SSD1331_Chr+0x298>)
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	4423      	add	r3, r4
 800123e:	440b      	add	r3, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	fa42 f303 	asr.w	r3, r2, r3
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf0c      	ite	eq
 8001256:	2301      	moveq	r3, #1
 8001258:	2300      	movne	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	4013      	ands	r3, r2
 800125e:	b2db      	uxtb	r3, r3
    			if ( (((BigNumbers[ch][x+sy*10] >> y) & 0x01 ) & (size == FONT_2X)) |
 8001260:	4303      	orrs	r3, r0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <SSD1331_Chr+0x19e>

    				) {
    				color = chr_color;
 8001268:	88bb      	ldrh	r3, [r7, #4]
 800126a:	827b      	strh	r3, [r7, #18]
 800126c:	e001      	b.n	8001272 <SSD1331_Chr+0x1a2>
    			}
    			else {
    				color = bg_color;
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	827b      	strh	r3, [r7, #18]
    			}
				_sendData(color >> 8);
 8001272:	8a7b      	ldrh	r3, [r7, #18]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	b29b      	uxth	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fcba 	bl	8000bf4 <_sendData>
				_sendData(color);
 8001280:	8a7b      	ldrh	r3, [r7, #18]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fcb5 	bl	8000bf4 <_sendData>
    		for (x = 0; x < 5*size; x++ ) {
 800128a:	7dbb      	ldrb	r3, [r7, #22]
 800128c:	3301      	adds	r3, #1
 800128e:	75bb      	strb	r3, [r7, #22]
 8001290:	7db9      	ldrb	r1, [r7, #22]
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	4299      	cmp	r1, r3
 800129c:	dba2      	blt.n	80011e4 <SSD1331_Chr+0x114>
    	for (y = 0; y<8; y++ ) {
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	3301      	adds	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	f67f af6e 	bls.w	8001188 <SSD1331_Chr+0xb8>
    	for (sy = 0; sy<size; sy++) {
 80012ac:	7d3b      	ldrb	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	753b      	strb	r3, [r7, #20]
 80012b2:	7d3a      	ldrb	r2, [r7, #20]
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	f4ff af63 	bcc.w	8001182 <SSD1331_Chr+0xb2>
 80012bc:	e094      	b.n	80013e8 <SSD1331_Chr+0x318>
    		}
    	}
    	}
    }
    else {
    	for (y = 0; y<8; y++ ) {
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]
 80012c2:	e08b      	b.n	80013dc <SSD1331_Chr+0x30c>
    		for (sy = 0; sy<size; sy++ ) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	753b      	strb	r3, [r7, #20]
 80012c8:	e080      	b.n	80013cc <SSD1331_Chr+0x2fc>
    			//set column point
    			_sendCmd(CMD_SET_COLUMN_ADDRESS);
 80012ca:	2015      	movs	r0, #21
 80012cc:	f7ff fc6c 	bl	8000ba8 <_sendCmd>
    			_sendCmd(cx);
 80012d0:	8a3b      	ldrh	r3, [r7, #16]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fc67 	bl	8000ba8 <_sendCmd>
    			_sendCmd(RGB_OLED_WIDTH-1);
 80012da:	205f      	movs	r0, #95	@ 0x5f
 80012dc:	f7ff fc64 	bl	8000ba8 <_sendCmd>
    			//set row point
    			_sendCmd(CMD_SET_ROW_ADDRESS);
 80012e0:	2075      	movs	r0, #117	@ 0x75
 80012e2:	f7ff fc61 	bl	8000ba8 <_sendCmd>
    			_sendCmd(y*size + sy + cy);
 80012e6:	7dfa      	ldrb	r2, [r7, #23]
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	fb12 f303 	smulbb	r3, r2, r3
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	7d3b      	ldrb	r3, [r7, #20]
 80012f2:	4413      	add	r3, r2
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	89fb      	ldrh	r3, [r7, #14]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fc52 	bl	8000ba8 <_sendCmd>
    			_sendCmd(RGB_OLED_HEIGHT-1);
 8001304:	203f      	movs	r0, #63	@ 0x3f
 8001306:	f7ff fc4f 	bl	8000ba8 <_sendCmd>
        		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin,GPIO_PIN_SET);; //cs
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001310:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001314:	f002 fc02 	bl	8003b1c <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_RESET);; //cs
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001320:	f002 fbfc 	bl	8003b1c <HAL_GPIO_WritePin>
    			for (x = 0; x<5; x++ ) {
 8001324:	2300      	movs	r3, #0
 8001326:	75bb      	strb	r3, [r7, #22]
 8001328:	e038      	b.n	800139c <SSD1331_Chr+0x2cc>
    				if ((FontLookup[ch][x] >> y) & 0x01) {
 800132a:	79ba      	ldrb	r2, [r7, #6]
 800132c:	7db9      	ldrb	r1, [r7, #22]
 800132e:	480f      	ldr	r0, [pc, #60]	@ (800136c <SSD1331_Chr+0x29c>)
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	4403      	add	r3, r0
 8001338:	440b      	add	r3, r1
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	fa42 f303 	asr.w	r3, r2, r3
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <SSD1331_Chr+0x282>
    					color = chr_color;
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	827b      	strh	r3, [r7, #18]
 8001350:	e001      	b.n	8001356 <SSD1331_Chr+0x286>
    				}
    				else {
    					color = bg_color;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	827b      	strh	r3, [r7, #18]
    				}
    				//SSD1331_drawPixel(x+cx, y+cy, color);
    				for (sx = 0; sx<size; sx++ ) {
 8001356:	2300      	movs	r3, #0
 8001358:	757b      	strb	r3, [r7, #21]
 800135a:	e018      	b.n	800138e <SSD1331_Chr+0x2be>
 800135c:	200001fc 	.word	0x200001fc
 8001360:	200001fd 	.word	0x200001fd
 8001364:	08009a10 	.word	0x08009a10
 8001368:	08009ad8 	.word	0x08009ad8
 800136c:	080096f0 	.word	0x080096f0
    					_sendData(color >> 8);
 8001370:	8a7b      	ldrh	r3, [r7, #18]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	b29b      	uxth	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fc3b 	bl	8000bf4 <_sendData>
    					_sendData(color);
 800137e:	8a7b      	ldrh	r3, [r7, #18]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fc36 	bl	8000bf4 <_sendData>
    				for (sx = 0; sx<size; sx++ ) {
 8001388:	7d7b      	ldrb	r3, [r7, #21]
 800138a:	3301      	adds	r3, #1
 800138c:	757b      	strb	r3, [r7, #21]
 800138e:	7d7a      	ldrb	r2, [r7, #21]
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	429a      	cmp	r2, r3
 8001394:	d3ec      	bcc.n	8001370 <SSD1331_Chr+0x2a0>
    			for (x = 0; x<5; x++ ) {
 8001396:	7dbb      	ldrb	r3, [r7, #22]
 8001398:	3301      	adds	r3, #1
 800139a:	75bb      	strb	r3, [r7, #22]
 800139c:	7dbb      	ldrb	r3, [r7, #22]
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d9c3      	bls.n	800132a <SSD1331_Chr+0x25a>
    				}
    			}
    			_sendData(bg_color >> 8);
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fc22 	bl	8000bf4 <_sendData>
    			_sendData(bg_color);
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fc1d 	bl	8000bf4 <_sendData>
        		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_SET);; //cs
 80013ba:	2201      	movs	r2, #1
 80013bc:	2110      	movs	r1, #16
 80013be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c2:	f002 fbab 	bl	8003b1c <HAL_GPIO_WritePin>
    		for (sy = 0; sy<size; sy++ ) {
 80013c6:	7d3b      	ldrb	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	753b      	strb	r3, [r7, #20]
 80013cc:	7d3a      	ldrb	r2, [r7, #20]
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f4ff af7a 	bcc.w	80012ca <SSD1331_Chr+0x1fa>
    	for (y = 0; y<8; y++ ) {
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	3301      	adds	r3, #1
 80013da:	75fb      	strb	r3, [r7, #23]
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b07      	cmp	r3, #7
 80013e0:	f67f af70 	bls.w	80012c4 <SSD1331_Chr+0x1f4>
 80013e4:	e000      	b.n	80013e8 <SSD1331_Chr+0x318>
		return;
 80013e6:	bf00      	nop
    	}
    }

    /////CHR_X++;
    //CHR_X += 6*size;
}
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd90      	pop	{r4, r7, pc}
 80013ee:	bf00      	nop

080013f0 <SSD1331_FStr>:
        tmpIdx++;
    }
}

// Print a string from the Flash to display
void SSD1331_FStr(LcdFontSize size, const unsigned char *dataPtr, uint16_t chr_color, uint16_t bg_color) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	4611      	mov	r1, r2
 80013fa:	461a      	mov	r2, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	460b      	mov	r3, r1
 8001402:	81bb      	strh	r3, [r7, #12]
 8001404:	4613      	mov	r3, r2
 8001406:	80fb      	strh	r3, [r7, #6]
    unsigned char c;
    for (c = *( dataPtr ); c; ++dataPtr, c = *( dataPtr ))
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	75fb      	strb	r3, [r7, #23]
 800140e:	e00f      	b.n	8001430 <SSD1331_FStr+0x40>
        		CHR_Y = 0;
        	}
        }
        */

        SSD1331_Chr(size, c, chr_color, bg_color);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	89ba      	ldrh	r2, [r7, #12]
 8001414:	7df9      	ldrb	r1, [r7, #23]
 8001416:	7bf8      	ldrb	r0, [r7, #15]
 8001418:	f7ff fe5a 	bl	80010d0 <SSD1331_Chr>
        SSD1331_XY_INK(size);
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe18 	bl	8001054 <SSD1331_XY_INK>
    for (c = *( dataPtr ); c; ++dataPtr, c = *( dataPtr ))
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	3301      	adds	r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	75fb      	strb	r3, [r7, #23]
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1ec      	bne.n	8001410 <SSD1331_FStr+0x20>
    }
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <SSD1331_DisplayON>:
{
    _sendCmd(power);
}

void SSD1331_DisplayON(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	_sendCmd(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);
 8001444:	20af      	movs	r0, #175	@ 0xaf
 8001446:	f7ff fbaf 	bl	8000ba8 <_sendCmd>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}

0800144e <SSD1331_DisplayOFF>:

void SSD1331_DisplayOFF(void){
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
	_sendCmd(CMD_DISPLAY_OFF);
 8001452:	20ae      	movs	r0, #174	@ 0xae
 8001454:	f7ff fba8 	bl	8000ba8 <_sendCmd>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <display_gameBoard>:
    }
    return 0;
}


void display_gameBoard(void){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af02      	add	r7, sp, #8
    display_clear();
 8001462:	f000 f811 	bl	8001488 <display_clear>
    HAL_Delay(150);
 8001466:	2096      	movs	r0, #150	@ 0x96
 8001468:	f001 f8f8 	bl	800265c <HAL_Delay>
    SSD1331_drawXOboard(16, 0, 80, RGB_OLED_HEIGHT-1, COLOR_NAVY, COLOR_SILVER);
 800146c:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	2310      	movs	r3, #16
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	233f      	movs	r3, #63	@ 0x3f
 8001478:	2250      	movs	r2, #80	@ 0x50
 800147a:	2100      	movs	r1, #0
 800147c:	2010      	movs	r0, #16
 800147e:	f7ff fd41 	bl	8000f04 <SSD1331_drawXOboard>
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <display_clear>:

void display_clear(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af02      	add	r7, sp, #8
    SSD1331_drawFrame(0, 0, RGB_OLED_WIDTH - 1, RGB_OLED_HEIGHT - 1, COLOR_BLACK, COLOR_BLACK);
 800148e:	2300      	movs	r3, #0
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	2300      	movs	r3, #0
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	233f      	movs	r3, #63	@ 0x3f
 8001498:	225f      	movs	r2, #95	@ 0x5f
 800149a:	2100      	movs	r1, #0
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff fcb5 	bl	8000e0c <SSD1331_drawFrame>
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <display_welcomeScreen>:
    sprintf(hum_str, "%.2f %%", hum);
    SSD1331_SetXY(RGB_OLED_WIDTH/2 - 35, RGB_OLED_HEIGHT/2 +6);
    SSD1331_FStr(FONT_1X, (unsigned char*)hum_str, COLOR_BLUE, COLOR_BLACK);
}

void display_welcomeScreen(void){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af02      	add	r7, sp, #8
    // Tło i ramka
    display_clear();
 80014ae:	f7ff ffeb 	bl	8001488 <display_clear>
    HAL_Delay(200);
 80014b2:	20c8      	movs	r0, #200	@ 0xc8
 80014b4:	f001 f8d2 	bl	800265c <HAL_Delay>
    SSD1331_drawFrame(0, 0, RGB_OLED_WIDTH - 1, RGB_OLED_HEIGHT - 1, COLOR_DARKGREEN, COLOR_CHOCOLATE);
 80014b8:	f24d 3343 	movw	r3, #54083	@ 0xd343
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	233f      	movs	r3, #63	@ 0x3f
 80014c6:	225f      	movs	r2, #95	@ 0x5f
 80014c8:	2100      	movs	r1, #0
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff fc9e 	bl	8000e0c <SSD1331_drawFrame>
    HAL_Delay(300);
 80014d0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014d4:	f001 f8c2 	bl	800265c <HAL_Delay>

    SSD1331_SetXY(RGB_OLED_WIDTH/2 - 40, RGB_OLED_HEIGHT/2 - 18);
 80014d8:	210e      	movs	r1, #14
 80014da:	2008      	movs	r0, #8
 80014dc:	f7ff fda2 	bl	8001024 <SSD1331_SetXY>
    char *wiadomosc = "TIC_TAC_TOE";
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <display_welcomeScreen+0x78>)
 80014e2:	607b      	str	r3, [r7, #4]
    SSD1331_FStr(FONT_2X, (unsigned char*) wiadomosc, COLOR_AQUA, COLOR_CHOCOLATE);
 80014e4:	f24d 3343 	movw	r3, #54083	@ 0xd343
 80014e8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	2002      	movs	r0, #2
 80014f0:	f7ff ff7e 	bl	80013f0 <SSD1331_FStr>

    // Podpis - biała czcionka na czarnym tle
    SSD1331_SetXY(RGB_OLED_WIDTH/2 - 40, RGB_OLED_HEIGHT/2 + 10);
 80014f4:	212a      	movs	r1, #42	@ 0x2a
 80014f6:	2008      	movs	r0, #8
 80014f8:	f7ff fd94 	bl	8001024 <SSD1331_SetXY>
    char *wiadomosc2 = "Projekt JM/KD";
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <display_welcomeScreen+0x7c>)
 80014fe:	603b      	str	r3, [r7, #0]
    SSD1331_FStr(FONT_1X, (unsigned char*) wiadomosc2, COLOR_WHITE, COLOR_CHOCOLATE);
 8001500:	f24d 3343 	movw	r3, #54083	@ 0xd343
 8001504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	2001      	movs	r0, #1
 800150c:	f7ff ff70 	bl	80013f0 <SSD1331_FStr>

    HAL_Delay(3000);
 8001510:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001514:	f001 f8a2 	bl	800265c <HAL_Delay>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	080096d4 	.word	0x080096d4
 8001524:	080096e0 	.word	0x080096e0

08001528 <getXOCell>:
XOCell getXOCell(
    uint16_t board_x0, uint16_t board_y0, uint16_t board_x1, uint16_t board_y1,
    uint8_t cellNumber // 1-9, zgodnie z T9
) {
 8001528:	b480      	push	{r7}
 800152a:	b08b      	sub	sp, #44	@ 0x2c
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	4608      	mov	r0, r1
 8001532:	4611      	mov	r1, r2
 8001534:	461a      	mov	r2, r3
 8001536:	4603      	mov	r3, r0
 8001538:	817b      	strh	r3, [r7, #10]
 800153a:	460b      	mov	r3, r1
 800153c:	813b      	strh	r3, [r7, #8]
 800153e:	4613      	mov	r3, r2
 8001540:	80fb      	strh	r3, [r7, #6]
    XOCell cell;
    uint16_t width  = board_x1 > board_x0 ? board_x1 - board_x0 : board_x0 - board_x1;
 8001542:	88fa      	ldrh	r2, [r7, #6]
 8001544:	897b      	ldrh	r3, [r7, #10]
 8001546:	429a      	cmp	r2, r3
 8001548:	d904      	bls.n	8001554 <getXOCell+0x2c>
 800154a:	88fa      	ldrh	r2, [r7, #6]
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	e003      	b.n	800155c <getXOCell+0x34>
 8001554:	897a      	ldrh	r2, [r7, #10]
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	b29b      	uxth	r3, r3
 800155c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t height = board_y1 > board_y0 ? board_y1 - board_y0 : board_y0 - board_y1;
 800155e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001560:	893b      	ldrh	r3, [r7, #8]
 8001562:	429a      	cmp	r2, r3
 8001564:	d904      	bls.n	8001570 <getXOCell+0x48>
 8001566:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001568:	893b      	ldrh	r3, [r7, #8]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	b29b      	uxth	r3, r3
 800156e:	e003      	b.n	8001578 <getXOCell+0x50>
 8001570:	893a      	ldrh	r2, [r7, #8]
 8001572:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	84bb      	strh	r3, [r7, #36]	@ 0x24

    uint16_t cell_w = width / 3;
 800157a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800157c:	4a2b      	ldr	r2, [pc, #172]	@ (800162c <getXOCell+0x104>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t cell_h = height / 3;
 8001586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001588:	4a28      	ldr	r2, [pc, #160]	@ (800162c <getXOCell+0x104>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	843b      	strh	r3, [r7, #32]

    // Mapowanie T9: 1 2 3
    //               4 5 6
    //               7 8 9
    uint8_t row = (cellNumber - 1) / 3; // 0,1,2
 8001592:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001596:	3b01      	subs	r3, #1
 8001598:	4a25      	ldr	r2, [pc, #148]	@ (8001630 <getXOCell+0x108>)
 800159a:	fb82 1203 	smull	r1, r2, r2, r3
 800159e:	17db      	asrs	r3, r3, #31
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	77fb      	strb	r3, [r7, #31]
    uint8_t col = (cellNumber - 1) % 3; // 0,1,2
 80015a4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <getXOCell+0x108>)
 80015ac:	fb83 3102 	smull	r3, r1, r3, r2
 80015b0:	17d3      	asrs	r3, r2, #31
 80015b2:	1ac9      	subs	r1, r1, r3
 80015b4:	460b      	mov	r3, r1
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	440b      	add	r3, r1
 80015ba:	1ad1      	subs	r1, r2, r3
 80015bc:	460b      	mov	r3, r1
 80015be:	77bb      	strb	r3, [r7, #30]

    cell.x0 = board_x0 + col * cell_w;
 80015c0:	7fbb      	ldrb	r3, [r7, #30]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80015c6:	fb12 f303 	smulbb	r3, r2, r3
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	897b      	ldrh	r3, [r7, #10]
 80015ce:	4413      	add	r3, r2
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	82bb      	strh	r3, [r7, #20]
    cell.y0 = board_y0 + row * cell_h;
 80015d4:	7ffb      	ldrb	r3, [r7, #31]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	8c3a      	ldrh	r2, [r7, #32]
 80015da:	fb12 f303 	smulbb	r3, r2, r3
 80015de:	b29a      	uxth	r2, r3
 80015e0:	893b      	ldrh	r3, [r7, #8]
 80015e2:	4413      	add	r3, r2
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	82fb      	strh	r3, [r7, #22]
    cell.x1 = (col == 2) ? board_x1 : (cell.x0 + cell_w);
 80015e8:	7fbb      	ldrb	r3, [r7, #30]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d004      	beq.n	80015f8 <getXOCell+0xd0>
 80015ee:	8aba      	ldrh	r2, [r7, #20]
 80015f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80015f2:	4413      	add	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	e000      	b.n	80015fa <getXOCell+0xd2>
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	833b      	strh	r3, [r7, #24]
    cell.y1 = (row == 2) ? board_y1 : (cell.y0 + cell_h);
 80015fc:	7ffb      	ldrb	r3, [r7, #31]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d004      	beq.n	800160c <getXOCell+0xe4>
 8001602:	8afa      	ldrh	r2, [r7, #22]
 8001604:	8c3b      	ldrh	r3, [r7, #32]
 8001606:	4413      	add	r3, r2
 8001608:	b29b      	uxth	r3, r3
 800160a:	e000      	b.n	800160e <getXOCell+0xe6>
 800160c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800160e:	837b      	strh	r3, [r7, #26]

    return cell;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	461a      	mov	r2, r3
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	cb03      	ldmia	r3!, {r0, r1}
 800161a:	6010      	str	r0, [r2, #0]
 800161c:	6051      	str	r1, [r2, #4]
}
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	372c      	adds	r7, #44	@ 0x2c
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	aaaaaaab 	.word	0xaaaaaaab
 8001630:	55555556 	.word	0x55555556

08001634 <display_drawXOCellFrame>:
	getXOCell(XO_BOARD_START_X, XO_BOARD_START_Y, XO_BOARD_END_X, XO_BOARD_END_Y,cellNumber);
}
void display_drawXOCellFrame(
    uint16_t board_x0, uint16_t board_y0, uint16_t board_x1, uint16_t board_y1,
    uint8_t cellNumber, uint16_t lineColor, uint16_t fillColor)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b087      	sub	sp, #28
 8001638:	af02      	add	r7, sp, #8
 800163a:	4604      	mov	r4, r0
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4623      	mov	r3, r4
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	4603      	mov	r3, r0
 8001648:	80bb      	strh	r3, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	807b      	strh	r3, [r7, #2]
 800164e:	4613      	mov	r3, r2
 8001650:	803b      	strh	r3, [r7, #0]
    XOCell cell = getXOCell(board_x0, board_y0, board_x1, board_y1, cellNumber);
 8001652:	f107 0008 	add.w	r0, r7, #8
 8001656:	887c      	ldrh	r4, [r7, #2]
 8001658:	88ba      	ldrh	r2, [r7, #4]
 800165a:	88f9      	ldrh	r1, [r7, #6]
 800165c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	883b      	ldrh	r3, [r7, #0]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	4623      	mov	r3, r4
 8001668:	f7ff ff5e 	bl	8001528 <getXOCell>
    SSD1331_drawFrame(cell.x0, cell.y0, cell.x1, cell.y1, lineColor, fillColor);
 800166c:	8938      	ldrh	r0, [r7, #8]
 800166e:	8979      	ldrh	r1, [r7, #10]
 8001670:	89ba      	ldrh	r2, [r7, #12]
 8001672:	89fc      	ldrh	r4, [r7, #14]
 8001674:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	4623      	mov	r3, r4
 800167e:	f7ff fbc5 	bl	8000e0c <SSD1331_drawFrame>
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bd90      	pop	{r4, r7, pc}
	...

0800168c <display_clearXOBoardCell>:
void display_drawXOBoardCell(uint8_t cellNumber, uint16_t lineColor, uint16_t fillColor){
	display_drawXOCellFrame(XO_BOARD_START_X, XO_BOARD_START_Y, XO_BOARD_END_X, XO_BOARD_END_Y, cellNumber, lineColor, fillColor);
}
void display_clearXOBoardCell(uint8_t cellNumber){
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b087      	sub	sp, #28
 8001690:	af04      	add	r7, sp, #16
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
	display_drawXOCellFrame(XO_BOARD_START_X, XO_BOARD_START_Y, XO_BOARD_END_X, XO_BOARD_END_Y, cellNumber, COLOR_SILVER, COLOR_NAVY);
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <display_clearXOBoardCell+0x38>)
 8001698:	8818      	ldrh	r0, [r3, #0]
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <display_clearXOBoardCell+0x3c>)
 800169c:	8819      	ldrh	r1, [r3, #0]
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <display_clearXOBoardCell+0x40>)
 80016a0:	881a      	ldrh	r2, [r3, #0]
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <display_clearXOBoardCell+0x44>)
 80016a4:	881c      	ldrh	r4, [r3, #0]
 80016a6:	2310      	movs	r3, #16
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4623      	mov	r3, r4
 80016b6:	f7ff ffbd 	bl	8001634 <display_drawXOCellFrame>
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000004 	.word	0x20000004
 80016c8:	200001fe 	.word	0x200001fe
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000002 	.word	0x20000002

080016d4 <display_fillXOBoardCell>:
void display_fillXOBoardCell(uint8_t cellNumber){
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af04      	add	r7, sp, #16
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	display_drawXOCellFrame(XO_BOARD_START_X, XO_BOARD_START_Y, XO_BOARD_END_X, XO_BOARD_END_Y, cellNumber, COLOR_RED, COLOR_HONEYDEW);
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <display_fillXOBoardCell+0x38>)
 80016e0:	8818      	ldrh	r0, [r3, #0]
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <display_fillXOBoardCell+0x3c>)
 80016e4:	8819      	ldrh	r1, [r3, #0]
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <display_fillXOBoardCell+0x40>)
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <display_fillXOBoardCell+0x44>)
 80016ec:	881c      	ldrh	r4, [r3, #0]
 80016ee:	f24f 73fe 	movw	r3, #63486	@ 0xf7fe
 80016f2:	9302      	str	r3, [sp, #8]
 80016f4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	4623      	mov	r3, r4
 8001700:	f7ff ff98 	bl	8001634 <display_drawXOCellFrame>
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bd90      	pop	{r4, r7, pc}
 800170c:	20000004 	.word	0x20000004
 8001710:	200001fe 	.word	0x200001fe
 8001714:	20000000 	.word	0x20000000
 8001718:	20000002 	.word	0x20000002

0800171c <HAL_GPIO_EXTI_Callback>:
static void MX_RTC_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM6_Init(void);
uint8_t detectDirection(uint16_t xValue, uint16_t yValue);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800172c:	d102      	bne.n	8001734 <HAL_GPIO_EXTI_Callback+0x18>
    	SSD1331_DisplayOFF();
 800172e:	f7ff fe8e 	bl	800144e <SSD1331_DisplayOFF>
    }
    else if(GPIO_Pin == GPIO_PIN_0){
    	SSD1331_DisplayON();
    }
}
 8001732:	e004      	b.n	800173e <HAL_GPIO_EXTI_Callback+0x22>
    else if(GPIO_Pin == GPIO_PIN_0){
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_GPIO_EXTI_Callback+0x22>
    	SSD1331_DisplayON();
 800173a:	f7ff fe81 	bl	8001440 <SSD1331_DisplayON>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
//        	display_fillXOBoardCell(currentState);
//        	HAL_Delay(100);
//        	lastState = currentState;
//        }
//    }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <detectDirection>:
//              return 4;
//      }
//
//      return 0;
//  }
uint8_t detectDirection(uint16_t x, uint16_t y) {
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	460a      	mov	r2, r1
 8001764:	80fb      	strh	r3, [r7, #6]
 8001766:	4613      	mov	r3, r2
 8001768:	80bb      	strh	r3, [r7, #4]
    int16_t dx = x - 2048;
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001770:	b29b      	uxth	r3, r3
 8001772:	81fb      	strh	r3, [r7, #14]
    int16_t dy = y - 2048;
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800177a:	b29b      	uxth	r3, r3
 800177c:	81bb      	strh	r3, [r7, #12]
    int16_t threshold = 500;
 800177e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001782:	817b      	strh	r3, [r7, #10]

    if (abs(dx) < threshold && abs(dy) < threshold) return 0; // brak ruchu
 8001784:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bfb8      	it	lt
 800178c:	425b      	neglt	r3, r3
 800178e:	b29b      	uxth	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001796:	429a      	cmp	r2, r3
 8001798:	da0c      	bge.n	80017b4 <detectDirection+0x5a>
 800179a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bfb8      	it	lt
 80017a2:	425b      	neglt	r3, r3
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	da01      	bge.n	80017b4 <detectDirection+0x5a>
 80017b0:	2300      	movs	r3, #0
 80017b2:	e05e      	b.n	8001872 <detectDirection+0x118>

    if (dy < -threshold && dx < -threshold) return 8; // góra-lewo
 80017b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017bc:	425b      	negs	r3, r3
 80017be:	429a      	cmp	r2, r3
 80017c0:	da08      	bge.n	80017d4 <detectDirection+0x7a>
 80017c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017ca:	425b      	negs	r3, r3
 80017cc:	429a      	cmp	r2, r3
 80017ce:	da01      	bge.n	80017d4 <detectDirection+0x7a>
 80017d0:	2308      	movs	r3, #8
 80017d2:	e04e      	b.n	8001872 <detectDirection+0x118>
    if (dy < -threshold && dx >  threshold) return 2; // góra-prawo
 80017d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017dc:	425b      	negs	r3, r3
 80017de:	429a      	cmp	r2, r3
 80017e0:	da07      	bge.n	80017f2 <detectDirection+0x98>
 80017e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dd01      	ble.n	80017f2 <detectDirection+0x98>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e03f      	b.n	8001872 <detectDirection+0x118>
    if (dy >  threshold && dx < -threshold) return 6; // dół-lewo
 80017f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dd08      	ble.n	8001810 <detectDirection+0xb6>
 80017fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001802:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001806:	425b      	negs	r3, r3
 8001808:	429a      	cmp	r2, r3
 800180a:	da01      	bge.n	8001810 <detectDirection+0xb6>
 800180c:	2306      	movs	r3, #6
 800180e:	e030      	b.n	8001872 <detectDirection+0x118>
    if (dy >  threshold && dx >  threshold) return 4; // dół-prawo
 8001810:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001814:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001818:	429a      	cmp	r2, r3
 800181a:	dd07      	ble.n	800182c <detectDirection+0xd2>
 800181c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001820:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001824:	429a      	cmp	r2, r3
 8001826:	dd01      	ble.n	800182c <detectDirection+0xd2>
 8001828:	2304      	movs	r3, #4
 800182a:	e022      	b.n	8001872 <detectDirection+0x118>

    if (dy < -threshold) return 1; // góra
 800182c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001830:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001834:	425b      	negs	r3, r3
 8001836:	429a      	cmp	r2, r3
 8001838:	da01      	bge.n	800183e <detectDirection+0xe4>
 800183a:	2301      	movs	r3, #1
 800183c:	e019      	b.n	8001872 <detectDirection+0x118>
    if (dy >  threshold) return 5; // dół
 800183e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001842:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001846:	429a      	cmp	r2, r3
 8001848:	dd01      	ble.n	800184e <detectDirection+0xf4>
 800184a:	2305      	movs	r3, #5
 800184c:	e011      	b.n	8001872 <detectDirection+0x118>
    if (dx < -threshold) return 7; // lewo
 800184e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001852:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001856:	425b      	negs	r3, r3
 8001858:	429a      	cmp	r2, r3
 800185a:	da01      	bge.n	8001860 <detectDirection+0x106>
 800185c:	2307      	movs	r3, #7
 800185e:	e008      	b.n	8001872 <detectDirection+0x118>
    if (dx >  threshold) return 3; // prawo
 8001860:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001864:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001868:	429a      	cmp	r2, r3
 800186a:	dd01      	ble.n	8001870 <detectDirection+0x116>
 800186c:	2303      	movs	r3, #3
 800186e:	e000      	b.n	8001872 <detectDirection+0x118>

    return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <moveCursor>:
void moveCursor(uint8_t direction) {
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
    int8_t dRow = 0, dCol = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]
 800188e:	2300      	movs	r3, #0
 8001890:	73bb      	strb	r3, [r7, #14]
    switch(direction) {
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	3b01      	subs	r3, #1
 8001896:	2b07      	cmp	r3, #7
 8001898:	d85d      	bhi.n	8001956 <moveCursor+0xd6>
 800189a:	a201      	add	r2, pc, #4	@ (adr r2, 80018a0 <moveCursor+0x20>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	080018c1 	.word	0x080018c1
 80018a4:	080018cb 	.word	0x080018cb
 80018a8:	080018d5 	.word	0x080018d5
 80018ac:	080018df 	.word	0x080018df
 80018b0:	080018e9 	.word	0x080018e9
 80018b4:	080018f3 	.word	0x080018f3
 80018b8:	080018fd 	.word	0x080018fd
 80018bc:	08001907 	.word	0x08001907
        case 1: dRow = -1; dCol =  0; break; // góra
 80018c0:	23ff      	movs	r3, #255	@ 0xff
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	2300      	movs	r3, #0
 80018c6:	73bb      	strb	r3, [r7, #14]
 80018c8:	e022      	b.n	8001910 <moveCursor+0x90>
        case 2: dRow = -1; dCol = +1; break; // góra-prawo
 80018ca:	23ff      	movs	r3, #255	@ 0xff
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	2301      	movs	r3, #1
 80018d0:	73bb      	strb	r3, [r7, #14]
 80018d2:	e01d      	b.n	8001910 <moveCursor+0x90>
        case 3: dRow =  0; dCol = +1; break; // prawo
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	2301      	movs	r3, #1
 80018da:	73bb      	strb	r3, [r7, #14]
 80018dc:	e018      	b.n	8001910 <moveCursor+0x90>
        case 4: dRow = +1; dCol = +1; break; // dół-prawo
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	2301      	movs	r3, #1
 80018e4:	73bb      	strb	r3, [r7, #14]
 80018e6:	e013      	b.n	8001910 <moveCursor+0x90>
        case 5: dRow = +1; dCol =  0; break; // dół
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	2300      	movs	r3, #0
 80018ee:	73bb      	strb	r3, [r7, #14]
 80018f0:	e00e      	b.n	8001910 <moveCursor+0x90>
        case 6: dRow = +1; dCol = -1; break; // dół-lewo
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	23ff      	movs	r3, #255	@ 0xff
 80018f8:	73bb      	strb	r3, [r7, #14]
 80018fa:	e009      	b.n	8001910 <moveCursor+0x90>
        case 7: dRow =  0; dCol = -1; break; // lewo
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	23ff      	movs	r3, #255	@ 0xff
 8001902:	73bb      	strb	r3, [r7, #14]
 8001904:	e004      	b.n	8001910 <moveCursor+0x90>
        case 8: dRow = -1; dCol = -1; break; // góra-lewo
 8001906:	23ff      	movs	r3, #255	@ 0xff
 8001908:	73fb      	strb	r3, [r7, #15]
 800190a:	23ff      	movs	r3, #255	@ 0xff
 800190c:	73bb      	strb	r3, [r7, #14]
 800190e:	bf00      	nop
        default: return; // brak ruchu
    }
    // Sprawdź granice planszy
    int8_t newRow = cursorRow + dRow;
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <moveCursor+0xe4>)
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	4413      	add	r3, r2
 8001918:	b2db      	uxtb	r3, r3
 800191a:	737b      	strb	r3, [r7, #13]
    int8_t newCol = cursorCol + dCol;
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <moveCursor+0xe8>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	4413      	add	r3, r2
 8001924:	b2db      	uxtb	r3, r3
 8001926:	733b      	strb	r3, [r7, #12]
    if (newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE) {
 8001928:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db13      	blt.n	8001958 <moveCursor+0xd8>
 8001930:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001934:	2b02      	cmp	r3, #2
 8001936:	dc0f      	bgt.n	8001958 <moveCursor+0xd8>
 8001938:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0b      	blt.n	8001958 <moveCursor+0xd8>
 8001940:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001944:	2b02      	cmp	r3, #2
 8001946:	dc07      	bgt.n	8001958 <moveCursor+0xd8>
        cursorRow = newRow;
 8001948:	7b7a      	ldrb	r2, [r7, #13]
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <moveCursor+0xe4>)
 800194c:	701a      	strb	r2, [r3, #0]
        cursorCol = newCol;
 800194e:	7b3a      	ldrb	r2, [r7, #12]
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <moveCursor+0xe8>)
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	e000      	b.n	8001958 <moveCursor+0xd8>
        default: return; // brak ruchu
 8001956:	bf00      	nop
    }
}
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000006 	.word	0x20000006
 8001968:	20000007 	.word	0x20000007

0800196c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001972:	f000 fe0d 	bl	8002590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001976:	f000 f879 	bl	8001a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197a:	f000 fab1 	bl	8001ee0 <MX_GPIO_Init>
  MX_DMA_Init();
 800197e:	f000 fa91 	bl	8001ea4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001982:	f000 fa5f 	bl	8001e44 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001986:	f000 f99b 	bl	8001cc0 <MX_SPI3_Init>
  MX_ADC1_Init();
 800198a:	f000 f8d3 	bl	8001b34 <MX_ADC1_Init>
  MX_RTC_Init();
 800198e:	f000 f93d 	bl	8001c0c <MX_RTC_Init>
  MX_TIM2_Init();
 8001992:	f000 f9d3 	bl	8001d3c <MX_TIM2_Init>
  MX_TIM6_Init();
 8001996:	f000 fa1f 	bl	8001dd8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800199a:	2202      	movs	r2, #2
 800199c:	492d      	ldr	r1, [pc, #180]	@ (8001a54 <main+0xe8>)
 800199e:	482e      	ldr	r0, [pc, #184]	@ (8001a58 <main+0xec>)
 80019a0:	f001 f824 	bl	80029ec <HAL_ADC_Start_DMA>
  HAL_Delay(100);
 80019a4:	2064      	movs	r0, #100	@ 0x64
 80019a6:	f000 fe59 	bl	800265c <HAL_Delay>

  // Inicjalizacja AHT30
  HAL_Delay(100);
 80019aa:	2064      	movs	r0, #100	@ 0x64
 80019ac:	f000 fe56 	bl	800265c <HAL_Delay>

  //Inicjalizacja konfiguracji ekranu
  SSD1331_init();
 80019b0:	f7ff f946 	bl	8000c40 <SSD1331_init>
  HAL_Delay(100);
 80019b4:	2064      	movs	r0, #100	@ 0x64
 80019b6:	f000 fe51 	bl	800265c <HAL_Delay>
  //Wypelnienie calego ekranu na czarno
  display_welcomeScreen();
 80019ba:	f7ff fd75 	bl	80014a8 <display_welcomeScreen>
  HAL_Delay(150);
 80019be:	2096      	movs	r0, #150	@ 0x96
 80019c0:	f000 fe4c 	bl	800265c <HAL_Delay>
  display_gameBoard();
 80019c4:	f7ff fd4a 	bl	800145c <display_gameBoard>

  HAL_Delay(100);
 80019c8:	2064      	movs	r0, #100	@ 0x64
 80019ca:	f000 fe47 	bl	800265c <HAL_Delay>
  display_fillXOBoardCell(cursorRow * BOARD_SIZE + cursorCol + 1);
 80019ce:	4b23      	ldr	r3, [pc, #140]	@ (8001a5c <main+0xf0>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	4a21      	ldr	r2, [pc, #132]	@ (8001a60 <main+0xf4>)
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	3301      	adds	r3, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fe76 	bl	80016d4 <display_fillXOBoardCell>

  //Deklarowanie zmiennych odnosnie kontroli ekranu
  screenMode = 1;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <main+0xf8>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]

  // Początkowy odczyt temperatury i wilgotności

  // **USTAWIENIE POCZĄTKOWEGO CZASU DLA ŚREDNIEJ (dla testów - 30 sekund)**
  last_avg_tick = 0; // Odejmij 4 minuty, żeby pierwsza średnia pojawiła się za 30s
 80019ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <main+0xfc>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
//		 HAL_Delay(200);
//
//	 }
//
//
	  direction = detectDirection(adc_buf[0],adc_buf[1]);
 80019f4:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <main+0xe8>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	4a16      	ldr	r2, [pc, #88]	@ (8001a54 <main+0xe8>)
 80019fa:	8852      	ldrh	r2, [r2, #2]
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff feab 	bl	800175a <detectDirection>
 8001a04:	4603      	mov	r3, r0
 8001a06:	71fb      	strb	r3, [r7, #7]

	         if (direction != 0) {
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01d      	beq.n	8001a4a <main+0xde>
	             display_clearXOBoardCell(cursorRow * BOARD_SIZE + cursorCol + 1);
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <main+0xf0>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a11      	ldr	r2, [pc, #68]	@ (8001a60 <main+0xf4>)
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	3301      	adds	r3, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fe32 	bl	800168c <display_clearXOBoardCell>
	             moveCursor(direction);
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff28 	bl	8001880 <moveCursor>
	             display_fillXOBoardCell(cursorRow * BOARD_SIZE + cursorCol + 1);
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <main+0xf0>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a08      	ldr	r2, [pc, #32]	@ (8001a60 <main+0xf4>)
 8001a3e:	7812      	ldrb	r2, [r2, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	3301      	adds	r3, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fe45 	bl	80016d4 <display_fillXOBoardCell>
	         }

	         HAL_Delay(200);
 8001a4a:	20c8      	movs	r0, #200	@ 0xc8
 8001a4c:	f000 fe06 	bl	800265c <HAL_Delay>
	  direction = detectDirection(adc_buf[0],adc_buf[1]);
 8001a50:	e7d0      	b.n	80019f4 <main+0x88>
 8001a52:	bf00      	nop
 8001a54:	20000438 	.word	0x20000438
 8001a58:	20000200 	.word	0x20000200
 8001a5c:	20000006 	.word	0x20000006
 8001a60:	20000007 	.word	0x20000007
 8001a64:	20000008 	.word	0x20000008
 8001a68:	2000043c 	.word	0x2000043c

08001a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b09c      	sub	sp, #112	@ 0x70
 8001a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a72:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a76:	2228      	movs	r2, #40	@ 0x28
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 fedf 	bl	800783e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a80:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a90:	463b      	mov	r3, r7
 8001a92:	2234      	movs	r2, #52	@ 0x34
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f005 fed1 	bl	800783e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a9c:	f002 f86e 	bl	8003b7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001aa0:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <SystemClock_Config+0xc4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4a22      	ldr	r2, [pc, #136]	@ (8001b30 <SystemClock_Config+0xc4>)
 8001aa6:	f023 0318 	bic.w	r3, r3, #24
 8001aaa:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001aac:	2306      	movs	r3, #6
 8001aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab8:	2310      	movs	r3, #16
 8001aba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abc:	2302      	movs	r3, #2
 8001abe:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001ac4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001ac8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 f864 	bl	8003b9c <HAL_RCC_OscConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001ada:	f000 fa95 	bl	8002008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ade:	230f      	movs	r3, #15
 8001ae0:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001af8:	2102      	movs	r1, #2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 f85c 	bl	8004bb8 <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b06:	f000 fa7f 	bl	8002008 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b0e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b14:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fa5f 	bl	8004fdc <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001b24:	f000 fa70 	bl	8002008 <Error_Handler>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3770      	adds	r7, #112	@ 0x70
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000

08001b34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b52:	4b2d      	ldr	r3, [pc, #180]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b60:	4b29      	ldr	r3, [pc, #164]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b66:	4b28      	ldr	r3, [pc, #160]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b6c:	4b26      	ldr	r3, [pc, #152]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b74:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b7a:	4b23      	ldr	r3, [pc, #140]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b80:	4b21      	ldr	r3, [pc, #132]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001b86:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b88:	2202      	movs	r2, #2
 8001b8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b94:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b96:	2204      	movs	r2, #4
 8001b98:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001ba0:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ba6:	4818      	ldr	r0, [pc, #96]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001ba8:	f000 fd9a 	bl	80026e0 <HAL_ADC_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8001bb2:	f000 fa29 	bl	8002008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bce:	463b      	mov	r3, r7
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001bd4:	f000 ffa6 	bl	8002b24 <HAL_ADC_ConfigChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001bde:	f000 fa13 	bl	8002008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001be2:	2308      	movs	r3, #8
 8001be4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001be6:	2302      	movs	r3, #2
 8001be8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bea:	463b      	mov	r3, r7
 8001bec:	4619      	mov	r1, r3
 8001bee:	4806      	ldr	r0, [pc, #24]	@ (8001c08 <MX_ADC1_Init+0xd4>)
 8001bf0:	f000 ff98 	bl	8002b24 <HAL_ADC_ConfigChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001bfa:	f000 fa05 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000200 	.word	0x20000200

08001c0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c20:	2300      	movs	r3, #0
 8001c22:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c24:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <MX_RTC_Init+0xac>)
 8001c26:	4a25      	ldr	r2, [pc, #148]	@ (8001cbc <MX_RTC_Init+0xb0>)
 8001c28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <MX_RTC_Init+0xac>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c30:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <MX_RTC_Init+0xac>)
 8001c32:	227f      	movs	r2, #127	@ 0x7f
 8001c34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c36:	4b20      	ldr	r3, [pc, #128]	@ (8001cb8 <MX_RTC_Init+0xac>)
 8001c38:	22ff      	movs	r2, #255	@ 0xff
 8001c3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <MX_RTC_Init+0xac>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <MX_RTC_Init+0xac>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <MX_RTC_Init+0xac>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c4e:	481a      	ldr	r0, [pc, #104]	@ (8001cb8 <MX_RTC_Init+0xac>)
 8001c50:	f003 fb54 	bl	80052fc <HAL_RTC_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001c5a:	f000 f9d5 	bl	8002008 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2201      	movs	r2, #1
 8001c76:	4619      	mov	r1, r3
 8001c78:	480f      	ldr	r0, [pc, #60]	@ (8001cb8 <MX_RTC_Init+0xac>)
 8001c7a:	f003 fbc2 	bl	8005402 <HAL_RTC_SetTime>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001c84:	f000 f9c0 	bl	8002008 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001c90:	2301      	movs	r3, #1
 8001c92:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	@ (8001cb8 <MX_RTC_Init+0xac>)
 8001ca0:	f003 fc49 	bl	8005536 <HAL_RTC_SetDate>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001caa:	f000 f9ad 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000294 	.word	0x20000294
 8001cbc:	40002800 	.word	0x40002800

08001cc0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <MX_SPI3_Init+0x78>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001ccc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cd0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd2:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd8:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001cda:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001cde:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001cee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cf2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001d0e:	2207      	movs	r2, #7
 8001d10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001d1a:	2208      	movs	r2, #8
 8001d1c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	@ (8001d34 <MX_SPI3_Init+0x74>)
 8001d20:	f003 fd2e 	bl	8005780 <HAL_SPI_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001d2a:	f000 f96d 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200002b4 	.word	0x200002b4
 8001d38:	40003c00 	.word	0x40003c00

08001d3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <MX_TIM2_Init+0x98>)
 8001d5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <MX_TIM2_Init+0x98>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <MX_TIM2_Init+0x98>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <MX_TIM2_Init+0x98>)
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d76:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <MX_TIM2_Init+0x98>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <MX_TIM2_Init+0x98>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d82:	4814      	ldr	r0, [pc, #80]	@ (8001dd4 <MX_TIM2_Init+0x98>)
 8001d84:	f004 f880 	bl	8005e88 <HAL_TIM_Base_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d8e:	f000 f93b 	bl	8002008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480d      	ldr	r0, [pc, #52]	@ (8001dd4 <MX_TIM2_Init+0x98>)
 8001da0:	f004 f9cb 	bl	800613a <HAL_TIM_ConfigClockSource>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001daa:	f000 f92d 	bl	8002008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	@ (8001dd4 <MX_TIM2_Init+0x98>)
 8001dbc:	f004 fbc2 	bl	8006544 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001dc6:	f000 f91f 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000318 	.word	0x20000318

08001dd8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_TIM6_Init+0x64>)
 8001dea:	4a15      	ldr	r2, [pc, #84]	@ (8001e40 <MX_TIM6_Init+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <MX_TIM6_Init+0x64>)
 8001df0:	229f      	movs	r2, #159	@ 0x9f
 8001df2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <MX_TIM6_Init+0x64>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <MX_TIM6_Init+0x64>)
 8001dfc:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001e00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <MX_TIM6_Init+0x64>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e08:	480c      	ldr	r0, [pc, #48]	@ (8001e3c <MX_TIM6_Init+0x64>)
 8001e0a:	f004 f83d 	bl	8005e88 <HAL_TIM_Base_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e14:	f000 f8f8 	bl	8002008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <MX_TIM6_Init+0x64>)
 8001e26:	f004 fb8d 	bl	8006544 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e30:	f000 f8ea 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000364 	.word	0x20000364
 8001e40:	40001000 	.word	0x40001000

08001e44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e48:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <MX_USART2_UART_Init+0x58>)
 8001e4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ea0 <MX_USART2_UART_Init+0x5c>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <MX_USART2_UART_Init+0x58>)
 8001e50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e56:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <MX_USART2_UART_Init+0x58>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <MX_USART2_UART_Init+0x58>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <MX_USART2_UART_Init+0x58>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <MX_USART2_UART_Init+0x58>)
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <MX_USART2_UART_Init+0x58>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <MX_USART2_UART_Init+0x58>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <MX_USART2_UART_Init+0x58>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <MX_USART2_UART_Init+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <MX_USART2_UART_Init+0x58>)
 8001e88:	f004 fbe0 	bl	800664c <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e92:	f000 f8b9 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200003b0 	.word	0x200003b0
 8001ea0:	40004400 	.word	0x40004400

08001ea4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <MX_DMA_Init+0x38>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <MX_DMA_Init+0x38>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6153      	str	r3, [r2, #20]
 8001eb6:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <MX_DMA_Init+0x38>)
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	200b      	movs	r0, #11
 8001ec8:	f001 fae9 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ecc:	200b      	movs	r0, #11
 8001ece:	f001 fb02 	bl	80034d6 <HAL_NVIC_EnableIRQ>

}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000

08001ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	@ 0x28
 8001ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef6:	4b41      	ldr	r3, [pc, #260]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	4a40      	ldr	r2, [pc, #256]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001efc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f00:	6153      	str	r3, [r2, #20]
 8001f02:	4b3e      	ldr	r3, [pc, #248]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	4a3a      	ldr	r2, [pc, #232]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001f14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f18:	6153      	str	r3, [r2, #20]
 8001f1a:	4b38      	ldr	r3, [pc, #224]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	4b35      	ldr	r3, [pc, #212]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	4a34      	ldr	r2, [pc, #208]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f30:	6153      	str	r3, [r2, #20]
 8001f32:	4b32      	ldr	r3, [pc, #200]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	4a2e      	ldr	r2, [pc, #184]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f48:	6153      	str	r3, [r2, #20]
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ffc <MX_GPIO_Init+0x11c>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RESET_Pin|DC_Pin, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f248 2110 	movw	r1, #33296	@ 0x8210
 8001f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f60:	f001 fddc 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f6a:	4825      	ldr	r0, [pc, #148]	@ (8002000 <MX_GPIO_Init+0x120>)
 8001f6c:	f001 fdd6 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001f70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f76:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	481f      	ldr	r0, [pc, #124]	@ (8002004 <MX_GPIO_Init+0x124>)
 8001f88:	f001 fc56 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f90:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4818      	ldr	r0, [pc, #96]	@ (8002004 <MX_GPIO_Init+0x124>)
 8001fa2:	f001 fc49 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin RESET_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RESET_Pin|DC_Pin;
 8001fa6:	f248 2310 	movw	r3, #33296	@ 0x8210
 8001faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc2:	f001 fc39 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001fc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4808      	ldr	r0, [pc, #32]	@ (8002000 <MX_GPIO_Init+0x120>)
 8001fe0:	f001 fc2a 	bl	8003838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	2006      	movs	r0, #6
 8001fea:	f001 fa58 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fee:	2006      	movs	r0, #6
 8001ff0:	f001 fa71 	bl	80034d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	48000400 	.word	0x48000400
 8002004:	48000800 	.word	0x48000800

08002008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <Error_Handler+0x8>

08002014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <HAL_MspInit+0x44>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	4a0e      	ldr	r2, [pc, #56]	@ (8002058 <HAL_MspInit+0x44>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6193      	str	r3, [r2, #24]
 8002026:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <HAL_MspInit+0x44>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <HAL_MspInit+0x44>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	4a08      	ldr	r2, [pc, #32]	@ (8002058 <HAL_MspInit+0x44>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203c:	61d3      	str	r3, [r2, #28]
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_MspInit+0x44>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800204a:	2007      	movs	r0, #7
 800204c:	f001 fa1c 	bl	8003488 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000

0800205c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	@ 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800207c:	d14b      	bne.n	8002116 <HAL_ADC_MspInit+0xba>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800207e:	4b28      	ldr	r3, [pc, #160]	@ (8002120 <HAL_ADC_MspInit+0xc4>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4a27      	ldr	r2, [pc, #156]	@ (8002120 <HAL_ADC_MspInit+0xc4>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002088:	6153      	str	r3, [r2, #20]
 800208a:	4b25      	ldr	r3, [pc, #148]	@ (8002120 <HAL_ADC_MspInit+0xc4>)
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <HAL_ADC_MspInit+0xc4>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	4a21      	ldr	r2, [pc, #132]	@ (8002120 <HAL_ADC_MspInit+0xc4>)
 800209c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020a0:	6153      	str	r3, [r2, #20]
 80020a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <HAL_ADC_MspInit+0xc4>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80020ae:	2306      	movs	r3, #6
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b2:	2303      	movs	r3, #3
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4818      	ldr	r0, [pc, #96]	@ (8002124 <HAL_ADC_MspInit+0xc8>)
 80020c2:	f001 fbb9 	bl	8003838 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020c6:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <HAL_ADC_MspInit+0xcc>)
 80020c8:	4a18      	ldr	r2, [pc, #96]	@ (800212c <HAL_ADC_MspInit+0xd0>)
 80020ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020cc:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <HAL_ADC_MspInit+0xcc>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <HAL_ADC_MspInit+0xcc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020d8:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <HAL_ADC_MspInit+0xcc>)
 80020da:	2280      	movs	r2, #128	@ 0x80
 80020dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020de:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_ADC_MspInit+0xcc>)
 80020e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <HAL_ADC_MspInit+0xcc>)
 80020e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <HAL_ADC_MspInit+0xcc>)
 80020f0:	2220      	movs	r2, #32
 80020f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <HAL_ADC_MspInit+0xcc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020fa:	480b      	ldr	r0, [pc, #44]	@ (8002128 <HAL_ADC_MspInit+0xcc>)
 80020fc:	f001 fa05 	bl	800350a <HAL_DMA_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8002106:	f7ff ff7f 	bl	8002008 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a06      	ldr	r2, [pc, #24]	@ (8002128 <HAL_ADC_MspInit+0xcc>)
 800210e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002110:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <HAL_ADC_MspInit+0xcc>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002116:	bf00      	nop
 8002118:	3728      	adds	r7, #40	@ 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	48000800 	.word	0x48000800
 8002128:	20000250 	.word	0x20000250
 800212c:	40020008 	.word	0x40020008

08002130 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0d      	ldr	r2, [pc, #52]	@ (8002174 <HAL_RTC_MspInit+0x44>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d111      	bne.n	8002166 <HAL_RTC_MspInit+0x36>
 8002142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002146:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002150:	68bb      	ldr	r3, [r7, #8]
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <HAL_RTC_MspInit+0x48>)
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	461a      	mov	r2, r3
 8002162:	2301      	movs	r3, #1
 8002164:	6013      	str	r3, [r2, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40002800 	.word	0x40002800
 8002178:	10908100 	.word	0x10908100

0800217c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	@ 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a17      	ldr	r2, [pc, #92]	@ (80021f8 <HAL_SPI_MspInit+0x7c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d128      	bne.n	80021f0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800219e:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <HAL_SPI_MspInit+0x80>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a16      	ldr	r2, [pc, #88]	@ (80021fc <HAL_SPI_MspInit+0x80>)
 80021a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021a8:	61d3      	str	r3, [r2, #28]
 80021aa:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <HAL_SPI_MspInit+0x80>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <HAL_SPI_MspInit+0x80>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4a10      	ldr	r2, [pc, #64]	@ (80021fc <HAL_SPI_MspInit+0x80>)
 80021bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021c0:	6153      	str	r3, [r2, #20]
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <HAL_SPI_MspInit+0x80>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021ce:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021e0:	2306      	movs	r3, #6
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	4805      	ldr	r0, [pc, #20]	@ (8002200 <HAL_SPI_MspInit+0x84>)
 80021ec:	f001 fb24 	bl	8003838 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	@ 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40003c00 	.word	0x40003c00
 80021fc:	40021000 	.word	0x40021000
 8002200:	48000800 	.word	0x48000800

08002204 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002214:	d10c      	bne.n	8002230 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002216:	4b15      	ldr	r3, [pc, #84]	@ (800226c <HAL_TIM_Base_MspInit+0x68>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a14      	ldr	r2, [pc, #80]	@ (800226c <HAL_TIM_Base_MspInit+0x68>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_TIM_Base_MspInit+0x68>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800222e:	e018      	b.n	8002262 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0e      	ldr	r2, [pc, #56]	@ (8002270 <HAL_TIM_Base_MspInit+0x6c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d113      	bne.n	8002262 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800223a:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <HAL_TIM_Base_MspInit+0x68>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <HAL_TIM_Base_MspInit+0x68>)
 8002240:	f043 0310 	orr.w	r3, r3, #16
 8002244:	61d3      	str	r3, [r2, #28]
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_TIM_Base_MspInit+0x68>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	2036      	movs	r0, #54	@ 0x36
 8002258:	f001 f921 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800225c:	2036      	movs	r0, #54	@ 0x36
 800225e:	f001 f93a 	bl	80034d6 <HAL_NVIC_EnableIRQ>
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	40001000 	.word	0x40001000

08002274 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	@ 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <HAL_UART_MspInit+0x7c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d128      	bne.n	80022e8 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <HAL_UART_MspInit+0x80>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a16      	ldr	r2, [pc, #88]	@ (80022f4 <HAL_UART_MspInit+0x80>)
 800229c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a0:	61d3      	str	r3, [r2, #28]
 80022a2:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <HAL_UART_MspInit+0x80>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_UART_MspInit+0x80>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	4a10      	ldr	r2, [pc, #64]	@ (80022f4 <HAL_UART_MspInit+0x80>)
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b8:	6153      	str	r3, [r2, #20]
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <HAL_UART_MspInit+0x80>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022c6:	230c      	movs	r3, #12
 80022c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022d6:	2307      	movs	r3, #7
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e4:	f001 faa8 	bl	8003838 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80022e8:	bf00      	nop
 80022ea:	3728      	adds	r7, #40	@ 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40004400 	.word	0x40004400
 80022f4:	40021000 	.word	0x40021000

080022f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <NMI_Handler+0x4>

08002300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <HardFault_Handler+0x4>

08002308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <MemManage_Handler+0x4>

08002310 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <BusFault_Handler+0x4>

08002318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <UsageFault_Handler+0x4>

08002320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800234e:	f000 f965 	bl	800261c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}

08002356 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800235a:	2001      	movs	r0, #1
 800235c:	f001 fbf6 	bl	8003b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <DMA1_Channel1_IRQHandler+0x10>)
 800236a:	f001 f974 	bl	8003656 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000250 	.word	0x20000250

08002378 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <TIM6_DAC_IRQHandler+0x10>)
 800237e:	f003 fdda 	bl	8005f36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000364 	.word	0x20000364

0800238c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return 1;
 8002390:	2301      	movs	r3, #1
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_kill>:

int _kill(int pid, int sig)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023a6:	f005 fa9d 	bl	80078e4 <__errno>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2216      	movs	r2, #22
 80023ae:	601a      	str	r2, [r3, #0]
  return -1;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_exit>:

void _exit (int status)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffe7 	bl	800239c <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ce:	bf00      	nop
 80023d0:	e7fd      	b.n	80023ce <_exit+0x12>

080023d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	e00a      	b.n	80023fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023e4:	f3af 8000 	nop.w
 80023e8:	4601      	mov	r1, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	60ba      	str	r2, [r7, #8]
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	dbf0      	blt.n	80023e4 <_read+0x12>
  }

  return len;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e009      	b.n	8002432 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	60ba      	str	r2, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3301      	adds	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	dbf1      	blt.n	800241e <_write+0x12>
  }
  return len;
 800243a:	687b      	ldr	r3, [r7, #4]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_close>:

int _close(int file)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800246c:	605a      	str	r2, [r3, #4]
  return 0;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_isatty>:

int _isatty(int file)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002484:	2301      	movs	r3, #1
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b4:	4a14      	ldr	r2, [pc, #80]	@ (8002508 <_sbrk+0x5c>)
 80024b6:	4b15      	ldr	r3, [pc, #84]	@ (800250c <_sbrk+0x60>)
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	4b13      	ldr	r3, [pc, #76]	@ (8002510 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c8:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <_sbrk+0x64>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <_sbrk+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ce:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024dc:	f005 fa02 	bl	80078e4 <__errno>
 80024e0:	4603      	mov	r3, r0
 80024e2:	220c      	movs	r2, #12
 80024e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	e009      	b.n	8002500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ec:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f2:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a05      	ldr	r2, [pc, #20]	@ (8002510 <_sbrk+0x64>)
 80024fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20004000 	.word	0x20004000
 800250c:	00000400 	.word	0x00000400
 8002510:	20000440 	.word	0x20000440
 8002514:	20000598 	.word	0x20000598

08002518 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <SystemInit+0x20>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002522:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <SystemInit+0x20>)
 8002524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800253c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002574 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002540:	f7ff ffea 	bl	8002518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002544:	480c      	ldr	r0, [pc, #48]	@ (8002578 <LoopForever+0x6>)
  ldr r1, =_edata
 8002546:	490d      	ldr	r1, [pc, #52]	@ (800257c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002548:	4a0d      	ldr	r2, [pc, #52]	@ (8002580 <LoopForever+0xe>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800254c:	e002      	b.n	8002554 <LoopCopyDataInit>

0800254e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800254e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002552:	3304      	adds	r3, #4

08002554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002558:	d3f9      	bcc.n	800254e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255a:	4a0a      	ldr	r2, [pc, #40]	@ (8002584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800255c:	4c0a      	ldr	r4, [pc, #40]	@ (8002588 <LoopForever+0x16>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002560:	e001      	b.n	8002566 <LoopFillZerobss>

08002562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002564:	3204      	adds	r2, #4

08002566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002568:	d3fb      	bcc.n	8002562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800256a:	f005 f9c1 	bl	80078f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800256e:	f7ff f9fd 	bl	800196c <main>

08002572 <LoopForever>:

LoopForever:
    b LoopForever
 8002572:	e7fe      	b.n	8002572 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002574:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800257c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002580:	0800a2a4 	.word	0x0800a2a4
  ldr r2, =_sbss
 8002584:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002588:	20000594 	.word	0x20000594

0800258c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800258c:	e7fe      	b.n	800258c <ADC1_IRQHandler>
	...

08002590 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <HAL_Init+0x28>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a07      	ldr	r2, [pc, #28]	@ (80025b8 <HAL_Init+0x28>)
 800259a:	f043 0310 	orr.w	r3, r3, #16
 800259e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a0:	2003      	movs	r0, #3
 80025a2:	f000 ff71 	bl	8003488 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f000 f808 	bl	80025bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ac:	f7ff fd32 	bl	8002014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000

080025bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_InitTick+0x54>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <HAL_InitTick+0x58>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 ff89 	bl	80034f2 <HAL_SYSTICK_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00e      	b.n	8002608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d80a      	bhi.n	8002606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f0:	2200      	movs	r2, #0
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f000 ff51 	bl	800349e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025fc:	4a06      	ldr	r2, [pc, #24]	@ (8002618 <HAL_InitTick+0x5c>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	2000000c 	.word	0x2000000c
 8002614:	20000014 	.word	0x20000014
 8002618:	20000010 	.word	0x20000010

0800261c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002620:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_IncTick+0x20>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <HAL_IncTick+0x24>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a04      	ldr	r2, [pc, #16]	@ (8002640 <HAL_IncTick+0x24>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000014 	.word	0x20000014
 8002640:	20000444 	.word	0x20000444

08002644 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;  
 8002648:	4b03      	ldr	r3, [pc, #12]	@ (8002658 <HAL_GetTick+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
 }
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000444 	.word	0x20000444

0800265c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff ffee 	bl	8002644 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d005      	beq.n	8002682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002676:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <HAL_Delay+0x44>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002682:	bf00      	nop
 8002684:	f7ff ffde 	bl	8002644 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d8f7      	bhi.n	8002684 <HAL_Delay+0x28>
  {
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000014 	.word	0x20000014

080026a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b09a      	sub	sp, #104	@ 0x68
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e169      	b.n	80029d4 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	d176      	bne.n	8002800 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d152      	bne.n	80027c0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fc91 	bl	800205c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d13b      	bne.n	80027c0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fd67 	bl	800321c <ADC_Disable>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d12f      	bne.n	80027c0 <HAL_ADC_Init+0xe0>
 8002760:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002764:	2b00      	cmp	r3, #0
 8002766:	d12b      	bne.n	80027c0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	f043 0202 	orr.w	r2, r3, #2
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800278a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800279a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800279c:	4b8f      	ldr	r3, [pc, #572]	@ (80029dc <HAL_ADC_Init+0x2fc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a8f      	ldr	r2, [pc, #572]	@ (80029e0 <HAL_ADC_Init+0x300>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	0c9a      	lsrs	r2, r3, #18
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027b2:	e002      	b.n	80027ba <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f9      	bne.n	80027b4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80027d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027dc:	d110      	bne.n	8002800 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	f023 0312 	bic.w	r3, r3, #18
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 80d6 	bne.w	80029ba <HAL_ADC_Init+0x2da>
 800280e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 80d1 	bne.w	80029ba <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 80c9 	bne.w	80029ba <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002830:	f043 0202 	orr.w	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002838:	4b6a      	ldr	r3, [pc, #424]	@ (80029e4 <HAL_ADC_Init+0x304>)
 800283a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d108      	bne.n	8002860 <HAL_ADC_Init+0x180>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_ADC_Init+0x180>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <HAL_ADC_Init+0x182>
 8002860:	2300      	movs	r3, #0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11c      	bne.n	80028a0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002866:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002868:	2b00      	cmp	r3, #0
 800286a:	d010      	beq.n	800288e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_ADC_Init+0x1a8>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_ADC_Init+0x1a8>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <HAL_ADC_Init+0x1aa>
 8002888:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800288a:	2b00      	cmp	r3, #0
 800288c:	d108      	bne.n	80028a0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800288e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	431a      	orrs	r2, r3
 800289c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800289e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7e5b      	ldrb	r3, [r3, #25]
 80028a4:	035b      	lsls	r3, r3, #13
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028aa:	2a01      	cmp	r2, #1
 80028ac:	d002      	beq.n	80028b4 <HAL_ADC_Init+0x1d4>
 80028ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028b2:	e000      	b.n	80028b6 <HAL_ADC_Init+0x1d6>
 80028b4:	2200      	movs	r2, #0
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80028c6:	4313      	orrs	r3, r2
 80028c8:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d11b      	bne.n	800290c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7e5b      	ldrb	r3, [r3, #25]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	3b01      	subs	r3, #1
 80028e2:	045a      	lsls	r2, r3, #17
 80028e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80028ee:	e00d      	b.n	800290c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80028f8:	f043 0220 	orr.w	r2, r3, #32
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002904:	f043 0201 	orr.w	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	2b01      	cmp	r3, #1
 8002912:	d007      	beq.n	8002924 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	4313      	orrs	r3, r2
 800291e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002920:	4313      	orrs	r3, r2
 8002922:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b00      	cmp	r3, #0
 8002930:	d114      	bne.n	800295c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002940:	f023 0302 	bic.w	r3, r3, #2
 8002944:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	7e1b      	ldrb	r3, [r3, #24]
 800294a:	039a      	lsls	r2, r3, #14
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4313      	orrs	r3, r2
 8002956:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002958:	4313      	orrs	r3, r2
 800295a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <HAL_ADC_Init+0x308>)
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800296c:	430b      	orrs	r3, r1
 800296e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d10c      	bne.n	8002992 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f023 010f 	bic.w	r1, r3, #15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002990:	e007      	b.n	80029a2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 020f 	bic.w	r2, r2, #15
 80029a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	f023 0303 	bic.w	r3, r3, #3
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80029b8:	e00a      	b.n	80029d0 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f023 0312 	bic.w	r3, r3, #18
 80029c2:	f043 0210 	orr.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80029d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3768      	adds	r7, #104	@ 0x68
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	2000000c 	.word	0x2000000c
 80029e0:	431bde83 	.word	0x431bde83
 80029e4:	50000300 	.word	0x50000300
 80029e8:	fff0c007 	.word	0xfff0c007

080029ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d17e      	bne.n	8002b08 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_Start_DMA+0x2c>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e07a      	b.n	8002b0e <HAL_ADC_Start_DMA+0x122>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fb97 	bl	8003154 <ADC_Enable>
 8002a26:	4603      	mov	r3, r0
 8002a28:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d166      	bne.n	8002afe <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	641a      	str	r2, [r3, #64]	@ 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a7a:	d106      	bne.n	8002a8a <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a80:	f023 0206 	bic.w	r2, r3, #6
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a88:	e002      	b.n	8002a90 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002b18 <HAL_ADC_Start_DMA+0x12c>)
 8002a9e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b1c <HAL_ADC_Start_DMA+0x130>)
 8002aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aac:	4a1c      	ldr	r2, [pc, #112]	@ (8002b20 <HAL_ADC_Start_DMA+0x134>)
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	221c      	movs	r2, #28
 8002ab6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0210 	orr.w	r2, r2, #16
 8002ac6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3340      	adds	r3, #64	@ 0x40
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f000 fd56 	bl	8003598 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0204 	orr.w	r2, r2, #4
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	e006      	b.n	8002b0c <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002b06:	e001      	b.n	8002b0c <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	08003089 	.word	0x08003089
 8002b1c:	08003103 	.word	0x08003103
 8002b20:	0800311f 	.word	0x0800311f

08002b24 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b09b      	sub	sp, #108	@ 0x6c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x22>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e295      	b.n	8003072 <HAL_ADC_ConfigChannel+0x54e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f040 8279 	bne.w	8003050 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d81c      	bhi.n	8002ba0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	461a      	mov	r2, r3
 8002b7a:	231f      	movs	r3, #31
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	4019      	ands	r1, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa00 f203 	lsl.w	r2, r0, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b9e:	e063      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b09      	cmp	r3, #9
 8002ba6:	d81e      	bhi.n	8002be6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	3b1e      	subs	r3, #30
 8002bbc:	221f      	movs	r2, #31
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	4019      	ands	r1, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	3b1e      	subs	r3, #30
 8002bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002be4:	e040      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b0e      	cmp	r3, #14
 8002bec:	d81e      	bhi.n	8002c2c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	3b3c      	subs	r3, #60	@ 0x3c
 8002c02:	221f      	movs	r2, #31
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	4019      	ands	r1, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	3b3c      	subs	r3, #60	@ 0x3c
 8002c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c2a:	e01d      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	3b5a      	subs	r3, #90	@ 0x5a
 8002c40:	221f      	movs	r2, #31
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	4019      	ands	r1, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	3b5a      	subs	r3, #90	@ 0x5a
 8002c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 80e5 	bne.w	8002e42 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b09      	cmp	r3, #9
 8002c7e:	d91c      	bls.n	8002cba <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6999      	ldr	r1, [r3, #24]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b1e      	subs	r3, #30
 8002c92:	2207      	movs	r2, #7
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	4019      	ands	r1, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6898      	ldr	r0, [r3, #8]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	3b1e      	subs	r3, #30
 8002cac:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	619a      	str	r2, [r3, #24]
 8002cb8:	e019      	b.n	8002cee <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6959      	ldr	r1, [r3, #20]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	2207      	movs	r2, #7
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	4019      	ands	r1, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6898      	ldr	r0, [r3, #8]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	08db      	lsrs	r3, r3, #3
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d84f      	bhi.n	8002db0 <HAL_ADC_ConfigChannel+0x28c>
 8002d10:	a201      	add	r2, pc, #4	@ (adr r2, 8002d18 <HAL_ADC_ConfigChannel+0x1f4>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d4b 	.word	0x08002d4b
 8002d20:	08002d6d 	.word	0x08002d6d
 8002d24:	08002d8f 	.word	0x08002d8f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d2e:	4b97      	ldr	r3, [pc, #604]	@ (8002f8c <HAL_ADC_ConfigChannel+0x468>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	0691      	lsls	r1, r2, #26
 8002d38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002d46:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d48:	e07b      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d50:	4b8e      	ldr	r3, [pc, #568]	@ (8002f8c <HAL_ADC_ConfigChannel+0x468>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	0691      	lsls	r1, r2, #26
 8002d5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002d68:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d6a:	e06a      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002d72:	4b86      	ldr	r3, [pc, #536]	@ (8002f8c <HAL_ADC_ConfigChannel+0x468>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	0691      	lsls	r1, r2, #26
 8002d7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002d8a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d8c:	e059      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d94:	4b7d      	ldr	r3, [pc, #500]	@ (8002f8c <HAL_ADC_ConfigChannel+0x468>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	0691      	lsls	r1, r2, #26
 8002d9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002da0:	430a      	orrs	r2, r1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002dac:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002dae:	e048      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	069b      	lsls	r3, r3, #26
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d107      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002dd2:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	069b      	lsls	r3, r3, #26
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d107      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002df6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	069b      	lsls	r3, r3, #26
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e1a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	069b      	lsls	r3, r3, #26
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d107      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e3e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002e40:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d108      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x33e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x33e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x340>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 80fe 	bne.w	8003066 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d00f      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43da      	mvns	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002e90:	e049      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b09      	cmp	r3, #9
 8002eb2:	d91c      	bls.n	8002eee <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6999      	ldr	r1, [r3, #24]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3b1b      	subs	r3, #27
 8002ec6:	2207      	movs	r2, #7
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	4019      	ands	r1, r3
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6898      	ldr	r0, [r3, #8]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	3b1b      	subs	r3, #27
 8002ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	619a      	str	r2, [r3, #24]
 8002eec:	e01b      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6959      	ldr	r1, [r3, #20]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	2207      	movs	r2, #7
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	4019      	ands	r1, r3
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6898      	ldr	r0, [r3, #8]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f26:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <HAL_ADC_ConfigChannel+0x46c>)
 8002f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d105      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d014      	beq.n	8002f68 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f42:	2b11      	cmp	r3, #17
 8002f44:	d105      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f56:	2b12      	cmp	r3, #18
 8002f58:	f040 8085 	bne.w	8003066 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002f5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d17e      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10c      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x470>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x470>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e004      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x472>
 8002f8c:	83fff000 	.word	0x83fff000
 8002f90:	50000300 	.word	0x50000300
 8002f94:	2300      	movs	r3, #0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d150      	bne.n	800303c <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f9a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d010      	beq.n	8002fc2 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x498>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x498>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x49a>
 8002fbc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d13c      	bne.n	800303c <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d11d      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x4e2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fd2:	d118      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fde:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fe0:	4b27      	ldr	r3, [pc, #156]	@ (8003080 <HAL_ADC_ConfigChannel+0x55c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a27      	ldr	r2, [pc, #156]	@ (8003084 <HAL_ADC_ConfigChannel+0x560>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	0c9a      	lsrs	r2, r3, #18
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ff6:	e002      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f9      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003004:	e02e      	b.n	8003064 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b11      	cmp	r3, #17
 800300c:	d10b      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x502>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003016:	d106      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003020:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003022:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003024:	e01e      	b.n	8003064 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b12      	cmp	r3, #18
 800302c:	d11a      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800302e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003038:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800303a:	e013      	b.n	8003064 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	f043 0220 	orr.w	r2, r3, #32
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800304e:	e00a      	b.n	8003066 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003062:	e000      	b.n	8003066 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003064:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800306e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003072:	4618      	mov	r0, r3
 8003074:	376c      	adds	r7, #108	@ 0x6c
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	2000000c 	.word	0x2000000c
 8003084:	431bde83 	.word	0x431bde83

08003088 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d126      	bne.n	80030f0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d115      	bne.n	80030e8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d111      	bne.n	80030e8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f7ff fadb 	bl	80026a4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80030ee:	e004      	b.n	80030fa <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4798      	blx	r3
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff fad1 	bl	80026b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313c:	f043 0204 	orr.w	r2, r3, #4
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f7ff fac1 	bl	80026cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d108      	bne.n	8003180 <ADC_Enable+0x2c>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <ADC_Enable+0x2c>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <ADC_Enable+0x2e>
 8003180:	2300      	movs	r3, #0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d143      	bne.n	800320e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	4b22      	ldr	r3, [pc, #136]	@ (8003218 <ADC_Enable+0xc4>)
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	f043 0210 	orr.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a4:	f043 0201 	orr.w	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e02f      	b.n	8003210 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80031c0:	f7ff fa40 	bl	8002644 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031c6:	e01b      	b.n	8003200 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031c8:	f7ff fa3c 	bl	8002644 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d914      	bls.n	8003200 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d00d      	beq.n	8003200 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f043 0210 	orr.w	r2, r3, #16
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e007      	b.n	8003210 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d1dc      	bne.n	80031c8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	8000003f 	.word	0x8000003f

0800321c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d108      	bne.n	8003248 <ADC_Disable+0x2c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <ADC_Disable+0x2c>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <ADC_Disable+0x2e>
 8003248:	2300      	movs	r3, #0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d047      	beq.n	80032de <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030d 	and.w	r3, r3, #13
 8003258:	2b01      	cmp	r3, #1
 800325a:	d10f      	bne.n	800327c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0202 	orr.w	r2, r2, #2
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2203      	movs	r2, #3
 8003272:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003274:	f7ff f9e6 	bl	8002644 <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800327a:	e029      	b.n	80032d0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	f043 0210 	orr.w	r2, r3, #16
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	f043 0201 	orr.w	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e023      	b.n	80032e0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003298:	f7ff f9d4 	bl	8002644 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d914      	bls.n	80032d0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10d      	bne.n	80032d0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	f043 0210 	orr.w	r2, r3, #16
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e007      	b.n	80032e0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d0dc      	beq.n	8003298 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <__NVIC_SetPriorityGrouping+0x44>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003304:	4013      	ands	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	@ (800332c <__NVIC_SetPriorityGrouping+0x44>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003334:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <__NVIC_GetPriorityGrouping+0x18>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f003 0307 	and.w	r3, r3, #7
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db0b      	blt.n	8003376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	4907      	ldr	r1, [pc, #28]	@ (8003384 <__NVIC_EnableIRQ+0x38>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2001      	movs	r0, #1
 800336e:	fa00 f202 	lsl.w	r2, r0, r2
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000e100 	.word	0xe000e100

08003388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	6039      	str	r1, [r7, #0]
 8003392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	2b00      	cmp	r3, #0
 800339a:	db0a      	blt.n	80033b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	490c      	ldr	r1, [pc, #48]	@ (80033d4 <__NVIC_SetPriority+0x4c>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	440b      	add	r3, r1
 80033ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b0:	e00a      	b.n	80033c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4908      	ldr	r1, [pc, #32]	@ (80033d8 <__NVIC_SetPriority+0x50>)
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	3b04      	subs	r3, #4
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	440b      	add	r3, r1
 80033c6:	761a      	strb	r2, [r3, #24]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000e100 	.word	0xe000e100
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	@ 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f1c3 0307 	rsb	r3, r3, #7
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	bf28      	it	cs
 80033fa:	2304      	movcs	r3, #4
 80033fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3304      	adds	r3, #4
 8003402:	2b06      	cmp	r3, #6
 8003404:	d902      	bls.n	800340c <NVIC_EncodePriority+0x30>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3b03      	subs	r3, #3
 800340a:	e000      	b.n	800340e <NVIC_EncodePriority+0x32>
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	f04f 32ff 	mov.w	r2, #4294967295
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	401a      	ands	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	43d9      	mvns	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	4313      	orrs	r3, r2
         );
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	@ 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003454:	d301      	bcc.n	800345a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003456:	2301      	movs	r3, #1
 8003458:	e00f      	b.n	800347a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345a:	4a0a      	ldr	r2, [pc, #40]	@ (8003484 <SysTick_Config+0x40>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003462:	210f      	movs	r1, #15
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	f7ff ff8e 	bl	8003388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <SysTick_Config+0x40>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003472:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <SysTick_Config+0x40>)
 8003474:	2207      	movs	r2, #7
 8003476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	e000e010 	.word	0xe000e010

08003488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff29 	bl	80032e8 <__NVIC_SetPriorityGrouping>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b0:	f7ff ff3e 	bl	8003330 <__NVIC_GetPriorityGrouping>
 80034b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	6978      	ldr	r0, [r7, #20]
 80034bc:	f7ff ff8e 	bl	80033dc <NVIC_EncodePriority>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff5d 	bl	8003388 <__NVIC_SetPriority>
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ff31 	bl	800334c <__NVIC_EnableIRQ>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ffa2 	bl	8003444 <SysTick_Config>
 8003500:	4603      	mov	r3, r0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e037      	b.n	8003590 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003536:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800353a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003544:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003550:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f940 	bl	80037f8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_DMA_Start_IT+0x20>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e04a      	b.n	800364e <HAL_DMA_Start_IT+0xb6>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d13a      	bne.n	8003640 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f8d4 	bl	800379c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 020e 	orr.w	r2, r2, #14
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e00f      	b.n	800362e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 020a 	orr.w	r2, r2, #10
 800361c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0204 	bic.w	r2, r2, #4
 800362c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e005      	b.n	800364c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003648:	2302      	movs	r3, #2
 800364a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800364c:	7dfb      	ldrb	r3, [r7, #23]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	2204      	movs	r2, #4
 8003674:	409a      	lsls	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4013      	ands	r3, r2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d024      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x72>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01f      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d107      	bne.n	80036a6 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0204 	bic.w	r2, r2, #4
 80036a4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ae:	2104      	movs	r1, #4
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d06a      	beq.n	8003794 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036c6:	e065      	b.n	8003794 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	2202      	movs	r2, #2
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d02c      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdc>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d027      	beq.n	8003732 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 020a 	bic.w	r2, r2, #10
 80036fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003710:	2102      	movs	r1, #2
 8003712:	fa01 f202 	lsl.w	r2, r1, r2
 8003716:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	d035      	beq.n	8003794 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003730:	e030      	b.n	8003794 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	2208      	movs	r2, #8
 8003738:	409a      	lsls	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d028      	beq.n	8003794 <HAL_DMA_IRQHandler+0x13e>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d023      	beq.n	8003794 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 020e 	bic.w	r2, r2, #14
 800375a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003764:	2101      	movs	r1, #1
 8003766:	fa01 f202 	lsl.w	r2, r1, r2
 800376a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
    }
  }
}
 8003792:	e7ff      	b.n	8003794 <HAL_DMA_IRQHandler+0x13e>
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	2101      	movs	r1, #1
 80037b4:	fa01 f202 	lsl.w	r2, r1, r2
 80037b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d108      	bne.n	80037dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037da:	e007      	b.n	80037ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	4b09      	ldr	r3, [pc, #36]	@ (800382c <DMA_CalcBaseAndBitshift+0x34>)
 8003808:	4413      	add	r3, r2
 800380a:	4a09      	ldr	r2, [pc, #36]	@ (8003830 <DMA_CalcBaseAndBitshift+0x38>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	009a      	lsls	r2, r3, #2
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a06      	ldr	r2, [pc, #24]	@ (8003834 <DMA_CalcBaseAndBitshift+0x3c>)
 800381c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	bffdfff8 	.word	0xbffdfff8
 8003830:	cccccccd 	.word	0xcccccccd
 8003834:	40020000 	.word	0x40020000

08003838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003846:	e14e      	b.n	8003ae6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	2101      	movs	r1, #1
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	fa01 f303 	lsl.w	r3, r1, r3
 8003854:	4013      	ands	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8140 	beq.w	8003ae0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d005      	beq.n	8003878 <HAL_GPIO_Init+0x40>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d130      	bne.n	80038da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038ae:	2201      	movs	r2, #1
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	f003 0201 	and.w	r2, r3, #1
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d017      	beq.n	8003916 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	2203      	movs	r2, #3
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d123      	bne.n	800396a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	08da      	lsrs	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3208      	adds	r2, #8
 800392a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	220f      	movs	r2, #15
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	08da      	lsrs	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3208      	adds	r2, #8
 8003964:	6939      	ldr	r1, [r7, #16]
 8003966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0203 	and.w	r2, r3, #3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 809a 	beq.w	8003ae0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ac:	4b55      	ldr	r3, [pc, #340]	@ (8003b04 <HAL_GPIO_Init+0x2cc>)
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	4a54      	ldr	r2, [pc, #336]	@ (8003b04 <HAL_GPIO_Init+0x2cc>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6193      	str	r3, [r2, #24]
 80039b8:	4b52      	ldr	r3, [pc, #328]	@ (8003b04 <HAL_GPIO_Init+0x2cc>)
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039c4:	4a50      	ldr	r2, [pc, #320]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	089b      	lsrs	r3, r3, #2
 80039ca:	3302      	adds	r3, #2
 80039cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	220f      	movs	r2, #15
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039ee:	d013      	beq.n	8003a18 <HAL_GPIO_Init+0x1e0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a46      	ldr	r2, [pc, #280]	@ (8003b0c <HAL_GPIO_Init+0x2d4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00d      	beq.n	8003a14 <HAL_GPIO_Init+0x1dc>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a45      	ldr	r2, [pc, #276]	@ (8003b10 <HAL_GPIO_Init+0x2d8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <HAL_GPIO_Init+0x1d8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a44      	ldr	r2, [pc, #272]	@ (8003b14 <HAL_GPIO_Init+0x2dc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d101      	bne.n	8003a0c <HAL_GPIO_Init+0x1d4>
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e006      	b.n	8003a1a <HAL_GPIO_Init+0x1e2>
 8003a0c:	2305      	movs	r3, #5
 8003a0e:	e004      	b.n	8003a1a <HAL_GPIO_Init+0x1e2>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e002      	b.n	8003a1a <HAL_GPIO_Init+0x1e2>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <HAL_GPIO_Init+0x1e2>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	f002 0203 	and.w	r2, r2, #3
 8003a20:	0092      	lsls	r2, r2, #2
 8003a22:	4093      	lsls	r3, r2
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a2a:	4937      	ldr	r1, [pc, #220]	@ (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	089b      	lsrs	r3, r3, #2
 8003a30:	3302      	adds	r3, #2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a38:	4b37      	ldr	r3, [pc, #220]	@ (8003b18 <HAL_GPIO_Init+0x2e0>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4013      	ands	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b18 <HAL_GPIO_Init+0x2e0>)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a62:	4b2d      	ldr	r3, [pc, #180]	@ (8003b18 <HAL_GPIO_Init+0x2e0>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a86:	4a24      	ldr	r2, [pc, #144]	@ (8003b18 <HAL_GPIO_Init+0x2e0>)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a8c:	4b22      	ldr	r3, [pc, #136]	@ (8003b18 <HAL_GPIO_Init+0x2e0>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ab0:	4a19      	ldr	r2, [pc, #100]	@ (8003b18 <HAL_GPIO_Init+0x2e0>)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ab6:	4b18      	ldr	r3, [pc, #96]	@ (8003b18 <HAL_GPIO_Init+0x2e0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ada:	4a0f      	ldr	r2, [pc, #60]	@ (8003b18 <HAL_GPIO_Init+0x2e0>)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f aea9 	bne.w	8003848 <HAL_GPIO_Init+0x10>
  }
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	48000400 	.word	0x48000400
 8003b10:	48000800 	.word	0x48000800
 8003b14:	48000c00 	.word	0x48000c00
 8003b18:	40010400 	.word	0x40010400

08003b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b2c:	787b      	ldrb	r3, [r7, #1]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b38:	e002      	b.n	8003b40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b56:	4b08      	ldr	r3, [pc, #32]	@ (8003b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d006      	beq.n	8003b70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b62:	4a05      	ldr	r2, [pc, #20]	@ (8003b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd fdd6 	bl	800171c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40010400 	.word	0x40010400

08003b7c <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8003b80:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a04      	ldr	r2, [pc, #16]	@ (8003b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40007000 	.word	0x40007000

08003b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f000 bff4 	b.w	8004baa <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 816d 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bd8:	4bb4      	ldr	r3, [pc, #720]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d00c      	beq.n	8003bfe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003be4:	4bb1      	ldr	r3, [pc, #708]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d157      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x104>
 8003bf0:	4bae      	ldr	r3, [pc, #696]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bfc:	d150      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x104>
 8003bfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c02:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
  return result;
 8003c12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c1e:	d802      	bhi.n	8003c26 <HAL_RCC_OscConfig+0x8a>
 8003c20:	4ba2      	ldr	r3, [pc, #648]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	e015      	b.n	8003c52 <HAL_RCC_OscConfig+0xb6>
 8003c26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c2a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003c3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c3e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003c42:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003c46:	fa93 f3a3 	rbit	r3, r3
 8003c4a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003c4e:	4b97      	ldr	r3, [pc, #604]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c56:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003c5a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003c5e:	fa92 f2a2 	rbit	r2, r2
 8003c62:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003c66:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003c6a:	fab2 f282 	clz	r2, r2
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	f042 0220 	orr.w	r2, r2, #32
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	f002 021f 	and.w	r2, r2, #31
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8114 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x314>
 8003c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f040 810b 	bne.w	8003eb0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f000 bf85 	b.w	8004baa <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb0:	d106      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x124>
 8003cb2:	4b7e      	ldr	r3, [pc, #504]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a7d      	ldr	r2, [pc, #500]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e036      	b.n	8003d2e <HAL_RCC_OscConfig+0x192>
 8003cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10c      	bne.n	8003cea <HAL_RCC_OscConfig+0x14e>
 8003cd0:	4b76      	ldr	r3, [pc, #472]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a75      	ldr	r2, [pc, #468]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b73      	ldr	r3, [pc, #460]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a72      	ldr	r2, [pc, #456]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	e021      	b.n	8003d2e <HAL_RCC_OscConfig+0x192>
 8003cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cfa:	d10c      	bne.n	8003d16 <HAL_RCC_OscConfig+0x17a>
 8003cfc:	4b6b      	ldr	r3, [pc, #428]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6a      	ldr	r2, [pc, #424]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003d02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b68      	ldr	r3, [pc, #416]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a67      	ldr	r2, [pc, #412]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	e00b      	b.n	8003d2e <HAL_RCC_OscConfig+0x192>
 8003d16:	4b65      	ldr	r3, [pc, #404]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a64      	ldr	r2, [pc, #400]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b62      	ldr	r3, [pc, #392]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a61      	ldr	r2, [pc, #388]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003d28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d32:	f023 020f 	bic.w	r2, r3, #15
 8003d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	495a      	ldr	r1, [pc, #360]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d054      	beq.n	8003e02 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fe fc74 	bl	8002644 <HAL_GetTick>
 8003d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d60:	e00a      	b.n	8003d78 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d62:	f7fe fc6f 	bl	8002644 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	@ 0x64
 8003d70:	d902      	bls.n	8003d78 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	f000 bf19 	b.w	8004baa <HAL_RCC_OscConfig+0x100e>
 8003d78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d7c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003d8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d90:	fab3 f383 	clz	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d98:	d802      	bhi.n	8003da0 <HAL_RCC_OscConfig+0x204>
 8003d9a:	4b44      	ldr	r3, [pc, #272]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	e015      	b.n	8003dcc <HAL_RCC_OscConfig+0x230>
 8003da0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003da4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003dac:	fa93 f3a3 	rbit	r3, r3
 8003db0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003db4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003db8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003dbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003dc8:	4b38      	ldr	r3, [pc, #224]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dcc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003dd0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003dd4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003dd8:	fa92 f2a2 	rbit	r2, r2
 8003ddc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003de0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003de4:	fab2 f282 	clz	r2, r2
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	f042 0220 	orr.w	r2, r2, #32
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	f002 021f 	and.w	r2, r2, #31
 8003df4:	2101      	movs	r1, #1
 8003df6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0b0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1c6>
 8003e00:	e057      	b.n	8003eb2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e02:	f7fe fc1f 	bl	8002644 <HAL_GetTick>
 8003e06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fe fc1a 	bl	8002644 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b64      	cmp	r3, #100	@ 0x64
 8003e1a:	d902      	bls.n	8003e22 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	f000 bec4 	b.w	8004baa <HAL_RCC_OscConfig+0x100e>
 8003e22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e26:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003e36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e42:	d802      	bhi.n	8003e4a <HAL_RCC_OscConfig+0x2ae>
 8003e44:	4b19      	ldr	r3, [pc, #100]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	e015      	b.n	8003e76 <HAL_RCC_OscConfig+0x2da>
 8003e4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e4e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003e5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e62:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003e66:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003e72:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <HAL_RCC_OscConfig+0x310>)
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e7a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003e7e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003e82:	fa92 f2a2 	rbit	r2, r2
 8003e86:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003e8a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003e8e:	fab2 f282 	clz	r2, r2
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	f042 0220 	orr.w	r2, r2, #32
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	f002 021f 	and.w	r2, r2, #31
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1b0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x270>
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCC_OscConfig+0x316>
 8003eac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 816c 	beq.w	80041a0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ec8:	4bcc      	ldr	r3, [pc, #816]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ed4:	4bc9      	ldr	r3, [pc, #804]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d16d      	bne.n	8003fbc <HAL_RCC_OscConfig+0x420>
 8003ee0:	4bc6      	ldr	r3, [pc, #792]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d167      	bne.n	8003fbc <HAL_RCC_OscConfig+0x420>
 8003eec:	2302      	movs	r3, #2
 8003eee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003efe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f0a:	d802      	bhi.n	8003f12 <HAL_RCC_OscConfig+0x376>
 8003f0c:	4bbb      	ldr	r3, [pc, #748]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	e013      	b.n	8003f3a <HAL_RCC_OscConfig+0x39e>
 8003f12:	2302      	movs	r3, #2
 8003f14:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003f24:	2302      	movs	r3, #2
 8003f26:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003f2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003f36:	4bb1      	ldr	r3, [pc, #708]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003f40:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003f44:	fa92 f2a2 	rbit	r2, r2
 8003f48:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003f4c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003f50:	fab2 f282 	clz	r2, r2
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	f042 0220 	orr.w	r2, r2, #32
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	f002 021f 	and.w	r2, r2, #31
 8003f60:	2101      	movs	r1, #1
 8003f62:	fa01 f202 	lsl.w	r2, r1, r2
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCC_OscConfig+0x3e6>
 8003f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d002      	beq.n	8003f82 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f000 be14 	b.w	8004baa <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f82:	4b9e      	ldr	r3, [pc, #632]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	21f8      	movs	r1, #248	@ 0xf8
 8003f98:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003fa0:	fa91 f1a1 	rbit	r1, r1
 8003fa4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003fa8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003fac:	fab1 f181 	clz	r1, r1
 8003fb0:	b2c9      	uxtb	r1, r1
 8003fb2:	408b      	lsls	r3, r1
 8003fb4:	4991      	ldr	r1, [pc, #580]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fba:	e0f1      	b.n	80041a0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8083 	beq.w	80040d4 <HAL_RCC_OscConfig+0x538>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003fd8:	fa93 f3a3 	rbit	r3, r3
 8003fdc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003fe0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe4:	fab3 f383 	clz	r3, r3
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fe fb23 	bl	8002644 <HAL_GetTick>
 8003ffe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004004:	f7fe fb1e 	bl	8002644 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d902      	bls.n	800401a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	f000 bdc8 	b.w	8004baa <HAL_RCC_OscConfig+0x100e>
 800401a:	2302      	movs	r3, #2
 800401c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004024:	fa93 f3a3 	rbit	r3, r3
 8004028:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800402c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b3f      	cmp	r3, #63	@ 0x3f
 8004038:	d802      	bhi.n	8004040 <HAL_RCC_OscConfig+0x4a4>
 800403a:	4b70      	ldr	r3, [pc, #448]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	e013      	b.n	8004068 <HAL_RCC_OscConfig+0x4cc>
 8004040:	2302      	movs	r3, #2
 8004042:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004052:	2302      	movs	r3, #2
 8004054:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004058:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800405c:	fa93 f3a3 	rbit	r3, r3
 8004060:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004064:	4b65      	ldr	r3, [pc, #404]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	2202      	movs	r2, #2
 800406a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800406e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004072:	fa92 f2a2 	rbit	r2, r2
 8004076:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800407a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800407e:	fab2 f282 	clz	r2, r2
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	f042 0220 	orr.w	r2, r2, #32
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	f002 021f 	and.w	r2, r2, #31
 800408e:	2101      	movs	r1, #1
 8004090:	fa01 f202 	lsl.w	r2, r1, r2
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0b4      	beq.n	8004004 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409a:	4b58      	ldr	r3, [pc, #352]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	21f8      	movs	r1, #248	@ 0xf8
 80040b0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80040b8:	fa91 f1a1 	rbit	r1, r1
 80040bc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80040c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80040c4:	fab1 f181 	clz	r1, r1
 80040c8:	b2c9      	uxtb	r1, r1
 80040ca:	408b      	lsls	r3, r1
 80040cc:	494b      	ldr	r1, [pc, #300]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
 80040d2:	e065      	b.n	80041a0 <HAL_RCC_OscConfig+0x604>
 80040d4:	2301      	movs	r3, #1
 80040d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80040de:	fa93 f3a3 	rbit	r3, r3
 80040e2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80040e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	461a      	mov	r2, r3
 80040fc:	2300      	movs	r3, #0
 80040fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fe faa0 	bl	8002644 <HAL_GetTick>
 8004104:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800410a:	f7fe fa9b 	bl	8002644 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d902      	bls.n	8004120 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	f000 bd45 	b.w	8004baa <HAL_RCC_OscConfig+0x100e>
 8004120:	2302      	movs	r3, #2
 8004122:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004132:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b3f      	cmp	r3, #63	@ 0x3f
 800413e:	d802      	bhi.n	8004146 <HAL_RCC_OscConfig+0x5aa>
 8004140:	4b2e      	ldr	r3, [pc, #184]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	e013      	b.n	800416e <HAL_RCC_OscConfig+0x5d2>
 8004146:	2302      	movs	r3, #2
 8004148:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004158:	2302      	movs	r3, #2
 800415a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800415e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800416a:	4b24      	ldr	r3, [pc, #144]	@ (80041fc <HAL_RCC_OscConfig+0x660>)
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	2202      	movs	r2, #2
 8004170:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004174:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004178:	fa92 f2a2 	rbit	r2, r2
 800417c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004180:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004184:	fab2 f282 	clz	r2, r2
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	f042 0220 	orr.w	r2, r2, #32
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	f002 021f 	and.w	r2, r2, #31
 8004194:	2101      	movs	r1, #1
 8004196:	fa01 f202 	lsl.w	r2, r1, r2
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1b4      	bne.n	800410a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8115 	beq.w	80043e0 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d07e      	beq.n	80042c4 <HAL_RCC_OscConfig+0x728>
 80041c6:	2301      	movs	r3, #1
 80041c8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80041d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041dc:	fab3 f383 	clz	r3, r3
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <HAL_RCC_OscConfig+0x664>)
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	461a      	mov	r2, r3
 80041ec:	2301      	movs	r3, #1
 80041ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f0:	f7fe fa28 	bl	8002644 <HAL_GetTick>
 80041f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f8:	e00f      	b.n	800421a <HAL_RCC_OscConfig+0x67e>
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004204:	f7fe fa1e 	bl	8002644 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d902      	bls.n	800421a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	f000 bcc8 	b.w	8004baa <HAL_RCC_OscConfig+0x100e>
 800421a:	2302      	movs	r3, #2
 800421c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800422c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004230:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004234:	2202      	movs	r2, #2
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	fa93 f2a3 	rbit	r2, r3
 8004246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800424a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004258:	2202      	movs	r2, #2
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	fa93 f2a3 	rbit	r2, r3
 800426a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004272:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004274:	4bb0      	ldr	r3, [pc, #704]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 8004276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004280:	2102      	movs	r1, #2
 8004282:	6019      	str	r1, [r3, #0]
 8004284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004288:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	fa93 f1a3 	rbit	r1, r3
 8004292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004296:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800429a:	6019      	str	r1, [r3, #0]
  return result;
 800429c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2101      	movs	r1, #1
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0a0      	beq.n	8004204 <HAL_RCC_OscConfig+0x668>
 80042c2:	e08d      	b.n	80043e0 <HAL_RCC_OscConfig+0x844>
 80042c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	fa93 f2a3 	rbit	r2, r3
 80042de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042e6:	601a      	str	r2, [r3, #0]
  return result;
 80042e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b90      	ldr	r3, [pc, #576]	@ (800453c <HAL_RCC_OscConfig+0x9a0>)
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	461a      	mov	r2, r3
 8004302:	2300      	movs	r3, #0
 8004304:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004306:	f7fe f99d 	bl	8002644 <HAL_GetTick>
 800430a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430e:	e00a      	b.n	8004326 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004310:	f7fe f998 	bl	8002644 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d902      	bls.n	8004326 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	f000 bc42 	b.w	8004baa <HAL_RCC_OscConfig+0x100e>
 8004326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800432e:	2202      	movs	r2, #2
 8004330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004336:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	fa93 f2a3 	rbit	r2, r3
 8004340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004344:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004352:	2202      	movs	r2, #2
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	fa93 f2a3 	rbit	r2, r3
 8004364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004368:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004372:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004376:	2202      	movs	r2, #2
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	fa93 f2a3 	rbit	r2, r3
 8004388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800438c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004390:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004392:	4b69      	ldr	r3, [pc, #420]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 8004394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800439a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800439e:	2102      	movs	r1, #2
 80043a0:	6019      	str	r1, [r3, #0]
 80043a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	fa93 f1a3 	rbit	r1, r3
 80043b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80043b8:	6019      	str	r1, [r3, #0]
  return result;
 80043ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	fab3 f383 	clz	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	2101      	movs	r1, #1
 80043d6:	fa01 f303 	lsl.w	r3, r1, r3
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d197      	bne.n	8004310 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 819e 	beq.w	8004732 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d116      	bne.n	8004436 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004408:	4b4b      	ldr	r3, [pc, #300]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4a4a      	ldr	r2, [pc, #296]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 800440e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004412:	61d3      	str	r3, [r2, #28]
 8004414:	4b48      	ldr	r3, [pc, #288]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800441c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004420:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800442e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b42      	ldr	r3, [pc, #264]	@ (8004540 <HAL_RCC_OscConfig+0x9a4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11a      	bne.n	8004478 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b3f      	ldr	r3, [pc, #252]	@ (8004540 <HAL_RCC_OscConfig+0x9a4>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a3e      	ldr	r2, [pc, #248]	@ (8004540 <HAL_RCC_OscConfig+0x9a4>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444e:	f7fe f8f9 	bl	8002644 <HAL_GetTick>
 8004452:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	e009      	b.n	800446c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004458:	f7fe f8f4 	bl	8002644 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b64      	cmp	r3, #100	@ 0x64
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e39e      	b.n	8004baa <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	4b34      	ldr	r3, [pc, #208]	@ (8004540 <HAL_RCC_OscConfig+0x9a4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0ef      	beq.n	8004458 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x8fa>
 8004488:	4b2b      	ldr	r3, [pc, #172]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4a2a      	ldr	r2, [pc, #168]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6213      	str	r3, [r2, #32]
 8004494:	e035      	b.n	8004502 <HAL_RCC_OscConfig+0x966>
 8004496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800449a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x924>
 80044a6:	4b24      	ldr	r3, [pc, #144]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	4a23      	ldr	r2, [pc, #140]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	6213      	str	r3, [r2, #32]
 80044b2:	4b21      	ldr	r3, [pc, #132]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	4a20      	ldr	r2, [pc, #128]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	6213      	str	r3, [r2, #32]
 80044be:	e020      	b.n	8004502 <HAL_RCC_OscConfig+0x966>
 80044c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x94e>
 80044d0:	4b19      	ldr	r3, [pc, #100]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	4a18      	ldr	r2, [pc, #96]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6213      	str	r3, [r2, #32]
 80044dc:	4b16      	ldr	r3, [pc, #88]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4a15      	ldr	r2, [pc, #84]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6213      	str	r3, [r2, #32]
 80044e8:	e00b      	b.n	8004502 <HAL_RCC_OscConfig+0x966>
 80044ea:	4b13      	ldr	r3, [pc, #76]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	4a12      	ldr	r2, [pc, #72]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	6213      	str	r3, [r2, #32]
 80044f6:	4b10      	ldr	r3, [pc, #64]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004538 <HAL_RCC_OscConfig+0x99c>)
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004506:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 8087 	beq.w	8004622 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004514:	f7fe f896 	bl	8002644 <HAL_GetTick>
 8004518:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	e012      	b.n	8004544 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fe f891 	bl	8002644 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d908      	bls.n	8004544 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e339      	b.n	8004baa <HAL_RCC_OscConfig+0x100e>
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000
 800453c:	10908120 	.word	0x10908120
 8004540:	40007000 	.word	0x40007000
 8004544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004548:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800454c:	2202      	movs	r2, #2
 800454e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004554:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	fa93 f2a3 	rbit	r2, r3
 800455e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004562:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004570:	2202      	movs	r2, #2
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004578:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	fa93 f2a3 	rbit	r2, r3
 8004582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004586:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800458a:	601a      	str	r2, [r3, #0]
  return result;
 800458c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004590:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004594:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <HAL_RCC_OscConfig+0xa10>
 80045a6:	4b98      	ldr	r3, [pc, #608]	@ (8004808 <HAL_RCC_OscConfig+0xc6c>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	e013      	b.n	80045d4 <HAL_RCC_OscConfig+0xa38>
 80045ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80045b4:	2202      	movs	r2, #2
 80045b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	fa93 f2a3 	rbit	r2, r3
 80045c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	4b8d      	ldr	r3, [pc, #564]	@ (8004808 <HAL_RCC_OscConfig+0xc6c>)
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045d8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80045dc:	2102      	movs	r1, #2
 80045de:	6011      	str	r1, [r2, #0]
 80045e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045e4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	fa92 f1a2 	rbit	r1, r2
 80045ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045f2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80045f6:	6011      	str	r1, [r2, #0]
  return result;
 80045f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045fc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	fab2 f282 	clz	r2, r2
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	f002 021f 	and.w	r2, r2, #31
 8004612:	2101      	movs	r1, #1
 8004614:	fa01 f202 	lsl.w	r2, r1, r2
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	f43f af7f 	beq.w	800451e <HAL_RCC_OscConfig+0x982>
 8004620:	e07d      	b.n	800471e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004622:	f7fe f80f 	bl	8002644 <HAL_GetTick>
 8004626:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462a:	e00b      	b.n	8004644 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462c:	f7fe f80a 	bl	8002644 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e2b2      	b.n	8004baa <HAL_RCC_OscConfig+0x100e>
 8004644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004648:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800464c:	2202      	movs	r2, #2
 800464e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004654:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	fa93 f2a3 	rbit	r2, r3
 800465e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004662:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004670:	2202      	movs	r2, #2
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004678:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	fa93 f2a3 	rbit	r2, r3
 8004682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004686:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800468a:	601a      	str	r2, [r3, #0]
  return result;
 800468c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004690:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004694:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d102      	bne.n	80046ac <HAL_RCC_OscConfig+0xb10>
 80046a6:	4b58      	ldr	r3, [pc, #352]	@ (8004808 <HAL_RCC_OscConfig+0xc6c>)
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	e013      	b.n	80046d4 <HAL_RCC_OscConfig+0xb38>
 80046ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80046b4:	2202      	movs	r2, #2
 80046b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046bc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	fa93 f2a3 	rbit	r2, r3
 80046c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ca:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004808 <HAL_RCC_OscConfig+0xc6c>)
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046d8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80046dc:	2102      	movs	r1, #2
 80046de:	6011      	str	r1, [r2, #0]
 80046e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046e4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	fa92 f1a2 	rbit	r1, r2
 80046ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046f2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80046f6:	6011      	str	r1, [r2, #0]
  return result;
 80046f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046fc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	fab2 f282 	clz	r2, r2
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	f002 021f 	and.w	r2, r2, #31
 8004712:	2101      	movs	r1, #1
 8004714:	fa01 f202 	lsl.w	r2, r1, r2
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d186      	bne.n	800462c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800471e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004722:	2b01      	cmp	r3, #1
 8004724:	d105      	bne.n	8004732 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004726:	4b38      	ldr	r3, [pc, #224]	@ (8004808 <HAL_RCC_OscConfig+0xc6c>)
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	4a37      	ldr	r2, [pc, #220]	@ (8004808 <HAL_RCC_OscConfig+0xc6c>)
 800472c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004730:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004736:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8232 	beq.w	8004ba8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004744:	4b30      	ldr	r3, [pc, #192]	@ (8004808 <HAL_RCC_OscConfig+0xc6c>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b08      	cmp	r3, #8
 800474e:	f000 8201 	beq.w	8004b54 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004756:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	2b02      	cmp	r3, #2
 8004760:	f040 8157 	bne.w	8004a12 <HAL_RCC_OscConfig+0xe76>
 8004764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004768:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800476c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004776:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	fa93 f2a3 	rbit	r2, r3
 8004780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004784:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004788:	601a      	str	r2, [r3, #0]
  return result;
 800478a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800478e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004792:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800479e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	461a      	mov	r2, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fd ff4b 	bl	8002644 <HAL_GetTick>
 80047ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b2:	e009      	b.n	80047c8 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fd ff46 	bl	8002644 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e1f0      	b.n	8004baa <HAL_RCC_OscConfig+0x100e>
 80047c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047cc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80047d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047da:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	fa93 f2a3 	rbit	r2, r3
 80047e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80047ec:	601a      	str	r2, [r3, #0]
  return result;
 80047ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80047f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8004800:	d804      	bhi.n	800480c <HAL_RCC_OscConfig+0xc70>
 8004802:	4b01      	ldr	r3, [pc, #4]	@ (8004808 <HAL_RCC_OscConfig+0xc6c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	e029      	b.n	800485c <HAL_RCC_OscConfig+0xcc0>
 8004808:	40021000 	.word	0x40021000
 800480c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004810:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004814:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800481e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	fa93 f2a3 	rbit	r2, r3
 8004828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800482c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004836:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800483a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004844:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	fa93 f2a3 	rbit	r2, r3
 800484e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004852:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	4bc3      	ldr	r3, [pc, #780]	@ (8004b68 <HAL_RCC_OscConfig+0xfcc>)
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004860:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004864:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004868:	6011      	str	r1, [r2, #0]
 800486a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800486e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	fa92 f1a2 	rbit	r1, r2
 8004878:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800487c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004880:	6011      	str	r1, [r2, #0]
  return result;
 8004882:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004886:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	fab2 f282 	clz	r2, r2
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	f042 0220 	orr.w	r2, r2, #32
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	f002 021f 	and.w	r2, r2, #31
 800489c:	2101      	movs	r1, #1
 800489e:	fa01 f202 	lsl.w	r2, r1, r2
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d185      	bne.n	80047b4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048a8:	4baf      	ldr	r3, [pc, #700]	@ (8004b68 <HAL_RCC_OscConfig+0xfcc>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80048bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	49a7      	ldr	r1, [pc, #668]	@ (8004b68 <HAL_RCC_OscConfig+0xfcc>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
 80048d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80048d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	fa93 f2a3 	rbit	r2, r3
 80048ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80048f4:	601a      	str	r2, [r3, #0]
  return result;
 80048f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80048fe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004900:	fab3 f383 	clz	r3, r3
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800490a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	461a      	mov	r2, r3
 8004912:	2301      	movs	r3, #1
 8004914:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004916:	f7fd fe95 	bl	8002644 <HAL_GetTick>
 800491a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800491e:	e009      	b.n	8004934 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fd fe90 	bl	8002644 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e13a      	b.n	8004baa <HAL_RCC_OscConfig+0x100e>
 8004934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004938:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800493c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004946:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	fa93 f2a3 	rbit	r2, r3
 8004950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004954:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004958:	601a      	str	r2, [r3, #0]
  return result;
 800495a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800495e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004962:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004964:	fab3 f383 	clz	r3, r3
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b3f      	cmp	r3, #63	@ 0x3f
 800496c:	d802      	bhi.n	8004974 <HAL_RCC_OscConfig+0xdd8>
 800496e:	4b7e      	ldr	r3, [pc, #504]	@ (8004b68 <HAL_RCC_OscConfig+0xfcc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	e027      	b.n	80049c4 <HAL_RCC_OscConfig+0xe28>
 8004974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004978:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800497c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004986:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	fa93 f2a3 	rbit	r2, r3
 8004990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004994:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800499e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80049a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ac:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	fa93 f2a3 	rbit	r2, r3
 80049b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ba:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	4b69      	ldr	r3, [pc, #420]	@ (8004b68 <HAL_RCC_OscConfig+0xfcc>)
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049c8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80049cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80049d0:	6011      	str	r1, [r2, #0]
 80049d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049d6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	fa92 f1a2 	rbit	r1, r2
 80049e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049e4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80049e8:	6011      	str	r1, [r2, #0]
  return result;
 80049ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049ee:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	fab2 f282 	clz	r2, r2
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	f042 0220 	orr.w	r2, r2, #32
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	f002 021f 	and.w	r2, r2, #31
 8004a04:	2101      	movs	r1, #1
 8004a06:	fa01 f202 	lsl.w	r2, r1, r2
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d087      	beq.n	8004920 <HAL_RCC_OscConfig+0xd84>
 8004a10:	e0ca      	b.n	8004ba8 <HAL_RCC_OscConfig+0x100c>
 8004a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a16:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004a1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a24:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	fa93 f2a3 	rbit	r2, r3
 8004a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a32:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004a36:	601a      	str	r2, [r3, #0]
  return result;
 8004a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a3c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004a40:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a4c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	461a      	mov	r2, r3
 8004a54:	2300      	movs	r3, #0
 8004a56:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fd fdf4 	bl	8002644 <HAL_GetTick>
 8004a5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a60:	e009      	b.n	8004a76 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a62:	f7fd fdef 	bl	8002644 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e099      	b.n	8004baa <HAL_RCC_OscConfig+0x100e>
 8004a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a7a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a88:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	fa93 f2a3 	rbit	r2, r3
 8004a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a96:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004a9a:	601a      	str	r2, [r3, #0]
  return result;
 8004a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004aa4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa6:	fab3 f383 	clz	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b3f      	cmp	r3, #63	@ 0x3f
 8004aae:	d802      	bhi.n	8004ab6 <HAL_RCC_OscConfig+0xf1a>
 8004ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b68 <HAL_RCC_OscConfig+0xfcc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	e027      	b.n	8004b06 <HAL_RCC_OscConfig+0xf6a>
 8004ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aba:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004abe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	fa93 f2a3 	rbit	r2, r3
 8004ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004ae4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aee:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	fa93 f2a3 	rbit	r2, r3
 8004af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004afc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <HAL_RCC_OscConfig+0xfcc>)
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b0a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004b0e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004b12:	6011      	str	r1, [r2, #0]
 8004b14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b18:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	fa92 f1a2 	rbit	r1, r2
 8004b22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b26:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004b2a:	6011      	str	r1, [r2, #0]
  return result;
 8004b2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b30:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	fab2 f282 	clz	r2, r2
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	f042 0220 	orr.w	r2, r2, #32
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	f002 021f 	and.w	r2, r2, #31
 8004b46:	2101      	movs	r1, #1
 8004b48:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d187      	bne.n	8004a62 <HAL_RCC_OscConfig+0xec6>
 8004b52:	e029      	b.n	8004ba8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d103      	bne.n	8004b6c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e020      	b.n	8004baa <HAL_RCC_OscConfig+0x100e>
 8004b68:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b6c:	4b11      	ldr	r3, [pc, #68]	@ (8004bb4 <HAL_RCC_OscConfig+0x1018>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b74:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004b78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004b8c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004b90:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40021000 	.word	0x40021000

08004bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b09e      	sub	sp, #120	@ 0x78
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e154      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b89      	ldr	r3, [pc, #548]	@ (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d910      	bls.n	8004c00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b86      	ldr	r3, [pc, #536]	@ (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 0207 	bic.w	r2, r3, #7
 8004be6:	4984      	ldr	r1, [pc, #528]	@ (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b82      	ldr	r3, [pc, #520]	@ (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e13c      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0c:	4b7b      	ldr	r3, [pc, #492]	@ (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4978      	ldr	r1, [pc, #480]	@ (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80cd 	beq.w	8004dc6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d137      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0xec>
 8004c34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c38:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c3c:	fa93 f3a3 	rbit	r3, r3
 8004c40:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004c42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c44:	fab3 f383 	clz	r3, r3
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004c4c:	d802      	bhi.n	8004c54 <HAL_RCC_ClockConfig+0x9c>
 8004c4e:	4b6b      	ldr	r3, [pc, #428]	@ (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	e00f      	b.n	8004c74 <HAL_RCC_ClockConfig+0xbc>
 8004c54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c5c:	fa93 f3a3 	rbit	r3, r3
 8004c60:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c66:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c6a:	fa93 f3a3 	rbit	r3, r3
 8004c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c70:	4b62      	ldr	r3, [pc, #392]	@ (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c78:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c7c:	fa92 f2a2 	rbit	r2, r2
 8004c80:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004c82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c84:	fab2 f282 	clz	r2, r2
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	f042 0220 	orr.w	r2, r2, #32
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	f002 021f 	and.w	r2, r2, #31
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f202 	lsl.w	r2, r1, r2
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d171      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0ea      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d137      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x164>
 8004cac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cb0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cb4:	fa93 f3a3 	rbit	r3, r3
 8004cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbc:	fab3 f383 	clz	r3, r3
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8004cc4:	d802      	bhi.n	8004ccc <HAL_RCC_ClockConfig+0x114>
 8004cc6:	4b4d      	ldr	r3, [pc, #308]	@ (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	e00f      	b.n	8004cec <HAL_RCC_ClockConfig+0x134>
 8004ccc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cd4:	fa93 f3a3 	rbit	r3, r3
 8004cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cde:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce2:	fa93 f3a3 	rbit	r3, r3
 8004ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ce8:	4b44      	ldr	r3, [pc, #272]	@ (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cf0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004cf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cf4:	fa92 f2a2 	rbit	r2, r2
 8004cf8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004cfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cfc:	fab2 f282 	clz	r2, r2
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	f042 0220 	orr.w	r2, r2, #32
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	f002 021f 	and.w	r2, r2, #31
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d135      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0ae      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2c2>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	fa93 f3a3 	rbit	r3, r3
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d32:	d802      	bhi.n	8004d3a <HAL_RCC_ClockConfig+0x182>
 8004d34:	4b31      	ldr	r3, [pc, #196]	@ (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	e00d      	b.n	8004d56 <HAL_RCC_ClockConfig+0x19e>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d40:	fa93 f3a3 	rbit	r3, r3
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d46:	2302      	movs	r3, #2
 8004d48:	623b      	str	r3, [r7, #32]
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	fa93 f3a3 	rbit	r3, r3
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	4b2a      	ldr	r3, [pc, #168]	@ (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	2202      	movs	r2, #2
 8004d58:	61ba      	str	r2, [r7, #24]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	fa92 f2a2 	rbit	r2, r2
 8004d60:	617a      	str	r2, [r7, #20]
  return result;
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	fab2 f282 	clz	r2, r2
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	f042 0220 	orr.w	r2, r2, #32
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	f002 021f 	and.w	r2, r2, #31
 8004d74:	2101      	movs	r1, #1
 8004d76:	fa01 f202 	lsl.w	r2, r1, r2
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e07a      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d84:	4b1d      	ldr	r3, [pc, #116]	@ (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f023 0203 	bic.w	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	491a      	ldr	r1, [pc, #104]	@ (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d96:	f7fd fc55 	bl	8002644 <HAL_GetTick>
 8004d9a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9c:	e00a      	b.n	8004db4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9e:	f7fd fc51 	bl	8002644 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e062      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db4:	4b11      	ldr	r3, [pc, #68]	@ (8004dfc <HAL_RCC_ClockConfig+0x244>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 020c 	and.w	r2, r3, #12
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d1eb      	bne.n	8004d9e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d215      	bcs.n	8004e00 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd4:	4b08      	ldr	r3, [pc, #32]	@ (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f023 0207 	bic.w	r2, r3, #7
 8004ddc:	4906      	ldr	r1, [pc, #24]	@ (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de4:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <HAL_RCC_ClockConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d006      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e041      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2c2>
 8004df6:	bf00      	nop
 8004df8:	40022000 	.word	0x40022000
 8004dfc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e84 <HAL_RCC_ClockConfig+0x2cc>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	491a      	ldr	r1, [pc, #104]	@ (8004e84 <HAL_RCC_ClockConfig+0x2cc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e2a:	4b16      	ldr	r3, [pc, #88]	@ (8004e84 <HAL_RCC_ClockConfig+0x2cc>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4912      	ldr	r1, [pc, #72]	@ (8004e84 <HAL_RCC_ClockConfig+0x2cc>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e3e:	f000 f829 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8004e42:	4601      	mov	r1, r0
 8004e44:	4b0f      	ldr	r3, [pc, #60]	@ (8004e84 <HAL_RCC_ClockConfig+0x2cc>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e4c:	22f0      	movs	r2, #240	@ 0xf0
 8004e4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	fa92 f2a2 	rbit	r2, r2
 8004e56:	60fa      	str	r2, [r7, #12]
  return result;
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	fab2 f282 	clz	r2, r2
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	40d3      	lsrs	r3, r2
 8004e62:	4a09      	ldr	r2, [pc, #36]	@ (8004e88 <HAL_RCC_ClockConfig+0x2d0>)
 8004e64:	5cd3      	ldrb	r3, [r2, r3]
 8004e66:	fa21 f303 	lsr.w	r3, r1, r3
 8004e6a:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <HAL_RCC_ClockConfig+0x2d4>)
 8004e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004e6e:	4b08      	ldr	r3, [pc, #32]	@ (8004e90 <HAL_RCC_ClockConfig+0x2d8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fd fba2 	bl	80025bc <HAL_InitTick>
  
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3778      	adds	r7, #120	@ 0x78
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	08009ee8 	.word	0x08009ee8
 8004e8c:	2000000c 	.word	0x2000000c
 8004e90:	20000010 	.word	0x20000010

08004e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004eae:	4b1e      	ldr	r3, [pc, #120]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d002      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x30>
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d003      	beq.n	8004eca <HAL_RCC_GetSysClockFreq+0x36>
 8004ec2:	e026      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ec4:	4b19      	ldr	r3, [pc, #100]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ec6:	613b      	str	r3, [r7, #16]
      break;
 8004ec8:	e026      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	0c9b      	lsrs	r3, r3, #18
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	4a17      	ldr	r2, [pc, #92]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ed4:	5cd3      	ldrb	r3, [r2, r3]
 8004ed6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004ed8:	4b13      	ldr	r3, [pc, #76]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	4a14      	ldr	r2, [pc, #80]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ee2:	5cd3      	ldrb	r3, [r2, r3]
 8004ee4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	e004      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a0c      	ldr	r2, [pc, #48]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	613b      	str	r3, [r7, #16]
      break;
 8004f10:	e002      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004f14:	613b      	str	r3, [r7, #16]
      break;
 8004f16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f18:	693b      	ldr	r3, [r7, #16]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	007a1200 	.word	0x007a1200
 8004f30:	08009f00 	.word	0x08009f00
 8004f34:	08009f10 	.word	0x08009f10
 8004f38:	003d0900 	.word	0x003d0900

08004f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f40:	4b03      	ldr	r3, [pc, #12]	@ (8004f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f42:	681b      	ldr	r3, [r3, #0]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	2000000c 	.word	0x2000000c

08004f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f5a:	f7ff ffef 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
 8004f5e:	4601      	mov	r1, r0
 8004f60:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f68:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004f6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	fa92 f2a2 	rbit	r2, r2
 8004f74:	603a      	str	r2, [r7, #0]
  return result;
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	fab2 f282 	clz	r2, r2
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	40d3      	lsrs	r3, r2
 8004f80:	4a04      	ldr	r2, [pc, #16]	@ (8004f94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f82:	5cd3      	ldrb	r3, [r2, r3]
 8004f84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40021000 	.word	0x40021000
 8004f94:	08009ef8 	.word	0x08009ef8

08004f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f9e:	f7ff ffcd 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004fac:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004fb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	fa92 f2a2 	rbit	r2, r2
 8004fb8:	603a      	str	r2, [r7, #0]
  return result;
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	fab2 f282 	clz	r2, r2
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	40d3      	lsrs	r3, r2
 8004fc4:	4a04      	ldr	r2, [pc, #16]	@ (8004fd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004fc6:	5cd3      	ldrb	r3, [r2, r3]
 8004fc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	08009ef8 	.word	0x08009ef8

08004fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b092      	sub	sp, #72	@ 0x48
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80d2 	beq.w	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005000:	4b4d      	ldr	r3, [pc, #308]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10e      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500c:	4b4a      	ldr	r3, [pc, #296]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	4a49      	ldr	r2, [pc, #292]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005016:	61d3      	str	r3, [r2, #28]
 8005018:	4b47      	ldr	r3, [pc, #284]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502a:	4b44      	ldr	r3, [pc, #272]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005032:	2b00      	cmp	r3, #0
 8005034:	d118      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005036:	4b41      	ldr	r3, [pc, #260]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a40      	ldr	r2, [pc, #256]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005040:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005042:	f7fd faff 	bl	8002644 <HAL_GetTick>
 8005046:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005048:	e008      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504a:	f7fd fafb 	bl	8002644 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b64      	cmp	r3, #100	@ 0x64
 8005056:	d901      	bls.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e149      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505c:	4b37      	ldr	r3, [pc, #220]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005068:	4b33      	ldr	r3, [pc, #204]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005070:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8082 	beq.w	800517e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005082:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005084:	429a      	cmp	r2, r3
 8005086:	d07a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005088:	4b2b      	ldr	r3, [pc, #172]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005092:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005096:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	fa93 f3a3 	rbit	r3, r3
 800509e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80050a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050a2:	fab3 f383 	clz	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	4b25      	ldr	r3, [pc, #148]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	461a      	mov	r2, r3
 80050b2:	2301      	movs	r3, #1
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80050ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050be:	fa93 f3a3 	rbit	r3, r3
 80050c2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80050c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050c6:	fab3 f383 	clz	r3, r3
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	461a      	mov	r2, r3
 80050d6:	2300      	movs	r3, #0
 80050d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050da:	4a17      	ldr	r2, [pc, #92]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d049      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ea:	f7fd faab 	bl	8002644 <HAL_GetTick>
 80050ee:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f0:	e00a      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f2:	f7fd faa7 	bl	8002644 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005100:	4293      	cmp	r3, r2
 8005102:	d901      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e0f3      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005108:	2302      	movs	r3, #2
 800510a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	fa93 f3a3 	rbit	r3, r3
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
 8005114:	2302      	movs	r3, #2
 8005116:	623b      	str	r3, [r7, #32]
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	fa93 f3a3 	rbit	r3, r3
 800511e:	61fb      	str	r3, [r7, #28]
  return result;
 8005120:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005122:	fab3 f383 	clz	r3, r3
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d108      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005132:	4b01      	ldr	r3, [pc, #4]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	e00d      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005138:	40021000 	.word	0x40021000
 800513c:	40007000 	.word	0x40007000
 8005140:	10908100 	.word	0x10908100
 8005144:	2302      	movs	r3, #2
 8005146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	fa93 f3a3 	rbit	r3, r3
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	4b69      	ldr	r3, [pc, #420]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	2202      	movs	r2, #2
 8005156:	613a      	str	r2, [r7, #16]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	fa92 f2a2 	rbit	r2, r2
 800515e:	60fa      	str	r2, [r7, #12]
  return result;
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	fab2 f282 	clz	r2, r2
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	f002 021f 	and.w	r2, r2, #31
 8005172:	2101      	movs	r1, #1
 8005174:	fa01 f202 	lsl.w	r2, r1, r2
 8005178:	4013      	ands	r3, r2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0b9      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800517e:	4b5e      	ldr	r3, [pc, #376]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	495b      	ldr	r1, [pc, #364]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800518c:	4313      	orrs	r3, r2
 800518e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005190:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005194:	2b01      	cmp	r3, #1
 8005196:	d105      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005198:	4b57      	ldr	r3, [pc, #348]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	4a56      	ldr	r2, [pc, #344]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800519e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051b0:	4b51      	ldr	r3, [pc, #324]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80051b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b4:	f023 0203 	bic.w	r2, r3, #3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	494e      	ldr	r1, [pc, #312]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d008      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ce:	4b4a      	ldr	r3, [pc, #296]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d2:	f023 0210 	bic.w	r2, r3, #16
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	4947      	ldr	r1, [pc, #284]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80051ec:	4b42      	ldr	r3, [pc, #264]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	493f      	ldr	r1, [pc, #252]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d008      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800520a:	4b3b      	ldr	r3, [pc, #236]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520e:	f023 0220 	bic.w	r2, r3, #32
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	4938      	ldr	r1, [pc, #224]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005218:	4313      	orrs	r3, r2
 800521a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005228:	4b33      	ldr	r3, [pc, #204]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800522a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	4930      	ldr	r1, [pc, #192]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005242:	2b00      	cmp	r3, #0
 8005244:	d008      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005246:	4b2c      	ldr	r3, [pc, #176]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	4929      	ldr	r1, [pc, #164]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005254:	4313      	orrs	r3, r2
 8005256:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005264:	4b24      	ldr	r3, [pc, #144]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005268:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	4921      	ldr	r1, [pc, #132]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005272:	4313      	orrs	r3, r2
 8005274:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d008      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005282:	4b1d      	ldr	r3, [pc, #116]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005286:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	491a      	ldr	r1, [pc, #104]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005290:	4313      	orrs	r3, r2
 8005292:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80052a0:	4b15      	ldr	r3, [pc, #84]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	4912      	ldr	r1, [pc, #72]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d008      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80052be:	4b0e      	ldr	r3, [pc, #56]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ca:	490b      	ldr	r1, [pc, #44]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d008      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80052dc:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e8:	4903      	ldr	r1, [pc, #12]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3748      	adds	r7, #72	@ 0x48
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000

080052fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e073      	b.n	80053fa <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	7f5b      	ldrb	r3, [r3, #29]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d105      	bne.n	8005328 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fc ff04 	bl	8002130 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b10      	cmp	r3, #16
 800533a:	d055      	beq.n	80053e8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	22ca      	movs	r2, #202	@ 0xca
 8005342:	625a      	str	r2, [r3, #36]	@ 0x24
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2253      	movs	r2, #83	@ 0x53
 800534a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f99d 	bl	800568c <RTC_EnterInitMode>
 8005352:	4603      	mov	r3, r0
 8005354:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d12c      	bne.n	80053b6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800536a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800536e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6899      	ldr	r1, [r3, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68d2      	ldr	r2, [r2, #12]
 8005396:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6919      	ldr	r1, [r3, #16]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	041a      	lsls	r2, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f9a4 	bl	80056fa <RTC_ExitInitMode>
 80053b2:	4603      	mov	r3, r0
 80053b4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d110      	bne.n	80053de <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053ca:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	22ff      	movs	r2, #255	@ 0xff
 80053e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80053e6:	e001      	b.n	80053ec <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d102      	bne.n	80053f8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005402:	b590      	push	{r4, r7, lr}
 8005404:	b087      	sub	sp, #28
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	7f1b      	ldrb	r3, [r3, #28]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_RTC_SetTime+0x1c>
 800541a:	2302      	movs	r3, #2
 800541c:	e087      	b.n	800552e <HAL_RTC_SetTime+0x12c>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2202      	movs	r2, #2
 8005428:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d126      	bne.n	800547e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2200      	movs	r2, #0
 8005442:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 f97b 	bl	8005744 <RTC_ByteToBcd2>
 800544e:	4603      	mov	r3, r0
 8005450:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f974 	bl	8005744 <RTC_ByteToBcd2>
 800545c:	4603      	mov	r3, r0
 800545e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005460:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	789b      	ldrb	r3, [r3, #2]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f96c 	bl	8005744 <RTC_ByteToBcd2>
 800546c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800546e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	78db      	ldrb	r3, [r3, #3]
 8005476:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e018      	b.n	80054b0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2200      	movs	r2, #0
 8005490:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800549e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80054a4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	78db      	ldrb	r3, [r3, #3]
 80054aa:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	22ca      	movs	r2, #202	@ 0xca
 80054b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2253      	movs	r2, #83	@ 0x53
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f8e3 	bl	800568c <RTC_EnterInitMode>
 80054c6:	4603      	mov	r3, r0
 80054c8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80054ca:	7cfb      	ldrb	r3, [r7, #19]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d120      	bne.n	8005512 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80054da:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80054de:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6899      	ldr	r1, [r3, #8]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	431a      	orrs	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f8f6 	bl	80056fa <RTC_ExitInitMode>
 800550e:	4603      	mov	r3, r0
 8005510:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005512:	7cfb      	ldrb	r3, [r7, #19]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	22ff      	movs	r2, #255	@ 0xff
 8005524:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]

  return status;
 800552c:	7cfb      	ldrb	r3, [r7, #19]
}
 800552e:	4618      	mov	r0, r3
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd90      	pop	{r4, r7, pc}

08005536 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005536:	b590      	push	{r4, r7, lr}
 8005538:	b087      	sub	sp, #28
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	7f1b      	ldrb	r3, [r3, #28]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_RTC_SetDate+0x1c>
 800554e:	2302      	movs	r3, #2
 8005550:	e071      	b.n	8005636 <HAL_RTC_SetDate+0x100>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2202      	movs	r2, #2
 800555c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10e      	bne.n	8005582 <HAL_RTC_SetDate+0x4c>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	f023 0310 	bic.w	r3, r3, #16
 8005578:	b2db      	uxtb	r3, r3
 800557a:	330a      	adds	r3, #10
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d11c      	bne.n	80055c2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	78db      	ldrb	r3, [r3, #3]
 800558c:	4618      	mov	r0, r3
 800558e:	f000 f8d9 	bl	8005744 <RTC_ByteToBcd2>
 8005592:	4603      	mov	r3, r0
 8005594:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f8d2 	bl	8005744 <RTC_ByteToBcd2>
 80055a0:	4603      	mov	r3, r0
 80055a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	789b      	ldrb	r3, [r3, #2]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f8ca 	bl	8005744 <RTC_ByteToBcd2>
 80055b0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80055b2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	e00e      	b.n	80055e0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	78db      	ldrb	r3, [r3, #3]
 80055c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80055ce:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80055d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	22ca      	movs	r2, #202	@ 0xca
 80055e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2253      	movs	r2, #83	@ 0x53
 80055ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f84b 	bl	800568c <RTC_EnterInitMode>
 80055f6:	4603      	mov	r3, r0
 80055f8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80055fa:	7cfb      	ldrb	r3, [r7, #19]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10c      	bne.n	800561a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800560a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800560e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f872 	bl	80056fa <RTC_ExitInitMode>
 8005616:	4603      	mov	r3, r0
 8005618:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800561a:	7cfb      	ldrb	r3, [r7, #19]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	22ff      	movs	r2, #255	@ 0xff
 800562c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]

  return status;
 8005634:	7cfb      	ldrb	r3, [r7, #19]
}
 8005636:	4618      	mov	r0, r3
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	bd90      	pop	{r4, r7, pc}
	...

08005640 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0d      	ldr	r2, [pc, #52]	@ (8005688 <HAL_RTC_WaitForSynchro+0x48>)
 8005652:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005654:	f7fc fff6 	bl	8002644 <HAL_GetTick>
 8005658:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800565a:	e009      	b.n	8005670 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800565c:	f7fc fff2 	bl	8002644 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800566a:	d901      	bls.n	8005670 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e007      	b.n	8005680 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0ee      	beq.n	800565c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	00017f5f 	.word	0x00017f5f

0800568c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d122      	bne.n	80056f0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056ba:	f7fc ffc3 	bl	8002644 <HAL_GetTick>
 80056be:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80056c0:	e00c      	b.n	80056dc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056c2:	f7fc ffbf 	bl	8002644 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056d0:	d904      	bls.n	80056dc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2204      	movs	r2, #4
 80056d6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d102      	bne.n	80056f0 <RTC_EnterInitMode+0x64>
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d1e8      	bne.n	80056c2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005714:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff ff8b 	bl	8005640 <HAL_RTC_WaitForSynchro>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2204      	movs	r2, #4
 8005734:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005752:	e005      	b.n	8005760 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	3b0a      	subs	r3, #10
 800575e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	2b09      	cmp	r3, #9
 8005764:	d8f6      	bhi.n	8005754 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	b2da      	uxtb	r2, r3
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	4313      	orrs	r3, r2
 8005772:	b2db      	uxtb	r3, r3
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e09d      	b.n	80058ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	d108      	bne.n	80057ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057a2:	d009      	beq.n	80057b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	61da      	str	r2, [r3, #28]
 80057aa:	e005      	b.n	80057b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fc fcd2 	bl	800217c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057f8:	d902      	bls.n	8005800 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e002      	b.n	8005806 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005804:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800580e:	d007      	beq.n	8005820 <HAL_SPI_Init+0xa0>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005818:	d002      	beq.n	8005820 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	431a      	orrs	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005862:	ea42 0103 	orr.w	r1, r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	f003 0204 	and.w	r2, r3, #4
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800589c:	ea42 0103 	orr.w	r1, r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b088      	sub	sp, #32
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	603b      	str	r3, [r7, #0]
 80058e2:	4613      	mov	r3, r2
 80058e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_SPI_Transmit+0x22>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e15f      	b.n	8005bb8 <HAL_SPI_Transmit+0x2e2>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005900:	f7fc fea0 	bl	8002644 <HAL_GetTick>
 8005904:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b01      	cmp	r3, #1
 8005914:	d002      	beq.n	800591c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005916:	2302      	movs	r3, #2
 8005918:	77fb      	strb	r3, [r7, #31]
    goto error;
 800591a:	e148      	b.n	8005bae <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_SPI_Transmit+0x52>
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800592c:	e13f      	b.n	8005bae <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2203      	movs	r2, #3
 8005932:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	88fa      	ldrh	r2, [r7, #6]
 8005946:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005978:	d10f      	bne.n	800599a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005988:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005998:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a4:	2b40      	cmp	r3, #64	@ 0x40
 80059a6:	d007      	beq.n	80059b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059c0:	d94f      	bls.n	8005a62 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <HAL_SPI_Transmit+0xfa>
 80059ca:	8afb      	ldrh	r3, [r7, #22]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d142      	bne.n	8005a56 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d4:	881a      	ldrh	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e0:	1c9a      	adds	r2, r3, #2
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059f4:	e02f      	b.n	8005a56 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d112      	bne.n	8005a2a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a08:	881a      	ldrh	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a14:	1c9a      	adds	r2, r3, #2
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a28:	e015      	b.n	8005a56 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a2a:	f7fc fe0b 	bl	8002644 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d803      	bhi.n	8005a42 <HAL_SPI_Transmit+0x16c>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d102      	bne.n	8005a48 <HAL_SPI_Transmit+0x172>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005a54:	e0ab      	b.n	8005bae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1ca      	bne.n	80059f6 <HAL_SPI_Transmit+0x120>
 8005a60:	e080      	b.n	8005b64 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_SPI_Transmit+0x19a>
 8005a6a:	8afb      	ldrh	r3, [r7, #22]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d174      	bne.n	8005b5a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d912      	bls.n	8005aa0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7e:	881a      	ldrh	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	1c9a      	adds	r2, r3, #2
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b02      	subs	r3, #2
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a9e:	e05c      	b.n	8005b5a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	7812      	ldrb	r2, [r2, #0]
 8005aac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ac6:	e048      	b.n	8005b5a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d12b      	bne.n	8005b2e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d912      	bls.n	8005b06 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae4:	881a      	ldrh	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af0:	1c9a      	adds	r2, r3, #2
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b02      	subs	r3, #2
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b04:	e029      	b.n	8005b5a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	330c      	adds	r3, #12
 8005b10:	7812      	ldrb	r2, [r2, #0]
 8005b12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b2c:	e015      	b.n	8005b5a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b2e:	f7fc fd89 	bl	8002644 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d803      	bhi.n	8005b46 <HAL_SPI_Transmit+0x270>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d102      	bne.n	8005b4c <HAL_SPI_Transmit+0x276>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005b58:	e029      	b.n	8005bae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1b1      	bne.n	8005ac8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f947 	bl	8005dfc <SPI_EndRxTxTransaction>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e003      	b.n	8005bae <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005bb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bd0:	f7fc fd38 	bl	8002644 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	4413      	add	r3, r2
 8005bde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005be0:	f7fc fd30 	bl	8002644 <HAL_GetTick>
 8005be4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005be6:	4b39      	ldr	r3, [pc, #228]	@ (8005ccc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	015b      	lsls	r3, r3, #5
 8005bec:	0d1b      	lsrs	r3, r3, #20
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	fb02 f303 	mul.w	r3, r2, r3
 8005bf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bf6:	e054      	b.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfe:	d050      	beq.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c00:	f7fc fd20 	bl	8002644 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d902      	bls.n	8005c16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d13d      	bne.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c2e:	d111      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c38:	d004      	beq.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c42:	d107      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5c:	d10f      	bne.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e017      	b.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4013      	ands	r3, r2
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	bf0c      	ite	eq
 8005cb2:	2301      	moveq	r3, #1
 8005cb4:	2300      	movne	r3, #0
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d19b      	bne.n	8005bf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	2000000c 	.word	0x2000000c

08005cd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08a      	sub	sp, #40	@ 0x28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ce2:	f7fc fcaf 	bl	8002644 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	4413      	add	r3, r2
 8005cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005cf2:	f7fc fca7 	bl	8002644 <HAL_GetTick>
 8005cf6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d00:	4b3d      	ldr	r3, [pc, #244]	@ (8005df8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	00da      	lsls	r2, r3, #3
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	0d1b      	lsrs	r3, r3, #20
 8005d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d18:	e060      	b.n	8005ddc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d20:	d107      	bne.n	8005d32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d38:	d050      	beq.n	8005ddc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d3a:	f7fc fc83 	bl	8002644 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d902      	bls.n	8005d50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d13d      	bne.n	8005dcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d68:	d111      	bne.n	8005d8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d72:	d004      	beq.n	8005d7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d7c:	d107      	bne.n	8005d8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d96:	d10f      	bne.n	8005db8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005db6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e010      	b.n	8005dee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4013      	ands	r3, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d196      	bne.n	8005d1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3728      	adds	r7, #40	@ 0x28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	2000000c 	.word	0x2000000c

08005dfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff ff5b 	bl	8005cd0 <SPI_WaitFifoStateUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e027      	b.n	8005e80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2200      	movs	r2, #0
 8005e38:	2180      	movs	r1, #128	@ 0x80
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff fec0 	bl	8005bc0 <SPI_WaitFlagStateUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e4a:	f043 0220 	orr.w	r2, r3, #32
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e014      	b.n	8005e80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7ff ff34 	bl	8005cd0 <SPI_WaitFifoStateUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e72:	f043 0220 	orr.w	r2, r3, #32
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e000      	b.n	8005e80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e049      	b.n	8005f2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fc f9a8 	bl	8002204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f000 fa28 	bl	800631c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01b      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f06f 0202 	mvn.w	r2, #2
 8005f6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f003 0303 	and.w	r3, r3, #3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f9ad 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 8005f86:	e005      	b.n	8005f94 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f99f 	bl	80062cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f9b0 	bl	80062f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d020      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01b      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f06f 0204 	mvn.w	r2, #4
 8005fb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f987 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 8005fd2:	e005      	b.n	8005fe0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f979 	bl	80062cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f98a 	bl	80062f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d020      	beq.n	8006032 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01b      	beq.n	8006032 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f06f 0208 	mvn.w	r2, #8
 8006002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2204      	movs	r2, #4
 8006008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f961 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 800601e:	e005      	b.n	800602c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f953 	bl	80062cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f964 	bl	80062f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b00      	cmp	r3, #0
 800603a:	d020      	beq.n	800607e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f003 0310 	and.w	r3, r3, #16
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01b      	beq.n	800607e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f06f 0210 	mvn.w	r2, #16
 800604e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2208      	movs	r2, #8
 8006054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f93b 	bl	80062e0 <HAL_TIM_IC_CaptureCallback>
 800606a:	e005      	b.n	8006078 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f92d 	bl	80062cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f93e 	bl	80062f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00c      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f06f 0201 	mvn.w	r2, #1
 800609a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7fb fb52 	bl	8001746 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00c      	beq.n	80060c6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 faaf 	bl	8006624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00c      	beq.n	80060ea <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80060e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 faa7 	bl	8006638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00c      	beq.n	800610e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f8fd 	bl	8006308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00c      	beq.n	8006132 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f06f 0220 	mvn.w	r2, #32
 800612a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fa6f 	bl	8006610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_TIM_ConfigClockSource+0x1c>
 8006152:	2302      	movs	r3, #2
 8006154:	e0b6      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x18a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006174:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006178:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006180:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006192:	d03e      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0xd8>
 8006194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006198:	f200 8087 	bhi.w	80062aa <HAL_TIM_ConfigClockSource+0x170>
 800619c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061a0:	f000 8086 	beq.w	80062b0 <HAL_TIM_ConfigClockSource+0x176>
 80061a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061a8:	d87f      	bhi.n	80062aa <HAL_TIM_ConfigClockSource+0x170>
 80061aa:	2b70      	cmp	r3, #112	@ 0x70
 80061ac:	d01a      	beq.n	80061e4 <HAL_TIM_ConfigClockSource+0xaa>
 80061ae:	2b70      	cmp	r3, #112	@ 0x70
 80061b0:	d87b      	bhi.n	80062aa <HAL_TIM_ConfigClockSource+0x170>
 80061b2:	2b60      	cmp	r3, #96	@ 0x60
 80061b4:	d050      	beq.n	8006258 <HAL_TIM_ConfigClockSource+0x11e>
 80061b6:	2b60      	cmp	r3, #96	@ 0x60
 80061b8:	d877      	bhi.n	80062aa <HAL_TIM_ConfigClockSource+0x170>
 80061ba:	2b50      	cmp	r3, #80	@ 0x50
 80061bc:	d03c      	beq.n	8006238 <HAL_TIM_ConfigClockSource+0xfe>
 80061be:	2b50      	cmp	r3, #80	@ 0x50
 80061c0:	d873      	bhi.n	80062aa <HAL_TIM_ConfigClockSource+0x170>
 80061c2:	2b40      	cmp	r3, #64	@ 0x40
 80061c4:	d058      	beq.n	8006278 <HAL_TIM_ConfigClockSource+0x13e>
 80061c6:	2b40      	cmp	r3, #64	@ 0x40
 80061c8:	d86f      	bhi.n	80062aa <HAL_TIM_ConfigClockSource+0x170>
 80061ca:	2b30      	cmp	r3, #48	@ 0x30
 80061cc:	d064      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x15e>
 80061ce:	2b30      	cmp	r3, #48	@ 0x30
 80061d0:	d86b      	bhi.n	80062aa <HAL_TIM_ConfigClockSource+0x170>
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d060      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x15e>
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d867      	bhi.n	80062aa <HAL_TIM_ConfigClockSource+0x170>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d05c      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x15e>
 80061de:	2b10      	cmp	r3, #16
 80061e0:	d05a      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x15e>
 80061e2:	e062      	b.n	80062aa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061f4:	f000 f986 	bl	8006504 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006206:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]
      break;
 8006210:	e04f      	b.n	80062b2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006222:	f000 f96f 	bl	8006504 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006234:	609a      	str	r2, [r3, #8]
      break;
 8006236:	e03c      	b.n	80062b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006244:	461a      	mov	r2, r3
 8006246:	f000 f8e3 	bl	8006410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2150      	movs	r1, #80	@ 0x50
 8006250:	4618      	mov	r0, r3
 8006252:	f000 f93c 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 8006256:	e02c      	b.n	80062b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006264:	461a      	mov	r2, r3
 8006266:	f000 f902 	bl	800646e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2160      	movs	r1, #96	@ 0x60
 8006270:	4618      	mov	r0, r3
 8006272:	f000 f92c 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 8006276:	e01c      	b.n	80062b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006284:	461a      	mov	r2, r3
 8006286:	f000 f8c3 	bl	8006410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2140      	movs	r1, #64	@ 0x40
 8006290:	4618      	mov	r0, r3
 8006292:	f000 f91c 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 8006296:	e00c      	b.n	80062b2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4619      	mov	r1, r3
 80062a2:	4610      	mov	r0, r2
 80062a4:	f000 f913 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 80062a8:	e003      	b.n	80062b2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	73fb      	strb	r3, [r7, #15]
      break;
 80062ae:	e000      	b.n	80062b2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80062b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a34      	ldr	r2, [pc, #208]	@ (8006400 <TIM_Base_SetConfig+0xe4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_Base_SetConfig+0x20>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633a:	d108      	bne.n	800634e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2b      	ldr	r2, [pc, #172]	@ (8006400 <TIM_Base_SetConfig+0xe4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00f      	beq.n	8006376 <TIM_Base_SetConfig+0x5a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635c:	d00b      	beq.n	8006376 <TIM_Base_SetConfig+0x5a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a28      	ldr	r2, [pc, #160]	@ (8006404 <TIM_Base_SetConfig+0xe8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d007      	beq.n	8006376 <TIM_Base_SetConfig+0x5a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a27      	ldr	r2, [pc, #156]	@ (8006408 <TIM_Base_SetConfig+0xec>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d003      	beq.n	8006376 <TIM_Base_SetConfig+0x5a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a26      	ldr	r2, [pc, #152]	@ (800640c <TIM_Base_SetConfig+0xf0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d108      	bne.n	8006388 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800637c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a14      	ldr	r2, [pc, #80]	@ (8006400 <TIM_Base_SetConfig+0xe4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00b      	beq.n	80063cc <TIM_Base_SetConfig+0xb0>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a13      	ldr	r2, [pc, #76]	@ (8006404 <TIM_Base_SetConfig+0xe8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d007      	beq.n	80063cc <TIM_Base_SetConfig+0xb0>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a12      	ldr	r2, [pc, #72]	@ (8006408 <TIM_Base_SetConfig+0xec>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_Base_SetConfig+0xb0>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a11      	ldr	r2, [pc, #68]	@ (800640c <TIM_Base_SetConfig+0xf0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d103      	bne.n	80063d4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d105      	bne.n	80063f2 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f023 0201 	bic.w	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	611a      	str	r2, [r3, #16]
  }
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40014000 	.word	0x40014000
 8006408:	40014400 	.word	0x40014400
 800640c:	40014800 	.word	0x40014800

08006410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f023 0201 	bic.w	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800643a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f023 030a 	bic.w	r3, r3, #10
 800644c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	621a      	str	r2, [r3, #32]
}
 8006462:	bf00      	nop
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800646e:	b480      	push	{r7}
 8006470:	b087      	sub	sp, #28
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	f023 0210 	bic.w	r2, r3, #16
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	031b      	lsls	r3, r3, #12
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f043 0307 	orr.w	r3, r3, #7
 80064f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	609a      	str	r2, [r3, #8]
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800651e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	021a      	lsls	r2, r3, #8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	431a      	orrs	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4313      	orrs	r3, r2
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	609a      	str	r2, [r3, #8]
}
 8006538:	bf00      	nop
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006558:	2302      	movs	r3, #2
 800655a:	e04f      	b.n	80065fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a21      	ldr	r2, [pc, #132]	@ (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d108      	bne.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800658c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a14      	ldr	r2, [pc, #80]	@ (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d009      	beq.n	80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c4:	d004      	beq.n	80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a10      	ldr	r2, [pc, #64]	@ (800660c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d10c      	bne.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40014000 	.word	0x40014000

08006610 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e040      	b.n	80066e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fb fe00 	bl	8002274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2224      	movs	r2, #36	@ 0x24
 8006678:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f95e 	bl	8006954 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f825 	bl	80066e8 <UART_SetConfig>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e01b      	b.n	80066e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f9dd 	bl	8006a98 <UART_CheckIdleState>
 80066de:	4603      	mov	r3, r0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b8a      	ldr	r3, [pc, #552]	@ (800693c <UART_SetConfig+0x254>)
 8006714:	4013      	ands	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	6979      	ldr	r1, [r7, #20]
 800671c:	430b      	orrs	r3, r1
 800671e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	430a      	orrs	r2, r1
 8006758:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a78      	ldr	r2, [pc, #480]	@ (8006940 <UART_SetConfig+0x258>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d120      	bne.n	80067a6 <UART_SetConfig+0xbe>
 8006764:	4b77      	ldr	r3, [pc, #476]	@ (8006944 <UART_SetConfig+0x25c>)
 8006766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	2b03      	cmp	r3, #3
 800676e:	d817      	bhi.n	80067a0 <UART_SetConfig+0xb8>
 8006770:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <UART_SetConfig+0x90>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	08006789 	.word	0x08006789
 800677c:	08006795 	.word	0x08006795
 8006780:	0800679b 	.word	0x0800679b
 8006784:	0800678f 	.word	0x0800678f
 8006788:	2300      	movs	r3, #0
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e01d      	b.n	80067ca <UART_SetConfig+0xe2>
 800678e:	2302      	movs	r3, #2
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e01a      	b.n	80067ca <UART_SetConfig+0xe2>
 8006794:	2304      	movs	r3, #4
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e017      	b.n	80067ca <UART_SetConfig+0xe2>
 800679a:	2308      	movs	r3, #8
 800679c:	77fb      	strb	r3, [r7, #31]
 800679e:	e014      	b.n	80067ca <UART_SetConfig+0xe2>
 80067a0:	2310      	movs	r3, #16
 80067a2:	77fb      	strb	r3, [r7, #31]
 80067a4:	e011      	b.n	80067ca <UART_SetConfig+0xe2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a67      	ldr	r2, [pc, #412]	@ (8006948 <UART_SetConfig+0x260>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d102      	bne.n	80067b6 <UART_SetConfig+0xce>
 80067b0:	2300      	movs	r3, #0
 80067b2:	77fb      	strb	r3, [r7, #31]
 80067b4:	e009      	b.n	80067ca <UART_SetConfig+0xe2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a64      	ldr	r2, [pc, #400]	@ (800694c <UART_SetConfig+0x264>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d102      	bne.n	80067c6 <UART_SetConfig+0xde>
 80067c0:	2300      	movs	r3, #0
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e001      	b.n	80067ca <UART_SetConfig+0xe2>
 80067c6:	2310      	movs	r3, #16
 80067c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067d2:	d15a      	bne.n	800688a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80067d4:	7ffb      	ldrb	r3, [r7, #31]
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d827      	bhi.n	800682a <UART_SetConfig+0x142>
 80067da:	a201      	add	r2, pc, #4	@ (adr r2, 80067e0 <UART_SetConfig+0xf8>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006805 	.word	0x08006805
 80067e4:	0800680d 	.word	0x0800680d
 80067e8:	08006815 	.word	0x08006815
 80067ec:	0800682b 	.word	0x0800682b
 80067f0:	0800681b 	.word	0x0800681b
 80067f4:	0800682b 	.word	0x0800682b
 80067f8:	0800682b 	.word	0x0800682b
 80067fc:	0800682b 	.word	0x0800682b
 8006800:	08006823 	.word	0x08006823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006804:	f7fe fba6 	bl	8004f54 <HAL_RCC_GetPCLK1Freq>
 8006808:	61b8      	str	r0, [r7, #24]
        break;
 800680a:	e013      	b.n	8006834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800680c:	f7fe fbc4 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 8006810:	61b8      	str	r0, [r7, #24]
        break;
 8006812:	e00f      	b.n	8006834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006814:	4b4e      	ldr	r3, [pc, #312]	@ (8006950 <UART_SetConfig+0x268>)
 8006816:	61bb      	str	r3, [r7, #24]
        break;
 8006818:	e00c      	b.n	8006834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681a:	f7fe fb3b 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 800681e:	61b8      	str	r0, [r7, #24]
        break;
 8006820:	e008      	b.n	8006834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006826:	61bb      	str	r3, [r7, #24]
        break;
 8006828:	e004      	b.n	8006834 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	77bb      	strb	r3, [r7, #30]
        break;
 8006832:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d074      	beq.n	8006924 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	005a      	lsls	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	085b      	lsrs	r3, r3, #1
 8006844:	441a      	add	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	fbb2 f3f3 	udiv	r3, r2, r3
 800684e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b0f      	cmp	r3, #15
 8006854:	d916      	bls.n	8006884 <UART_SetConfig+0x19c>
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800685c:	d212      	bcs.n	8006884 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f023 030f 	bic.w	r3, r3, #15
 8006866:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	b29b      	uxth	r3, r3
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	b29a      	uxth	r2, r3
 8006874:	89fb      	ldrh	r3, [r7, #14]
 8006876:	4313      	orrs	r3, r2
 8006878:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	89fa      	ldrh	r2, [r7, #14]
 8006880:	60da      	str	r2, [r3, #12]
 8006882:	e04f      	b.n	8006924 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	77bb      	strb	r3, [r7, #30]
 8006888:	e04c      	b.n	8006924 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800688a:	7ffb      	ldrb	r3, [r7, #31]
 800688c:	2b08      	cmp	r3, #8
 800688e:	d828      	bhi.n	80068e2 <UART_SetConfig+0x1fa>
 8006890:	a201      	add	r2, pc, #4	@ (adr r2, 8006898 <UART_SetConfig+0x1b0>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068bd 	.word	0x080068bd
 800689c:	080068c5 	.word	0x080068c5
 80068a0:	080068cd 	.word	0x080068cd
 80068a4:	080068e3 	.word	0x080068e3
 80068a8:	080068d3 	.word	0x080068d3
 80068ac:	080068e3 	.word	0x080068e3
 80068b0:	080068e3 	.word	0x080068e3
 80068b4:	080068e3 	.word	0x080068e3
 80068b8:	080068db 	.word	0x080068db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068bc:	f7fe fb4a 	bl	8004f54 <HAL_RCC_GetPCLK1Freq>
 80068c0:	61b8      	str	r0, [r7, #24]
        break;
 80068c2:	e013      	b.n	80068ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068c4:	f7fe fb68 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 80068c8:	61b8      	str	r0, [r7, #24]
        break;
 80068ca:	e00f      	b.n	80068ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068cc:	4b20      	ldr	r3, [pc, #128]	@ (8006950 <UART_SetConfig+0x268>)
 80068ce:	61bb      	str	r3, [r7, #24]
        break;
 80068d0:	e00c      	b.n	80068ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068d2:	f7fe fadf 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 80068d6:	61b8      	str	r0, [r7, #24]
        break;
 80068d8:	e008      	b.n	80068ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068de:	61bb      	str	r3, [r7, #24]
        break;
 80068e0:	e004      	b.n	80068ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	77bb      	strb	r3, [r7, #30]
        break;
 80068ea:	bf00      	nop
    }

    if (pclk != 0U)
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d018      	beq.n	8006924 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	085a      	lsrs	r2, r3, #1
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	441a      	add	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	fbb2 f3f3 	udiv	r3, r2, r3
 8006904:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	2b0f      	cmp	r3, #15
 800690a:	d909      	bls.n	8006920 <UART_SetConfig+0x238>
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006912:	d205      	bcs.n	8006920 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	b29a      	uxth	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60da      	str	r2, [r3, #12]
 800691e:	e001      	b.n	8006924 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006930:	7fbb      	ldrb	r3, [r7, #30]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	efff69f3 	.word	0xefff69f3
 8006940:	40013800 	.word	0x40013800
 8006944:	40021000 	.word	0x40021000
 8006948:	40004400 	.word	0x40004400
 800694c:	40004800 	.word	0x40004800
 8006950:	007a1200 	.word	0x007a1200

08006954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01a      	beq.n	8006a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a52:	d10a      	bne.n	8006a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b098      	sub	sp, #96	@ 0x60
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aa8:	f7fb fdcc 	bl	8002644 <HAL_GetTick>
 8006aac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d12e      	bne.n	8006b1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006abc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f88c 	bl	8006be8 <UART_WaitOnFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d021      	beq.n	8006b1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e062      	b.n	8006be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d149      	bne.n	8006bbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b30:	2200      	movs	r2, #0
 8006b32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f856 	bl	8006be8 <UART_WaitOnFlagUntilTimeout>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d03c      	beq.n	8006bbc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e6      	bne.n	8006b42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0301 	bic.w	r3, r3, #1
 8006b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3308      	adds	r3, #8
 8006b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b94:	61fa      	str	r2, [r7, #28]
 8006b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	69b9      	ldr	r1, [r7, #24]
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e5      	bne.n	8006b74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e011      	b.n	8006be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3758      	adds	r7, #88	@ 0x58
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf8:	e04f      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c00:	d04b      	beq.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c02:	f7fb fd1f 	bl	8002644 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d302      	bcc.n	8006c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e04e      	b.n	8006cba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d037      	beq.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b80      	cmp	r3, #128	@ 0x80
 8006c2e:	d034      	beq.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b40      	cmp	r3, #64	@ 0x40
 8006c34:	d031      	beq.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d110      	bne.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2208      	movs	r2, #8
 8006c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f838 	bl	8006cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2208      	movs	r2, #8
 8006c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e029      	b.n	8006cba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c74:	d111      	bne.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 f81e 	bl	8006cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e00f      	b.n	8006cba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	69da      	ldr	r2, [r3, #28]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	bf0c      	ite	eq
 8006caa:	2301      	moveq	r3, #1
 8006cac:	2300      	movne	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d0a0      	beq.n	8006bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b095      	sub	sp, #84	@ 0x54
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e6      	bne.n	8006cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3308      	adds	r3, #8
 8006d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f023 0301 	bic.w	r3, r3, #1
 8006d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3308      	adds	r3, #8
 8006d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e5      	bne.n	8006cfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d118      	bne.n	8006d6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f023 0310 	bic.w	r3, r3, #16
 8006d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d56:	61bb      	str	r3, [r7, #24]
 8006d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6979      	ldr	r1, [r7, #20]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	613b      	str	r3, [r7, #16]
   return(result);
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e6      	bne.n	8006d38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d7e:	bf00      	nop
 8006d80:	3754      	adds	r7, #84	@ 0x54
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <__cvt>:
 8006d8a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8e:	ec57 6b10 	vmov	r6, r7, d0
 8006d92:	2f00      	cmp	r7, #0
 8006d94:	460c      	mov	r4, r1
 8006d96:	4619      	mov	r1, r3
 8006d98:	463b      	mov	r3, r7
 8006d9a:	bfbb      	ittet	lt
 8006d9c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006da0:	461f      	movlt	r7, r3
 8006da2:	2300      	movge	r3, #0
 8006da4:	232d      	movlt	r3, #45	@ 0x2d
 8006da6:	700b      	strb	r3, [r1, #0]
 8006da8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006daa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006dae:	4691      	mov	r9, r2
 8006db0:	f023 0820 	bic.w	r8, r3, #32
 8006db4:	bfbc      	itt	lt
 8006db6:	4632      	movlt	r2, r6
 8006db8:	4616      	movlt	r6, r2
 8006dba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006dbe:	d005      	beq.n	8006dcc <__cvt+0x42>
 8006dc0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006dc4:	d100      	bne.n	8006dc8 <__cvt+0x3e>
 8006dc6:	3401      	adds	r4, #1
 8006dc8:	2102      	movs	r1, #2
 8006dca:	e000      	b.n	8006dce <__cvt+0x44>
 8006dcc:	2103      	movs	r1, #3
 8006dce:	ab03      	add	r3, sp, #12
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	ab02      	add	r3, sp, #8
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	ec47 6b10 	vmov	d0, r6, r7
 8006dda:	4653      	mov	r3, sl
 8006ddc:	4622      	mov	r2, r4
 8006dde:	f000 fe37 	bl	8007a50 <_dtoa_r>
 8006de2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006de6:	4605      	mov	r5, r0
 8006de8:	d119      	bne.n	8006e1e <__cvt+0x94>
 8006dea:	f019 0f01 	tst.w	r9, #1
 8006dee:	d00e      	beq.n	8006e0e <__cvt+0x84>
 8006df0:	eb00 0904 	add.w	r9, r0, r4
 8006df4:	2200      	movs	r2, #0
 8006df6:	2300      	movs	r3, #0
 8006df8:	4630      	mov	r0, r6
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	f7f9 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e00:	b108      	cbz	r0, 8006e06 <__cvt+0x7c>
 8006e02:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e06:	2230      	movs	r2, #48	@ 0x30
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	454b      	cmp	r3, r9
 8006e0c:	d31e      	bcc.n	8006e4c <__cvt+0xc2>
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e12:	1b5b      	subs	r3, r3, r5
 8006e14:	4628      	mov	r0, r5
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	b004      	add	sp, #16
 8006e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e22:	eb00 0904 	add.w	r9, r0, r4
 8006e26:	d1e5      	bne.n	8006df4 <__cvt+0x6a>
 8006e28:	7803      	ldrb	r3, [r0, #0]
 8006e2a:	2b30      	cmp	r3, #48	@ 0x30
 8006e2c:	d10a      	bne.n	8006e44 <__cvt+0xba>
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2300      	movs	r3, #0
 8006e32:	4630      	mov	r0, r6
 8006e34:	4639      	mov	r1, r7
 8006e36:	f7f9 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e3a:	b918      	cbnz	r0, 8006e44 <__cvt+0xba>
 8006e3c:	f1c4 0401 	rsb	r4, r4, #1
 8006e40:	f8ca 4000 	str.w	r4, [sl]
 8006e44:	f8da 3000 	ldr.w	r3, [sl]
 8006e48:	4499      	add	r9, r3
 8006e4a:	e7d3      	b.n	8006df4 <__cvt+0x6a>
 8006e4c:	1c59      	adds	r1, r3, #1
 8006e4e:	9103      	str	r1, [sp, #12]
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	e7d9      	b.n	8006e08 <__cvt+0x7e>

08006e54 <__exponent>:
 8006e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e56:	2900      	cmp	r1, #0
 8006e58:	bfba      	itte	lt
 8006e5a:	4249      	neglt	r1, r1
 8006e5c:	232d      	movlt	r3, #45	@ 0x2d
 8006e5e:	232b      	movge	r3, #43	@ 0x2b
 8006e60:	2909      	cmp	r1, #9
 8006e62:	7002      	strb	r2, [r0, #0]
 8006e64:	7043      	strb	r3, [r0, #1]
 8006e66:	dd29      	ble.n	8006ebc <__exponent+0x68>
 8006e68:	f10d 0307 	add.w	r3, sp, #7
 8006e6c:	461d      	mov	r5, r3
 8006e6e:	270a      	movs	r7, #10
 8006e70:	461a      	mov	r2, r3
 8006e72:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e76:	fb07 1416 	mls	r4, r7, r6, r1
 8006e7a:	3430      	adds	r4, #48	@ 0x30
 8006e7c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e80:	460c      	mov	r4, r1
 8006e82:	2c63      	cmp	r4, #99	@ 0x63
 8006e84:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e88:	4631      	mov	r1, r6
 8006e8a:	dcf1      	bgt.n	8006e70 <__exponent+0x1c>
 8006e8c:	3130      	adds	r1, #48	@ 0x30
 8006e8e:	1e94      	subs	r4, r2, #2
 8006e90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e94:	1c41      	adds	r1, r0, #1
 8006e96:	4623      	mov	r3, r4
 8006e98:	42ab      	cmp	r3, r5
 8006e9a:	d30a      	bcc.n	8006eb2 <__exponent+0x5e>
 8006e9c:	f10d 0309 	add.w	r3, sp, #9
 8006ea0:	1a9b      	subs	r3, r3, r2
 8006ea2:	42ac      	cmp	r4, r5
 8006ea4:	bf88      	it	hi
 8006ea6:	2300      	movhi	r3, #0
 8006ea8:	3302      	adds	r3, #2
 8006eaa:	4403      	add	r3, r0
 8006eac:	1a18      	subs	r0, r3, r0
 8006eae:	b003      	add	sp, #12
 8006eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006eb6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006eba:	e7ed      	b.n	8006e98 <__exponent+0x44>
 8006ebc:	2330      	movs	r3, #48	@ 0x30
 8006ebe:	3130      	adds	r1, #48	@ 0x30
 8006ec0:	7083      	strb	r3, [r0, #2]
 8006ec2:	70c1      	strb	r1, [r0, #3]
 8006ec4:	1d03      	adds	r3, r0, #4
 8006ec6:	e7f1      	b.n	8006eac <__exponent+0x58>

08006ec8 <_printf_float>:
 8006ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	b08d      	sub	sp, #52	@ 0x34
 8006ece:	460c      	mov	r4, r1
 8006ed0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ed4:	4616      	mov	r6, r2
 8006ed6:	461f      	mov	r7, r3
 8006ed8:	4605      	mov	r5, r0
 8006eda:	f000 fcb9 	bl	8007850 <_localeconv_r>
 8006ede:	6803      	ldr	r3, [r0, #0]
 8006ee0:	9304      	str	r3, [sp, #16]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7f9 f9c4 	bl	8000270 <strlen>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eec:	f8d8 3000 	ldr.w	r3, [r8]
 8006ef0:	9005      	str	r0, [sp, #20]
 8006ef2:	3307      	adds	r3, #7
 8006ef4:	f023 0307 	bic.w	r3, r3, #7
 8006ef8:	f103 0208 	add.w	r2, r3, #8
 8006efc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f00:	f8d4 b000 	ldr.w	fp, [r4]
 8006f04:	f8c8 2000 	str.w	r2, [r8]
 8006f08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f10:	9307      	str	r3, [sp, #28]
 8006f12:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f1e:	4b9c      	ldr	r3, [pc, #624]	@ (8007190 <_printf_float+0x2c8>)
 8006f20:	f04f 32ff 	mov.w	r2, #4294967295
 8006f24:	f7f9 fe02 	bl	8000b2c <__aeabi_dcmpun>
 8006f28:	bb70      	cbnz	r0, 8006f88 <_printf_float+0xc0>
 8006f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f2e:	4b98      	ldr	r3, [pc, #608]	@ (8007190 <_printf_float+0x2c8>)
 8006f30:	f04f 32ff 	mov.w	r2, #4294967295
 8006f34:	f7f9 fddc 	bl	8000af0 <__aeabi_dcmple>
 8006f38:	bb30      	cbnz	r0, 8006f88 <_printf_float+0xc0>
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4640      	mov	r0, r8
 8006f40:	4649      	mov	r1, r9
 8006f42:	f7f9 fdcb 	bl	8000adc <__aeabi_dcmplt>
 8006f46:	b110      	cbz	r0, 8006f4e <_printf_float+0x86>
 8006f48:	232d      	movs	r3, #45	@ 0x2d
 8006f4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f4e:	4a91      	ldr	r2, [pc, #580]	@ (8007194 <_printf_float+0x2cc>)
 8006f50:	4b91      	ldr	r3, [pc, #580]	@ (8007198 <_printf_float+0x2d0>)
 8006f52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f56:	bf8c      	ite	hi
 8006f58:	4690      	movhi	r8, r2
 8006f5a:	4698      	movls	r8, r3
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	f02b 0304 	bic.w	r3, fp, #4
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	f04f 0900 	mov.w	r9, #0
 8006f6a:	9700      	str	r7, [sp, #0]
 8006f6c:	4633      	mov	r3, r6
 8006f6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f70:	4621      	mov	r1, r4
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 f9d2 	bl	800731c <_printf_common>
 8006f78:	3001      	adds	r0, #1
 8006f7a:	f040 808d 	bne.w	8007098 <_printf_float+0x1d0>
 8006f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f82:	b00d      	add	sp, #52	@ 0x34
 8006f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f88:	4642      	mov	r2, r8
 8006f8a:	464b      	mov	r3, r9
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	4649      	mov	r1, r9
 8006f90:	f7f9 fdcc 	bl	8000b2c <__aeabi_dcmpun>
 8006f94:	b140      	cbz	r0, 8006fa8 <_printf_float+0xe0>
 8006f96:	464b      	mov	r3, r9
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bfbc      	itt	lt
 8006f9c:	232d      	movlt	r3, #45	@ 0x2d
 8006f9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800719c <_printf_float+0x2d4>)
 8006fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80071a0 <_printf_float+0x2d8>)
 8006fa6:	e7d4      	b.n	8006f52 <_printf_float+0x8a>
 8006fa8:	6863      	ldr	r3, [r4, #4]
 8006faa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006fae:	9206      	str	r2, [sp, #24]
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	d13b      	bne.n	800702c <_printf_float+0x164>
 8006fb4:	2306      	movs	r3, #6
 8006fb6:	6063      	str	r3, [r4, #4]
 8006fb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	6022      	str	r2, [r4, #0]
 8006fc0:	9303      	str	r3, [sp, #12]
 8006fc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8006fc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006fc8:	ab09      	add	r3, sp, #36	@ 0x24
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	6861      	ldr	r1, [r4, #4]
 8006fce:	ec49 8b10 	vmov	d0, r8, r9
 8006fd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f7ff fed7 	bl	8006d8a <__cvt>
 8006fdc:	9b06      	ldr	r3, [sp, #24]
 8006fde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fe0:	2b47      	cmp	r3, #71	@ 0x47
 8006fe2:	4680      	mov	r8, r0
 8006fe4:	d129      	bne.n	800703a <_printf_float+0x172>
 8006fe6:	1cc8      	adds	r0, r1, #3
 8006fe8:	db02      	blt.n	8006ff0 <_printf_float+0x128>
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	4299      	cmp	r1, r3
 8006fee:	dd41      	ble.n	8007074 <_printf_float+0x1ac>
 8006ff0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ff4:	fa5f fa8a 	uxtb.w	sl, sl
 8006ff8:	3901      	subs	r1, #1
 8006ffa:	4652      	mov	r2, sl
 8006ffc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007000:	9109      	str	r1, [sp, #36]	@ 0x24
 8007002:	f7ff ff27 	bl	8006e54 <__exponent>
 8007006:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007008:	1813      	adds	r3, r2, r0
 800700a:	2a01      	cmp	r2, #1
 800700c:	4681      	mov	r9, r0
 800700e:	6123      	str	r3, [r4, #16]
 8007010:	dc02      	bgt.n	8007018 <_printf_float+0x150>
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	07d2      	lsls	r2, r2, #31
 8007016:	d501      	bpl.n	800701c <_printf_float+0x154>
 8007018:	3301      	adds	r3, #1
 800701a:	6123      	str	r3, [r4, #16]
 800701c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0a2      	beq.n	8006f6a <_printf_float+0xa2>
 8007024:	232d      	movs	r3, #45	@ 0x2d
 8007026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800702a:	e79e      	b.n	8006f6a <_printf_float+0xa2>
 800702c:	9a06      	ldr	r2, [sp, #24]
 800702e:	2a47      	cmp	r2, #71	@ 0x47
 8007030:	d1c2      	bne.n	8006fb8 <_printf_float+0xf0>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1c0      	bne.n	8006fb8 <_printf_float+0xf0>
 8007036:	2301      	movs	r3, #1
 8007038:	e7bd      	b.n	8006fb6 <_printf_float+0xee>
 800703a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800703e:	d9db      	bls.n	8006ff8 <_printf_float+0x130>
 8007040:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007044:	d118      	bne.n	8007078 <_printf_float+0x1b0>
 8007046:	2900      	cmp	r1, #0
 8007048:	6863      	ldr	r3, [r4, #4]
 800704a:	dd0b      	ble.n	8007064 <_printf_float+0x19c>
 800704c:	6121      	str	r1, [r4, #16]
 800704e:	b913      	cbnz	r3, 8007056 <_printf_float+0x18e>
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	07d0      	lsls	r0, r2, #31
 8007054:	d502      	bpl.n	800705c <_printf_float+0x194>
 8007056:	3301      	adds	r3, #1
 8007058:	440b      	add	r3, r1
 800705a:	6123      	str	r3, [r4, #16]
 800705c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800705e:	f04f 0900 	mov.w	r9, #0
 8007062:	e7db      	b.n	800701c <_printf_float+0x154>
 8007064:	b913      	cbnz	r3, 800706c <_printf_float+0x1a4>
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	07d2      	lsls	r2, r2, #31
 800706a:	d501      	bpl.n	8007070 <_printf_float+0x1a8>
 800706c:	3302      	adds	r3, #2
 800706e:	e7f4      	b.n	800705a <_printf_float+0x192>
 8007070:	2301      	movs	r3, #1
 8007072:	e7f2      	b.n	800705a <_printf_float+0x192>
 8007074:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800707a:	4299      	cmp	r1, r3
 800707c:	db05      	blt.n	800708a <_printf_float+0x1c2>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	6121      	str	r1, [r4, #16]
 8007082:	07d8      	lsls	r0, r3, #31
 8007084:	d5ea      	bpl.n	800705c <_printf_float+0x194>
 8007086:	1c4b      	adds	r3, r1, #1
 8007088:	e7e7      	b.n	800705a <_printf_float+0x192>
 800708a:	2900      	cmp	r1, #0
 800708c:	bfd4      	ite	le
 800708e:	f1c1 0202 	rsble	r2, r1, #2
 8007092:	2201      	movgt	r2, #1
 8007094:	4413      	add	r3, r2
 8007096:	e7e0      	b.n	800705a <_printf_float+0x192>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	055a      	lsls	r2, r3, #21
 800709c:	d407      	bmi.n	80070ae <_printf_float+0x1e6>
 800709e:	6923      	ldr	r3, [r4, #16]
 80070a0:	4642      	mov	r2, r8
 80070a2:	4631      	mov	r1, r6
 80070a4:	4628      	mov	r0, r5
 80070a6:	47b8      	blx	r7
 80070a8:	3001      	adds	r0, #1
 80070aa:	d12b      	bne.n	8007104 <_printf_float+0x23c>
 80070ac:	e767      	b.n	8006f7e <_printf_float+0xb6>
 80070ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070b2:	f240 80dd 	bls.w	8007270 <_printf_float+0x3a8>
 80070b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070ba:	2200      	movs	r2, #0
 80070bc:	2300      	movs	r3, #0
 80070be:	f7f9 fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d033      	beq.n	800712e <_printf_float+0x266>
 80070c6:	4a37      	ldr	r2, [pc, #220]	@ (80071a4 <_printf_float+0x2dc>)
 80070c8:	2301      	movs	r3, #1
 80070ca:	4631      	mov	r1, r6
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b8      	blx	r7
 80070d0:	3001      	adds	r0, #1
 80070d2:	f43f af54 	beq.w	8006f7e <_printf_float+0xb6>
 80070d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80070da:	4543      	cmp	r3, r8
 80070dc:	db02      	blt.n	80070e4 <_printf_float+0x21c>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	07d8      	lsls	r0, r3, #31
 80070e2:	d50f      	bpl.n	8007104 <_printf_float+0x23c>
 80070e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070e8:	4631      	mov	r1, r6
 80070ea:	4628      	mov	r0, r5
 80070ec:	47b8      	blx	r7
 80070ee:	3001      	adds	r0, #1
 80070f0:	f43f af45 	beq.w	8006f7e <_printf_float+0xb6>
 80070f4:	f04f 0900 	mov.w	r9, #0
 80070f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80070fc:	f104 0a1a 	add.w	sl, r4, #26
 8007100:	45c8      	cmp	r8, r9
 8007102:	dc09      	bgt.n	8007118 <_printf_float+0x250>
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	079b      	lsls	r3, r3, #30
 8007108:	f100 8103 	bmi.w	8007312 <_printf_float+0x44a>
 800710c:	68e0      	ldr	r0, [r4, #12]
 800710e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007110:	4298      	cmp	r0, r3
 8007112:	bfb8      	it	lt
 8007114:	4618      	movlt	r0, r3
 8007116:	e734      	b.n	8006f82 <_printf_float+0xba>
 8007118:	2301      	movs	r3, #1
 800711a:	4652      	mov	r2, sl
 800711c:	4631      	mov	r1, r6
 800711e:	4628      	mov	r0, r5
 8007120:	47b8      	blx	r7
 8007122:	3001      	adds	r0, #1
 8007124:	f43f af2b 	beq.w	8006f7e <_printf_float+0xb6>
 8007128:	f109 0901 	add.w	r9, r9, #1
 800712c:	e7e8      	b.n	8007100 <_printf_float+0x238>
 800712e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007130:	2b00      	cmp	r3, #0
 8007132:	dc39      	bgt.n	80071a8 <_printf_float+0x2e0>
 8007134:	4a1b      	ldr	r2, [pc, #108]	@ (80071a4 <_printf_float+0x2dc>)
 8007136:	2301      	movs	r3, #1
 8007138:	4631      	mov	r1, r6
 800713a:	4628      	mov	r0, r5
 800713c:	47b8      	blx	r7
 800713e:	3001      	adds	r0, #1
 8007140:	f43f af1d 	beq.w	8006f7e <_printf_float+0xb6>
 8007144:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007148:	ea59 0303 	orrs.w	r3, r9, r3
 800714c:	d102      	bne.n	8007154 <_printf_float+0x28c>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	07d9      	lsls	r1, r3, #31
 8007152:	d5d7      	bpl.n	8007104 <_printf_float+0x23c>
 8007154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007158:	4631      	mov	r1, r6
 800715a:	4628      	mov	r0, r5
 800715c:	47b8      	blx	r7
 800715e:	3001      	adds	r0, #1
 8007160:	f43f af0d 	beq.w	8006f7e <_printf_float+0xb6>
 8007164:	f04f 0a00 	mov.w	sl, #0
 8007168:	f104 0b1a 	add.w	fp, r4, #26
 800716c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800716e:	425b      	negs	r3, r3
 8007170:	4553      	cmp	r3, sl
 8007172:	dc01      	bgt.n	8007178 <_printf_float+0x2b0>
 8007174:	464b      	mov	r3, r9
 8007176:	e793      	b.n	80070a0 <_printf_float+0x1d8>
 8007178:	2301      	movs	r3, #1
 800717a:	465a      	mov	r2, fp
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f aefb 	beq.w	8006f7e <_printf_float+0xb6>
 8007188:	f10a 0a01 	add.w	sl, sl, #1
 800718c:	e7ee      	b.n	800716c <_printf_float+0x2a4>
 800718e:	bf00      	nop
 8007190:	7fefffff 	.word	0x7fefffff
 8007194:	08009f24 	.word	0x08009f24
 8007198:	08009f20 	.word	0x08009f20
 800719c:	08009f2c 	.word	0x08009f2c
 80071a0:	08009f28 	.word	0x08009f28
 80071a4:	08009f30 	.word	0x08009f30
 80071a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80071ae:	4553      	cmp	r3, sl
 80071b0:	bfa8      	it	ge
 80071b2:	4653      	movge	r3, sl
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	4699      	mov	r9, r3
 80071b8:	dc36      	bgt.n	8007228 <_printf_float+0x360>
 80071ba:	f04f 0b00 	mov.w	fp, #0
 80071be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071c2:	f104 021a 	add.w	r2, r4, #26
 80071c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071c8:	9306      	str	r3, [sp, #24]
 80071ca:	eba3 0309 	sub.w	r3, r3, r9
 80071ce:	455b      	cmp	r3, fp
 80071d0:	dc31      	bgt.n	8007236 <_printf_float+0x36e>
 80071d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d4:	459a      	cmp	sl, r3
 80071d6:	dc3a      	bgt.n	800724e <_printf_float+0x386>
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	07da      	lsls	r2, r3, #31
 80071dc:	d437      	bmi.n	800724e <_printf_float+0x386>
 80071de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e0:	ebaa 0903 	sub.w	r9, sl, r3
 80071e4:	9b06      	ldr	r3, [sp, #24]
 80071e6:	ebaa 0303 	sub.w	r3, sl, r3
 80071ea:	4599      	cmp	r9, r3
 80071ec:	bfa8      	it	ge
 80071ee:	4699      	movge	r9, r3
 80071f0:	f1b9 0f00 	cmp.w	r9, #0
 80071f4:	dc33      	bgt.n	800725e <_printf_float+0x396>
 80071f6:	f04f 0800 	mov.w	r8, #0
 80071fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071fe:	f104 0b1a 	add.w	fp, r4, #26
 8007202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007204:	ebaa 0303 	sub.w	r3, sl, r3
 8007208:	eba3 0309 	sub.w	r3, r3, r9
 800720c:	4543      	cmp	r3, r8
 800720e:	f77f af79 	ble.w	8007104 <_printf_float+0x23c>
 8007212:	2301      	movs	r3, #1
 8007214:	465a      	mov	r2, fp
 8007216:	4631      	mov	r1, r6
 8007218:	4628      	mov	r0, r5
 800721a:	47b8      	blx	r7
 800721c:	3001      	adds	r0, #1
 800721e:	f43f aeae 	beq.w	8006f7e <_printf_float+0xb6>
 8007222:	f108 0801 	add.w	r8, r8, #1
 8007226:	e7ec      	b.n	8007202 <_printf_float+0x33a>
 8007228:	4642      	mov	r2, r8
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	d1c2      	bne.n	80071ba <_printf_float+0x2f2>
 8007234:	e6a3      	b.n	8006f7e <_printf_float+0xb6>
 8007236:	2301      	movs	r3, #1
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	9206      	str	r2, [sp, #24]
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f ae9c 	beq.w	8006f7e <_printf_float+0xb6>
 8007246:	9a06      	ldr	r2, [sp, #24]
 8007248:	f10b 0b01 	add.w	fp, fp, #1
 800724c:	e7bb      	b.n	80071c6 <_printf_float+0x2fe>
 800724e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	47b8      	blx	r7
 8007258:	3001      	adds	r0, #1
 800725a:	d1c0      	bne.n	80071de <_printf_float+0x316>
 800725c:	e68f      	b.n	8006f7e <_printf_float+0xb6>
 800725e:	9a06      	ldr	r2, [sp, #24]
 8007260:	464b      	mov	r3, r9
 8007262:	4442      	add	r2, r8
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	d1c3      	bne.n	80071f6 <_printf_float+0x32e>
 800726e:	e686      	b.n	8006f7e <_printf_float+0xb6>
 8007270:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007274:	f1ba 0f01 	cmp.w	sl, #1
 8007278:	dc01      	bgt.n	800727e <_printf_float+0x3b6>
 800727a:	07db      	lsls	r3, r3, #31
 800727c:	d536      	bpl.n	80072ec <_printf_float+0x424>
 800727e:	2301      	movs	r3, #1
 8007280:	4642      	mov	r2, r8
 8007282:	4631      	mov	r1, r6
 8007284:	4628      	mov	r0, r5
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	f43f ae78 	beq.w	8006f7e <_printf_float+0xb6>
 800728e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007292:	4631      	mov	r1, r6
 8007294:	4628      	mov	r0, r5
 8007296:	47b8      	blx	r7
 8007298:	3001      	adds	r0, #1
 800729a:	f43f ae70 	beq.w	8006f7e <_printf_float+0xb6>
 800729e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072a2:	2200      	movs	r2, #0
 80072a4:	2300      	movs	r3, #0
 80072a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072aa:	f7f9 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ae:	b9c0      	cbnz	r0, 80072e2 <_printf_float+0x41a>
 80072b0:	4653      	mov	r3, sl
 80072b2:	f108 0201 	add.w	r2, r8, #1
 80072b6:	4631      	mov	r1, r6
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b8      	blx	r7
 80072bc:	3001      	adds	r0, #1
 80072be:	d10c      	bne.n	80072da <_printf_float+0x412>
 80072c0:	e65d      	b.n	8006f7e <_printf_float+0xb6>
 80072c2:	2301      	movs	r3, #1
 80072c4:	465a      	mov	r2, fp
 80072c6:	4631      	mov	r1, r6
 80072c8:	4628      	mov	r0, r5
 80072ca:	47b8      	blx	r7
 80072cc:	3001      	adds	r0, #1
 80072ce:	f43f ae56 	beq.w	8006f7e <_printf_float+0xb6>
 80072d2:	f108 0801 	add.w	r8, r8, #1
 80072d6:	45d0      	cmp	r8, sl
 80072d8:	dbf3      	blt.n	80072c2 <_printf_float+0x3fa>
 80072da:	464b      	mov	r3, r9
 80072dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80072e0:	e6df      	b.n	80070a2 <_printf_float+0x1da>
 80072e2:	f04f 0800 	mov.w	r8, #0
 80072e6:	f104 0b1a 	add.w	fp, r4, #26
 80072ea:	e7f4      	b.n	80072d6 <_printf_float+0x40e>
 80072ec:	2301      	movs	r3, #1
 80072ee:	4642      	mov	r2, r8
 80072f0:	e7e1      	b.n	80072b6 <_printf_float+0x3ee>
 80072f2:	2301      	movs	r3, #1
 80072f4:	464a      	mov	r2, r9
 80072f6:	4631      	mov	r1, r6
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b8      	blx	r7
 80072fc:	3001      	adds	r0, #1
 80072fe:	f43f ae3e 	beq.w	8006f7e <_printf_float+0xb6>
 8007302:	f108 0801 	add.w	r8, r8, #1
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800730a:	1a5b      	subs	r3, r3, r1
 800730c:	4543      	cmp	r3, r8
 800730e:	dcf0      	bgt.n	80072f2 <_printf_float+0x42a>
 8007310:	e6fc      	b.n	800710c <_printf_float+0x244>
 8007312:	f04f 0800 	mov.w	r8, #0
 8007316:	f104 0919 	add.w	r9, r4, #25
 800731a:	e7f4      	b.n	8007306 <_printf_float+0x43e>

0800731c <_printf_common>:
 800731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	4616      	mov	r6, r2
 8007322:	4698      	mov	r8, r3
 8007324:	688a      	ldr	r2, [r1, #8]
 8007326:	690b      	ldr	r3, [r1, #16]
 8007328:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800732c:	4293      	cmp	r3, r2
 800732e:	bfb8      	it	lt
 8007330:	4613      	movlt	r3, r2
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007338:	4607      	mov	r7, r0
 800733a:	460c      	mov	r4, r1
 800733c:	b10a      	cbz	r2, 8007342 <_printf_common+0x26>
 800733e:	3301      	adds	r3, #1
 8007340:	6033      	str	r3, [r6, #0]
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	0699      	lsls	r1, r3, #26
 8007346:	bf42      	ittt	mi
 8007348:	6833      	ldrmi	r3, [r6, #0]
 800734a:	3302      	addmi	r3, #2
 800734c:	6033      	strmi	r3, [r6, #0]
 800734e:	6825      	ldr	r5, [r4, #0]
 8007350:	f015 0506 	ands.w	r5, r5, #6
 8007354:	d106      	bne.n	8007364 <_printf_common+0x48>
 8007356:	f104 0a19 	add.w	sl, r4, #25
 800735a:	68e3      	ldr	r3, [r4, #12]
 800735c:	6832      	ldr	r2, [r6, #0]
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	42ab      	cmp	r3, r5
 8007362:	dc26      	bgt.n	80073b2 <_printf_common+0x96>
 8007364:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007368:	6822      	ldr	r2, [r4, #0]
 800736a:	3b00      	subs	r3, #0
 800736c:	bf18      	it	ne
 800736e:	2301      	movne	r3, #1
 8007370:	0692      	lsls	r2, r2, #26
 8007372:	d42b      	bmi.n	80073cc <_printf_common+0xb0>
 8007374:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007378:	4641      	mov	r1, r8
 800737a:	4638      	mov	r0, r7
 800737c:	47c8      	blx	r9
 800737e:	3001      	adds	r0, #1
 8007380:	d01e      	beq.n	80073c0 <_printf_common+0xa4>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	6922      	ldr	r2, [r4, #16]
 8007386:	f003 0306 	and.w	r3, r3, #6
 800738a:	2b04      	cmp	r3, #4
 800738c:	bf02      	ittt	eq
 800738e:	68e5      	ldreq	r5, [r4, #12]
 8007390:	6833      	ldreq	r3, [r6, #0]
 8007392:	1aed      	subeq	r5, r5, r3
 8007394:	68a3      	ldr	r3, [r4, #8]
 8007396:	bf0c      	ite	eq
 8007398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800739c:	2500      	movne	r5, #0
 800739e:	4293      	cmp	r3, r2
 80073a0:	bfc4      	itt	gt
 80073a2:	1a9b      	subgt	r3, r3, r2
 80073a4:	18ed      	addgt	r5, r5, r3
 80073a6:	2600      	movs	r6, #0
 80073a8:	341a      	adds	r4, #26
 80073aa:	42b5      	cmp	r5, r6
 80073ac:	d11a      	bne.n	80073e4 <_printf_common+0xc8>
 80073ae:	2000      	movs	r0, #0
 80073b0:	e008      	b.n	80073c4 <_printf_common+0xa8>
 80073b2:	2301      	movs	r3, #1
 80073b4:	4652      	mov	r2, sl
 80073b6:	4641      	mov	r1, r8
 80073b8:	4638      	mov	r0, r7
 80073ba:	47c8      	blx	r9
 80073bc:	3001      	adds	r0, #1
 80073be:	d103      	bne.n	80073c8 <_printf_common+0xac>
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c8:	3501      	adds	r5, #1
 80073ca:	e7c6      	b.n	800735a <_printf_common+0x3e>
 80073cc:	18e1      	adds	r1, r4, r3
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	2030      	movs	r0, #48	@ 0x30
 80073d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073d6:	4422      	add	r2, r4
 80073d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073e0:	3302      	adds	r3, #2
 80073e2:	e7c7      	b.n	8007374 <_printf_common+0x58>
 80073e4:	2301      	movs	r3, #1
 80073e6:	4622      	mov	r2, r4
 80073e8:	4641      	mov	r1, r8
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c8      	blx	r9
 80073ee:	3001      	adds	r0, #1
 80073f0:	d0e6      	beq.n	80073c0 <_printf_common+0xa4>
 80073f2:	3601      	adds	r6, #1
 80073f4:	e7d9      	b.n	80073aa <_printf_common+0x8e>
	...

080073f8 <_printf_i>:
 80073f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	7e0f      	ldrb	r7, [r1, #24]
 80073fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007400:	2f78      	cmp	r7, #120	@ 0x78
 8007402:	4691      	mov	r9, r2
 8007404:	4680      	mov	r8, r0
 8007406:	460c      	mov	r4, r1
 8007408:	469a      	mov	sl, r3
 800740a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800740e:	d807      	bhi.n	8007420 <_printf_i+0x28>
 8007410:	2f62      	cmp	r7, #98	@ 0x62
 8007412:	d80a      	bhi.n	800742a <_printf_i+0x32>
 8007414:	2f00      	cmp	r7, #0
 8007416:	f000 80d1 	beq.w	80075bc <_printf_i+0x1c4>
 800741a:	2f58      	cmp	r7, #88	@ 0x58
 800741c:	f000 80b8 	beq.w	8007590 <_printf_i+0x198>
 8007420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007424:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007428:	e03a      	b.n	80074a0 <_printf_i+0xa8>
 800742a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800742e:	2b15      	cmp	r3, #21
 8007430:	d8f6      	bhi.n	8007420 <_printf_i+0x28>
 8007432:	a101      	add	r1, pc, #4	@ (adr r1, 8007438 <_printf_i+0x40>)
 8007434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007438:	08007491 	.word	0x08007491
 800743c:	080074a5 	.word	0x080074a5
 8007440:	08007421 	.word	0x08007421
 8007444:	08007421 	.word	0x08007421
 8007448:	08007421 	.word	0x08007421
 800744c:	08007421 	.word	0x08007421
 8007450:	080074a5 	.word	0x080074a5
 8007454:	08007421 	.word	0x08007421
 8007458:	08007421 	.word	0x08007421
 800745c:	08007421 	.word	0x08007421
 8007460:	08007421 	.word	0x08007421
 8007464:	080075a3 	.word	0x080075a3
 8007468:	080074cf 	.word	0x080074cf
 800746c:	0800755d 	.word	0x0800755d
 8007470:	08007421 	.word	0x08007421
 8007474:	08007421 	.word	0x08007421
 8007478:	080075c5 	.word	0x080075c5
 800747c:	08007421 	.word	0x08007421
 8007480:	080074cf 	.word	0x080074cf
 8007484:	08007421 	.word	0x08007421
 8007488:	08007421 	.word	0x08007421
 800748c:	08007565 	.word	0x08007565
 8007490:	6833      	ldr	r3, [r6, #0]
 8007492:	1d1a      	adds	r2, r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6032      	str	r2, [r6, #0]
 8007498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800749c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074a0:	2301      	movs	r3, #1
 80074a2:	e09c      	b.n	80075de <_printf_i+0x1e6>
 80074a4:	6833      	ldr	r3, [r6, #0]
 80074a6:	6820      	ldr	r0, [r4, #0]
 80074a8:	1d19      	adds	r1, r3, #4
 80074aa:	6031      	str	r1, [r6, #0]
 80074ac:	0606      	lsls	r6, r0, #24
 80074ae:	d501      	bpl.n	80074b4 <_printf_i+0xbc>
 80074b0:	681d      	ldr	r5, [r3, #0]
 80074b2:	e003      	b.n	80074bc <_printf_i+0xc4>
 80074b4:	0645      	lsls	r5, r0, #25
 80074b6:	d5fb      	bpl.n	80074b0 <_printf_i+0xb8>
 80074b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074bc:	2d00      	cmp	r5, #0
 80074be:	da03      	bge.n	80074c8 <_printf_i+0xd0>
 80074c0:	232d      	movs	r3, #45	@ 0x2d
 80074c2:	426d      	negs	r5, r5
 80074c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c8:	4858      	ldr	r0, [pc, #352]	@ (800762c <_printf_i+0x234>)
 80074ca:	230a      	movs	r3, #10
 80074cc:	e011      	b.n	80074f2 <_printf_i+0xfa>
 80074ce:	6821      	ldr	r1, [r4, #0]
 80074d0:	6833      	ldr	r3, [r6, #0]
 80074d2:	0608      	lsls	r0, r1, #24
 80074d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80074d8:	d402      	bmi.n	80074e0 <_printf_i+0xe8>
 80074da:	0649      	lsls	r1, r1, #25
 80074dc:	bf48      	it	mi
 80074de:	b2ad      	uxthmi	r5, r5
 80074e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80074e2:	4852      	ldr	r0, [pc, #328]	@ (800762c <_printf_i+0x234>)
 80074e4:	6033      	str	r3, [r6, #0]
 80074e6:	bf14      	ite	ne
 80074e8:	230a      	movne	r3, #10
 80074ea:	2308      	moveq	r3, #8
 80074ec:	2100      	movs	r1, #0
 80074ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074f2:	6866      	ldr	r6, [r4, #4]
 80074f4:	60a6      	str	r6, [r4, #8]
 80074f6:	2e00      	cmp	r6, #0
 80074f8:	db05      	blt.n	8007506 <_printf_i+0x10e>
 80074fa:	6821      	ldr	r1, [r4, #0]
 80074fc:	432e      	orrs	r6, r5
 80074fe:	f021 0104 	bic.w	r1, r1, #4
 8007502:	6021      	str	r1, [r4, #0]
 8007504:	d04b      	beq.n	800759e <_printf_i+0x1a6>
 8007506:	4616      	mov	r6, r2
 8007508:	fbb5 f1f3 	udiv	r1, r5, r3
 800750c:	fb03 5711 	mls	r7, r3, r1, r5
 8007510:	5dc7      	ldrb	r7, [r0, r7]
 8007512:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007516:	462f      	mov	r7, r5
 8007518:	42bb      	cmp	r3, r7
 800751a:	460d      	mov	r5, r1
 800751c:	d9f4      	bls.n	8007508 <_printf_i+0x110>
 800751e:	2b08      	cmp	r3, #8
 8007520:	d10b      	bne.n	800753a <_printf_i+0x142>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	07df      	lsls	r7, r3, #31
 8007526:	d508      	bpl.n	800753a <_printf_i+0x142>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	6861      	ldr	r1, [r4, #4]
 800752c:	4299      	cmp	r1, r3
 800752e:	bfde      	ittt	le
 8007530:	2330      	movle	r3, #48	@ 0x30
 8007532:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007536:	f106 36ff 	addle.w	r6, r6, #4294967295
 800753a:	1b92      	subs	r2, r2, r6
 800753c:	6122      	str	r2, [r4, #16]
 800753e:	f8cd a000 	str.w	sl, [sp]
 8007542:	464b      	mov	r3, r9
 8007544:	aa03      	add	r2, sp, #12
 8007546:	4621      	mov	r1, r4
 8007548:	4640      	mov	r0, r8
 800754a:	f7ff fee7 	bl	800731c <_printf_common>
 800754e:	3001      	adds	r0, #1
 8007550:	d14a      	bne.n	80075e8 <_printf_i+0x1f0>
 8007552:	f04f 30ff 	mov.w	r0, #4294967295
 8007556:	b004      	add	sp, #16
 8007558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	f043 0320 	orr.w	r3, r3, #32
 8007562:	6023      	str	r3, [r4, #0]
 8007564:	4832      	ldr	r0, [pc, #200]	@ (8007630 <_printf_i+0x238>)
 8007566:	2778      	movs	r7, #120	@ 0x78
 8007568:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	6831      	ldr	r1, [r6, #0]
 8007570:	061f      	lsls	r7, r3, #24
 8007572:	f851 5b04 	ldr.w	r5, [r1], #4
 8007576:	d402      	bmi.n	800757e <_printf_i+0x186>
 8007578:	065f      	lsls	r7, r3, #25
 800757a:	bf48      	it	mi
 800757c:	b2ad      	uxthmi	r5, r5
 800757e:	6031      	str	r1, [r6, #0]
 8007580:	07d9      	lsls	r1, r3, #31
 8007582:	bf44      	itt	mi
 8007584:	f043 0320 	orrmi.w	r3, r3, #32
 8007588:	6023      	strmi	r3, [r4, #0]
 800758a:	b11d      	cbz	r5, 8007594 <_printf_i+0x19c>
 800758c:	2310      	movs	r3, #16
 800758e:	e7ad      	b.n	80074ec <_printf_i+0xf4>
 8007590:	4826      	ldr	r0, [pc, #152]	@ (800762c <_printf_i+0x234>)
 8007592:	e7e9      	b.n	8007568 <_printf_i+0x170>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	f023 0320 	bic.w	r3, r3, #32
 800759a:	6023      	str	r3, [r4, #0]
 800759c:	e7f6      	b.n	800758c <_printf_i+0x194>
 800759e:	4616      	mov	r6, r2
 80075a0:	e7bd      	b.n	800751e <_printf_i+0x126>
 80075a2:	6833      	ldr	r3, [r6, #0]
 80075a4:	6825      	ldr	r5, [r4, #0]
 80075a6:	6961      	ldr	r1, [r4, #20]
 80075a8:	1d18      	adds	r0, r3, #4
 80075aa:	6030      	str	r0, [r6, #0]
 80075ac:	062e      	lsls	r6, r5, #24
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	d501      	bpl.n	80075b6 <_printf_i+0x1be>
 80075b2:	6019      	str	r1, [r3, #0]
 80075b4:	e002      	b.n	80075bc <_printf_i+0x1c4>
 80075b6:	0668      	lsls	r0, r5, #25
 80075b8:	d5fb      	bpl.n	80075b2 <_printf_i+0x1ba>
 80075ba:	8019      	strh	r1, [r3, #0]
 80075bc:	2300      	movs	r3, #0
 80075be:	6123      	str	r3, [r4, #16]
 80075c0:	4616      	mov	r6, r2
 80075c2:	e7bc      	b.n	800753e <_printf_i+0x146>
 80075c4:	6833      	ldr	r3, [r6, #0]
 80075c6:	1d1a      	adds	r2, r3, #4
 80075c8:	6032      	str	r2, [r6, #0]
 80075ca:	681e      	ldr	r6, [r3, #0]
 80075cc:	6862      	ldr	r2, [r4, #4]
 80075ce:	2100      	movs	r1, #0
 80075d0:	4630      	mov	r0, r6
 80075d2:	f7f8 fdfd 	bl	80001d0 <memchr>
 80075d6:	b108      	cbz	r0, 80075dc <_printf_i+0x1e4>
 80075d8:	1b80      	subs	r0, r0, r6
 80075da:	6060      	str	r0, [r4, #4]
 80075dc:	6863      	ldr	r3, [r4, #4]
 80075de:	6123      	str	r3, [r4, #16]
 80075e0:	2300      	movs	r3, #0
 80075e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075e6:	e7aa      	b.n	800753e <_printf_i+0x146>
 80075e8:	6923      	ldr	r3, [r4, #16]
 80075ea:	4632      	mov	r2, r6
 80075ec:	4649      	mov	r1, r9
 80075ee:	4640      	mov	r0, r8
 80075f0:	47d0      	blx	sl
 80075f2:	3001      	adds	r0, #1
 80075f4:	d0ad      	beq.n	8007552 <_printf_i+0x15a>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	079b      	lsls	r3, r3, #30
 80075fa:	d413      	bmi.n	8007624 <_printf_i+0x22c>
 80075fc:	68e0      	ldr	r0, [r4, #12]
 80075fe:	9b03      	ldr	r3, [sp, #12]
 8007600:	4298      	cmp	r0, r3
 8007602:	bfb8      	it	lt
 8007604:	4618      	movlt	r0, r3
 8007606:	e7a6      	b.n	8007556 <_printf_i+0x15e>
 8007608:	2301      	movs	r3, #1
 800760a:	4632      	mov	r2, r6
 800760c:	4649      	mov	r1, r9
 800760e:	4640      	mov	r0, r8
 8007610:	47d0      	blx	sl
 8007612:	3001      	adds	r0, #1
 8007614:	d09d      	beq.n	8007552 <_printf_i+0x15a>
 8007616:	3501      	adds	r5, #1
 8007618:	68e3      	ldr	r3, [r4, #12]
 800761a:	9903      	ldr	r1, [sp, #12]
 800761c:	1a5b      	subs	r3, r3, r1
 800761e:	42ab      	cmp	r3, r5
 8007620:	dcf2      	bgt.n	8007608 <_printf_i+0x210>
 8007622:	e7eb      	b.n	80075fc <_printf_i+0x204>
 8007624:	2500      	movs	r5, #0
 8007626:	f104 0619 	add.w	r6, r4, #25
 800762a:	e7f5      	b.n	8007618 <_printf_i+0x220>
 800762c:	08009f32 	.word	0x08009f32
 8007630:	08009f43 	.word	0x08009f43

08007634 <std>:
 8007634:	2300      	movs	r3, #0
 8007636:	b510      	push	{r4, lr}
 8007638:	4604      	mov	r4, r0
 800763a:	e9c0 3300 	strd	r3, r3, [r0]
 800763e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007642:	6083      	str	r3, [r0, #8]
 8007644:	8181      	strh	r1, [r0, #12]
 8007646:	6643      	str	r3, [r0, #100]	@ 0x64
 8007648:	81c2      	strh	r2, [r0, #14]
 800764a:	6183      	str	r3, [r0, #24]
 800764c:	4619      	mov	r1, r3
 800764e:	2208      	movs	r2, #8
 8007650:	305c      	adds	r0, #92	@ 0x5c
 8007652:	f000 f8f4 	bl	800783e <memset>
 8007656:	4b0d      	ldr	r3, [pc, #52]	@ (800768c <std+0x58>)
 8007658:	6263      	str	r3, [r4, #36]	@ 0x24
 800765a:	4b0d      	ldr	r3, [pc, #52]	@ (8007690 <std+0x5c>)
 800765c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800765e:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <std+0x60>)
 8007660:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007662:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <std+0x64>)
 8007664:	6323      	str	r3, [r4, #48]	@ 0x30
 8007666:	4b0d      	ldr	r3, [pc, #52]	@ (800769c <std+0x68>)
 8007668:	6224      	str	r4, [r4, #32]
 800766a:	429c      	cmp	r4, r3
 800766c:	d006      	beq.n	800767c <std+0x48>
 800766e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007672:	4294      	cmp	r4, r2
 8007674:	d002      	beq.n	800767c <std+0x48>
 8007676:	33d0      	adds	r3, #208	@ 0xd0
 8007678:	429c      	cmp	r4, r3
 800767a:	d105      	bne.n	8007688 <std+0x54>
 800767c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007684:	f000 b958 	b.w	8007938 <__retarget_lock_init_recursive>
 8007688:	bd10      	pop	{r4, pc}
 800768a:	bf00      	nop
 800768c:	080077b9 	.word	0x080077b9
 8007690:	080077db 	.word	0x080077db
 8007694:	08007813 	.word	0x08007813
 8007698:	08007837 	.word	0x08007837
 800769c:	20000448 	.word	0x20000448

080076a0 <stdio_exit_handler>:
 80076a0:	4a02      	ldr	r2, [pc, #8]	@ (80076ac <stdio_exit_handler+0xc>)
 80076a2:	4903      	ldr	r1, [pc, #12]	@ (80076b0 <stdio_exit_handler+0x10>)
 80076a4:	4803      	ldr	r0, [pc, #12]	@ (80076b4 <stdio_exit_handler+0x14>)
 80076a6:	f000 b869 	b.w	800777c <_fwalk_sglue>
 80076aa:	bf00      	nop
 80076ac:	20000018 	.word	0x20000018
 80076b0:	08008fed 	.word	0x08008fed
 80076b4:	20000028 	.word	0x20000028

080076b8 <cleanup_stdio>:
 80076b8:	6841      	ldr	r1, [r0, #4]
 80076ba:	4b0c      	ldr	r3, [pc, #48]	@ (80076ec <cleanup_stdio+0x34>)
 80076bc:	4299      	cmp	r1, r3
 80076be:	b510      	push	{r4, lr}
 80076c0:	4604      	mov	r4, r0
 80076c2:	d001      	beq.n	80076c8 <cleanup_stdio+0x10>
 80076c4:	f001 fc92 	bl	8008fec <_fflush_r>
 80076c8:	68a1      	ldr	r1, [r4, #8]
 80076ca:	4b09      	ldr	r3, [pc, #36]	@ (80076f0 <cleanup_stdio+0x38>)
 80076cc:	4299      	cmp	r1, r3
 80076ce:	d002      	beq.n	80076d6 <cleanup_stdio+0x1e>
 80076d0:	4620      	mov	r0, r4
 80076d2:	f001 fc8b 	bl	8008fec <_fflush_r>
 80076d6:	68e1      	ldr	r1, [r4, #12]
 80076d8:	4b06      	ldr	r3, [pc, #24]	@ (80076f4 <cleanup_stdio+0x3c>)
 80076da:	4299      	cmp	r1, r3
 80076dc:	d004      	beq.n	80076e8 <cleanup_stdio+0x30>
 80076de:	4620      	mov	r0, r4
 80076e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e4:	f001 bc82 	b.w	8008fec <_fflush_r>
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	bf00      	nop
 80076ec:	20000448 	.word	0x20000448
 80076f0:	200004b0 	.word	0x200004b0
 80076f4:	20000518 	.word	0x20000518

080076f8 <global_stdio_init.part.0>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007728 <global_stdio_init.part.0+0x30>)
 80076fc:	4c0b      	ldr	r4, [pc, #44]	@ (800772c <global_stdio_init.part.0+0x34>)
 80076fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007730 <global_stdio_init.part.0+0x38>)
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	4620      	mov	r0, r4
 8007704:	2200      	movs	r2, #0
 8007706:	2104      	movs	r1, #4
 8007708:	f7ff ff94 	bl	8007634 <std>
 800770c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007710:	2201      	movs	r2, #1
 8007712:	2109      	movs	r1, #9
 8007714:	f7ff ff8e 	bl	8007634 <std>
 8007718:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800771c:	2202      	movs	r2, #2
 800771e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007722:	2112      	movs	r1, #18
 8007724:	f7ff bf86 	b.w	8007634 <std>
 8007728:	20000580 	.word	0x20000580
 800772c:	20000448 	.word	0x20000448
 8007730:	080076a1 	.word	0x080076a1

08007734 <__sfp_lock_acquire>:
 8007734:	4801      	ldr	r0, [pc, #4]	@ (800773c <__sfp_lock_acquire+0x8>)
 8007736:	f000 b900 	b.w	800793a <__retarget_lock_acquire_recursive>
 800773a:	bf00      	nop
 800773c:	20000589 	.word	0x20000589

08007740 <__sfp_lock_release>:
 8007740:	4801      	ldr	r0, [pc, #4]	@ (8007748 <__sfp_lock_release+0x8>)
 8007742:	f000 b8fb 	b.w	800793c <__retarget_lock_release_recursive>
 8007746:	bf00      	nop
 8007748:	20000589 	.word	0x20000589

0800774c <__sinit>:
 800774c:	b510      	push	{r4, lr}
 800774e:	4604      	mov	r4, r0
 8007750:	f7ff fff0 	bl	8007734 <__sfp_lock_acquire>
 8007754:	6a23      	ldr	r3, [r4, #32]
 8007756:	b11b      	cbz	r3, 8007760 <__sinit+0x14>
 8007758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800775c:	f7ff bff0 	b.w	8007740 <__sfp_lock_release>
 8007760:	4b04      	ldr	r3, [pc, #16]	@ (8007774 <__sinit+0x28>)
 8007762:	6223      	str	r3, [r4, #32]
 8007764:	4b04      	ldr	r3, [pc, #16]	@ (8007778 <__sinit+0x2c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f5      	bne.n	8007758 <__sinit+0xc>
 800776c:	f7ff ffc4 	bl	80076f8 <global_stdio_init.part.0>
 8007770:	e7f2      	b.n	8007758 <__sinit+0xc>
 8007772:	bf00      	nop
 8007774:	080076b9 	.word	0x080076b9
 8007778:	20000580 	.word	0x20000580

0800777c <_fwalk_sglue>:
 800777c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007780:	4607      	mov	r7, r0
 8007782:	4688      	mov	r8, r1
 8007784:	4614      	mov	r4, r2
 8007786:	2600      	movs	r6, #0
 8007788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800778c:	f1b9 0901 	subs.w	r9, r9, #1
 8007790:	d505      	bpl.n	800779e <_fwalk_sglue+0x22>
 8007792:	6824      	ldr	r4, [r4, #0]
 8007794:	2c00      	cmp	r4, #0
 8007796:	d1f7      	bne.n	8007788 <_fwalk_sglue+0xc>
 8007798:	4630      	mov	r0, r6
 800779a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779e:	89ab      	ldrh	r3, [r5, #12]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d907      	bls.n	80077b4 <_fwalk_sglue+0x38>
 80077a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077a8:	3301      	adds	r3, #1
 80077aa:	d003      	beq.n	80077b4 <_fwalk_sglue+0x38>
 80077ac:	4629      	mov	r1, r5
 80077ae:	4638      	mov	r0, r7
 80077b0:	47c0      	blx	r8
 80077b2:	4306      	orrs	r6, r0
 80077b4:	3568      	adds	r5, #104	@ 0x68
 80077b6:	e7e9      	b.n	800778c <_fwalk_sglue+0x10>

080077b8 <__sread>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	460c      	mov	r4, r1
 80077bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c0:	f000 f86c 	bl	800789c <_read_r>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	bfab      	itete	ge
 80077c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077ca:	89a3      	ldrhlt	r3, [r4, #12]
 80077cc:	181b      	addge	r3, r3, r0
 80077ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077d2:	bfac      	ite	ge
 80077d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077d6:	81a3      	strhlt	r3, [r4, #12]
 80077d8:	bd10      	pop	{r4, pc}

080077da <__swrite>:
 80077da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077de:	461f      	mov	r7, r3
 80077e0:	898b      	ldrh	r3, [r1, #12]
 80077e2:	05db      	lsls	r3, r3, #23
 80077e4:	4605      	mov	r5, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	4616      	mov	r6, r2
 80077ea:	d505      	bpl.n	80077f8 <__swrite+0x1e>
 80077ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f0:	2302      	movs	r3, #2
 80077f2:	2200      	movs	r2, #0
 80077f4:	f000 f840 	bl	8007878 <_lseek_r>
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007802:	81a3      	strh	r3, [r4, #12]
 8007804:	4632      	mov	r2, r6
 8007806:	463b      	mov	r3, r7
 8007808:	4628      	mov	r0, r5
 800780a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800780e:	f000 b857 	b.w	80078c0 <_write_r>

08007812 <__sseek>:
 8007812:	b510      	push	{r4, lr}
 8007814:	460c      	mov	r4, r1
 8007816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781a:	f000 f82d 	bl	8007878 <_lseek_r>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	bf15      	itete	ne
 8007824:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007826:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800782a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800782e:	81a3      	strheq	r3, [r4, #12]
 8007830:	bf18      	it	ne
 8007832:	81a3      	strhne	r3, [r4, #12]
 8007834:	bd10      	pop	{r4, pc}

08007836 <__sclose>:
 8007836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783a:	f000 b80d 	b.w	8007858 <_close_r>

0800783e <memset>:
 800783e:	4402      	add	r2, r0
 8007840:	4603      	mov	r3, r0
 8007842:	4293      	cmp	r3, r2
 8007844:	d100      	bne.n	8007848 <memset+0xa>
 8007846:	4770      	bx	lr
 8007848:	f803 1b01 	strb.w	r1, [r3], #1
 800784c:	e7f9      	b.n	8007842 <memset+0x4>
	...

08007850 <_localeconv_r>:
 8007850:	4800      	ldr	r0, [pc, #0]	@ (8007854 <_localeconv_r+0x4>)
 8007852:	4770      	bx	lr
 8007854:	20000164 	.word	0x20000164

08007858 <_close_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d06      	ldr	r5, [pc, #24]	@ (8007874 <_close_r+0x1c>)
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	602b      	str	r3, [r5, #0]
 8007864:	f7fa fdee 	bl	8002444 <_close>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_close_r+0x1a>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_close_r+0x1a>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	20000584 	.word	0x20000584

08007878 <_lseek_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4d07      	ldr	r5, [pc, #28]	@ (8007898 <_lseek_r+0x20>)
 800787c:	4604      	mov	r4, r0
 800787e:	4608      	mov	r0, r1
 8007880:	4611      	mov	r1, r2
 8007882:	2200      	movs	r2, #0
 8007884:	602a      	str	r2, [r5, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	f7fa fe03 	bl	8002492 <_lseek>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_lseek_r+0x1e>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_lseek_r+0x1e>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	20000584 	.word	0x20000584

0800789c <_read_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	4d07      	ldr	r5, [pc, #28]	@ (80078bc <_read_r+0x20>)
 80078a0:	4604      	mov	r4, r0
 80078a2:	4608      	mov	r0, r1
 80078a4:	4611      	mov	r1, r2
 80078a6:	2200      	movs	r2, #0
 80078a8:	602a      	str	r2, [r5, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f7fa fd91 	bl	80023d2 <_read>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_read_r+0x1e>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_read_r+0x1e>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	20000584 	.word	0x20000584

080078c0 <_write_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4d07      	ldr	r5, [pc, #28]	@ (80078e0 <_write_r+0x20>)
 80078c4:	4604      	mov	r4, r0
 80078c6:	4608      	mov	r0, r1
 80078c8:	4611      	mov	r1, r2
 80078ca:	2200      	movs	r2, #0
 80078cc:	602a      	str	r2, [r5, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f7fa fd9c 	bl	800240c <_write>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_write_r+0x1e>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_write_r+0x1e>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20000584 	.word	0x20000584

080078e4 <__errno>:
 80078e4:	4b01      	ldr	r3, [pc, #4]	@ (80078ec <__errno+0x8>)
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	20000024 	.word	0x20000024

080078f0 <__libc_init_array>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007928 <__libc_init_array+0x38>)
 80078f4:	4c0d      	ldr	r4, [pc, #52]	@ (800792c <__libc_init_array+0x3c>)
 80078f6:	1b64      	subs	r4, r4, r5
 80078f8:	10a4      	asrs	r4, r4, #2
 80078fa:	2600      	movs	r6, #0
 80078fc:	42a6      	cmp	r6, r4
 80078fe:	d109      	bne.n	8007914 <__libc_init_array+0x24>
 8007900:	4d0b      	ldr	r5, [pc, #44]	@ (8007930 <__libc_init_array+0x40>)
 8007902:	4c0c      	ldr	r4, [pc, #48]	@ (8007934 <__libc_init_array+0x44>)
 8007904:	f001 fec0 	bl	8009688 <_init>
 8007908:	1b64      	subs	r4, r4, r5
 800790a:	10a4      	asrs	r4, r4, #2
 800790c:	2600      	movs	r6, #0
 800790e:	42a6      	cmp	r6, r4
 8007910:	d105      	bne.n	800791e <__libc_init_array+0x2e>
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	f855 3b04 	ldr.w	r3, [r5], #4
 8007918:	4798      	blx	r3
 800791a:	3601      	adds	r6, #1
 800791c:	e7ee      	b.n	80078fc <__libc_init_array+0xc>
 800791e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007922:	4798      	blx	r3
 8007924:	3601      	adds	r6, #1
 8007926:	e7f2      	b.n	800790e <__libc_init_array+0x1e>
 8007928:	0800a29c 	.word	0x0800a29c
 800792c:	0800a29c 	.word	0x0800a29c
 8007930:	0800a29c 	.word	0x0800a29c
 8007934:	0800a2a0 	.word	0x0800a2a0

08007938 <__retarget_lock_init_recursive>:
 8007938:	4770      	bx	lr

0800793a <__retarget_lock_acquire_recursive>:
 800793a:	4770      	bx	lr

0800793c <__retarget_lock_release_recursive>:
 800793c:	4770      	bx	lr

0800793e <quorem>:
 800793e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007942:	6903      	ldr	r3, [r0, #16]
 8007944:	690c      	ldr	r4, [r1, #16]
 8007946:	42a3      	cmp	r3, r4
 8007948:	4607      	mov	r7, r0
 800794a:	db7e      	blt.n	8007a4a <quorem+0x10c>
 800794c:	3c01      	subs	r4, #1
 800794e:	f101 0814 	add.w	r8, r1, #20
 8007952:	00a3      	lsls	r3, r4, #2
 8007954:	f100 0514 	add.w	r5, r0, #20
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007968:	3301      	adds	r3, #1
 800796a:	429a      	cmp	r2, r3
 800796c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007970:	fbb2 f6f3 	udiv	r6, r2, r3
 8007974:	d32e      	bcc.n	80079d4 <quorem+0x96>
 8007976:	f04f 0a00 	mov.w	sl, #0
 800797a:	46c4      	mov	ip, r8
 800797c:	46ae      	mov	lr, r5
 800797e:	46d3      	mov	fp, sl
 8007980:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007984:	b298      	uxth	r0, r3
 8007986:	fb06 a000 	mla	r0, r6, r0, sl
 800798a:	0c02      	lsrs	r2, r0, #16
 800798c:	0c1b      	lsrs	r3, r3, #16
 800798e:	fb06 2303 	mla	r3, r6, r3, r2
 8007992:	f8de 2000 	ldr.w	r2, [lr]
 8007996:	b280      	uxth	r0, r0
 8007998:	b292      	uxth	r2, r2
 800799a:	1a12      	subs	r2, r2, r0
 800799c:	445a      	add	r2, fp
 800799e:	f8de 0000 	ldr.w	r0, [lr]
 80079a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079b0:	b292      	uxth	r2, r2
 80079b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079b6:	45e1      	cmp	r9, ip
 80079b8:	f84e 2b04 	str.w	r2, [lr], #4
 80079bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079c0:	d2de      	bcs.n	8007980 <quorem+0x42>
 80079c2:	9b00      	ldr	r3, [sp, #0]
 80079c4:	58eb      	ldr	r3, [r5, r3]
 80079c6:	b92b      	cbnz	r3, 80079d4 <quorem+0x96>
 80079c8:	9b01      	ldr	r3, [sp, #4]
 80079ca:	3b04      	subs	r3, #4
 80079cc:	429d      	cmp	r5, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	d32f      	bcc.n	8007a32 <quorem+0xf4>
 80079d2:	613c      	str	r4, [r7, #16]
 80079d4:	4638      	mov	r0, r7
 80079d6:	f001 f97d 	bl	8008cd4 <__mcmp>
 80079da:	2800      	cmp	r0, #0
 80079dc:	db25      	blt.n	8007a2a <quorem+0xec>
 80079de:	4629      	mov	r1, r5
 80079e0:	2000      	movs	r0, #0
 80079e2:	f858 2b04 	ldr.w	r2, [r8], #4
 80079e6:	f8d1 c000 	ldr.w	ip, [r1]
 80079ea:	fa1f fe82 	uxth.w	lr, r2
 80079ee:	fa1f f38c 	uxth.w	r3, ip
 80079f2:	eba3 030e 	sub.w	r3, r3, lr
 80079f6:	4403      	add	r3, r0
 80079f8:	0c12      	lsrs	r2, r2, #16
 80079fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80079fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a08:	45c1      	cmp	r9, r8
 8007a0a:	f841 3b04 	str.w	r3, [r1], #4
 8007a0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a12:	d2e6      	bcs.n	80079e2 <quorem+0xa4>
 8007a14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a1c:	b922      	cbnz	r2, 8007a28 <quorem+0xea>
 8007a1e:	3b04      	subs	r3, #4
 8007a20:	429d      	cmp	r5, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	d30b      	bcc.n	8007a3e <quorem+0x100>
 8007a26:	613c      	str	r4, [r7, #16]
 8007a28:	3601      	adds	r6, #1
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	b003      	add	sp, #12
 8007a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	3b04      	subs	r3, #4
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	d1cb      	bne.n	80079d2 <quorem+0x94>
 8007a3a:	3c01      	subs	r4, #1
 8007a3c:	e7c6      	b.n	80079cc <quorem+0x8e>
 8007a3e:	6812      	ldr	r2, [r2, #0]
 8007a40:	3b04      	subs	r3, #4
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d1ef      	bne.n	8007a26 <quorem+0xe8>
 8007a46:	3c01      	subs	r4, #1
 8007a48:	e7ea      	b.n	8007a20 <quorem+0xe2>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e7ee      	b.n	8007a2c <quorem+0xee>
	...

08007a50 <_dtoa_r>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	69c7      	ldr	r7, [r0, #28]
 8007a56:	b097      	sub	sp, #92	@ 0x5c
 8007a58:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007a5c:	ec55 4b10 	vmov	r4, r5, d0
 8007a60:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007a62:	9107      	str	r1, [sp, #28]
 8007a64:	4681      	mov	r9, r0
 8007a66:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a68:	9311      	str	r3, [sp, #68]	@ 0x44
 8007a6a:	b97f      	cbnz	r7, 8007a8c <_dtoa_r+0x3c>
 8007a6c:	2010      	movs	r0, #16
 8007a6e:	f000 fe09 	bl	8008684 <malloc>
 8007a72:	4602      	mov	r2, r0
 8007a74:	f8c9 001c 	str.w	r0, [r9, #28]
 8007a78:	b920      	cbnz	r0, 8007a84 <_dtoa_r+0x34>
 8007a7a:	4ba9      	ldr	r3, [pc, #676]	@ (8007d20 <_dtoa_r+0x2d0>)
 8007a7c:	21ef      	movs	r1, #239	@ 0xef
 8007a7e:	48a9      	ldr	r0, [pc, #676]	@ (8007d24 <_dtoa_r+0x2d4>)
 8007a80:	f001 fafa 	bl	8009078 <__assert_func>
 8007a84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a88:	6007      	str	r7, [r0, #0]
 8007a8a:	60c7      	str	r7, [r0, #12]
 8007a8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a90:	6819      	ldr	r1, [r3, #0]
 8007a92:	b159      	cbz	r1, 8007aac <_dtoa_r+0x5c>
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	604a      	str	r2, [r1, #4]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4093      	lsls	r3, r2
 8007a9c:	608b      	str	r3, [r1, #8]
 8007a9e:	4648      	mov	r0, r9
 8007aa0:	f000 fee6 	bl	8008870 <_Bfree>
 8007aa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	1e2b      	subs	r3, r5, #0
 8007aae:	bfb9      	ittee	lt
 8007ab0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ab4:	9305      	strlt	r3, [sp, #20]
 8007ab6:	2300      	movge	r3, #0
 8007ab8:	6033      	strge	r3, [r6, #0]
 8007aba:	9f05      	ldr	r7, [sp, #20]
 8007abc:	4b9a      	ldr	r3, [pc, #616]	@ (8007d28 <_dtoa_r+0x2d8>)
 8007abe:	bfbc      	itt	lt
 8007ac0:	2201      	movlt	r2, #1
 8007ac2:	6032      	strlt	r2, [r6, #0]
 8007ac4:	43bb      	bics	r3, r7
 8007ac6:	d112      	bne.n	8007aee <_dtoa_r+0x9e>
 8007ac8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007aca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ad4:	4323      	orrs	r3, r4
 8007ad6:	f000 855a 	beq.w	800858e <_dtoa_r+0xb3e>
 8007ada:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007adc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007d3c <_dtoa_r+0x2ec>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 855c 	beq.w	800859e <_dtoa_r+0xb4e>
 8007ae6:	f10a 0303 	add.w	r3, sl, #3
 8007aea:	f000 bd56 	b.w	800859a <_dtoa_r+0xb4a>
 8007aee:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007af2:	2200      	movs	r2, #0
 8007af4:	ec51 0b17 	vmov	r0, r1, d7
 8007af8:	2300      	movs	r3, #0
 8007afa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007afe:	f7f8 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b02:	4680      	mov	r8, r0
 8007b04:	b158      	cbz	r0, 8007b1e <_dtoa_r+0xce>
 8007b06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007b08:	2301      	movs	r3, #1
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b0e:	b113      	cbz	r3, 8007b16 <_dtoa_r+0xc6>
 8007b10:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007b12:	4b86      	ldr	r3, [pc, #536]	@ (8007d2c <_dtoa_r+0x2dc>)
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007d40 <_dtoa_r+0x2f0>
 8007b1a:	f000 bd40 	b.w	800859e <_dtoa_r+0xb4e>
 8007b1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007b22:	aa14      	add	r2, sp, #80	@ 0x50
 8007b24:	a915      	add	r1, sp, #84	@ 0x54
 8007b26:	4648      	mov	r0, r9
 8007b28:	f001 f984 	bl	8008e34 <__d2b>
 8007b2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b30:	9002      	str	r0, [sp, #8]
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	d078      	beq.n	8007c28 <_dtoa_r+0x1d8>
 8007b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b38:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b50:	4619      	mov	r1, r3
 8007b52:	2200      	movs	r2, #0
 8007b54:	4b76      	ldr	r3, [pc, #472]	@ (8007d30 <_dtoa_r+0x2e0>)
 8007b56:	f7f8 fb97 	bl	8000288 <__aeabi_dsub>
 8007b5a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007d08 <_dtoa_r+0x2b8>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fd4a 	bl	80005f8 <__aeabi_dmul>
 8007b64:	a36a      	add	r3, pc, #424	@ (adr r3, 8007d10 <_dtoa_r+0x2c0>)
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f7f8 fb8f 	bl	800028c <__adddf3>
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4630      	mov	r0, r6
 8007b72:	460d      	mov	r5, r1
 8007b74:	f7f8 fcd6 	bl	8000524 <__aeabi_i2d>
 8007b78:	a367      	add	r3, pc, #412	@ (adr r3, 8007d18 <_dtoa_r+0x2c8>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	f7f8 fd3b 	bl	80005f8 <__aeabi_dmul>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4620      	mov	r0, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7f8 fb7f 	bl	800028c <__adddf3>
 8007b8e:	4604      	mov	r4, r0
 8007b90:	460d      	mov	r5, r1
 8007b92:	f7f8 ffe1 	bl	8000b58 <__aeabi_d2iz>
 8007b96:	2200      	movs	r2, #0
 8007b98:	4607      	mov	r7, r0
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f7f8 ff9c 	bl	8000adc <__aeabi_dcmplt>
 8007ba4:	b140      	cbz	r0, 8007bb8 <_dtoa_r+0x168>
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	f7f8 fcbc 	bl	8000524 <__aeabi_i2d>
 8007bac:	4622      	mov	r2, r4
 8007bae:	462b      	mov	r3, r5
 8007bb0:	f7f8 ff8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bb4:	b900      	cbnz	r0, 8007bb8 <_dtoa_r+0x168>
 8007bb6:	3f01      	subs	r7, #1
 8007bb8:	2f16      	cmp	r7, #22
 8007bba:	d852      	bhi.n	8007c62 <_dtoa_r+0x212>
 8007bbc:	4b5d      	ldr	r3, [pc, #372]	@ (8007d34 <_dtoa_r+0x2e4>)
 8007bbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007bca:	f7f8 ff87 	bl	8000adc <__aeabi_dcmplt>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d049      	beq.n	8007c66 <_dtoa_r+0x216>
 8007bd2:	3f01      	subs	r7, #1
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bda:	1b9b      	subs	r3, r3, r6
 8007bdc:	1e5a      	subs	r2, r3, #1
 8007bde:	bf45      	ittet	mi
 8007be0:	f1c3 0301 	rsbmi	r3, r3, #1
 8007be4:	9300      	strmi	r3, [sp, #0]
 8007be6:	2300      	movpl	r3, #0
 8007be8:	2300      	movmi	r3, #0
 8007bea:	9206      	str	r2, [sp, #24]
 8007bec:	bf54      	ite	pl
 8007bee:	9300      	strpl	r3, [sp, #0]
 8007bf0:	9306      	strmi	r3, [sp, #24]
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	db39      	blt.n	8007c6a <_dtoa_r+0x21a>
 8007bf6:	9b06      	ldr	r3, [sp, #24]
 8007bf8:	970d      	str	r7, [sp, #52]	@ 0x34
 8007bfa:	443b      	add	r3, r7
 8007bfc:	9306      	str	r3, [sp, #24]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9308      	str	r3, [sp, #32]
 8007c02:	9b07      	ldr	r3, [sp, #28]
 8007c04:	2b09      	cmp	r3, #9
 8007c06:	d863      	bhi.n	8007cd0 <_dtoa_r+0x280>
 8007c08:	2b05      	cmp	r3, #5
 8007c0a:	bfc4      	itt	gt
 8007c0c:	3b04      	subgt	r3, #4
 8007c0e:	9307      	strgt	r3, [sp, #28]
 8007c10:	9b07      	ldr	r3, [sp, #28]
 8007c12:	f1a3 0302 	sub.w	r3, r3, #2
 8007c16:	bfcc      	ite	gt
 8007c18:	2400      	movgt	r4, #0
 8007c1a:	2401      	movle	r4, #1
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d863      	bhi.n	8007ce8 <_dtoa_r+0x298>
 8007c20:	e8df f003 	tbb	[pc, r3]
 8007c24:	2b375452 	.word	0x2b375452
 8007c28:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007c2c:	441e      	add	r6, r3
 8007c2e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	bfc1      	itttt	gt
 8007c36:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c3a:	409f      	lslgt	r7, r3
 8007c3c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c40:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c44:	bfd6      	itet	le
 8007c46:	f1c3 0320 	rsble	r3, r3, #32
 8007c4a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007c4e:	fa04 f003 	lslle.w	r0, r4, r3
 8007c52:	f7f8 fc57 	bl	8000504 <__aeabi_ui2d>
 8007c56:	2201      	movs	r2, #1
 8007c58:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c5c:	3e01      	subs	r6, #1
 8007c5e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c60:	e776      	b.n	8007b50 <_dtoa_r+0x100>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e7b7      	b.n	8007bd6 <_dtoa_r+0x186>
 8007c66:	9010      	str	r0, [sp, #64]	@ 0x40
 8007c68:	e7b6      	b.n	8007bd8 <_dtoa_r+0x188>
 8007c6a:	9b00      	ldr	r3, [sp, #0]
 8007c6c:	1bdb      	subs	r3, r3, r7
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	427b      	negs	r3, r7
 8007c72:	9308      	str	r3, [sp, #32]
 8007c74:	2300      	movs	r3, #0
 8007c76:	930d      	str	r3, [sp, #52]	@ 0x34
 8007c78:	e7c3      	b.n	8007c02 <_dtoa_r+0x1b2>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c80:	eb07 0b03 	add.w	fp, r7, r3
 8007c84:	f10b 0301 	add.w	r3, fp, #1
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	9303      	str	r3, [sp, #12]
 8007c8c:	bfb8      	it	lt
 8007c8e:	2301      	movlt	r3, #1
 8007c90:	e006      	b.n	8007ca0 <_dtoa_r+0x250>
 8007c92:	2301      	movs	r3, #1
 8007c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	dd28      	ble.n	8007cee <_dtoa_r+0x29e>
 8007c9c:	469b      	mov	fp, r3
 8007c9e:	9303      	str	r3, [sp, #12]
 8007ca0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	2204      	movs	r2, #4
 8007ca8:	f102 0514 	add.w	r5, r2, #20
 8007cac:	429d      	cmp	r5, r3
 8007cae:	d926      	bls.n	8007cfe <_dtoa_r+0x2ae>
 8007cb0:	6041      	str	r1, [r0, #4]
 8007cb2:	4648      	mov	r0, r9
 8007cb4:	f000 fd9c 	bl	80087f0 <_Balloc>
 8007cb8:	4682      	mov	sl, r0
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d142      	bne.n	8007d44 <_dtoa_r+0x2f4>
 8007cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8007d38 <_dtoa_r+0x2e8>)
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007cc6:	e6da      	b.n	8007a7e <_dtoa_r+0x2e>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e7e3      	b.n	8007c94 <_dtoa_r+0x244>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	e7d5      	b.n	8007c7c <_dtoa_r+0x22c>
 8007cd0:	2401      	movs	r4, #1
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9307      	str	r3, [sp, #28]
 8007cd6:	9409      	str	r4, [sp, #36]	@ 0x24
 8007cd8:	f04f 3bff 	mov.w	fp, #4294967295
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8cd b00c 	str.w	fp, [sp, #12]
 8007ce2:	2312      	movs	r3, #18
 8007ce4:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ce6:	e7db      	b.n	8007ca0 <_dtoa_r+0x250>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cec:	e7f4      	b.n	8007cd8 <_dtoa_r+0x288>
 8007cee:	f04f 0b01 	mov.w	fp, #1
 8007cf2:	f8cd b00c 	str.w	fp, [sp, #12]
 8007cf6:	465b      	mov	r3, fp
 8007cf8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007cfc:	e7d0      	b.n	8007ca0 <_dtoa_r+0x250>
 8007cfe:	3101      	adds	r1, #1
 8007d00:	0052      	lsls	r2, r2, #1
 8007d02:	e7d1      	b.n	8007ca8 <_dtoa_r+0x258>
 8007d04:	f3af 8000 	nop.w
 8007d08:	636f4361 	.word	0x636f4361
 8007d0c:	3fd287a7 	.word	0x3fd287a7
 8007d10:	8b60c8b3 	.word	0x8b60c8b3
 8007d14:	3fc68a28 	.word	0x3fc68a28
 8007d18:	509f79fb 	.word	0x509f79fb
 8007d1c:	3fd34413 	.word	0x3fd34413
 8007d20:	08009f61 	.word	0x08009f61
 8007d24:	08009f78 	.word	0x08009f78
 8007d28:	7ff00000 	.word	0x7ff00000
 8007d2c:	08009f31 	.word	0x08009f31
 8007d30:	3ff80000 	.word	0x3ff80000
 8007d34:	0800a0c8 	.word	0x0800a0c8
 8007d38:	08009fd0 	.word	0x08009fd0
 8007d3c:	08009f5d 	.word	0x08009f5d
 8007d40:	08009f30 	.word	0x08009f30
 8007d44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d48:	6018      	str	r0, [r3, #0]
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	2b0e      	cmp	r3, #14
 8007d4e:	f200 80a1 	bhi.w	8007e94 <_dtoa_r+0x444>
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	f000 809e 	beq.w	8007e94 <_dtoa_r+0x444>
 8007d58:	2f00      	cmp	r7, #0
 8007d5a:	dd33      	ble.n	8007dc4 <_dtoa_r+0x374>
 8007d5c:	4b9c      	ldr	r3, [pc, #624]	@ (8007fd0 <_dtoa_r+0x580>)
 8007d5e:	f007 020f 	and.w	r2, r7, #15
 8007d62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d66:	ed93 7b00 	vldr	d7, [r3]
 8007d6a:	05f8      	lsls	r0, r7, #23
 8007d6c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007d70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d74:	d516      	bpl.n	8007da4 <_dtoa_r+0x354>
 8007d76:	4b97      	ldr	r3, [pc, #604]	@ (8007fd4 <_dtoa_r+0x584>)
 8007d78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d80:	f7f8 fd64 	bl	800084c <__aeabi_ddiv>
 8007d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d88:	f004 040f 	and.w	r4, r4, #15
 8007d8c:	2603      	movs	r6, #3
 8007d8e:	4d91      	ldr	r5, [pc, #580]	@ (8007fd4 <_dtoa_r+0x584>)
 8007d90:	b954      	cbnz	r4, 8007da8 <_dtoa_r+0x358>
 8007d92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d9a:	f7f8 fd57 	bl	800084c <__aeabi_ddiv>
 8007d9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007da2:	e028      	b.n	8007df6 <_dtoa_r+0x3a6>
 8007da4:	2602      	movs	r6, #2
 8007da6:	e7f2      	b.n	8007d8e <_dtoa_r+0x33e>
 8007da8:	07e1      	lsls	r1, r4, #31
 8007daa:	d508      	bpl.n	8007dbe <_dtoa_r+0x36e>
 8007dac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007db0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007db4:	f7f8 fc20 	bl	80005f8 <__aeabi_dmul>
 8007db8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007dbc:	3601      	adds	r6, #1
 8007dbe:	1064      	asrs	r4, r4, #1
 8007dc0:	3508      	adds	r5, #8
 8007dc2:	e7e5      	b.n	8007d90 <_dtoa_r+0x340>
 8007dc4:	f000 80af 	beq.w	8007f26 <_dtoa_r+0x4d6>
 8007dc8:	427c      	negs	r4, r7
 8007dca:	4b81      	ldr	r3, [pc, #516]	@ (8007fd0 <_dtoa_r+0x580>)
 8007dcc:	4d81      	ldr	r5, [pc, #516]	@ (8007fd4 <_dtoa_r+0x584>)
 8007dce:	f004 020f 	and.w	r2, r4, #15
 8007dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007dde:	f7f8 fc0b 	bl	80005f8 <__aeabi_dmul>
 8007de2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007de6:	1124      	asrs	r4, r4, #4
 8007de8:	2300      	movs	r3, #0
 8007dea:	2602      	movs	r6, #2
 8007dec:	2c00      	cmp	r4, #0
 8007dee:	f040 808f 	bne.w	8007f10 <_dtoa_r+0x4c0>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1d3      	bne.n	8007d9e <_dtoa_r+0x34e>
 8007df6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007df8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8094 	beq.w	8007f2a <_dtoa_r+0x4da>
 8007e02:	4b75      	ldr	r3, [pc, #468]	@ (8007fd8 <_dtoa_r+0x588>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	4620      	mov	r0, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7f8 fe67 	bl	8000adc <__aeabi_dcmplt>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f000 808b 	beq.w	8007f2a <_dtoa_r+0x4da>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 8087 	beq.w	8007f2a <_dtoa_r+0x4da>
 8007e1c:	f1bb 0f00 	cmp.w	fp, #0
 8007e20:	dd34      	ble.n	8007e8c <_dtoa_r+0x43c>
 8007e22:	4620      	mov	r0, r4
 8007e24:	4b6d      	ldr	r3, [pc, #436]	@ (8007fdc <_dtoa_r+0x58c>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	4629      	mov	r1, r5
 8007e2a:	f7f8 fbe5 	bl	80005f8 <__aeabi_dmul>
 8007e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e32:	f107 38ff 	add.w	r8, r7, #4294967295
 8007e36:	3601      	adds	r6, #1
 8007e38:	465c      	mov	r4, fp
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f7f8 fb72 	bl	8000524 <__aeabi_i2d>
 8007e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e44:	f7f8 fbd8 	bl	80005f8 <__aeabi_dmul>
 8007e48:	4b65      	ldr	r3, [pc, #404]	@ (8007fe0 <_dtoa_r+0x590>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f7f8 fa1e 	bl	800028c <__adddf3>
 8007e50:	4605      	mov	r5, r0
 8007e52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e56:	2c00      	cmp	r4, #0
 8007e58:	d16a      	bne.n	8007f30 <_dtoa_r+0x4e0>
 8007e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e5e:	4b61      	ldr	r3, [pc, #388]	@ (8007fe4 <_dtoa_r+0x594>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	f7f8 fa11 	bl	8000288 <__aeabi_dsub>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e6e:	462a      	mov	r2, r5
 8007e70:	4633      	mov	r3, r6
 8007e72:	f7f8 fe51 	bl	8000b18 <__aeabi_dcmpgt>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f040 8298 	bne.w	80083ac <_dtoa_r+0x95c>
 8007e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e80:	462a      	mov	r2, r5
 8007e82:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e86:	f7f8 fe29 	bl	8000adc <__aeabi_dcmplt>
 8007e8a:	bb38      	cbnz	r0, 8007edc <_dtoa_r+0x48c>
 8007e8c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007e90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f2c0 8157 	blt.w	800814a <_dtoa_r+0x6fa>
 8007e9c:	2f0e      	cmp	r7, #14
 8007e9e:	f300 8154 	bgt.w	800814a <_dtoa_r+0x6fa>
 8007ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8007fd0 <_dtoa_r+0x580>)
 8007ea4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ea8:	ed93 7b00 	vldr	d7, [r3]
 8007eac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	ed8d 7b00 	vstr	d7, [sp]
 8007eb4:	f280 80e5 	bge.w	8008082 <_dtoa_r+0x632>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f300 80e1 	bgt.w	8008082 <_dtoa_r+0x632>
 8007ec0:	d10c      	bne.n	8007edc <_dtoa_r+0x48c>
 8007ec2:	4b48      	ldr	r3, [pc, #288]	@ (8007fe4 <_dtoa_r+0x594>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	ec51 0b17 	vmov	r0, r1, d7
 8007eca:	f7f8 fb95 	bl	80005f8 <__aeabi_dmul>
 8007ece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ed2:	f7f8 fe17 	bl	8000b04 <__aeabi_dcmpge>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f000 8266 	beq.w	80083a8 <_dtoa_r+0x958>
 8007edc:	2400      	movs	r4, #0
 8007ede:	4625      	mov	r5, r4
 8007ee0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ee2:	4656      	mov	r6, sl
 8007ee4:	ea6f 0803 	mvn.w	r8, r3
 8007ee8:	2700      	movs	r7, #0
 8007eea:	4621      	mov	r1, r4
 8007eec:	4648      	mov	r0, r9
 8007eee:	f000 fcbf 	bl	8008870 <_Bfree>
 8007ef2:	2d00      	cmp	r5, #0
 8007ef4:	f000 80bd 	beq.w	8008072 <_dtoa_r+0x622>
 8007ef8:	b12f      	cbz	r7, 8007f06 <_dtoa_r+0x4b6>
 8007efa:	42af      	cmp	r7, r5
 8007efc:	d003      	beq.n	8007f06 <_dtoa_r+0x4b6>
 8007efe:	4639      	mov	r1, r7
 8007f00:	4648      	mov	r0, r9
 8007f02:	f000 fcb5 	bl	8008870 <_Bfree>
 8007f06:	4629      	mov	r1, r5
 8007f08:	4648      	mov	r0, r9
 8007f0a:	f000 fcb1 	bl	8008870 <_Bfree>
 8007f0e:	e0b0      	b.n	8008072 <_dtoa_r+0x622>
 8007f10:	07e2      	lsls	r2, r4, #31
 8007f12:	d505      	bpl.n	8007f20 <_dtoa_r+0x4d0>
 8007f14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f18:	f7f8 fb6e 	bl	80005f8 <__aeabi_dmul>
 8007f1c:	3601      	adds	r6, #1
 8007f1e:	2301      	movs	r3, #1
 8007f20:	1064      	asrs	r4, r4, #1
 8007f22:	3508      	adds	r5, #8
 8007f24:	e762      	b.n	8007dec <_dtoa_r+0x39c>
 8007f26:	2602      	movs	r6, #2
 8007f28:	e765      	b.n	8007df6 <_dtoa_r+0x3a6>
 8007f2a:	9c03      	ldr	r4, [sp, #12]
 8007f2c:	46b8      	mov	r8, r7
 8007f2e:	e784      	b.n	8007e3a <_dtoa_r+0x3ea>
 8007f30:	4b27      	ldr	r3, [pc, #156]	@ (8007fd0 <_dtoa_r+0x580>)
 8007f32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f3c:	4454      	add	r4, sl
 8007f3e:	2900      	cmp	r1, #0
 8007f40:	d054      	beq.n	8007fec <_dtoa_r+0x59c>
 8007f42:	4929      	ldr	r1, [pc, #164]	@ (8007fe8 <_dtoa_r+0x598>)
 8007f44:	2000      	movs	r0, #0
 8007f46:	f7f8 fc81 	bl	800084c <__aeabi_ddiv>
 8007f4a:	4633      	mov	r3, r6
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	f7f8 f99b 	bl	8000288 <__aeabi_dsub>
 8007f52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f56:	4656      	mov	r6, sl
 8007f58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f5c:	f7f8 fdfc 	bl	8000b58 <__aeabi_d2iz>
 8007f60:	4605      	mov	r5, r0
 8007f62:	f7f8 fadf 	bl	8000524 <__aeabi_i2d>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f6e:	f7f8 f98b 	bl	8000288 <__aeabi_dsub>
 8007f72:	3530      	adds	r5, #48	@ 0x30
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f7c:	f806 5b01 	strb.w	r5, [r6], #1
 8007f80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f84:	f7f8 fdaa 	bl	8000adc <__aeabi_dcmplt>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d172      	bne.n	8008072 <_dtoa_r+0x622>
 8007f8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f90:	4911      	ldr	r1, [pc, #68]	@ (8007fd8 <_dtoa_r+0x588>)
 8007f92:	2000      	movs	r0, #0
 8007f94:	f7f8 f978 	bl	8000288 <__aeabi_dsub>
 8007f98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f9c:	f7f8 fd9e 	bl	8000adc <__aeabi_dcmplt>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f040 80b4 	bne.w	800810e <_dtoa_r+0x6be>
 8007fa6:	42a6      	cmp	r6, r4
 8007fa8:	f43f af70 	beq.w	8007e8c <_dtoa_r+0x43c>
 8007fac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007fdc <_dtoa_r+0x58c>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f7f8 fb20 	bl	80005f8 <__aeabi_dmul>
 8007fb8:	4b08      	ldr	r3, [pc, #32]	@ (8007fdc <_dtoa_r+0x58c>)
 8007fba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fc4:	f7f8 fb18 	bl	80005f8 <__aeabi_dmul>
 8007fc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fcc:	e7c4      	b.n	8007f58 <_dtoa_r+0x508>
 8007fce:	bf00      	nop
 8007fd0:	0800a0c8 	.word	0x0800a0c8
 8007fd4:	0800a0a0 	.word	0x0800a0a0
 8007fd8:	3ff00000 	.word	0x3ff00000
 8007fdc:	40240000 	.word	0x40240000
 8007fe0:	401c0000 	.word	0x401c0000
 8007fe4:	40140000 	.word	0x40140000
 8007fe8:	3fe00000 	.word	0x3fe00000
 8007fec:	4631      	mov	r1, r6
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f7f8 fb02 	bl	80005f8 <__aeabi_dmul>
 8007ff4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ff8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007ffa:	4656      	mov	r6, sl
 8007ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008000:	f7f8 fdaa 	bl	8000b58 <__aeabi_d2iz>
 8008004:	4605      	mov	r5, r0
 8008006:	f7f8 fa8d 	bl	8000524 <__aeabi_i2d>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008012:	f7f8 f939 	bl	8000288 <__aeabi_dsub>
 8008016:	3530      	adds	r5, #48	@ 0x30
 8008018:	f806 5b01 	strb.w	r5, [r6], #1
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	42a6      	cmp	r6, r4
 8008022:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008026:	f04f 0200 	mov.w	r2, #0
 800802a:	d124      	bne.n	8008076 <_dtoa_r+0x626>
 800802c:	4baf      	ldr	r3, [pc, #700]	@ (80082ec <_dtoa_r+0x89c>)
 800802e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008032:	f7f8 f92b 	bl	800028c <__adddf3>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800803e:	f7f8 fd6b 	bl	8000b18 <__aeabi_dcmpgt>
 8008042:	2800      	cmp	r0, #0
 8008044:	d163      	bne.n	800810e <_dtoa_r+0x6be>
 8008046:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800804a:	49a8      	ldr	r1, [pc, #672]	@ (80082ec <_dtoa_r+0x89c>)
 800804c:	2000      	movs	r0, #0
 800804e:	f7f8 f91b 	bl	8000288 <__aeabi_dsub>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800805a:	f7f8 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800805e:	2800      	cmp	r0, #0
 8008060:	f43f af14 	beq.w	8007e8c <_dtoa_r+0x43c>
 8008064:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008066:	1e73      	subs	r3, r6, #1
 8008068:	9313      	str	r3, [sp, #76]	@ 0x4c
 800806a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800806e:	2b30      	cmp	r3, #48	@ 0x30
 8008070:	d0f8      	beq.n	8008064 <_dtoa_r+0x614>
 8008072:	4647      	mov	r7, r8
 8008074:	e03b      	b.n	80080ee <_dtoa_r+0x69e>
 8008076:	4b9e      	ldr	r3, [pc, #632]	@ (80082f0 <_dtoa_r+0x8a0>)
 8008078:	f7f8 fabe 	bl	80005f8 <__aeabi_dmul>
 800807c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008080:	e7bc      	b.n	8007ffc <_dtoa_r+0x5ac>
 8008082:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008086:	4656      	mov	r6, sl
 8008088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800808c:	4620      	mov	r0, r4
 800808e:	4629      	mov	r1, r5
 8008090:	f7f8 fbdc 	bl	800084c <__aeabi_ddiv>
 8008094:	f7f8 fd60 	bl	8000b58 <__aeabi_d2iz>
 8008098:	4680      	mov	r8, r0
 800809a:	f7f8 fa43 	bl	8000524 <__aeabi_i2d>
 800809e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080a2:	f7f8 faa9 	bl	80005f8 <__aeabi_dmul>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4620      	mov	r0, r4
 80080ac:	4629      	mov	r1, r5
 80080ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80080b2:	f7f8 f8e9 	bl	8000288 <__aeabi_dsub>
 80080b6:	f806 4b01 	strb.w	r4, [r6], #1
 80080ba:	9d03      	ldr	r5, [sp, #12]
 80080bc:	eba6 040a 	sub.w	r4, r6, sl
 80080c0:	42a5      	cmp	r5, r4
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	d133      	bne.n	8008130 <_dtoa_r+0x6e0>
 80080c8:	f7f8 f8e0 	bl	800028c <__adddf3>
 80080cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080d0:	4604      	mov	r4, r0
 80080d2:	460d      	mov	r5, r1
 80080d4:	f7f8 fd20 	bl	8000b18 <__aeabi_dcmpgt>
 80080d8:	b9c0      	cbnz	r0, 800810c <_dtoa_r+0x6bc>
 80080da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080de:	4620      	mov	r0, r4
 80080e0:	4629      	mov	r1, r5
 80080e2:	f7f8 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80080e6:	b110      	cbz	r0, 80080ee <_dtoa_r+0x69e>
 80080e8:	f018 0f01 	tst.w	r8, #1
 80080ec:	d10e      	bne.n	800810c <_dtoa_r+0x6bc>
 80080ee:	9902      	ldr	r1, [sp, #8]
 80080f0:	4648      	mov	r0, r9
 80080f2:	f000 fbbd 	bl	8008870 <_Bfree>
 80080f6:	2300      	movs	r3, #0
 80080f8:	7033      	strb	r3, [r6, #0]
 80080fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080fc:	3701      	adds	r7, #1
 80080fe:	601f      	str	r7, [r3, #0]
 8008100:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 824b 	beq.w	800859e <_dtoa_r+0xb4e>
 8008108:	601e      	str	r6, [r3, #0]
 800810a:	e248      	b.n	800859e <_dtoa_r+0xb4e>
 800810c:	46b8      	mov	r8, r7
 800810e:	4633      	mov	r3, r6
 8008110:	461e      	mov	r6, r3
 8008112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008116:	2a39      	cmp	r2, #57	@ 0x39
 8008118:	d106      	bne.n	8008128 <_dtoa_r+0x6d8>
 800811a:	459a      	cmp	sl, r3
 800811c:	d1f8      	bne.n	8008110 <_dtoa_r+0x6c0>
 800811e:	2230      	movs	r2, #48	@ 0x30
 8008120:	f108 0801 	add.w	r8, r8, #1
 8008124:	f88a 2000 	strb.w	r2, [sl]
 8008128:	781a      	ldrb	r2, [r3, #0]
 800812a:	3201      	adds	r2, #1
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e7a0      	b.n	8008072 <_dtoa_r+0x622>
 8008130:	4b6f      	ldr	r3, [pc, #444]	@ (80082f0 <_dtoa_r+0x8a0>)
 8008132:	2200      	movs	r2, #0
 8008134:	f7f8 fa60 	bl	80005f8 <__aeabi_dmul>
 8008138:	2200      	movs	r2, #0
 800813a:	2300      	movs	r3, #0
 800813c:	4604      	mov	r4, r0
 800813e:	460d      	mov	r5, r1
 8008140:	f7f8 fcc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008144:	2800      	cmp	r0, #0
 8008146:	d09f      	beq.n	8008088 <_dtoa_r+0x638>
 8008148:	e7d1      	b.n	80080ee <_dtoa_r+0x69e>
 800814a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800814c:	2a00      	cmp	r2, #0
 800814e:	f000 80ea 	beq.w	8008326 <_dtoa_r+0x8d6>
 8008152:	9a07      	ldr	r2, [sp, #28]
 8008154:	2a01      	cmp	r2, #1
 8008156:	f300 80cd 	bgt.w	80082f4 <_dtoa_r+0x8a4>
 800815a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800815c:	2a00      	cmp	r2, #0
 800815e:	f000 80c1 	beq.w	80082e4 <_dtoa_r+0x894>
 8008162:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008166:	9c08      	ldr	r4, [sp, #32]
 8008168:	9e00      	ldr	r6, [sp, #0]
 800816a:	9a00      	ldr	r2, [sp, #0]
 800816c:	441a      	add	r2, r3
 800816e:	9200      	str	r2, [sp, #0]
 8008170:	9a06      	ldr	r2, [sp, #24]
 8008172:	2101      	movs	r1, #1
 8008174:	441a      	add	r2, r3
 8008176:	4648      	mov	r0, r9
 8008178:	9206      	str	r2, [sp, #24]
 800817a:	f000 fc2d 	bl	80089d8 <__i2b>
 800817e:	4605      	mov	r5, r0
 8008180:	b166      	cbz	r6, 800819c <_dtoa_r+0x74c>
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	dd09      	ble.n	800819c <_dtoa_r+0x74c>
 8008188:	42b3      	cmp	r3, r6
 800818a:	9a00      	ldr	r2, [sp, #0]
 800818c:	bfa8      	it	ge
 800818e:	4633      	movge	r3, r6
 8008190:	1ad2      	subs	r2, r2, r3
 8008192:	9200      	str	r2, [sp, #0]
 8008194:	9a06      	ldr	r2, [sp, #24]
 8008196:	1af6      	subs	r6, r6, r3
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	9306      	str	r3, [sp, #24]
 800819c:	9b08      	ldr	r3, [sp, #32]
 800819e:	b30b      	cbz	r3, 80081e4 <_dtoa_r+0x794>
 80081a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 80c6 	beq.w	8008334 <_dtoa_r+0x8e4>
 80081a8:	2c00      	cmp	r4, #0
 80081aa:	f000 80c0 	beq.w	800832e <_dtoa_r+0x8de>
 80081ae:	4629      	mov	r1, r5
 80081b0:	4622      	mov	r2, r4
 80081b2:	4648      	mov	r0, r9
 80081b4:	f000 fcc8 	bl	8008b48 <__pow5mult>
 80081b8:	9a02      	ldr	r2, [sp, #8]
 80081ba:	4601      	mov	r1, r0
 80081bc:	4605      	mov	r5, r0
 80081be:	4648      	mov	r0, r9
 80081c0:	f000 fc20 	bl	8008a04 <__multiply>
 80081c4:	9902      	ldr	r1, [sp, #8]
 80081c6:	4680      	mov	r8, r0
 80081c8:	4648      	mov	r0, r9
 80081ca:	f000 fb51 	bl	8008870 <_Bfree>
 80081ce:	9b08      	ldr	r3, [sp, #32]
 80081d0:	1b1b      	subs	r3, r3, r4
 80081d2:	9308      	str	r3, [sp, #32]
 80081d4:	f000 80b1 	beq.w	800833a <_dtoa_r+0x8ea>
 80081d8:	9a08      	ldr	r2, [sp, #32]
 80081da:	4641      	mov	r1, r8
 80081dc:	4648      	mov	r0, r9
 80081de:	f000 fcb3 	bl	8008b48 <__pow5mult>
 80081e2:	9002      	str	r0, [sp, #8]
 80081e4:	2101      	movs	r1, #1
 80081e6:	4648      	mov	r0, r9
 80081e8:	f000 fbf6 	bl	80089d8 <__i2b>
 80081ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081ee:	4604      	mov	r4, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 81d8 	beq.w	80085a6 <_dtoa_r+0xb56>
 80081f6:	461a      	mov	r2, r3
 80081f8:	4601      	mov	r1, r0
 80081fa:	4648      	mov	r0, r9
 80081fc:	f000 fca4 	bl	8008b48 <__pow5mult>
 8008200:	9b07      	ldr	r3, [sp, #28]
 8008202:	2b01      	cmp	r3, #1
 8008204:	4604      	mov	r4, r0
 8008206:	f300 809f 	bgt.w	8008348 <_dtoa_r+0x8f8>
 800820a:	9b04      	ldr	r3, [sp, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f040 8097 	bne.w	8008340 <_dtoa_r+0x8f0>
 8008212:	9b05      	ldr	r3, [sp, #20]
 8008214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008218:	2b00      	cmp	r3, #0
 800821a:	f040 8093 	bne.w	8008344 <_dtoa_r+0x8f4>
 800821e:	9b05      	ldr	r3, [sp, #20]
 8008220:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008224:	0d1b      	lsrs	r3, r3, #20
 8008226:	051b      	lsls	r3, r3, #20
 8008228:	b133      	cbz	r3, 8008238 <_dtoa_r+0x7e8>
 800822a:	9b00      	ldr	r3, [sp, #0]
 800822c:	3301      	adds	r3, #1
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	9b06      	ldr	r3, [sp, #24]
 8008232:	3301      	adds	r3, #1
 8008234:	9306      	str	r3, [sp, #24]
 8008236:	2301      	movs	r3, #1
 8008238:	9308      	str	r3, [sp, #32]
 800823a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 81b8 	beq.w	80085b2 <_dtoa_r+0xb62>
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008248:	6918      	ldr	r0, [r3, #16]
 800824a:	f000 fb79 	bl	8008940 <__hi0bits>
 800824e:	f1c0 0020 	rsb	r0, r0, #32
 8008252:	9b06      	ldr	r3, [sp, #24]
 8008254:	4418      	add	r0, r3
 8008256:	f010 001f 	ands.w	r0, r0, #31
 800825a:	f000 8082 	beq.w	8008362 <_dtoa_r+0x912>
 800825e:	f1c0 0320 	rsb	r3, r0, #32
 8008262:	2b04      	cmp	r3, #4
 8008264:	dd73      	ble.n	800834e <_dtoa_r+0x8fe>
 8008266:	9b00      	ldr	r3, [sp, #0]
 8008268:	f1c0 001c 	rsb	r0, r0, #28
 800826c:	4403      	add	r3, r0
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	9b06      	ldr	r3, [sp, #24]
 8008272:	4403      	add	r3, r0
 8008274:	4406      	add	r6, r0
 8008276:	9306      	str	r3, [sp, #24]
 8008278:	9b00      	ldr	r3, [sp, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd05      	ble.n	800828a <_dtoa_r+0x83a>
 800827e:	9902      	ldr	r1, [sp, #8]
 8008280:	461a      	mov	r2, r3
 8008282:	4648      	mov	r0, r9
 8008284:	f000 fcba 	bl	8008bfc <__lshift>
 8008288:	9002      	str	r0, [sp, #8]
 800828a:	9b06      	ldr	r3, [sp, #24]
 800828c:	2b00      	cmp	r3, #0
 800828e:	dd05      	ble.n	800829c <_dtoa_r+0x84c>
 8008290:	4621      	mov	r1, r4
 8008292:	461a      	mov	r2, r3
 8008294:	4648      	mov	r0, r9
 8008296:	f000 fcb1 	bl	8008bfc <__lshift>
 800829a:	4604      	mov	r4, r0
 800829c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d061      	beq.n	8008366 <_dtoa_r+0x916>
 80082a2:	9802      	ldr	r0, [sp, #8]
 80082a4:	4621      	mov	r1, r4
 80082a6:	f000 fd15 	bl	8008cd4 <__mcmp>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	da5b      	bge.n	8008366 <_dtoa_r+0x916>
 80082ae:	2300      	movs	r3, #0
 80082b0:	9902      	ldr	r1, [sp, #8]
 80082b2:	220a      	movs	r2, #10
 80082b4:	4648      	mov	r0, r9
 80082b6:	f000 fafd 	bl	80088b4 <__multadd>
 80082ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082bc:	9002      	str	r0, [sp, #8]
 80082be:	f107 38ff 	add.w	r8, r7, #4294967295
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 8177 	beq.w	80085b6 <_dtoa_r+0xb66>
 80082c8:	4629      	mov	r1, r5
 80082ca:	2300      	movs	r3, #0
 80082cc:	220a      	movs	r2, #10
 80082ce:	4648      	mov	r0, r9
 80082d0:	f000 faf0 	bl	80088b4 <__multadd>
 80082d4:	f1bb 0f00 	cmp.w	fp, #0
 80082d8:	4605      	mov	r5, r0
 80082da:	dc6f      	bgt.n	80083bc <_dtoa_r+0x96c>
 80082dc:	9b07      	ldr	r3, [sp, #28]
 80082de:	2b02      	cmp	r3, #2
 80082e0:	dc49      	bgt.n	8008376 <_dtoa_r+0x926>
 80082e2:	e06b      	b.n	80083bc <_dtoa_r+0x96c>
 80082e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80082ea:	e73c      	b.n	8008166 <_dtoa_r+0x716>
 80082ec:	3fe00000 	.word	0x3fe00000
 80082f0:	40240000 	.word	0x40240000
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	1e5c      	subs	r4, r3, #1
 80082f8:	9b08      	ldr	r3, [sp, #32]
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	db09      	blt.n	8008312 <_dtoa_r+0x8c2>
 80082fe:	1b1c      	subs	r4, r3, r4
 8008300:	9b03      	ldr	r3, [sp, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	f6bf af30 	bge.w	8008168 <_dtoa_r+0x718>
 8008308:	9b00      	ldr	r3, [sp, #0]
 800830a:	9a03      	ldr	r2, [sp, #12]
 800830c:	1a9e      	subs	r6, r3, r2
 800830e:	2300      	movs	r3, #0
 8008310:	e72b      	b.n	800816a <_dtoa_r+0x71a>
 8008312:	9b08      	ldr	r3, [sp, #32]
 8008314:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008316:	9408      	str	r4, [sp, #32]
 8008318:	1ae3      	subs	r3, r4, r3
 800831a:	441a      	add	r2, r3
 800831c:	9e00      	ldr	r6, [sp, #0]
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	920d      	str	r2, [sp, #52]	@ 0x34
 8008322:	2400      	movs	r4, #0
 8008324:	e721      	b.n	800816a <_dtoa_r+0x71a>
 8008326:	9c08      	ldr	r4, [sp, #32]
 8008328:	9e00      	ldr	r6, [sp, #0]
 800832a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800832c:	e728      	b.n	8008180 <_dtoa_r+0x730>
 800832e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008332:	e751      	b.n	80081d8 <_dtoa_r+0x788>
 8008334:	9a08      	ldr	r2, [sp, #32]
 8008336:	9902      	ldr	r1, [sp, #8]
 8008338:	e750      	b.n	80081dc <_dtoa_r+0x78c>
 800833a:	f8cd 8008 	str.w	r8, [sp, #8]
 800833e:	e751      	b.n	80081e4 <_dtoa_r+0x794>
 8008340:	2300      	movs	r3, #0
 8008342:	e779      	b.n	8008238 <_dtoa_r+0x7e8>
 8008344:	9b04      	ldr	r3, [sp, #16]
 8008346:	e777      	b.n	8008238 <_dtoa_r+0x7e8>
 8008348:	2300      	movs	r3, #0
 800834a:	9308      	str	r3, [sp, #32]
 800834c:	e779      	b.n	8008242 <_dtoa_r+0x7f2>
 800834e:	d093      	beq.n	8008278 <_dtoa_r+0x828>
 8008350:	9a00      	ldr	r2, [sp, #0]
 8008352:	331c      	adds	r3, #28
 8008354:	441a      	add	r2, r3
 8008356:	9200      	str	r2, [sp, #0]
 8008358:	9a06      	ldr	r2, [sp, #24]
 800835a:	441a      	add	r2, r3
 800835c:	441e      	add	r6, r3
 800835e:	9206      	str	r2, [sp, #24]
 8008360:	e78a      	b.n	8008278 <_dtoa_r+0x828>
 8008362:	4603      	mov	r3, r0
 8008364:	e7f4      	b.n	8008350 <_dtoa_r+0x900>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	46b8      	mov	r8, r7
 800836c:	dc20      	bgt.n	80083b0 <_dtoa_r+0x960>
 800836e:	469b      	mov	fp, r3
 8008370:	9b07      	ldr	r3, [sp, #28]
 8008372:	2b02      	cmp	r3, #2
 8008374:	dd1e      	ble.n	80083b4 <_dtoa_r+0x964>
 8008376:	f1bb 0f00 	cmp.w	fp, #0
 800837a:	f47f adb1 	bne.w	8007ee0 <_dtoa_r+0x490>
 800837e:	4621      	mov	r1, r4
 8008380:	465b      	mov	r3, fp
 8008382:	2205      	movs	r2, #5
 8008384:	4648      	mov	r0, r9
 8008386:	f000 fa95 	bl	80088b4 <__multadd>
 800838a:	4601      	mov	r1, r0
 800838c:	4604      	mov	r4, r0
 800838e:	9802      	ldr	r0, [sp, #8]
 8008390:	f000 fca0 	bl	8008cd4 <__mcmp>
 8008394:	2800      	cmp	r0, #0
 8008396:	f77f ada3 	ble.w	8007ee0 <_dtoa_r+0x490>
 800839a:	4656      	mov	r6, sl
 800839c:	2331      	movs	r3, #49	@ 0x31
 800839e:	f806 3b01 	strb.w	r3, [r6], #1
 80083a2:	f108 0801 	add.w	r8, r8, #1
 80083a6:	e59f      	b.n	8007ee8 <_dtoa_r+0x498>
 80083a8:	9c03      	ldr	r4, [sp, #12]
 80083aa:	46b8      	mov	r8, r7
 80083ac:	4625      	mov	r5, r4
 80083ae:	e7f4      	b.n	800839a <_dtoa_r+0x94a>
 80083b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80083b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 8101 	beq.w	80085be <_dtoa_r+0xb6e>
 80083bc:	2e00      	cmp	r6, #0
 80083be:	dd05      	ble.n	80083cc <_dtoa_r+0x97c>
 80083c0:	4629      	mov	r1, r5
 80083c2:	4632      	mov	r2, r6
 80083c4:	4648      	mov	r0, r9
 80083c6:	f000 fc19 	bl	8008bfc <__lshift>
 80083ca:	4605      	mov	r5, r0
 80083cc:	9b08      	ldr	r3, [sp, #32]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d05c      	beq.n	800848c <_dtoa_r+0xa3c>
 80083d2:	6869      	ldr	r1, [r5, #4]
 80083d4:	4648      	mov	r0, r9
 80083d6:	f000 fa0b 	bl	80087f0 <_Balloc>
 80083da:	4606      	mov	r6, r0
 80083dc:	b928      	cbnz	r0, 80083ea <_dtoa_r+0x99a>
 80083de:	4b82      	ldr	r3, [pc, #520]	@ (80085e8 <_dtoa_r+0xb98>)
 80083e0:	4602      	mov	r2, r0
 80083e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083e6:	f7ff bb4a 	b.w	8007a7e <_dtoa_r+0x2e>
 80083ea:	692a      	ldr	r2, [r5, #16]
 80083ec:	3202      	adds	r2, #2
 80083ee:	0092      	lsls	r2, r2, #2
 80083f0:	f105 010c 	add.w	r1, r5, #12
 80083f4:	300c      	adds	r0, #12
 80083f6:	f000 fe31 	bl	800905c <memcpy>
 80083fa:	2201      	movs	r2, #1
 80083fc:	4631      	mov	r1, r6
 80083fe:	4648      	mov	r0, r9
 8008400:	f000 fbfc 	bl	8008bfc <__lshift>
 8008404:	f10a 0301 	add.w	r3, sl, #1
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	eb0a 030b 	add.w	r3, sl, fp
 800840e:	9308      	str	r3, [sp, #32]
 8008410:	9b04      	ldr	r3, [sp, #16]
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	462f      	mov	r7, r5
 8008418:	9306      	str	r3, [sp, #24]
 800841a:	4605      	mov	r5, r0
 800841c:	9b00      	ldr	r3, [sp, #0]
 800841e:	9802      	ldr	r0, [sp, #8]
 8008420:	4621      	mov	r1, r4
 8008422:	f103 3bff 	add.w	fp, r3, #4294967295
 8008426:	f7ff fa8a 	bl	800793e <quorem>
 800842a:	4603      	mov	r3, r0
 800842c:	3330      	adds	r3, #48	@ 0x30
 800842e:	9003      	str	r0, [sp, #12]
 8008430:	4639      	mov	r1, r7
 8008432:	9802      	ldr	r0, [sp, #8]
 8008434:	9309      	str	r3, [sp, #36]	@ 0x24
 8008436:	f000 fc4d 	bl	8008cd4 <__mcmp>
 800843a:	462a      	mov	r2, r5
 800843c:	9004      	str	r0, [sp, #16]
 800843e:	4621      	mov	r1, r4
 8008440:	4648      	mov	r0, r9
 8008442:	f000 fc63 	bl	8008d0c <__mdiff>
 8008446:	68c2      	ldr	r2, [r0, #12]
 8008448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800844a:	4606      	mov	r6, r0
 800844c:	bb02      	cbnz	r2, 8008490 <_dtoa_r+0xa40>
 800844e:	4601      	mov	r1, r0
 8008450:	9802      	ldr	r0, [sp, #8]
 8008452:	f000 fc3f 	bl	8008cd4 <__mcmp>
 8008456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008458:	4602      	mov	r2, r0
 800845a:	4631      	mov	r1, r6
 800845c:	4648      	mov	r0, r9
 800845e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008460:	9309      	str	r3, [sp, #36]	@ 0x24
 8008462:	f000 fa05 	bl	8008870 <_Bfree>
 8008466:	9b07      	ldr	r3, [sp, #28]
 8008468:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800846a:	9e00      	ldr	r6, [sp, #0]
 800846c:	ea42 0103 	orr.w	r1, r2, r3
 8008470:	9b06      	ldr	r3, [sp, #24]
 8008472:	4319      	orrs	r1, r3
 8008474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008476:	d10d      	bne.n	8008494 <_dtoa_r+0xa44>
 8008478:	2b39      	cmp	r3, #57	@ 0x39
 800847a:	d027      	beq.n	80084cc <_dtoa_r+0xa7c>
 800847c:	9a04      	ldr	r2, [sp, #16]
 800847e:	2a00      	cmp	r2, #0
 8008480:	dd01      	ble.n	8008486 <_dtoa_r+0xa36>
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	3331      	adds	r3, #49	@ 0x31
 8008486:	f88b 3000 	strb.w	r3, [fp]
 800848a:	e52e      	b.n	8007eea <_dtoa_r+0x49a>
 800848c:	4628      	mov	r0, r5
 800848e:	e7b9      	b.n	8008404 <_dtoa_r+0x9b4>
 8008490:	2201      	movs	r2, #1
 8008492:	e7e2      	b.n	800845a <_dtoa_r+0xa0a>
 8008494:	9904      	ldr	r1, [sp, #16]
 8008496:	2900      	cmp	r1, #0
 8008498:	db04      	blt.n	80084a4 <_dtoa_r+0xa54>
 800849a:	9807      	ldr	r0, [sp, #28]
 800849c:	4301      	orrs	r1, r0
 800849e:	9806      	ldr	r0, [sp, #24]
 80084a0:	4301      	orrs	r1, r0
 80084a2:	d120      	bne.n	80084e6 <_dtoa_r+0xa96>
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	ddee      	ble.n	8008486 <_dtoa_r+0xa36>
 80084a8:	9902      	ldr	r1, [sp, #8]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	2201      	movs	r2, #1
 80084ae:	4648      	mov	r0, r9
 80084b0:	f000 fba4 	bl	8008bfc <__lshift>
 80084b4:	4621      	mov	r1, r4
 80084b6:	9002      	str	r0, [sp, #8]
 80084b8:	f000 fc0c 	bl	8008cd4 <__mcmp>
 80084bc:	2800      	cmp	r0, #0
 80084be:	9b00      	ldr	r3, [sp, #0]
 80084c0:	dc02      	bgt.n	80084c8 <_dtoa_r+0xa78>
 80084c2:	d1e0      	bne.n	8008486 <_dtoa_r+0xa36>
 80084c4:	07da      	lsls	r2, r3, #31
 80084c6:	d5de      	bpl.n	8008486 <_dtoa_r+0xa36>
 80084c8:	2b39      	cmp	r3, #57	@ 0x39
 80084ca:	d1da      	bne.n	8008482 <_dtoa_r+0xa32>
 80084cc:	2339      	movs	r3, #57	@ 0x39
 80084ce:	f88b 3000 	strb.w	r3, [fp]
 80084d2:	4633      	mov	r3, r6
 80084d4:	461e      	mov	r6, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084dc:	2a39      	cmp	r2, #57	@ 0x39
 80084de:	d04e      	beq.n	800857e <_dtoa_r+0xb2e>
 80084e0:	3201      	adds	r2, #1
 80084e2:	701a      	strb	r2, [r3, #0]
 80084e4:	e501      	b.n	8007eea <_dtoa_r+0x49a>
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	dd03      	ble.n	80084f2 <_dtoa_r+0xaa2>
 80084ea:	2b39      	cmp	r3, #57	@ 0x39
 80084ec:	d0ee      	beq.n	80084cc <_dtoa_r+0xa7c>
 80084ee:	3301      	adds	r3, #1
 80084f0:	e7c9      	b.n	8008486 <_dtoa_r+0xa36>
 80084f2:	9a00      	ldr	r2, [sp, #0]
 80084f4:	9908      	ldr	r1, [sp, #32]
 80084f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80084fa:	428a      	cmp	r2, r1
 80084fc:	d028      	beq.n	8008550 <_dtoa_r+0xb00>
 80084fe:	9902      	ldr	r1, [sp, #8]
 8008500:	2300      	movs	r3, #0
 8008502:	220a      	movs	r2, #10
 8008504:	4648      	mov	r0, r9
 8008506:	f000 f9d5 	bl	80088b4 <__multadd>
 800850a:	42af      	cmp	r7, r5
 800850c:	9002      	str	r0, [sp, #8]
 800850e:	f04f 0300 	mov.w	r3, #0
 8008512:	f04f 020a 	mov.w	r2, #10
 8008516:	4639      	mov	r1, r7
 8008518:	4648      	mov	r0, r9
 800851a:	d107      	bne.n	800852c <_dtoa_r+0xadc>
 800851c:	f000 f9ca 	bl	80088b4 <__multadd>
 8008520:	4607      	mov	r7, r0
 8008522:	4605      	mov	r5, r0
 8008524:	9b00      	ldr	r3, [sp, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	e777      	b.n	800841c <_dtoa_r+0x9cc>
 800852c:	f000 f9c2 	bl	80088b4 <__multadd>
 8008530:	4629      	mov	r1, r5
 8008532:	4607      	mov	r7, r0
 8008534:	2300      	movs	r3, #0
 8008536:	220a      	movs	r2, #10
 8008538:	4648      	mov	r0, r9
 800853a:	f000 f9bb 	bl	80088b4 <__multadd>
 800853e:	4605      	mov	r5, r0
 8008540:	e7f0      	b.n	8008524 <_dtoa_r+0xad4>
 8008542:	f1bb 0f00 	cmp.w	fp, #0
 8008546:	bfcc      	ite	gt
 8008548:	465e      	movgt	r6, fp
 800854a:	2601      	movle	r6, #1
 800854c:	4456      	add	r6, sl
 800854e:	2700      	movs	r7, #0
 8008550:	9902      	ldr	r1, [sp, #8]
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	2201      	movs	r2, #1
 8008556:	4648      	mov	r0, r9
 8008558:	f000 fb50 	bl	8008bfc <__lshift>
 800855c:	4621      	mov	r1, r4
 800855e:	9002      	str	r0, [sp, #8]
 8008560:	f000 fbb8 	bl	8008cd4 <__mcmp>
 8008564:	2800      	cmp	r0, #0
 8008566:	dcb4      	bgt.n	80084d2 <_dtoa_r+0xa82>
 8008568:	d102      	bne.n	8008570 <_dtoa_r+0xb20>
 800856a:	9b00      	ldr	r3, [sp, #0]
 800856c:	07db      	lsls	r3, r3, #31
 800856e:	d4b0      	bmi.n	80084d2 <_dtoa_r+0xa82>
 8008570:	4633      	mov	r3, r6
 8008572:	461e      	mov	r6, r3
 8008574:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008578:	2a30      	cmp	r2, #48	@ 0x30
 800857a:	d0fa      	beq.n	8008572 <_dtoa_r+0xb22>
 800857c:	e4b5      	b.n	8007eea <_dtoa_r+0x49a>
 800857e:	459a      	cmp	sl, r3
 8008580:	d1a8      	bne.n	80084d4 <_dtoa_r+0xa84>
 8008582:	2331      	movs	r3, #49	@ 0x31
 8008584:	f108 0801 	add.w	r8, r8, #1
 8008588:	f88a 3000 	strb.w	r3, [sl]
 800858c:	e4ad      	b.n	8007eea <_dtoa_r+0x49a>
 800858e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008590:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80085ec <_dtoa_r+0xb9c>
 8008594:	b11b      	cbz	r3, 800859e <_dtoa_r+0xb4e>
 8008596:	f10a 0308 	add.w	r3, sl, #8
 800859a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	4650      	mov	r0, sl
 80085a0:	b017      	add	sp, #92	@ 0x5c
 80085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a6:	9b07      	ldr	r3, [sp, #28]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	f77f ae2e 	ble.w	800820a <_dtoa_r+0x7ba>
 80085ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085b0:	9308      	str	r3, [sp, #32]
 80085b2:	2001      	movs	r0, #1
 80085b4:	e64d      	b.n	8008252 <_dtoa_r+0x802>
 80085b6:	f1bb 0f00 	cmp.w	fp, #0
 80085ba:	f77f aed9 	ble.w	8008370 <_dtoa_r+0x920>
 80085be:	4656      	mov	r6, sl
 80085c0:	9802      	ldr	r0, [sp, #8]
 80085c2:	4621      	mov	r1, r4
 80085c4:	f7ff f9bb 	bl	800793e <quorem>
 80085c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80085cc:	f806 3b01 	strb.w	r3, [r6], #1
 80085d0:	eba6 020a 	sub.w	r2, r6, sl
 80085d4:	4593      	cmp	fp, r2
 80085d6:	ddb4      	ble.n	8008542 <_dtoa_r+0xaf2>
 80085d8:	9902      	ldr	r1, [sp, #8]
 80085da:	2300      	movs	r3, #0
 80085dc:	220a      	movs	r2, #10
 80085de:	4648      	mov	r0, r9
 80085e0:	f000 f968 	bl	80088b4 <__multadd>
 80085e4:	9002      	str	r0, [sp, #8]
 80085e6:	e7eb      	b.n	80085c0 <_dtoa_r+0xb70>
 80085e8:	08009fd0 	.word	0x08009fd0
 80085ec:	08009f54 	.word	0x08009f54

080085f0 <_free_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4605      	mov	r5, r0
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d041      	beq.n	800867c <_free_r+0x8c>
 80085f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fc:	1f0c      	subs	r4, r1, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfb8      	it	lt
 8008602:	18e4      	addlt	r4, r4, r3
 8008604:	f000 f8e8 	bl	80087d8 <__malloc_lock>
 8008608:	4a1d      	ldr	r2, [pc, #116]	@ (8008680 <_free_r+0x90>)
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	b933      	cbnz	r3, 800861c <_free_r+0x2c>
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	6014      	str	r4, [r2, #0]
 8008612:	4628      	mov	r0, r5
 8008614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008618:	f000 b8e4 	b.w	80087e4 <__malloc_unlock>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d908      	bls.n	8008632 <_free_r+0x42>
 8008620:	6820      	ldr	r0, [r4, #0]
 8008622:	1821      	adds	r1, r4, r0
 8008624:	428b      	cmp	r3, r1
 8008626:	bf01      	itttt	eq
 8008628:	6819      	ldreq	r1, [r3, #0]
 800862a:	685b      	ldreq	r3, [r3, #4]
 800862c:	1809      	addeq	r1, r1, r0
 800862e:	6021      	streq	r1, [r4, #0]
 8008630:	e7ed      	b.n	800860e <_free_r+0x1e>
 8008632:	461a      	mov	r2, r3
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	b10b      	cbz	r3, 800863c <_free_r+0x4c>
 8008638:	42a3      	cmp	r3, r4
 800863a:	d9fa      	bls.n	8008632 <_free_r+0x42>
 800863c:	6811      	ldr	r1, [r2, #0]
 800863e:	1850      	adds	r0, r2, r1
 8008640:	42a0      	cmp	r0, r4
 8008642:	d10b      	bne.n	800865c <_free_r+0x6c>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	4401      	add	r1, r0
 8008648:	1850      	adds	r0, r2, r1
 800864a:	4283      	cmp	r3, r0
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	d1e0      	bne.n	8008612 <_free_r+0x22>
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	6053      	str	r3, [r2, #4]
 8008656:	4408      	add	r0, r1
 8008658:	6010      	str	r0, [r2, #0]
 800865a:	e7da      	b.n	8008612 <_free_r+0x22>
 800865c:	d902      	bls.n	8008664 <_free_r+0x74>
 800865e:	230c      	movs	r3, #12
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	e7d6      	b.n	8008612 <_free_r+0x22>
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	1821      	adds	r1, r4, r0
 8008668:	428b      	cmp	r3, r1
 800866a:	bf04      	itt	eq
 800866c:	6819      	ldreq	r1, [r3, #0]
 800866e:	685b      	ldreq	r3, [r3, #4]
 8008670:	6063      	str	r3, [r4, #4]
 8008672:	bf04      	itt	eq
 8008674:	1809      	addeq	r1, r1, r0
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	6054      	str	r4, [r2, #4]
 800867a:	e7ca      	b.n	8008612 <_free_r+0x22>
 800867c:	bd38      	pop	{r3, r4, r5, pc}
 800867e:	bf00      	nop
 8008680:	20000590 	.word	0x20000590

08008684 <malloc>:
 8008684:	4b02      	ldr	r3, [pc, #8]	@ (8008690 <malloc+0xc>)
 8008686:	4601      	mov	r1, r0
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	f000 b825 	b.w	80086d8 <_malloc_r>
 800868e:	bf00      	nop
 8008690:	20000024 	.word	0x20000024

08008694 <sbrk_aligned>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	4e0f      	ldr	r6, [pc, #60]	@ (80086d4 <sbrk_aligned+0x40>)
 8008698:	460c      	mov	r4, r1
 800869a:	6831      	ldr	r1, [r6, #0]
 800869c:	4605      	mov	r5, r0
 800869e:	b911      	cbnz	r1, 80086a6 <sbrk_aligned+0x12>
 80086a0:	f000 fccc 	bl	800903c <_sbrk_r>
 80086a4:	6030      	str	r0, [r6, #0]
 80086a6:	4621      	mov	r1, r4
 80086a8:	4628      	mov	r0, r5
 80086aa:	f000 fcc7 	bl	800903c <_sbrk_r>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d103      	bne.n	80086ba <sbrk_aligned+0x26>
 80086b2:	f04f 34ff 	mov.w	r4, #4294967295
 80086b6:	4620      	mov	r0, r4
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
 80086ba:	1cc4      	adds	r4, r0, #3
 80086bc:	f024 0403 	bic.w	r4, r4, #3
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d0f8      	beq.n	80086b6 <sbrk_aligned+0x22>
 80086c4:	1a21      	subs	r1, r4, r0
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 fcb8 	bl	800903c <_sbrk_r>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d1f2      	bne.n	80086b6 <sbrk_aligned+0x22>
 80086d0:	e7ef      	b.n	80086b2 <sbrk_aligned+0x1e>
 80086d2:	bf00      	nop
 80086d4:	2000058c 	.word	0x2000058c

080086d8 <_malloc_r>:
 80086d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086dc:	1ccd      	adds	r5, r1, #3
 80086de:	f025 0503 	bic.w	r5, r5, #3
 80086e2:	3508      	adds	r5, #8
 80086e4:	2d0c      	cmp	r5, #12
 80086e6:	bf38      	it	cc
 80086e8:	250c      	movcc	r5, #12
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	4606      	mov	r6, r0
 80086ee:	db01      	blt.n	80086f4 <_malloc_r+0x1c>
 80086f0:	42a9      	cmp	r1, r5
 80086f2:	d904      	bls.n	80086fe <_malloc_r+0x26>
 80086f4:	230c      	movs	r3, #12
 80086f6:	6033      	str	r3, [r6, #0]
 80086f8:	2000      	movs	r0, #0
 80086fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087d4 <_malloc_r+0xfc>
 8008702:	f000 f869 	bl	80087d8 <__malloc_lock>
 8008706:	f8d8 3000 	ldr.w	r3, [r8]
 800870a:	461c      	mov	r4, r3
 800870c:	bb44      	cbnz	r4, 8008760 <_malloc_r+0x88>
 800870e:	4629      	mov	r1, r5
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ffbf 	bl	8008694 <sbrk_aligned>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	4604      	mov	r4, r0
 800871a:	d158      	bne.n	80087ce <_malloc_r+0xf6>
 800871c:	f8d8 4000 	ldr.w	r4, [r8]
 8008720:	4627      	mov	r7, r4
 8008722:	2f00      	cmp	r7, #0
 8008724:	d143      	bne.n	80087ae <_malloc_r+0xd6>
 8008726:	2c00      	cmp	r4, #0
 8008728:	d04b      	beq.n	80087c2 <_malloc_r+0xea>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	4639      	mov	r1, r7
 800872e:	4630      	mov	r0, r6
 8008730:	eb04 0903 	add.w	r9, r4, r3
 8008734:	f000 fc82 	bl	800903c <_sbrk_r>
 8008738:	4581      	cmp	r9, r0
 800873a:	d142      	bne.n	80087c2 <_malloc_r+0xea>
 800873c:	6821      	ldr	r1, [r4, #0]
 800873e:	1a6d      	subs	r5, r5, r1
 8008740:	4629      	mov	r1, r5
 8008742:	4630      	mov	r0, r6
 8008744:	f7ff ffa6 	bl	8008694 <sbrk_aligned>
 8008748:	3001      	adds	r0, #1
 800874a:	d03a      	beq.n	80087c2 <_malloc_r+0xea>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	442b      	add	r3, r5
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	f8d8 3000 	ldr.w	r3, [r8]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	bb62      	cbnz	r2, 80087b4 <_malloc_r+0xdc>
 800875a:	f8c8 7000 	str.w	r7, [r8]
 800875e:	e00f      	b.n	8008780 <_malloc_r+0xa8>
 8008760:	6822      	ldr	r2, [r4, #0]
 8008762:	1b52      	subs	r2, r2, r5
 8008764:	d420      	bmi.n	80087a8 <_malloc_r+0xd0>
 8008766:	2a0b      	cmp	r2, #11
 8008768:	d917      	bls.n	800879a <_malloc_r+0xc2>
 800876a:	1961      	adds	r1, r4, r5
 800876c:	42a3      	cmp	r3, r4
 800876e:	6025      	str	r5, [r4, #0]
 8008770:	bf18      	it	ne
 8008772:	6059      	strne	r1, [r3, #4]
 8008774:	6863      	ldr	r3, [r4, #4]
 8008776:	bf08      	it	eq
 8008778:	f8c8 1000 	streq.w	r1, [r8]
 800877c:	5162      	str	r2, [r4, r5]
 800877e:	604b      	str	r3, [r1, #4]
 8008780:	4630      	mov	r0, r6
 8008782:	f000 f82f 	bl	80087e4 <__malloc_unlock>
 8008786:	f104 000b 	add.w	r0, r4, #11
 800878a:	1d23      	adds	r3, r4, #4
 800878c:	f020 0007 	bic.w	r0, r0, #7
 8008790:	1ac2      	subs	r2, r0, r3
 8008792:	bf1c      	itt	ne
 8008794:	1a1b      	subne	r3, r3, r0
 8008796:	50a3      	strne	r3, [r4, r2]
 8008798:	e7af      	b.n	80086fa <_malloc_r+0x22>
 800879a:	6862      	ldr	r2, [r4, #4]
 800879c:	42a3      	cmp	r3, r4
 800879e:	bf0c      	ite	eq
 80087a0:	f8c8 2000 	streq.w	r2, [r8]
 80087a4:	605a      	strne	r2, [r3, #4]
 80087a6:	e7eb      	b.n	8008780 <_malloc_r+0xa8>
 80087a8:	4623      	mov	r3, r4
 80087aa:	6864      	ldr	r4, [r4, #4]
 80087ac:	e7ae      	b.n	800870c <_malloc_r+0x34>
 80087ae:	463c      	mov	r4, r7
 80087b0:	687f      	ldr	r7, [r7, #4]
 80087b2:	e7b6      	b.n	8008722 <_malloc_r+0x4a>
 80087b4:	461a      	mov	r2, r3
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	d1fb      	bne.n	80087b4 <_malloc_r+0xdc>
 80087bc:	2300      	movs	r3, #0
 80087be:	6053      	str	r3, [r2, #4]
 80087c0:	e7de      	b.n	8008780 <_malloc_r+0xa8>
 80087c2:	230c      	movs	r3, #12
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	4630      	mov	r0, r6
 80087c8:	f000 f80c 	bl	80087e4 <__malloc_unlock>
 80087cc:	e794      	b.n	80086f8 <_malloc_r+0x20>
 80087ce:	6005      	str	r5, [r0, #0]
 80087d0:	e7d6      	b.n	8008780 <_malloc_r+0xa8>
 80087d2:	bf00      	nop
 80087d4:	20000590 	.word	0x20000590

080087d8 <__malloc_lock>:
 80087d8:	4801      	ldr	r0, [pc, #4]	@ (80087e0 <__malloc_lock+0x8>)
 80087da:	f7ff b8ae 	b.w	800793a <__retarget_lock_acquire_recursive>
 80087de:	bf00      	nop
 80087e0:	20000588 	.word	0x20000588

080087e4 <__malloc_unlock>:
 80087e4:	4801      	ldr	r0, [pc, #4]	@ (80087ec <__malloc_unlock+0x8>)
 80087e6:	f7ff b8a9 	b.w	800793c <__retarget_lock_release_recursive>
 80087ea:	bf00      	nop
 80087ec:	20000588 	.word	0x20000588

080087f0 <_Balloc>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	69c6      	ldr	r6, [r0, #28]
 80087f4:	4604      	mov	r4, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	b976      	cbnz	r6, 8008818 <_Balloc+0x28>
 80087fa:	2010      	movs	r0, #16
 80087fc:	f7ff ff42 	bl	8008684 <malloc>
 8008800:	4602      	mov	r2, r0
 8008802:	61e0      	str	r0, [r4, #28]
 8008804:	b920      	cbnz	r0, 8008810 <_Balloc+0x20>
 8008806:	4b18      	ldr	r3, [pc, #96]	@ (8008868 <_Balloc+0x78>)
 8008808:	4818      	ldr	r0, [pc, #96]	@ (800886c <_Balloc+0x7c>)
 800880a:	216b      	movs	r1, #107	@ 0x6b
 800880c:	f000 fc34 	bl	8009078 <__assert_func>
 8008810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008814:	6006      	str	r6, [r0, #0]
 8008816:	60c6      	str	r6, [r0, #12]
 8008818:	69e6      	ldr	r6, [r4, #28]
 800881a:	68f3      	ldr	r3, [r6, #12]
 800881c:	b183      	cbz	r3, 8008840 <_Balloc+0x50>
 800881e:	69e3      	ldr	r3, [r4, #28]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008826:	b9b8      	cbnz	r0, 8008858 <_Balloc+0x68>
 8008828:	2101      	movs	r1, #1
 800882a:	fa01 f605 	lsl.w	r6, r1, r5
 800882e:	1d72      	adds	r2, r6, #5
 8008830:	0092      	lsls	r2, r2, #2
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fc3e 	bl	80090b4 <_calloc_r>
 8008838:	b160      	cbz	r0, 8008854 <_Balloc+0x64>
 800883a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800883e:	e00e      	b.n	800885e <_Balloc+0x6e>
 8008840:	2221      	movs	r2, #33	@ 0x21
 8008842:	2104      	movs	r1, #4
 8008844:	4620      	mov	r0, r4
 8008846:	f000 fc35 	bl	80090b4 <_calloc_r>
 800884a:	69e3      	ldr	r3, [r4, #28]
 800884c:	60f0      	str	r0, [r6, #12]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e4      	bne.n	800881e <_Balloc+0x2e>
 8008854:	2000      	movs	r0, #0
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	6802      	ldr	r2, [r0, #0]
 800885a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800885e:	2300      	movs	r3, #0
 8008860:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008864:	e7f7      	b.n	8008856 <_Balloc+0x66>
 8008866:	bf00      	nop
 8008868:	08009f61 	.word	0x08009f61
 800886c:	08009fe1 	.word	0x08009fe1

08008870 <_Bfree>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	69c6      	ldr	r6, [r0, #28]
 8008874:	4605      	mov	r5, r0
 8008876:	460c      	mov	r4, r1
 8008878:	b976      	cbnz	r6, 8008898 <_Bfree+0x28>
 800887a:	2010      	movs	r0, #16
 800887c:	f7ff ff02 	bl	8008684 <malloc>
 8008880:	4602      	mov	r2, r0
 8008882:	61e8      	str	r0, [r5, #28]
 8008884:	b920      	cbnz	r0, 8008890 <_Bfree+0x20>
 8008886:	4b09      	ldr	r3, [pc, #36]	@ (80088ac <_Bfree+0x3c>)
 8008888:	4809      	ldr	r0, [pc, #36]	@ (80088b0 <_Bfree+0x40>)
 800888a:	218f      	movs	r1, #143	@ 0x8f
 800888c:	f000 fbf4 	bl	8009078 <__assert_func>
 8008890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008894:	6006      	str	r6, [r0, #0]
 8008896:	60c6      	str	r6, [r0, #12]
 8008898:	b13c      	cbz	r4, 80088aa <_Bfree+0x3a>
 800889a:	69eb      	ldr	r3, [r5, #28]
 800889c:	6862      	ldr	r2, [r4, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088a4:	6021      	str	r1, [r4, #0]
 80088a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088aa:	bd70      	pop	{r4, r5, r6, pc}
 80088ac:	08009f61 	.word	0x08009f61
 80088b0:	08009fe1 	.word	0x08009fe1

080088b4 <__multadd>:
 80088b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b8:	690d      	ldr	r5, [r1, #16]
 80088ba:	4607      	mov	r7, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	461e      	mov	r6, r3
 80088c0:	f101 0c14 	add.w	ip, r1, #20
 80088c4:	2000      	movs	r0, #0
 80088c6:	f8dc 3000 	ldr.w	r3, [ip]
 80088ca:	b299      	uxth	r1, r3
 80088cc:	fb02 6101 	mla	r1, r2, r1, r6
 80088d0:	0c1e      	lsrs	r6, r3, #16
 80088d2:	0c0b      	lsrs	r3, r1, #16
 80088d4:	fb02 3306 	mla	r3, r2, r6, r3
 80088d8:	b289      	uxth	r1, r1
 80088da:	3001      	adds	r0, #1
 80088dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088e0:	4285      	cmp	r5, r0
 80088e2:	f84c 1b04 	str.w	r1, [ip], #4
 80088e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088ea:	dcec      	bgt.n	80088c6 <__multadd+0x12>
 80088ec:	b30e      	cbz	r6, 8008932 <__multadd+0x7e>
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	42ab      	cmp	r3, r5
 80088f2:	dc19      	bgt.n	8008928 <__multadd+0x74>
 80088f4:	6861      	ldr	r1, [r4, #4]
 80088f6:	4638      	mov	r0, r7
 80088f8:	3101      	adds	r1, #1
 80088fa:	f7ff ff79 	bl	80087f0 <_Balloc>
 80088fe:	4680      	mov	r8, r0
 8008900:	b928      	cbnz	r0, 800890e <__multadd+0x5a>
 8008902:	4602      	mov	r2, r0
 8008904:	4b0c      	ldr	r3, [pc, #48]	@ (8008938 <__multadd+0x84>)
 8008906:	480d      	ldr	r0, [pc, #52]	@ (800893c <__multadd+0x88>)
 8008908:	21ba      	movs	r1, #186	@ 0xba
 800890a:	f000 fbb5 	bl	8009078 <__assert_func>
 800890e:	6922      	ldr	r2, [r4, #16]
 8008910:	3202      	adds	r2, #2
 8008912:	f104 010c 	add.w	r1, r4, #12
 8008916:	0092      	lsls	r2, r2, #2
 8008918:	300c      	adds	r0, #12
 800891a:	f000 fb9f 	bl	800905c <memcpy>
 800891e:	4621      	mov	r1, r4
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff ffa5 	bl	8008870 <_Bfree>
 8008926:	4644      	mov	r4, r8
 8008928:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800892c:	3501      	adds	r5, #1
 800892e:	615e      	str	r6, [r3, #20]
 8008930:	6125      	str	r5, [r4, #16]
 8008932:	4620      	mov	r0, r4
 8008934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008938:	08009fd0 	.word	0x08009fd0
 800893c:	08009fe1 	.word	0x08009fe1

08008940 <__hi0bits>:
 8008940:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008944:	4603      	mov	r3, r0
 8008946:	bf36      	itet	cc
 8008948:	0403      	lslcc	r3, r0, #16
 800894a:	2000      	movcs	r0, #0
 800894c:	2010      	movcc	r0, #16
 800894e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008952:	bf3c      	itt	cc
 8008954:	021b      	lslcc	r3, r3, #8
 8008956:	3008      	addcc	r0, #8
 8008958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800895c:	bf3c      	itt	cc
 800895e:	011b      	lslcc	r3, r3, #4
 8008960:	3004      	addcc	r0, #4
 8008962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008966:	bf3c      	itt	cc
 8008968:	009b      	lslcc	r3, r3, #2
 800896a:	3002      	addcc	r0, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	db05      	blt.n	800897c <__hi0bits+0x3c>
 8008970:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008974:	f100 0001 	add.w	r0, r0, #1
 8008978:	bf08      	it	eq
 800897a:	2020      	moveq	r0, #32
 800897c:	4770      	bx	lr

0800897e <__lo0bits>:
 800897e:	6803      	ldr	r3, [r0, #0]
 8008980:	4602      	mov	r2, r0
 8008982:	f013 0007 	ands.w	r0, r3, #7
 8008986:	d00b      	beq.n	80089a0 <__lo0bits+0x22>
 8008988:	07d9      	lsls	r1, r3, #31
 800898a:	d421      	bmi.n	80089d0 <__lo0bits+0x52>
 800898c:	0798      	lsls	r0, r3, #30
 800898e:	bf49      	itett	mi
 8008990:	085b      	lsrmi	r3, r3, #1
 8008992:	089b      	lsrpl	r3, r3, #2
 8008994:	2001      	movmi	r0, #1
 8008996:	6013      	strmi	r3, [r2, #0]
 8008998:	bf5c      	itt	pl
 800899a:	6013      	strpl	r3, [r2, #0]
 800899c:	2002      	movpl	r0, #2
 800899e:	4770      	bx	lr
 80089a0:	b299      	uxth	r1, r3
 80089a2:	b909      	cbnz	r1, 80089a8 <__lo0bits+0x2a>
 80089a4:	0c1b      	lsrs	r3, r3, #16
 80089a6:	2010      	movs	r0, #16
 80089a8:	b2d9      	uxtb	r1, r3
 80089aa:	b909      	cbnz	r1, 80089b0 <__lo0bits+0x32>
 80089ac:	3008      	adds	r0, #8
 80089ae:	0a1b      	lsrs	r3, r3, #8
 80089b0:	0719      	lsls	r1, r3, #28
 80089b2:	bf04      	itt	eq
 80089b4:	091b      	lsreq	r3, r3, #4
 80089b6:	3004      	addeq	r0, #4
 80089b8:	0799      	lsls	r1, r3, #30
 80089ba:	bf04      	itt	eq
 80089bc:	089b      	lsreq	r3, r3, #2
 80089be:	3002      	addeq	r0, #2
 80089c0:	07d9      	lsls	r1, r3, #31
 80089c2:	d403      	bmi.n	80089cc <__lo0bits+0x4e>
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	f100 0001 	add.w	r0, r0, #1
 80089ca:	d003      	beq.n	80089d4 <__lo0bits+0x56>
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	4770      	bx	lr
 80089d0:	2000      	movs	r0, #0
 80089d2:	4770      	bx	lr
 80089d4:	2020      	movs	r0, #32
 80089d6:	4770      	bx	lr

080089d8 <__i2b>:
 80089d8:	b510      	push	{r4, lr}
 80089da:	460c      	mov	r4, r1
 80089dc:	2101      	movs	r1, #1
 80089de:	f7ff ff07 	bl	80087f0 <_Balloc>
 80089e2:	4602      	mov	r2, r0
 80089e4:	b928      	cbnz	r0, 80089f2 <__i2b+0x1a>
 80089e6:	4b05      	ldr	r3, [pc, #20]	@ (80089fc <__i2b+0x24>)
 80089e8:	4805      	ldr	r0, [pc, #20]	@ (8008a00 <__i2b+0x28>)
 80089ea:	f240 1145 	movw	r1, #325	@ 0x145
 80089ee:	f000 fb43 	bl	8009078 <__assert_func>
 80089f2:	2301      	movs	r3, #1
 80089f4:	6144      	str	r4, [r0, #20]
 80089f6:	6103      	str	r3, [r0, #16]
 80089f8:	bd10      	pop	{r4, pc}
 80089fa:	bf00      	nop
 80089fc:	08009fd0 	.word	0x08009fd0
 8008a00:	08009fe1 	.word	0x08009fe1

08008a04 <__multiply>:
 8008a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	4617      	mov	r7, r2
 8008a0a:	690a      	ldr	r2, [r1, #16]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	bfa8      	it	ge
 8008a12:	463b      	movge	r3, r7
 8008a14:	4689      	mov	r9, r1
 8008a16:	bfa4      	itt	ge
 8008a18:	460f      	movge	r7, r1
 8008a1a:	4699      	movge	r9, r3
 8008a1c:	693d      	ldr	r5, [r7, #16]
 8008a1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	eb05 060a 	add.w	r6, r5, sl
 8008a2a:	42b3      	cmp	r3, r6
 8008a2c:	b085      	sub	sp, #20
 8008a2e:	bfb8      	it	lt
 8008a30:	3101      	addlt	r1, #1
 8008a32:	f7ff fedd 	bl	80087f0 <_Balloc>
 8008a36:	b930      	cbnz	r0, 8008a46 <__multiply+0x42>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	4b41      	ldr	r3, [pc, #260]	@ (8008b40 <__multiply+0x13c>)
 8008a3c:	4841      	ldr	r0, [pc, #260]	@ (8008b44 <__multiply+0x140>)
 8008a3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a42:	f000 fb19 	bl	8009078 <__assert_func>
 8008a46:	f100 0414 	add.w	r4, r0, #20
 8008a4a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008a4e:	4623      	mov	r3, r4
 8008a50:	2200      	movs	r2, #0
 8008a52:	4573      	cmp	r3, lr
 8008a54:	d320      	bcc.n	8008a98 <__multiply+0x94>
 8008a56:	f107 0814 	add.w	r8, r7, #20
 8008a5a:	f109 0114 	add.w	r1, r9, #20
 8008a5e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008a62:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008a66:	9302      	str	r3, [sp, #8]
 8008a68:	1beb      	subs	r3, r5, r7
 8008a6a:	3b15      	subs	r3, #21
 8008a6c:	f023 0303 	bic.w	r3, r3, #3
 8008a70:	3304      	adds	r3, #4
 8008a72:	3715      	adds	r7, #21
 8008a74:	42bd      	cmp	r5, r7
 8008a76:	bf38      	it	cc
 8008a78:	2304      	movcc	r3, #4
 8008a7a:	9301      	str	r3, [sp, #4]
 8008a7c:	9b02      	ldr	r3, [sp, #8]
 8008a7e:	9103      	str	r1, [sp, #12]
 8008a80:	428b      	cmp	r3, r1
 8008a82:	d80c      	bhi.n	8008a9e <__multiply+0x9a>
 8008a84:	2e00      	cmp	r6, #0
 8008a86:	dd03      	ble.n	8008a90 <__multiply+0x8c>
 8008a88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d055      	beq.n	8008b3c <__multiply+0x138>
 8008a90:	6106      	str	r6, [r0, #16]
 8008a92:	b005      	add	sp, #20
 8008a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a98:	f843 2b04 	str.w	r2, [r3], #4
 8008a9c:	e7d9      	b.n	8008a52 <__multiply+0x4e>
 8008a9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008aa2:	f1ba 0f00 	cmp.w	sl, #0
 8008aa6:	d01f      	beq.n	8008ae8 <__multiply+0xe4>
 8008aa8:	46c4      	mov	ip, r8
 8008aaa:	46a1      	mov	r9, r4
 8008aac:	2700      	movs	r7, #0
 8008aae:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ab2:	f8d9 3000 	ldr.w	r3, [r9]
 8008ab6:	fa1f fb82 	uxth.w	fp, r2
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ac0:	443b      	add	r3, r7
 8008ac2:	f8d9 7000 	ldr.w	r7, [r9]
 8008ac6:	0c12      	lsrs	r2, r2, #16
 8008ac8:	0c3f      	lsrs	r7, r7, #16
 8008aca:	fb0a 7202 	mla	r2, sl, r2, r7
 8008ace:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ad8:	4565      	cmp	r5, ip
 8008ada:	f849 3b04 	str.w	r3, [r9], #4
 8008ade:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008ae2:	d8e4      	bhi.n	8008aae <__multiply+0xaa>
 8008ae4:	9b01      	ldr	r3, [sp, #4]
 8008ae6:	50e7      	str	r7, [r4, r3]
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008aee:	3104      	adds	r1, #4
 8008af0:	f1b9 0f00 	cmp.w	r9, #0
 8008af4:	d020      	beq.n	8008b38 <__multiply+0x134>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	4647      	mov	r7, r8
 8008afa:	46a4      	mov	ip, r4
 8008afc:	f04f 0a00 	mov.w	sl, #0
 8008b00:	f8b7 b000 	ldrh.w	fp, [r7]
 8008b04:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008b08:	fb09 220b 	mla	r2, r9, fp, r2
 8008b0c:	4452      	add	r2, sl
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b14:	f84c 3b04 	str.w	r3, [ip], #4
 8008b18:	f857 3b04 	ldr.w	r3, [r7], #4
 8008b1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b20:	f8bc 3000 	ldrh.w	r3, [ip]
 8008b24:	fb09 330a 	mla	r3, r9, sl, r3
 8008b28:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008b2c:	42bd      	cmp	r5, r7
 8008b2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b32:	d8e5      	bhi.n	8008b00 <__multiply+0xfc>
 8008b34:	9a01      	ldr	r2, [sp, #4]
 8008b36:	50a3      	str	r3, [r4, r2]
 8008b38:	3404      	adds	r4, #4
 8008b3a:	e79f      	b.n	8008a7c <__multiply+0x78>
 8008b3c:	3e01      	subs	r6, #1
 8008b3e:	e7a1      	b.n	8008a84 <__multiply+0x80>
 8008b40:	08009fd0 	.word	0x08009fd0
 8008b44:	08009fe1 	.word	0x08009fe1

08008b48 <__pow5mult>:
 8008b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b4c:	4615      	mov	r5, r2
 8008b4e:	f012 0203 	ands.w	r2, r2, #3
 8008b52:	4607      	mov	r7, r0
 8008b54:	460e      	mov	r6, r1
 8008b56:	d007      	beq.n	8008b68 <__pow5mult+0x20>
 8008b58:	4c25      	ldr	r4, [pc, #148]	@ (8008bf0 <__pow5mult+0xa8>)
 8008b5a:	3a01      	subs	r2, #1
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b62:	f7ff fea7 	bl	80088b4 <__multadd>
 8008b66:	4606      	mov	r6, r0
 8008b68:	10ad      	asrs	r5, r5, #2
 8008b6a:	d03d      	beq.n	8008be8 <__pow5mult+0xa0>
 8008b6c:	69fc      	ldr	r4, [r7, #28]
 8008b6e:	b97c      	cbnz	r4, 8008b90 <__pow5mult+0x48>
 8008b70:	2010      	movs	r0, #16
 8008b72:	f7ff fd87 	bl	8008684 <malloc>
 8008b76:	4602      	mov	r2, r0
 8008b78:	61f8      	str	r0, [r7, #28]
 8008b7a:	b928      	cbnz	r0, 8008b88 <__pow5mult+0x40>
 8008b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8008bf4 <__pow5mult+0xac>)
 8008b7e:	481e      	ldr	r0, [pc, #120]	@ (8008bf8 <__pow5mult+0xb0>)
 8008b80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008b84:	f000 fa78 	bl	8009078 <__assert_func>
 8008b88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b8c:	6004      	str	r4, [r0, #0]
 8008b8e:	60c4      	str	r4, [r0, #12]
 8008b90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008b94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b98:	b94c      	cbnz	r4, 8008bae <__pow5mult+0x66>
 8008b9a:	f240 2171 	movw	r1, #625	@ 0x271
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	f7ff ff1a 	bl	80089d8 <__i2b>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008baa:	4604      	mov	r4, r0
 8008bac:	6003      	str	r3, [r0, #0]
 8008bae:	f04f 0900 	mov.w	r9, #0
 8008bb2:	07eb      	lsls	r3, r5, #31
 8008bb4:	d50a      	bpl.n	8008bcc <__pow5mult+0x84>
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4622      	mov	r2, r4
 8008bba:	4638      	mov	r0, r7
 8008bbc:	f7ff ff22 	bl	8008a04 <__multiply>
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4680      	mov	r8, r0
 8008bc4:	4638      	mov	r0, r7
 8008bc6:	f7ff fe53 	bl	8008870 <_Bfree>
 8008bca:	4646      	mov	r6, r8
 8008bcc:	106d      	asrs	r5, r5, #1
 8008bce:	d00b      	beq.n	8008be8 <__pow5mult+0xa0>
 8008bd0:	6820      	ldr	r0, [r4, #0]
 8008bd2:	b938      	cbnz	r0, 8008be4 <__pow5mult+0x9c>
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4638      	mov	r0, r7
 8008bda:	f7ff ff13 	bl	8008a04 <__multiply>
 8008bde:	6020      	str	r0, [r4, #0]
 8008be0:	f8c0 9000 	str.w	r9, [r0]
 8008be4:	4604      	mov	r4, r0
 8008be6:	e7e4      	b.n	8008bb2 <__pow5mult+0x6a>
 8008be8:	4630      	mov	r0, r6
 8008bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bee:	bf00      	nop
 8008bf0:	0800a094 	.word	0x0800a094
 8008bf4:	08009f61 	.word	0x08009f61
 8008bf8:	08009fe1 	.word	0x08009fe1

08008bfc <__lshift>:
 8008bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c00:	460c      	mov	r4, r1
 8008c02:	6849      	ldr	r1, [r1, #4]
 8008c04:	6923      	ldr	r3, [r4, #16]
 8008c06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c0a:	68a3      	ldr	r3, [r4, #8]
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	4691      	mov	r9, r2
 8008c10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c14:	f108 0601 	add.w	r6, r8, #1
 8008c18:	42b3      	cmp	r3, r6
 8008c1a:	db0b      	blt.n	8008c34 <__lshift+0x38>
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f7ff fde7 	bl	80087f0 <_Balloc>
 8008c22:	4605      	mov	r5, r0
 8008c24:	b948      	cbnz	r0, 8008c3a <__lshift+0x3e>
 8008c26:	4602      	mov	r2, r0
 8008c28:	4b28      	ldr	r3, [pc, #160]	@ (8008ccc <__lshift+0xd0>)
 8008c2a:	4829      	ldr	r0, [pc, #164]	@ (8008cd0 <__lshift+0xd4>)
 8008c2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c30:	f000 fa22 	bl	8009078 <__assert_func>
 8008c34:	3101      	adds	r1, #1
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	e7ee      	b.n	8008c18 <__lshift+0x1c>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f100 0114 	add.w	r1, r0, #20
 8008c40:	f100 0210 	add.w	r2, r0, #16
 8008c44:	4618      	mov	r0, r3
 8008c46:	4553      	cmp	r3, sl
 8008c48:	db33      	blt.n	8008cb2 <__lshift+0xb6>
 8008c4a:	6920      	ldr	r0, [r4, #16]
 8008c4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c50:	f104 0314 	add.w	r3, r4, #20
 8008c54:	f019 091f 	ands.w	r9, r9, #31
 8008c58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c60:	d02b      	beq.n	8008cba <__lshift+0xbe>
 8008c62:	f1c9 0e20 	rsb	lr, r9, #32
 8008c66:	468a      	mov	sl, r1
 8008c68:	2200      	movs	r2, #0
 8008c6a:	6818      	ldr	r0, [r3, #0]
 8008c6c:	fa00 f009 	lsl.w	r0, r0, r9
 8008c70:	4310      	orrs	r0, r2
 8008c72:	f84a 0b04 	str.w	r0, [sl], #4
 8008c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c7a:	459c      	cmp	ip, r3
 8008c7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c80:	d8f3      	bhi.n	8008c6a <__lshift+0x6e>
 8008c82:	ebac 0304 	sub.w	r3, ip, r4
 8008c86:	3b15      	subs	r3, #21
 8008c88:	f023 0303 	bic.w	r3, r3, #3
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	f104 0015 	add.w	r0, r4, #21
 8008c92:	4560      	cmp	r0, ip
 8008c94:	bf88      	it	hi
 8008c96:	2304      	movhi	r3, #4
 8008c98:	50ca      	str	r2, [r1, r3]
 8008c9a:	b10a      	cbz	r2, 8008ca0 <__lshift+0xa4>
 8008c9c:	f108 0602 	add.w	r6, r8, #2
 8008ca0:	3e01      	subs	r6, #1
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	612e      	str	r6, [r5, #16]
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	f7ff fde2 	bl	8008870 <_Bfree>
 8008cac:	4628      	mov	r0, r5
 8008cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	e7c5      	b.n	8008c46 <__lshift+0x4a>
 8008cba:	3904      	subs	r1, #4
 8008cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cc4:	459c      	cmp	ip, r3
 8008cc6:	d8f9      	bhi.n	8008cbc <__lshift+0xc0>
 8008cc8:	e7ea      	b.n	8008ca0 <__lshift+0xa4>
 8008cca:	bf00      	nop
 8008ccc:	08009fd0 	.word	0x08009fd0
 8008cd0:	08009fe1 	.word	0x08009fe1

08008cd4 <__mcmp>:
 8008cd4:	690a      	ldr	r2, [r1, #16]
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	6900      	ldr	r0, [r0, #16]
 8008cda:	1a80      	subs	r0, r0, r2
 8008cdc:	b530      	push	{r4, r5, lr}
 8008cde:	d10e      	bne.n	8008cfe <__mcmp+0x2a>
 8008ce0:	3314      	adds	r3, #20
 8008ce2:	3114      	adds	r1, #20
 8008ce4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ce8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008cec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008cf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008cf4:	4295      	cmp	r5, r2
 8008cf6:	d003      	beq.n	8008d00 <__mcmp+0x2c>
 8008cf8:	d205      	bcs.n	8008d06 <__mcmp+0x32>
 8008cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfe:	bd30      	pop	{r4, r5, pc}
 8008d00:	42a3      	cmp	r3, r4
 8008d02:	d3f3      	bcc.n	8008cec <__mcmp+0x18>
 8008d04:	e7fb      	b.n	8008cfe <__mcmp+0x2a>
 8008d06:	2001      	movs	r0, #1
 8008d08:	e7f9      	b.n	8008cfe <__mcmp+0x2a>
	...

08008d0c <__mdiff>:
 8008d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	4689      	mov	r9, r1
 8008d12:	4606      	mov	r6, r0
 8008d14:	4611      	mov	r1, r2
 8008d16:	4648      	mov	r0, r9
 8008d18:	4614      	mov	r4, r2
 8008d1a:	f7ff ffdb 	bl	8008cd4 <__mcmp>
 8008d1e:	1e05      	subs	r5, r0, #0
 8008d20:	d112      	bne.n	8008d48 <__mdiff+0x3c>
 8008d22:	4629      	mov	r1, r5
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7ff fd63 	bl	80087f0 <_Balloc>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	b928      	cbnz	r0, 8008d3a <__mdiff+0x2e>
 8008d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8008e2c <__mdiff+0x120>)
 8008d30:	f240 2137 	movw	r1, #567	@ 0x237
 8008d34:	483e      	ldr	r0, [pc, #248]	@ (8008e30 <__mdiff+0x124>)
 8008d36:	f000 f99f 	bl	8009078 <__assert_func>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d40:	4610      	mov	r0, r2
 8008d42:	b003      	add	sp, #12
 8008d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d48:	bfbc      	itt	lt
 8008d4a:	464b      	movlt	r3, r9
 8008d4c:	46a1      	movlt	r9, r4
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008d54:	bfba      	itte	lt
 8008d56:	461c      	movlt	r4, r3
 8008d58:	2501      	movlt	r5, #1
 8008d5a:	2500      	movge	r5, #0
 8008d5c:	f7ff fd48 	bl	80087f0 <_Balloc>
 8008d60:	4602      	mov	r2, r0
 8008d62:	b918      	cbnz	r0, 8008d6c <__mdiff+0x60>
 8008d64:	4b31      	ldr	r3, [pc, #196]	@ (8008e2c <__mdiff+0x120>)
 8008d66:	f240 2145 	movw	r1, #581	@ 0x245
 8008d6a:	e7e3      	b.n	8008d34 <__mdiff+0x28>
 8008d6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008d70:	6926      	ldr	r6, [r4, #16]
 8008d72:	60c5      	str	r5, [r0, #12]
 8008d74:	f109 0310 	add.w	r3, r9, #16
 8008d78:	f109 0514 	add.w	r5, r9, #20
 8008d7c:	f104 0e14 	add.w	lr, r4, #20
 8008d80:	f100 0b14 	add.w	fp, r0, #20
 8008d84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008d88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	46d9      	mov	r9, fp
 8008d90:	f04f 0c00 	mov.w	ip, #0
 8008d94:	9b01      	ldr	r3, [sp, #4]
 8008d96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008d9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008d9e:	9301      	str	r3, [sp, #4]
 8008da0:	fa1f f38a 	uxth.w	r3, sl
 8008da4:	4619      	mov	r1, r3
 8008da6:	b283      	uxth	r3, r0
 8008da8:	1acb      	subs	r3, r1, r3
 8008daa:	0c00      	lsrs	r0, r0, #16
 8008dac:	4463      	add	r3, ip
 8008dae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008db2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008dbc:	4576      	cmp	r6, lr
 8008dbe:	f849 3b04 	str.w	r3, [r9], #4
 8008dc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008dc6:	d8e5      	bhi.n	8008d94 <__mdiff+0x88>
 8008dc8:	1b33      	subs	r3, r6, r4
 8008dca:	3b15      	subs	r3, #21
 8008dcc:	f023 0303 	bic.w	r3, r3, #3
 8008dd0:	3415      	adds	r4, #21
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	42a6      	cmp	r6, r4
 8008dd6:	bf38      	it	cc
 8008dd8:	2304      	movcc	r3, #4
 8008dda:	441d      	add	r5, r3
 8008ddc:	445b      	add	r3, fp
 8008dde:	461e      	mov	r6, r3
 8008de0:	462c      	mov	r4, r5
 8008de2:	4544      	cmp	r4, r8
 8008de4:	d30e      	bcc.n	8008e04 <__mdiff+0xf8>
 8008de6:	f108 0103 	add.w	r1, r8, #3
 8008dea:	1b49      	subs	r1, r1, r5
 8008dec:	f021 0103 	bic.w	r1, r1, #3
 8008df0:	3d03      	subs	r5, #3
 8008df2:	45a8      	cmp	r8, r5
 8008df4:	bf38      	it	cc
 8008df6:	2100      	movcc	r1, #0
 8008df8:	440b      	add	r3, r1
 8008dfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008dfe:	b191      	cbz	r1, 8008e26 <__mdiff+0x11a>
 8008e00:	6117      	str	r7, [r2, #16]
 8008e02:	e79d      	b.n	8008d40 <__mdiff+0x34>
 8008e04:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e08:	46e6      	mov	lr, ip
 8008e0a:	0c08      	lsrs	r0, r1, #16
 8008e0c:	fa1c fc81 	uxtah	ip, ip, r1
 8008e10:	4471      	add	r1, lr
 8008e12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e16:	b289      	uxth	r1, r1
 8008e18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e1c:	f846 1b04 	str.w	r1, [r6], #4
 8008e20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e24:	e7dd      	b.n	8008de2 <__mdiff+0xd6>
 8008e26:	3f01      	subs	r7, #1
 8008e28:	e7e7      	b.n	8008dfa <__mdiff+0xee>
 8008e2a:	bf00      	nop
 8008e2c:	08009fd0 	.word	0x08009fd0
 8008e30:	08009fe1 	.word	0x08009fe1

08008e34 <__d2b>:
 8008e34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e38:	460f      	mov	r7, r1
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	ec59 8b10 	vmov	r8, r9, d0
 8008e40:	4616      	mov	r6, r2
 8008e42:	f7ff fcd5 	bl	80087f0 <_Balloc>
 8008e46:	4604      	mov	r4, r0
 8008e48:	b930      	cbnz	r0, 8008e58 <__d2b+0x24>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	4b23      	ldr	r3, [pc, #140]	@ (8008edc <__d2b+0xa8>)
 8008e4e:	4824      	ldr	r0, [pc, #144]	@ (8008ee0 <__d2b+0xac>)
 8008e50:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e54:	f000 f910 	bl	8009078 <__assert_func>
 8008e58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e60:	b10d      	cbz	r5, 8008e66 <__d2b+0x32>
 8008e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	f1b8 0300 	subs.w	r3, r8, #0
 8008e6c:	d023      	beq.n	8008eb6 <__d2b+0x82>
 8008e6e:	4668      	mov	r0, sp
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	f7ff fd84 	bl	800897e <__lo0bits>
 8008e76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e7a:	b1d0      	cbz	r0, 8008eb2 <__d2b+0x7e>
 8008e7c:	f1c0 0320 	rsb	r3, r0, #32
 8008e80:	fa02 f303 	lsl.w	r3, r2, r3
 8008e84:	430b      	orrs	r3, r1
 8008e86:	40c2      	lsrs	r2, r0
 8008e88:	6163      	str	r3, [r4, #20]
 8008e8a:	9201      	str	r2, [sp, #4]
 8008e8c:	9b01      	ldr	r3, [sp, #4]
 8008e8e:	61a3      	str	r3, [r4, #24]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	bf0c      	ite	eq
 8008e94:	2201      	moveq	r2, #1
 8008e96:	2202      	movne	r2, #2
 8008e98:	6122      	str	r2, [r4, #16]
 8008e9a:	b1a5      	cbz	r5, 8008ec6 <__d2b+0x92>
 8008e9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ea0:	4405      	add	r5, r0
 8008ea2:	603d      	str	r5, [r7, #0]
 8008ea4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ea8:	6030      	str	r0, [r6, #0]
 8008eaa:	4620      	mov	r0, r4
 8008eac:	b003      	add	sp, #12
 8008eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eb2:	6161      	str	r1, [r4, #20]
 8008eb4:	e7ea      	b.n	8008e8c <__d2b+0x58>
 8008eb6:	a801      	add	r0, sp, #4
 8008eb8:	f7ff fd61 	bl	800897e <__lo0bits>
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	6163      	str	r3, [r4, #20]
 8008ec0:	3020      	adds	r0, #32
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	e7e8      	b.n	8008e98 <__d2b+0x64>
 8008ec6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008eca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ece:	6038      	str	r0, [r7, #0]
 8008ed0:	6918      	ldr	r0, [r3, #16]
 8008ed2:	f7ff fd35 	bl	8008940 <__hi0bits>
 8008ed6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008eda:	e7e5      	b.n	8008ea8 <__d2b+0x74>
 8008edc:	08009fd0 	.word	0x08009fd0
 8008ee0:	08009fe1 	.word	0x08009fe1

08008ee4 <__sflush_r>:
 8008ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eec:	0716      	lsls	r6, r2, #28
 8008eee:	4605      	mov	r5, r0
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	d454      	bmi.n	8008f9e <__sflush_r+0xba>
 8008ef4:	684b      	ldr	r3, [r1, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	dc02      	bgt.n	8008f00 <__sflush_r+0x1c>
 8008efa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dd48      	ble.n	8008f92 <__sflush_r+0xae>
 8008f00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	d045      	beq.n	8008f92 <__sflush_r+0xae>
 8008f06:	2300      	movs	r3, #0
 8008f08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f0c:	682f      	ldr	r7, [r5, #0]
 8008f0e:	6a21      	ldr	r1, [r4, #32]
 8008f10:	602b      	str	r3, [r5, #0]
 8008f12:	d030      	beq.n	8008f76 <__sflush_r+0x92>
 8008f14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	0759      	lsls	r1, r3, #29
 8008f1a:	d505      	bpl.n	8008f28 <__sflush_r+0x44>
 8008f1c:	6863      	ldr	r3, [r4, #4]
 8008f1e:	1ad2      	subs	r2, r2, r3
 8008f20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f22:	b10b      	cbz	r3, 8008f28 <__sflush_r+0x44>
 8008f24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	2300      	movs	r3, #0
 8008f2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f2c:	6a21      	ldr	r1, [r4, #32]
 8008f2e:	4628      	mov	r0, r5
 8008f30:	47b0      	blx	r6
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	d106      	bne.n	8008f46 <__sflush_r+0x62>
 8008f38:	6829      	ldr	r1, [r5, #0]
 8008f3a:	291d      	cmp	r1, #29
 8008f3c:	d82b      	bhi.n	8008f96 <__sflush_r+0xb2>
 8008f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe8 <__sflush_r+0x104>)
 8008f40:	40ca      	lsrs	r2, r1
 8008f42:	07d6      	lsls	r6, r2, #31
 8008f44:	d527      	bpl.n	8008f96 <__sflush_r+0xb2>
 8008f46:	2200      	movs	r2, #0
 8008f48:	6062      	str	r2, [r4, #4]
 8008f4a:	04d9      	lsls	r1, r3, #19
 8008f4c:	6922      	ldr	r2, [r4, #16]
 8008f4e:	6022      	str	r2, [r4, #0]
 8008f50:	d504      	bpl.n	8008f5c <__sflush_r+0x78>
 8008f52:	1c42      	adds	r2, r0, #1
 8008f54:	d101      	bne.n	8008f5a <__sflush_r+0x76>
 8008f56:	682b      	ldr	r3, [r5, #0]
 8008f58:	b903      	cbnz	r3, 8008f5c <__sflush_r+0x78>
 8008f5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f5e:	602f      	str	r7, [r5, #0]
 8008f60:	b1b9      	cbz	r1, 8008f92 <__sflush_r+0xae>
 8008f62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f66:	4299      	cmp	r1, r3
 8008f68:	d002      	beq.n	8008f70 <__sflush_r+0x8c>
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f7ff fb40 	bl	80085f0 <_free_r>
 8008f70:	2300      	movs	r3, #0
 8008f72:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f74:	e00d      	b.n	8008f92 <__sflush_r+0xae>
 8008f76:	2301      	movs	r3, #1
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b0      	blx	r6
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	1c50      	adds	r0, r2, #1
 8008f80:	d1c9      	bne.n	8008f16 <__sflush_r+0x32>
 8008f82:	682b      	ldr	r3, [r5, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0c6      	beq.n	8008f16 <__sflush_r+0x32>
 8008f88:	2b1d      	cmp	r3, #29
 8008f8a:	d001      	beq.n	8008f90 <__sflush_r+0xac>
 8008f8c:	2b16      	cmp	r3, #22
 8008f8e:	d11e      	bne.n	8008fce <__sflush_r+0xea>
 8008f90:	602f      	str	r7, [r5, #0]
 8008f92:	2000      	movs	r0, #0
 8008f94:	e022      	b.n	8008fdc <__sflush_r+0xf8>
 8008f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f9a:	b21b      	sxth	r3, r3
 8008f9c:	e01b      	b.n	8008fd6 <__sflush_r+0xf2>
 8008f9e:	690f      	ldr	r7, [r1, #16]
 8008fa0:	2f00      	cmp	r7, #0
 8008fa2:	d0f6      	beq.n	8008f92 <__sflush_r+0xae>
 8008fa4:	0793      	lsls	r3, r2, #30
 8008fa6:	680e      	ldr	r6, [r1, #0]
 8008fa8:	bf08      	it	eq
 8008faa:	694b      	ldreq	r3, [r1, #20]
 8008fac:	600f      	str	r7, [r1, #0]
 8008fae:	bf18      	it	ne
 8008fb0:	2300      	movne	r3, #0
 8008fb2:	eba6 0807 	sub.w	r8, r6, r7
 8008fb6:	608b      	str	r3, [r1, #8]
 8008fb8:	f1b8 0f00 	cmp.w	r8, #0
 8008fbc:	dde9      	ble.n	8008f92 <__sflush_r+0xae>
 8008fbe:	6a21      	ldr	r1, [r4, #32]
 8008fc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fc2:	4643      	mov	r3, r8
 8008fc4:	463a      	mov	r2, r7
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	47b0      	blx	r6
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	dc08      	bgt.n	8008fe0 <__sflush_r+0xfc>
 8008fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fd6:	81a3      	strh	r3, [r4, #12]
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe0:	4407      	add	r7, r0
 8008fe2:	eba8 0800 	sub.w	r8, r8, r0
 8008fe6:	e7e7      	b.n	8008fb8 <__sflush_r+0xd4>
 8008fe8:	20400001 	.word	0x20400001

08008fec <_fflush_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	690b      	ldr	r3, [r1, #16]
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	b913      	cbnz	r3, 8008ffc <_fflush_r+0x10>
 8008ff6:	2500      	movs	r5, #0
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	b118      	cbz	r0, 8009006 <_fflush_r+0x1a>
 8008ffe:	6a03      	ldr	r3, [r0, #32]
 8009000:	b90b      	cbnz	r3, 8009006 <_fflush_r+0x1a>
 8009002:	f7fe fba3 	bl	800774c <__sinit>
 8009006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0f3      	beq.n	8008ff6 <_fflush_r+0xa>
 800900e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009010:	07d0      	lsls	r0, r2, #31
 8009012:	d404      	bmi.n	800901e <_fflush_r+0x32>
 8009014:	0599      	lsls	r1, r3, #22
 8009016:	d402      	bmi.n	800901e <_fflush_r+0x32>
 8009018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800901a:	f7fe fc8e 	bl	800793a <__retarget_lock_acquire_recursive>
 800901e:	4628      	mov	r0, r5
 8009020:	4621      	mov	r1, r4
 8009022:	f7ff ff5f 	bl	8008ee4 <__sflush_r>
 8009026:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009028:	07da      	lsls	r2, r3, #31
 800902a:	4605      	mov	r5, r0
 800902c:	d4e4      	bmi.n	8008ff8 <_fflush_r+0xc>
 800902e:	89a3      	ldrh	r3, [r4, #12]
 8009030:	059b      	lsls	r3, r3, #22
 8009032:	d4e1      	bmi.n	8008ff8 <_fflush_r+0xc>
 8009034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009036:	f7fe fc81 	bl	800793c <__retarget_lock_release_recursive>
 800903a:	e7dd      	b.n	8008ff8 <_fflush_r+0xc>

0800903c <_sbrk_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4d06      	ldr	r5, [pc, #24]	@ (8009058 <_sbrk_r+0x1c>)
 8009040:	2300      	movs	r3, #0
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	f7f9 fa30 	bl	80024ac <_sbrk>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_sbrk_r+0x1a>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	b103      	cbz	r3, 8009056 <_sbrk_r+0x1a>
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	20000584 	.word	0x20000584

0800905c <memcpy>:
 800905c:	440a      	add	r2, r1
 800905e:	4291      	cmp	r1, r2
 8009060:	f100 33ff 	add.w	r3, r0, #4294967295
 8009064:	d100      	bne.n	8009068 <memcpy+0xc>
 8009066:	4770      	bx	lr
 8009068:	b510      	push	{r4, lr}
 800906a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800906e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009072:	4291      	cmp	r1, r2
 8009074:	d1f9      	bne.n	800906a <memcpy+0xe>
 8009076:	bd10      	pop	{r4, pc}

08009078 <__assert_func>:
 8009078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800907a:	4614      	mov	r4, r2
 800907c:	461a      	mov	r2, r3
 800907e:	4b09      	ldr	r3, [pc, #36]	@ (80090a4 <__assert_func+0x2c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4605      	mov	r5, r0
 8009084:	68d8      	ldr	r0, [r3, #12]
 8009086:	b14c      	cbz	r4, 800909c <__assert_func+0x24>
 8009088:	4b07      	ldr	r3, [pc, #28]	@ (80090a8 <__assert_func+0x30>)
 800908a:	9100      	str	r1, [sp, #0]
 800908c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009090:	4906      	ldr	r1, [pc, #24]	@ (80090ac <__assert_func+0x34>)
 8009092:	462b      	mov	r3, r5
 8009094:	f000 f842 	bl	800911c <fiprintf>
 8009098:	f000 f852 	bl	8009140 <abort>
 800909c:	4b04      	ldr	r3, [pc, #16]	@ (80090b0 <__assert_func+0x38>)
 800909e:	461c      	mov	r4, r3
 80090a0:	e7f3      	b.n	800908a <__assert_func+0x12>
 80090a2:	bf00      	nop
 80090a4:	20000024 	.word	0x20000024
 80090a8:	0800a044 	.word	0x0800a044
 80090ac:	0800a051 	.word	0x0800a051
 80090b0:	0800a07f 	.word	0x0800a07f

080090b4 <_calloc_r>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	fba1 5402 	umull	r5, r4, r1, r2
 80090ba:	b934      	cbnz	r4, 80090ca <_calloc_r+0x16>
 80090bc:	4629      	mov	r1, r5
 80090be:	f7ff fb0b 	bl	80086d8 <_malloc_r>
 80090c2:	4606      	mov	r6, r0
 80090c4:	b928      	cbnz	r0, 80090d2 <_calloc_r+0x1e>
 80090c6:	4630      	mov	r0, r6
 80090c8:	bd70      	pop	{r4, r5, r6, pc}
 80090ca:	220c      	movs	r2, #12
 80090cc:	6002      	str	r2, [r0, #0]
 80090ce:	2600      	movs	r6, #0
 80090d0:	e7f9      	b.n	80090c6 <_calloc_r+0x12>
 80090d2:	462a      	mov	r2, r5
 80090d4:	4621      	mov	r1, r4
 80090d6:	f7fe fbb2 	bl	800783e <memset>
 80090da:	e7f4      	b.n	80090c6 <_calloc_r+0x12>

080090dc <__ascii_mbtowc>:
 80090dc:	b082      	sub	sp, #8
 80090de:	b901      	cbnz	r1, 80090e2 <__ascii_mbtowc+0x6>
 80090e0:	a901      	add	r1, sp, #4
 80090e2:	b142      	cbz	r2, 80090f6 <__ascii_mbtowc+0x1a>
 80090e4:	b14b      	cbz	r3, 80090fa <__ascii_mbtowc+0x1e>
 80090e6:	7813      	ldrb	r3, [r2, #0]
 80090e8:	600b      	str	r3, [r1, #0]
 80090ea:	7812      	ldrb	r2, [r2, #0]
 80090ec:	1e10      	subs	r0, r2, #0
 80090ee:	bf18      	it	ne
 80090f0:	2001      	movne	r0, #1
 80090f2:	b002      	add	sp, #8
 80090f4:	4770      	bx	lr
 80090f6:	4610      	mov	r0, r2
 80090f8:	e7fb      	b.n	80090f2 <__ascii_mbtowc+0x16>
 80090fa:	f06f 0001 	mvn.w	r0, #1
 80090fe:	e7f8      	b.n	80090f2 <__ascii_mbtowc+0x16>

08009100 <__ascii_wctomb>:
 8009100:	4603      	mov	r3, r0
 8009102:	4608      	mov	r0, r1
 8009104:	b141      	cbz	r1, 8009118 <__ascii_wctomb+0x18>
 8009106:	2aff      	cmp	r2, #255	@ 0xff
 8009108:	d904      	bls.n	8009114 <__ascii_wctomb+0x14>
 800910a:	228a      	movs	r2, #138	@ 0x8a
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	f04f 30ff 	mov.w	r0, #4294967295
 8009112:	4770      	bx	lr
 8009114:	700a      	strb	r2, [r1, #0]
 8009116:	2001      	movs	r0, #1
 8009118:	4770      	bx	lr
	...

0800911c <fiprintf>:
 800911c:	b40e      	push	{r1, r2, r3}
 800911e:	b503      	push	{r0, r1, lr}
 8009120:	4601      	mov	r1, r0
 8009122:	ab03      	add	r3, sp, #12
 8009124:	4805      	ldr	r0, [pc, #20]	@ (800913c <fiprintf+0x20>)
 8009126:	f853 2b04 	ldr.w	r2, [r3], #4
 800912a:	6800      	ldr	r0, [r0, #0]
 800912c:	9301      	str	r3, [sp, #4]
 800912e:	f000 f837 	bl	80091a0 <_vfiprintf_r>
 8009132:	b002      	add	sp, #8
 8009134:	f85d eb04 	ldr.w	lr, [sp], #4
 8009138:	b003      	add	sp, #12
 800913a:	4770      	bx	lr
 800913c:	20000024 	.word	0x20000024

08009140 <abort>:
 8009140:	b508      	push	{r3, lr}
 8009142:	2006      	movs	r0, #6
 8009144:	f000 fa00 	bl	8009548 <raise>
 8009148:	2001      	movs	r0, #1
 800914a:	f7f9 f937 	bl	80023bc <_exit>

0800914e <__sfputc_r>:
 800914e:	6893      	ldr	r3, [r2, #8]
 8009150:	3b01      	subs	r3, #1
 8009152:	2b00      	cmp	r3, #0
 8009154:	b410      	push	{r4}
 8009156:	6093      	str	r3, [r2, #8]
 8009158:	da08      	bge.n	800916c <__sfputc_r+0x1e>
 800915a:	6994      	ldr	r4, [r2, #24]
 800915c:	42a3      	cmp	r3, r4
 800915e:	db01      	blt.n	8009164 <__sfputc_r+0x16>
 8009160:	290a      	cmp	r1, #10
 8009162:	d103      	bne.n	800916c <__sfputc_r+0x1e>
 8009164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009168:	f000 b932 	b.w	80093d0 <__swbuf_r>
 800916c:	6813      	ldr	r3, [r2, #0]
 800916e:	1c58      	adds	r0, r3, #1
 8009170:	6010      	str	r0, [r2, #0]
 8009172:	7019      	strb	r1, [r3, #0]
 8009174:	4608      	mov	r0, r1
 8009176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800917a:	4770      	bx	lr

0800917c <__sfputs_r>:
 800917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917e:	4606      	mov	r6, r0
 8009180:	460f      	mov	r7, r1
 8009182:	4614      	mov	r4, r2
 8009184:	18d5      	adds	r5, r2, r3
 8009186:	42ac      	cmp	r4, r5
 8009188:	d101      	bne.n	800918e <__sfputs_r+0x12>
 800918a:	2000      	movs	r0, #0
 800918c:	e007      	b.n	800919e <__sfputs_r+0x22>
 800918e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009192:	463a      	mov	r2, r7
 8009194:	4630      	mov	r0, r6
 8009196:	f7ff ffda 	bl	800914e <__sfputc_r>
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	d1f3      	bne.n	8009186 <__sfputs_r+0xa>
 800919e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091a0 <_vfiprintf_r>:
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	460d      	mov	r5, r1
 80091a6:	b09d      	sub	sp, #116	@ 0x74
 80091a8:	4614      	mov	r4, r2
 80091aa:	4698      	mov	r8, r3
 80091ac:	4606      	mov	r6, r0
 80091ae:	b118      	cbz	r0, 80091b8 <_vfiprintf_r+0x18>
 80091b0:	6a03      	ldr	r3, [r0, #32]
 80091b2:	b90b      	cbnz	r3, 80091b8 <_vfiprintf_r+0x18>
 80091b4:	f7fe faca 	bl	800774c <__sinit>
 80091b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ba:	07d9      	lsls	r1, r3, #31
 80091bc:	d405      	bmi.n	80091ca <_vfiprintf_r+0x2a>
 80091be:	89ab      	ldrh	r3, [r5, #12]
 80091c0:	059a      	lsls	r2, r3, #22
 80091c2:	d402      	bmi.n	80091ca <_vfiprintf_r+0x2a>
 80091c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091c6:	f7fe fbb8 	bl	800793a <__retarget_lock_acquire_recursive>
 80091ca:	89ab      	ldrh	r3, [r5, #12]
 80091cc:	071b      	lsls	r3, r3, #28
 80091ce:	d501      	bpl.n	80091d4 <_vfiprintf_r+0x34>
 80091d0:	692b      	ldr	r3, [r5, #16]
 80091d2:	b99b      	cbnz	r3, 80091fc <_vfiprintf_r+0x5c>
 80091d4:	4629      	mov	r1, r5
 80091d6:	4630      	mov	r0, r6
 80091d8:	f000 f938 	bl	800944c <__swsetup_r>
 80091dc:	b170      	cbz	r0, 80091fc <_vfiprintf_r+0x5c>
 80091de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091e0:	07dc      	lsls	r4, r3, #31
 80091e2:	d504      	bpl.n	80091ee <_vfiprintf_r+0x4e>
 80091e4:	f04f 30ff 	mov.w	r0, #4294967295
 80091e8:	b01d      	add	sp, #116	@ 0x74
 80091ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ee:	89ab      	ldrh	r3, [r5, #12]
 80091f0:	0598      	lsls	r0, r3, #22
 80091f2:	d4f7      	bmi.n	80091e4 <_vfiprintf_r+0x44>
 80091f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091f6:	f7fe fba1 	bl	800793c <__retarget_lock_release_recursive>
 80091fa:	e7f3      	b.n	80091e4 <_vfiprintf_r+0x44>
 80091fc:	2300      	movs	r3, #0
 80091fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009200:	2320      	movs	r3, #32
 8009202:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009206:	f8cd 800c 	str.w	r8, [sp, #12]
 800920a:	2330      	movs	r3, #48	@ 0x30
 800920c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093bc <_vfiprintf_r+0x21c>
 8009210:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009214:	f04f 0901 	mov.w	r9, #1
 8009218:	4623      	mov	r3, r4
 800921a:	469a      	mov	sl, r3
 800921c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009220:	b10a      	cbz	r2, 8009226 <_vfiprintf_r+0x86>
 8009222:	2a25      	cmp	r2, #37	@ 0x25
 8009224:	d1f9      	bne.n	800921a <_vfiprintf_r+0x7a>
 8009226:	ebba 0b04 	subs.w	fp, sl, r4
 800922a:	d00b      	beq.n	8009244 <_vfiprintf_r+0xa4>
 800922c:	465b      	mov	r3, fp
 800922e:	4622      	mov	r2, r4
 8009230:	4629      	mov	r1, r5
 8009232:	4630      	mov	r0, r6
 8009234:	f7ff ffa2 	bl	800917c <__sfputs_r>
 8009238:	3001      	adds	r0, #1
 800923a:	f000 80a7 	beq.w	800938c <_vfiprintf_r+0x1ec>
 800923e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009240:	445a      	add	r2, fp
 8009242:	9209      	str	r2, [sp, #36]	@ 0x24
 8009244:	f89a 3000 	ldrb.w	r3, [sl]
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 809f 	beq.w	800938c <_vfiprintf_r+0x1ec>
 800924e:	2300      	movs	r3, #0
 8009250:	f04f 32ff 	mov.w	r2, #4294967295
 8009254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009258:	f10a 0a01 	add.w	sl, sl, #1
 800925c:	9304      	str	r3, [sp, #16]
 800925e:	9307      	str	r3, [sp, #28]
 8009260:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009264:	931a      	str	r3, [sp, #104]	@ 0x68
 8009266:	4654      	mov	r4, sl
 8009268:	2205      	movs	r2, #5
 800926a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926e:	4853      	ldr	r0, [pc, #332]	@ (80093bc <_vfiprintf_r+0x21c>)
 8009270:	f7f6 ffae 	bl	80001d0 <memchr>
 8009274:	9a04      	ldr	r2, [sp, #16]
 8009276:	b9d8      	cbnz	r0, 80092b0 <_vfiprintf_r+0x110>
 8009278:	06d1      	lsls	r1, r2, #27
 800927a:	bf44      	itt	mi
 800927c:	2320      	movmi	r3, #32
 800927e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009282:	0713      	lsls	r3, r2, #28
 8009284:	bf44      	itt	mi
 8009286:	232b      	movmi	r3, #43	@ 0x2b
 8009288:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800928c:	f89a 3000 	ldrb.w	r3, [sl]
 8009290:	2b2a      	cmp	r3, #42	@ 0x2a
 8009292:	d015      	beq.n	80092c0 <_vfiprintf_r+0x120>
 8009294:	9a07      	ldr	r2, [sp, #28]
 8009296:	4654      	mov	r4, sl
 8009298:	2000      	movs	r0, #0
 800929a:	f04f 0c0a 	mov.w	ip, #10
 800929e:	4621      	mov	r1, r4
 80092a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092a4:	3b30      	subs	r3, #48	@ 0x30
 80092a6:	2b09      	cmp	r3, #9
 80092a8:	d94b      	bls.n	8009342 <_vfiprintf_r+0x1a2>
 80092aa:	b1b0      	cbz	r0, 80092da <_vfiprintf_r+0x13a>
 80092ac:	9207      	str	r2, [sp, #28]
 80092ae:	e014      	b.n	80092da <_vfiprintf_r+0x13a>
 80092b0:	eba0 0308 	sub.w	r3, r0, r8
 80092b4:	fa09 f303 	lsl.w	r3, r9, r3
 80092b8:	4313      	orrs	r3, r2
 80092ba:	9304      	str	r3, [sp, #16]
 80092bc:	46a2      	mov	sl, r4
 80092be:	e7d2      	b.n	8009266 <_vfiprintf_r+0xc6>
 80092c0:	9b03      	ldr	r3, [sp, #12]
 80092c2:	1d19      	adds	r1, r3, #4
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	9103      	str	r1, [sp, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	bfbb      	ittet	lt
 80092cc:	425b      	neglt	r3, r3
 80092ce:	f042 0202 	orrlt.w	r2, r2, #2
 80092d2:	9307      	strge	r3, [sp, #28]
 80092d4:	9307      	strlt	r3, [sp, #28]
 80092d6:	bfb8      	it	lt
 80092d8:	9204      	strlt	r2, [sp, #16]
 80092da:	7823      	ldrb	r3, [r4, #0]
 80092dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80092de:	d10a      	bne.n	80092f6 <_vfiprintf_r+0x156>
 80092e0:	7863      	ldrb	r3, [r4, #1]
 80092e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80092e4:	d132      	bne.n	800934c <_vfiprintf_r+0x1ac>
 80092e6:	9b03      	ldr	r3, [sp, #12]
 80092e8:	1d1a      	adds	r2, r3, #4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	9203      	str	r2, [sp, #12]
 80092ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092f2:	3402      	adds	r4, #2
 80092f4:	9305      	str	r3, [sp, #20]
 80092f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093cc <_vfiprintf_r+0x22c>
 80092fa:	7821      	ldrb	r1, [r4, #0]
 80092fc:	2203      	movs	r2, #3
 80092fe:	4650      	mov	r0, sl
 8009300:	f7f6 ff66 	bl	80001d0 <memchr>
 8009304:	b138      	cbz	r0, 8009316 <_vfiprintf_r+0x176>
 8009306:	9b04      	ldr	r3, [sp, #16]
 8009308:	eba0 000a 	sub.w	r0, r0, sl
 800930c:	2240      	movs	r2, #64	@ 0x40
 800930e:	4082      	lsls	r2, r0
 8009310:	4313      	orrs	r3, r2
 8009312:	3401      	adds	r4, #1
 8009314:	9304      	str	r3, [sp, #16]
 8009316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800931a:	4829      	ldr	r0, [pc, #164]	@ (80093c0 <_vfiprintf_r+0x220>)
 800931c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009320:	2206      	movs	r2, #6
 8009322:	f7f6 ff55 	bl	80001d0 <memchr>
 8009326:	2800      	cmp	r0, #0
 8009328:	d03f      	beq.n	80093aa <_vfiprintf_r+0x20a>
 800932a:	4b26      	ldr	r3, [pc, #152]	@ (80093c4 <_vfiprintf_r+0x224>)
 800932c:	bb1b      	cbnz	r3, 8009376 <_vfiprintf_r+0x1d6>
 800932e:	9b03      	ldr	r3, [sp, #12]
 8009330:	3307      	adds	r3, #7
 8009332:	f023 0307 	bic.w	r3, r3, #7
 8009336:	3308      	adds	r3, #8
 8009338:	9303      	str	r3, [sp, #12]
 800933a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800933c:	443b      	add	r3, r7
 800933e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009340:	e76a      	b.n	8009218 <_vfiprintf_r+0x78>
 8009342:	fb0c 3202 	mla	r2, ip, r2, r3
 8009346:	460c      	mov	r4, r1
 8009348:	2001      	movs	r0, #1
 800934a:	e7a8      	b.n	800929e <_vfiprintf_r+0xfe>
 800934c:	2300      	movs	r3, #0
 800934e:	3401      	adds	r4, #1
 8009350:	9305      	str	r3, [sp, #20]
 8009352:	4619      	mov	r1, r3
 8009354:	f04f 0c0a 	mov.w	ip, #10
 8009358:	4620      	mov	r0, r4
 800935a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800935e:	3a30      	subs	r2, #48	@ 0x30
 8009360:	2a09      	cmp	r2, #9
 8009362:	d903      	bls.n	800936c <_vfiprintf_r+0x1cc>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0c6      	beq.n	80092f6 <_vfiprintf_r+0x156>
 8009368:	9105      	str	r1, [sp, #20]
 800936a:	e7c4      	b.n	80092f6 <_vfiprintf_r+0x156>
 800936c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009370:	4604      	mov	r4, r0
 8009372:	2301      	movs	r3, #1
 8009374:	e7f0      	b.n	8009358 <_vfiprintf_r+0x1b8>
 8009376:	ab03      	add	r3, sp, #12
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	462a      	mov	r2, r5
 800937c:	4b12      	ldr	r3, [pc, #72]	@ (80093c8 <_vfiprintf_r+0x228>)
 800937e:	a904      	add	r1, sp, #16
 8009380:	4630      	mov	r0, r6
 8009382:	f7fd fda1 	bl	8006ec8 <_printf_float>
 8009386:	4607      	mov	r7, r0
 8009388:	1c78      	adds	r0, r7, #1
 800938a:	d1d6      	bne.n	800933a <_vfiprintf_r+0x19a>
 800938c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800938e:	07d9      	lsls	r1, r3, #31
 8009390:	d405      	bmi.n	800939e <_vfiprintf_r+0x1fe>
 8009392:	89ab      	ldrh	r3, [r5, #12]
 8009394:	059a      	lsls	r2, r3, #22
 8009396:	d402      	bmi.n	800939e <_vfiprintf_r+0x1fe>
 8009398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800939a:	f7fe facf 	bl	800793c <__retarget_lock_release_recursive>
 800939e:	89ab      	ldrh	r3, [r5, #12]
 80093a0:	065b      	lsls	r3, r3, #25
 80093a2:	f53f af1f 	bmi.w	80091e4 <_vfiprintf_r+0x44>
 80093a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093a8:	e71e      	b.n	80091e8 <_vfiprintf_r+0x48>
 80093aa:	ab03      	add	r3, sp, #12
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	462a      	mov	r2, r5
 80093b0:	4b05      	ldr	r3, [pc, #20]	@ (80093c8 <_vfiprintf_r+0x228>)
 80093b2:	a904      	add	r1, sp, #16
 80093b4:	4630      	mov	r0, r6
 80093b6:	f7fe f81f 	bl	80073f8 <_printf_i>
 80093ba:	e7e4      	b.n	8009386 <_vfiprintf_r+0x1e6>
 80093bc:	0800a080 	.word	0x0800a080
 80093c0:	0800a08a 	.word	0x0800a08a
 80093c4:	08006ec9 	.word	0x08006ec9
 80093c8:	0800917d 	.word	0x0800917d
 80093cc:	0800a086 	.word	0x0800a086

080093d0 <__swbuf_r>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	460e      	mov	r6, r1
 80093d4:	4614      	mov	r4, r2
 80093d6:	4605      	mov	r5, r0
 80093d8:	b118      	cbz	r0, 80093e2 <__swbuf_r+0x12>
 80093da:	6a03      	ldr	r3, [r0, #32]
 80093dc:	b90b      	cbnz	r3, 80093e2 <__swbuf_r+0x12>
 80093de:	f7fe f9b5 	bl	800774c <__sinit>
 80093e2:	69a3      	ldr	r3, [r4, #24]
 80093e4:	60a3      	str	r3, [r4, #8]
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	071a      	lsls	r2, r3, #28
 80093ea:	d501      	bpl.n	80093f0 <__swbuf_r+0x20>
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	b943      	cbnz	r3, 8009402 <__swbuf_r+0x32>
 80093f0:	4621      	mov	r1, r4
 80093f2:	4628      	mov	r0, r5
 80093f4:	f000 f82a 	bl	800944c <__swsetup_r>
 80093f8:	b118      	cbz	r0, 8009402 <__swbuf_r+0x32>
 80093fa:	f04f 37ff 	mov.w	r7, #4294967295
 80093fe:	4638      	mov	r0, r7
 8009400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	6922      	ldr	r2, [r4, #16]
 8009406:	1a98      	subs	r0, r3, r2
 8009408:	6963      	ldr	r3, [r4, #20]
 800940a:	b2f6      	uxtb	r6, r6
 800940c:	4283      	cmp	r3, r0
 800940e:	4637      	mov	r7, r6
 8009410:	dc05      	bgt.n	800941e <__swbuf_r+0x4e>
 8009412:	4621      	mov	r1, r4
 8009414:	4628      	mov	r0, r5
 8009416:	f7ff fde9 	bl	8008fec <_fflush_r>
 800941a:	2800      	cmp	r0, #0
 800941c:	d1ed      	bne.n	80093fa <__swbuf_r+0x2a>
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	3b01      	subs	r3, #1
 8009422:	60a3      	str	r3, [r4, #8]
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	6022      	str	r2, [r4, #0]
 800942a:	701e      	strb	r6, [r3, #0]
 800942c:	6962      	ldr	r2, [r4, #20]
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	429a      	cmp	r2, r3
 8009432:	d004      	beq.n	800943e <__swbuf_r+0x6e>
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	07db      	lsls	r3, r3, #31
 8009438:	d5e1      	bpl.n	80093fe <__swbuf_r+0x2e>
 800943a:	2e0a      	cmp	r6, #10
 800943c:	d1df      	bne.n	80093fe <__swbuf_r+0x2e>
 800943e:	4621      	mov	r1, r4
 8009440:	4628      	mov	r0, r5
 8009442:	f7ff fdd3 	bl	8008fec <_fflush_r>
 8009446:	2800      	cmp	r0, #0
 8009448:	d0d9      	beq.n	80093fe <__swbuf_r+0x2e>
 800944a:	e7d6      	b.n	80093fa <__swbuf_r+0x2a>

0800944c <__swsetup_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4b29      	ldr	r3, [pc, #164]	@ (80094f4 <__swsetup_r+0xa8>)
 8009450:	4605      	mov	r5, r0
 8009452:	6818      	ldr	r0, [r3, #0]
 8009454:	460c      	mov	r4, r1
 8009456:	b118      	cbz	r0, 8009460 <__swsetup_r+0x14>
 8009458:	6a03      	ldr	r3, [r0, #32]
 800945a:	b90b      	cbnz	r3, 8009460 <__swsetup_r+0x14>
 800945c:	f7fe f976 	bl	800774c <__sinit>
 8009460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009464:	0719      	lsls	r1, r3, #28
 8009466:	d422      	bmi.n	80094ae <__swsetup_r+0x62>
 8009468:	06da      	lsls	r2, r3, #27
 800946a:	d407      	bmi.n	800947c <__swsetup_r+0x30>
 800946c:	2209      	movs	r2, #9
 800946e:	602a      	str	r2, [r5, #0]
 8009470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009474:	81a3      	strh	r3, [r4, #12]
 8009476:	f04f 30ff 	mov.w	r0, #4294967295
 800947a:	e033      	b.n	80094e4 <__swsetup_r+0x98>
 800947c:	0758      	lsls	r0, r3, #29
 800947e:	d512      	bpl.n	80094a6 <__swsetup_r+0x5a>
 8009480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009482:	b141      	cbz	r1, 8009496 <__swsetup_r+0x4a>
 8009484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009488:	4299      	cmp	r1, r3
 800948a:	d002      	beq.n	8009492 <__swsetup_r+0x46>
 800948c:	4628      	mov	r0, r5
 800948e:	f7ff f8af 	bl	80085f0 <_free_r>
 8009492:	2300      	movs	r3, #0
 8009494:	6363      	str	r3, [r4, #52]	@ 0x34
 8009496:	89a3      	ldrh	r3, [r4, #12]
 8009498:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800949c:	81a3      	strh	r3, [r4, #12]
 800949e:	2300      	movs	r3, #0
 80094a0:	6063      	str	r3, [r4, #4]
 80094a2:	6923      	ldr	r3, [r4, #16]
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	f043 0308 	orr.w	r3, r3, #8
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	b94b      	cbnz	r3, 80094c6 <__swsetup_r+0x7a>
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094bc:	d003      	beq.n	80094c6 <__swsetup_r+0x7a>
 80094be:	4621      	mov	r1, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	f000 f883 	bl	80095cc <__smakebuf_r>
 80094c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ca:	f013 0201 	ands.w	r2, r3, #1
 80094ce:	d00a      	beq.n	80094e6 <__swsetup_r+0x9a>
 80094d0:	2200      	movs	r2, #0
 80094d2:	60a2      	str	r2, [r4, #8]
 80094d4:	6962      	ldr	r2, [r4, #20]
 80094d6:	4252      	negs	r2, r2
 80094d8:	61a2      	str	r2, [r4, #24]
 80094da:	6922      	ldr	r2, [r4, #16]
 80094dc:	b942      	cbnz	r2, 80094f0 <__swsetup_r+0xa4>
 80094de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094e2:	d1c5      	bne.n	8009470 <__swsetup_r+0x24>
 80094e4:	bd38      	pop	{r3, r4, r5, pc}
 80094e6:	0799      	lsls	r1, r3, #30
 80094e8:	bf58      	it	pl
 80094ea:	6962      	ldrpl	r2, [r4, #20]
 80094ec:	60a2      	str	r2, [r4, #8]
 80094ee:	e7f4      	b.n	80094da <__swsetup_r+0x8e>
 80094f0:	2000      	movs	r0, #0
 80094f2:	e7f7      	b.n	80094e4 <__swsetup_r+0x98>
 80094f4:	20000024 	.word	0x20000024

080094f8 <_raise_r>:
 80094f8:	291f      	cmp	r1, #31
 80094fa:	b538      	push	{r3, r4, r5, lr}
 80094fc:	4605      	mov	r5, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	d904      	bls.n	800950c <_raise_r+0x14>
 8009502:	2316      	movs	r3, #22
 8009504:	6003      	str	r3, [r0, #0]
 8009506:	f04f 30ff 	mov.w	r0, #4294967295
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800950e:	b112      	cbz	r2, 8009516 <_raise_r+0x1e>
 8009510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009514:	b94b      	cbnz	r3, 800952a <_raise_r+0x32>
 8009516:	4628      	mov	r0, r5
 8009518:	f000 f830 	bl	800957c <_getpid_r>
 800951c:	4622      	mov	r2, r4
 800951e:	4601      	mov	r1, r0
 8009520:	4628      	mov	r0, r5
 8009522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009526:	f000 b817 	b.w	8009558 <_kill_r>
 800952a:	2b01      	cmp	r3, #1
 800952c:	d00a      	beq.n	8009544 <_raise_r+0x4c>
 800952e:	1c59      	adds	r1, r3, #1
 8009530:	d103      	bne.n	800953a <_raise_r+0x42>
 8009532:	2316      	movs	r3, #22
 8009534:	6003      	str	r3, [r0, #0]
 8009536:	2001      	movs	r0, #1
 8009538:	e7e7      	b.n	800950a <_raise_r+0x12>
 800953a:	2100      	movs	r1, #0
 800953c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009540:	4620      	mov	r0, r4
 8009542:	4798      	blx	r3
 8009544:	2000      	movs	r0, #0
 8009546:	e7e0      	b.n	800950a <_raise_r+0x12>

08009548 <raise>:
 8009548:	4b02      	ldr	r3, [pc, #8]	@ (8009554 <raise+0xc>)
 800954a:	4601      	mov	r1, r0
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	f7ff bfd3 	b.w	80094f8 <_raise_r>
 8009552:	bf00      	nop
 8009554:	20000024 	.word	0x20000024

08009558 <_kill_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	@ (8009578 <_kill_r+0x20>)
 800955c:	2300      	movs	r3, #0
 800955e:	4604      	mov	r4, r0
 8009560:	4608      	mov	r0, r1
 8009562:	4611      	mov	r1, r2
 8009564:	602b      	str	r3, [r5, #0]
 8009566:	f7f8 ff19 	bl	800239c <_kill>
 800956a:	1c43      	adds	r3, r0, #1
 800956c:	d102      	bne.n	8009574 <_kill_r+0x1c>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	b103      	cbz	r3, 8009574 <_kill_r+0x1c>
 8009572:	6023      	str	r3, [r4, #0]
 8009574:	bd38      	pop	{r3, r4, r5, pc}
 8009576:	bf00      	nop
 8009578:	20000584 	.word	0x20000584

0800957c <_getpid_r>:
 800957c:	f7f8 bf06 	b.w	800238c <_getpid>

08009580 <__swhatbuf_r>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	460c      	mov	r4, r1
 8009584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009588:	2900      	cmp	r1, #0
 800958a:	b096      	sub	sp, #88	@ 0x58
 800958c:	4615      	mov	r5, r2
 800958e:	461e      	mov	r6, r3
 8009590:	da0d      	bge.n	80095ae <__swhatbuf_r+0x2e>
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009598:	f04f 0100 	mov.w	r1, #0
 800959c:	bf14      	ite	ne
 800959e:	2340      	movne	r3, #64	@ 0x40
 80095a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095a4:	2000      	movs	r0, #0
 80095a6:	6031      	str	r1, [r6, #0]
 80095a8:	602b      	str	r3, [r5, #0]
 80095aa:	b016      	add	sp, #88	@ 0x58
 80095ac:	bd70      	pop	{r4, r5, r6, pc}
 80095ae:	466a      	mov	r2, sp
 80095b0:	f000 f848 	bl	8009644 <_fstat_r>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	dbec      	blt.n	8009592 <__swhatbuf_r+0x12>
 80095b8:	9901      	ldr	r1, [sp, #4]
 80095ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80095be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80095c2:	4259      	negs	r1, r3
 80095c4:	4159      	adcs	r1, r3
 80095c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095ca:	e7eb      	b.n	80095a4 <__swhatbuf_r+0x24>

080095cc <__smakebuf_r>:
 80095cc:	898b      	ldrh	r3, [r1, #12]
 80095ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095d0:	079d      	lsls	r5, r3, #30
 80095d2:	4606      	mov	r6, r0
 80095d4:	460c      	mov	r4, r1
 80095d6:	d507      	bpl.n	80095e8 <__smakebuf_r+0x1c>
 80095d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	6123      	str	r3, [r4, #16]
 80095e0:	2301      	movs	r3, #1
 80095e2:	6163      	str	r3, [r4, #20]
 80095e4:	b003      	add	sp, #12
 80095e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e8:	ab01      	add	r3, sp, #4
 80095ea:	466a      	mov	r2, sp
 80095ec:	f7ff ffc8 	bl	8009580 <__swhatbuf_r>
 80095f0:	9f00      	ldr	r7, [sp, #0]
 80095f2:	4605      	mov	r5, r0
 80095f4:	4639      	mov	r1, r7
 80095f6:	4630      	mov	r0, r6
 80095f8:	f7ff f86e 	bl	80086d8 <_malloc_r>
 80095fc:	b948      	cbnz	r0, 8009612 <__smakebuf_r+0x46>
 80095fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009602:	059a      	lsls	r2, r3, #22
 8009604:	d4ee      	bmi.n	80095e4 <__smakebuf_r+0x18>
 8009606:	f023 0303 	bic.w	r3, r3, #3
 800960a:	f043 0302 	orr.w	r3, r3, #2
 800960e:	81a3      	strh	r3, [r4, #12]
 8009610:	e7e2      	b.n	80095d8 <__smakebuf_r+0xc>
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	6020      	str	r0, [r4, #0]
 8009616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800961a:	81a3      	strh	r3, [r4, #12]
 800961c:	9b01      	ldr	r3, [sp, #4]
 800961e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009622:	b15b      	cbz	r3, 800963c <__smakebuf_r+0x70>
 8009624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009628:	4630      	mov	r0, r6
 800962a:	f000 f81d 	bl	8009668 <_isatty_r>
 800962e:	b128      	cbz	r0, 800963c <__smakebuf_r+0x70>
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	f023 0303 	bic.w	r3, r3, #3
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	431d      	orrs	r5, r3
 8009640:	81a5      	strh	r5, [r4, #12]
 8009642:	e7cf      	b.n	80095e4 <__smakebuf_r+0x18>

08009644 <_fstat_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d07      	ldr	r5, [pc, #28]	@ (8009664 <_fstat_r+0x20>)
 8009648:	2300      	movs	r3, #0
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	4611      	mov	r1, r2
 8009650:	602b      	str	r3, [r5, #0]
 8009652:	f7f8 ff03 	bl	800245c <_fstat>
 8009656:	1c43      	adds	r3, r0, #1
 8009658:	d102      	bne.n	8009660 <_fstat_r+0x1c>
 800965a:	682b      	ldr	r3, [r5, #0]
 800965c:	b103      	cbz	r3, 8009660 <_fstat_r+0x1c>
 800965e:	6023      	str	r3, [r4, #0]
 8009660:	bd38      	pop	{r3, r4, r5, pc}
 8009662:	bf00      	nop
 8009664:	20000584 	.word	0x20000584

08009668 <_isatty_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	4d06      	ldr	r5, [pc, #24]	@ (8009684 <_isatty_r+0x1c>)
 800966c:	2300      	movs	r3, #0
 800966e:	4604      	mov	r4, r0
 8009670:	4608      	mov	r0, r1
 8009672:	602b      	str	r3, [r5, #0]
 8009674:	f7f8 ff02 	bl	800247c <_isatty>
 8009678:	1c43      	adds	r3, r0, #1
 800967a:	d102      	bne.n	8009682 <_isatty_r+0x1a>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	b103      	cbz	r3, 8009682 <_isatty_r+0x1a>
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	20000584 	.word	0x20000584

08009688 <_init>:
 8009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968a:	bf00      	nop
 800968c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968e:	bc08      	pop	{r3}
 8009690:	469e      	mov	lr, r3
 8009692:	4770      	bx	lr

08009694 <_fini>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	bf00      	nop
 8009698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969a:	bc08      	pop	{r3}
 800969c:	469e      	mov	lr, r3
 800969e:	4770      	bx	lr
