
ProjectIdentity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fe0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c14  08009170  08009170  0000a170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d84  08009d84  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d84  08009d84  0000ad84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d8c  08009d8c  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d8c  08009d8c  0000ad8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d90  08009d90  0000ad90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009d94  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001d8  08009f6c  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  08009f6c  0000b548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c4a  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002daa  00000000  00000000  00020e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00023c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f75  00000000  00000000  00024fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f09c  00000000  00000000  00025f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181a1  00000000  00000000  00044fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b73bf  00000000  00000000  0005d182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006554  00000000  00000000  00114584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011aad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009158 	.word	0x08009158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009158 	.word	0x08009158

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <_sendCmd>:
#include "SSD1331.h"

static unsigned char CHR_X, CHR_Y;

void _sendCmd(uint8_t cmd)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET); // DC = 0 (komenda)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbc:	f002 fc92 	bl	80034e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS = 0
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f002 fc8c 	bl	80034e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8000bcc:	1df9      	adds	r1, r7, #7
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <_sendCmd+0x48>)
 8000bd6:	f004 fb62 	bl	800529e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);   // CS = 1
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2110      	movs	r1, #16
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be2:	f002 fc7f 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200002ac 	.word	0x200002ac

08000bf4 <_sendData>:

void _sendData(uint8_t data)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);   // DC = 1 (dane)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c08:	f002 fc6c 	bl	80034e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS = 0
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2110      	movs	r1, #16
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c14:	f002 fc66 	bl	80034e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &data, 1, HAL_MAX_DELAY);
 8000c18:	1df9      	adds	r1, r7, #7
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4806      	ldr	r0, [pc, #24]	@ (8000c3c <_sendData+0x48>)
 8000c22:	f004 fb3c 	bl	800529e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);   // CS = 1
 8000c26:	2201      	movs	r2, #1
 8000c28:	2110      	movs	r1, #16
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f002 fc59 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200002ac 	.word	0x200002ac

08000c40 <SSD1331_init>:

// **POPRAWIONA FUNKCJA INICJALIZACJI**
void SSD1331_init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
    // Reset ekranu - KLUCZOWE!
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4e:	f002 fc49 	bl	80034e4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c52:	200a      	movs	r0, #10
 8000c54:	f001 f9e6 	bl	8002024 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c62:	f002 fc3f 	bl	80034e4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c66:	200a      	movs	r0, #10
 8000c68:	f001 f9dc 	bl	8002024 <HAL_Delay>

    // Inicjalizacja SSD1331 - KOMPLETNA SEKWENCJA
    _sendCmd(CMD_DISPLAY_OFF);                    // Wyłącz ekran podczas inicjalizacji
 8000c6c:	20ae      	movs	r0, #174	@ 0xae
 8000c6e:	f7ff ff9b 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_CONTRAST_A); _sendCmd(0x91); // Kontrast dla kolor A (czerwony)
 8000c72:	2081      	movs	r0, #129	@ 0x81
 8000c74:	f7ff ff98 	bl	8000ba8 <_sendCmd>
 8000c78:	2091      	movs	r0, #145	@ 0x91
 8000c7a:	f7ff ff95 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_CONTRAST_B); _sendCmd(0x50); // Kontrast dla kolor B (zielony)
 8000c7e:	2082      	movs	r0, #130	@ 0x82
 8000c80:	f7ff ff92 	bl	8000ba8 <_sendCmd>
 8000c84:	2050      	movs	r0, #80	@ 0x50
 8000c86:	f7ff ff8f 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_CONTRAST_C); _sendCmd(0x7D); // Kontrast dla kolor C (niebieski)
 8000c8a:	2083      	movs	r0, #131	@ 0x83
 8000c8c:	f7ff ff8c 	bl	8000ba8 <_sendCmd>
 8000c90:	207d      	movs	r0, #125	@ 0x7d
 8000c92:	f7ff ff89 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_MASTER_CURRENT_CONTROL); _sendCmd(0x06); // Kontrola głównego prądu
 8000c96:	2087      	movs	r0, #135	@ 0x87
 8000c98:	f7ff ff86 	bl	8000ba8 <_sendCmd>
 8000c9c:	2006      	movs	r0, #6
 8000c9e:	f7ff ff83 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_SPEED_A); _sendCmd(0x64);  // Prędkość ładowania A
 8000ca2:	208a      	movs	r0, #138	@ 0x8a
 8000ca4:	f7ff ff80 	bl	8000ba8 <_sendCmd>
 8000ca8:	2064      	movs	r0, #100	@ 0x64
 8000caa:	f7ff ff7d 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_SPEED_B); _sendCmd(0x78);  // Prędkość ładowania B
 8000cae:	208b      	movs	r0, #139	@ 0x8b
 8000cb0:	f7ff ff7a 	bl	8000ba8 <_sendCmd>
 8000cb4:	2078      	movs	r0, #120	@ 0x78
 8000cb6:	f7ff ff77 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_SPEED_C); _sendCmd(0x64);  // Prędkość ładowania C
 8000cba:	208c      	movs	r0, #140	@ 0x8c
 8000cbc:	f7ff ff74 	bl	8000ba8 <_sendCmd>
 8000cc0:	2064      	movs	r0, #100	@ 0x64
 8000cc2:	f7ff ff71 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_REMAP); _sendCmd(0x72);              // Mapowanie kolorów i orientacja
 8000cc6:	20a0      	movs	r0, #160	@ 0xa0
 8000cc8:	f7ff ff6e 	bl	8000ba8 <_sendCmd>
 8000ccc:	2072      	movs	r0, #114	@ 0x72
 8000cce:	f7ff ff6b 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_DISPLAY_START_LINE); _sendCmd(0x0);  // Linia startowa
 8000cd2:	20a1      	movs	r0, #161	@ 0xa1
 8000cd4:	f7ff ff68 	bl	8000ba8 <_sendCmd>
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff ff65 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_DISPLAY_OFFSET); _sendCmd(0x0);      // Offset wyświetlania
 8000cde:	20a2      	movs	r0, #162	@ 0xa2
 8000ce0:	f7ff ff62 	bl	8000ba8 <_sendCmd>
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff ff5f 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_NORMAL_DISPLAY);                         // Normalny tryb wyświetlania
 8000cea:	20a4      	movs	r0, #164	@ 0xa4
 8000cec:	f7ff ff5c 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_MULTIPLEX_RATIO); _sendCmd(0x3F);    // Współczynnik multipleks (64 linie)
 8000cf0:	20a8      	movs	r0, #168	@ 0xa8
 8000cf2:	f7ff ff59 	bl	8000ba8 <_sendCmd>
 8000cf6:	203f      	movs	r0, #63	@ 0x3f
 8000cf8:	f7ff ff56 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_MASTER_CONFIGURE); _sendCmd(0x8E);   // Konfiguracja główna
 8000cfc:	20ad      	movs	r0, #173	@ 0xad
 8000cfe:	f7ff ff53 	bl	8000ba8 <_sendCmd>
 8000d02:	208e      	movs	r0, #142	@ 0x8e
 8000d04:	f7ff ff50 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_POWER_SAVE_MODE); _sendCmd(0x00);        // Wyłącz tryb oszczędzania energii
 8000d08:	20b0      	movs	r0, #176	@ 0xb0
 8000d0a:	f7ff ff4d 	bl	8000ba8 <_sendCmd>
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff ff4a 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_PHASE_PERIOD_ADJUSTMENT); _sendCmd(0x31); // Regulacja okresu fazy
 8000d14:	20b1      	movs	r0, #177	@ 0xb1
 8000d16:	f7ff ff47 	bl	8000ba8 <_sendCmd>
 8000d1a:	2031      	movs	r0, #49	@ 0x31
 8000d1c:	f7ff ff44 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_DISPLAY_CLOCK_DIV); _sendCmd(0xF0);      // Dzielnik zegara wyświetlania
 8000d20:	20b3      	movs	r0, #179	@ 0xb3
 8000d22:	f7ff ff41 	bl	8000ba8 <_sendCmd>
 8000d26:	20f0      	movs	r0, #240	@ 0xf0
 8000d28:	f7ff ff3e 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_PRECHARGE_VOLTAGE); _sendCmd(0x3A);  // Napięcie ładowania wstępnego
 8000d2c:	20bb      	movs	r0, #187	@ 0xbb
 8000d2e:	f7ff ff3b 	bl	8000ba8 <_sendCmd>
 8000d32:	203a      	movs	r0, #58	@ 0x3a
 8000d34:	f7ff ff38 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_SET_V_VOLTAGE); _sendCmd(0x3E);          // Napięcie V
 8000d38:	20be      	movs	r0, #190	@ 0xbe
 8000d3a:	f7ff ff35 	bl	8000ba8 <_sendCmd>
 8000d3e:	203e      	movs	r0, #62	@ 0x3e
 8000d40:	f7ff ff32 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_DEACTIVE_SCROLLING);                     // Wyłącz scrollowanie
 8000d44:	202e      	movs	r0, #46	@ 0x2e
 8000d46:	f7ff ff2f 	bl	8000ba8 <_sendCmd>

    // **KLUCZOWE - WŁĄCZ EKRAN NA KOŃCU**
    _sendCmd(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);           // Włącz ekran z normalną jasnością
 8000d4a:	20af      	movs	r0, #175	@ 0xaf
 8000d4c:	f7ff ff2c 	bl	8000ba8 <_sendCmd>

    HAL_Delay(100); // Daj czas na stabilizację
 8000d50:	2064      	movs	r0, #100	@ 0x64
 8000d52:	f001 f967 	bl	8002024 <HAL_Delay>
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <SSD1331_drawFrame>:
    _sendCmd((uint8_t)((color>>5)&0x3F));//G
    _sendCmd((uint8_t)(color&0x1F));//B
}

void SSD1331_drawFrame(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t outColor, uint16_t fillColor)
{
 8000d5a:	b590      	push	{r4, r7, lr}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4604      	mov	r4, r0
 8000d62:	4608      	mov	r0, r1
 8000d64:	4611      	mov	r1, r2
 8000d66:	461a      	mov	r2, r3
 8000d68:	4623      	mov	r3, r4
 8000d6a:	80fb      	strh	r3, [r7, #6]
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	80bb      	strh	r3, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
 8000d74:	4613      	mov	r3, r2
 8000d76:	803b      	strh	r3, [r7, #0]
    if((x0 < 0) || (y0 < 0) || (x1 < 0) || (y1 < 0))
        return;

    if (x0 >= RGB_OLED_WIDTH)  x0 = RGB_OLED_WIDTH - 1;
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d7c:	d901      	bls.n	8000d82 <SSD1331_drawFrame+0x28>
 8000d7e:	235f      	movs	r3, #95	@ 0x5f
 8000d80:	80fb      	strh	r3, [r7, #6]
    if (y0 >= RGB_OLED_HEIGHT) y0 = RGB_OLED_HEIGHT - 1;
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d86:	d901      	bls.n	8000d8c <SSD1331_drawFrame+0x32>
 8000d88:	233f      	movs	r3, #63	@ 0x3f
 8000d8a:	80bb      	strh	r3, [r7, #4]
    if (x1 >= RGB_OLED_WIDTH)  x1 = RGB_OLED_WIDTH - 1;
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d90:	d901      	bls.n	8000d96 <SSD1331_drawFrame+0x3c>
 8000d92:	235f      	movs	r3, #95	@ 0x5f
 8000d94:	807b      	strh	r3, [r7, #2]
    if (y1 >= RGB_OLED_HEIGHT) y1 = RGB_OLED_HEIGHT - 1;
 8000d96:	883b      	ldrh	r3, [r7, #0]
 8000d98:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d9a:	d901      	bls.n	8000da0 <SSD1331_drawFrame+0x46>
 8000d9c:	233f      	movs	r3, #63	@ 0x3f
 8000d9e:	803b      	strh	r3, [r7, #0]

    _sendCmd(CMD_FILL_WINDOW);//fill window
 8000da0:	2026      	movs	r0, #38	@ 0x26
 8000da2:	f7ff ff01 	bl	8000ba8 <_sendCmd>
    _sendCmd(ENABLE_FILL);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff fefe 	bl	8000ba8 <_sendCmd>
    _sendCmd(CMD_DRAW_RECTANGLE);//draw rectangle
 8000dac:	2022      	movs	r0, #34	@ 0x22
 8000dae:	f7ff fefb 	bl	8000ba8 <_sendCmd>
    _sendCmd(x0);//start column
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fef6 	bl	8000ba8 <_sendCmd>
    _sendCmd(y0);//start row
 8000dbc:	88bb      	ldrh	r3, [r7, #4]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fef1 	bl	8000ba8 <_sendCmd>
    _sendCmd(x1);//end column
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff feec 	bl	8000ba8 <_sendCmd>
    _sendCmd(y1);//end row
 8000dd0:	883b      	ldrh	r3, [r7, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fee7 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((outColor>>11)&0x1F));//R
 8000dda:	8b3b      	ldrh	r3, [r7, #24]
 8000ddc:	0adb      	lsrs	r3, r3, #11
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 031f 	and.w	r3, r3, #31
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fedd 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((outColor>>5)&0x3F));//G
 8000dee:	8b3b      	ldrh	r3, [r7, #24]
 8000df0:	095b      	lsrs	r3, r3, #5
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fed3 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)(outColor&0x1F));//B
 8000e02:	8b3b      	ldrh	r3, [r7, #24]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f003 031f 	and.w	r3, r3, #31
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fecb 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((fillColor>>11)&0x1F));//R
 8000e12:	8bbb      	ldrh	r3, [r7, #28]
 8000e14:	0adb      	lsrs	r3, r3, #11
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	f003 031f 	and.w	r3, r3, #31
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fec1 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)((fillColor>>5)&0x3F));//G
 8000e26:	8bbb      	ldrh	r3, [r7, #28]
 8000e28:	095b      	lsrs	r3, r3, #5
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff feb7 	bl	8000ba8 <_sendCmd>
    _sendCmd((uint8_t)(fillColor&0x1F));//B
 8000e3a:	8bbb      	ldrh	r3, [r7, #28]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff feaf 	bl	8000ba8 <_sendCmd>
}
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd90      	pop	{r4, r7, pc}

08000e50 <SSD1331_SetXY>:
    }

}

// Set current position in cache
void SSD1331_SetXY(unsigned char x, unsigned char y) {
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	71bb      	strb	r3, [r7, #6]
	CHR_X = x;
 8000e60:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <SSD1331_SetXY+0x28>)
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	7013      	strb	r3, [r2, #0]
	CHR_Y = y;
 8000e66:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <SSD1331_SetXY+0x2c>)
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	7013      	strb	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	200001f4 	.word	0x200001f4
 8000e7c:	200001f5 	.word	0x200001f5

08000e80 <SSD1331_XY_INK>:

void SSD1331_XY_INK(LcdFontSize size) {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	CHR_X += 6*size;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	0052      	lsls	r2, r2, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <SSD1331_XY_INK+0x74>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <SSD1331_XY_INK+0x74>)
 8000ea0:	701a      	strb	r2, [r3, #0]
	if (CHR_X + 6*size > RGB_OLED_WIDTH) {
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <SSD1331_XY_INK+0x74>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	79fa      	ldrb	r2, [r7, #7]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	440b      	add	r3, r1
 8000eb4:	2b60      	cmp	r3, #96	@ 0x60
 8000eb6:	dd16      	ble.n	8000ee6 <SSD1331_XY_INK+0x66>
		CHR_X = 0;
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <SSD1331_XY_INK+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
		CHR_Y += 8*size;
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <SSD1331_XY_INK+0x78>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <SSD1331_XY_INK+0x78>)
 8000ece:	701a      	strb	r2, [r3, #0]
		if (CHR_Y + 8*size > RGB_OLED_HEIGHT) {
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <SSD1331_XY_INK+0x78>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4413      	add	r3, r2
 8000edc:	2b40      	cmp	r3, #64	@ 0x40
 8000ede:	dd02      	ble.n	8000ee6 <SSD1331_XY_INK+0x66>
			CHR_Y = 0;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <SSD1331_XY_INK+0x78>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	200001f4 	.word	0x200001f4
 8000ef8:	200001f5 	.word	0x200001f5

08000efc <SSD1331_Chr>:

void SSD1331_Chr(LcdFontSize size, unsigned char ch, uint16_t chr_color, uint16_t bg_color) {
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	460b      	mov	r3, r1
 8000f14:	80bb      	strh	r3, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	807b      	strh	r3, [r7, #2]
	unsigned char y, x, sx, sy;
	uint16_t color;
	/////uint16_t cx=CHR_X*6*size;
	uint16_t cx=CHR_X;
 8000f1a:	4b9b      	ldr	r3, [pc, #620]	@ (8001188 <SSD1331_Chr+0x28c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	823b      	strh	r3, [r7, #16]
	/////uint16_t cy=CHR_Y*8*size;
	uint16_t cy=CHR_Y;
 8000f20:	4b9a      	ldr	r3, [pc, #616]	@ (800118c <SSD1331_Chr+0x290>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	81fb      	strh	r3, [r7, #14]

	if ( (cx + 6*size > RGB_OLED_WIDTH) || (cy + 8*size > RGB_OLED_HEIGHT) ) {
 8000f26:	8a39      	ldrh	r1, [r7, #16]
 8000f28:	79fa      	ldrb	r2, [r7, #7]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	440b      	add	r3, r1
 8000f34:	2b60      	cmp	r3, #96	@ 0x60
 8000f36:	f300 816c 	bgt.w	8001212 <SSD1331_Chr+0x316>
 8000f3a:	89fa      	ldrh	r2, [r7, #14]
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4413      	add	r3, r2
 8000f42:	2b40      	cmp	r3, #64	@ 0x40
 8000f44:	f300 8165 	bgt.w	8001212 <SSD1331_Chr+0x316>
		return;
	}

	// CHR
    if ( (ch >= 0x20) && (ch <= 0x7F) )
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	2b1f      	cmp	r3, #31
 8000f4c:	d907      	bls.n	8000f5e <SSD1331_Chr+0x62>
 8000f4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db03      	blt.n	8000f5e <SSD1331_Chr+0x62>
    {
        // offset in symbols table ASCII[0x20-0x7F]
        ch -= 32;
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	3b20      	subs	r3, #32
 8000f5a:	71bb      	strb	r3, [r7, #6]
 8000f5c:	e008      	b.n	8000f70 <SSD1331_Chr+0x74>
    }
    else if (ch >= 0xC0)
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	2bbf      	cmp	r3, #191	@ 0xbf
 8000f62:	d903      	bls.n	8000f6c <SSD1331_Chr+0x70>
    {
        // offset in symbols table CP1251[0xC0-0xFF] (Cyrillic)
        ch -= 96;
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	3b60      	subs	r3, #96	@ 0x60
 8000f68:	71bb      	strb	r3, [r7, #6]
 8000f6a:	e001      	b.n	8000f70 <SSD1331_Chr+0x74>
    }
    else
    {
        // Ignore unknown symbols
        ch = 95;
 8000f6c:	235f      	movs	r3, #95	@ 0x5f
 8000f6e:	71bb      	strb	r3, [r7, #6]
    }

    if ((size > FONT_1X) & (ch > 15) & (ch < 26)) {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	bf8c      	ite	hi
 8000f76:	2301      	movhi	r3, #1
 8000f78:	2300      	movls	r3, #0
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	bf8c      	ite	hi
 8000f82:	2301      	movhi	r3, #1
 8000f84:	2300      	movls	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	2b19      	cmp	r3, #25
 8000f92:	bf94      	ite	ls
 8000f94:	2301      	movls	r3, #1
 8000f96:	2300      	movhi	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80a4 	beq.w	80010ea <SSD1331_Chr+0x1ee>
        ch -= 16;
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	3b10      	subs	r3, #16
 8000fa6:	71bb      	strb	r3, [r7, #6]
    	for (sy = 0; sy<size; sy++) {
 8000fa8:	2300      	movs	r3, #0
 8000faa:	753b      	strb	r3, [r7, #20]
 8000fac:	e097      	b.n	80010de <SSD1331_Chr+0x1e2>
    	for (y = 0; y<8; y++ ) {
 8000fae:	2300      	movs	r3, #0
 8000fb0:	75fb      	strb	r3, [r7, #23]
 8000fb2:	e08d      	b.n	80010d0 <SSD1331_Chr+0x1d4>
    		//set column point
    		_sendCmd(CMD_SET_COLUMN_ADDRESS);
 8000fb4:	2015      	movs	r0, #21
 8000fb6:	f7ff fdf7 	bl	8000ba8 <_sendCmd>
    		_sendCmd(cx);
 8000fba:	8a3b      	ldrh	r3, [r7, #16]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fdf2 	bl	8000ba8 <_sendCmd>
    		_sendCmd(RGB_OLED_WIDTH-1);
 8000fc4:	205f      	movs	r0, #95	@ 0x5f
 8000fc6:	f7ff fdef 	bl	8000ba8 <_sendCmd>
    		//set row point
    		_sendCmd(CMD_SET_ROW_ADDRESS);
 8000fca:	2075      	movs	r0, #117	@ 0x75
 8000fcc:	f7ff fdec 	bl	8000ba8 <_sendCmd>
    		_sendCmd(y + cy + sy*8);
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	7d3b      	ldrb	r3, [r7, #20]
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fddf 	bl	8000ba8 <_sendCmd>
    		_sendCmd(RGB_OLED_HEIGHT-1);
 8000fea:	203f      	movs	r0, #63	@ 0x3f
 8000fec:	f7ff fddc 	bl	8000ba8 <_sendCmd>
    		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin,GPIO_PIN_SET);//cs
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffa:	f002 fa73 	bl	80034e4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_RESET); //cs
 8000ffe:	2200      	movs	r2, #0
 8001000:	2110      	movs	r1, #16
 8001002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001006:	f002 fa6d 	bl	80034e4 <HAL_GPIO_WritePin>
    		for (x = 0; x < 5*size; x++ ) {
 800100a:	2300      	movs	r3, #0
 800100c:	75bb      	strb	r3, [r7, #22]
 800100e:	e055      	b.n	80010bc <SSD1331_Chr+0x1c0>
    			if ( (((BigNumbers[ch][x+sy*10] >> y) & 0x01 ) & (size == FONT_2X)) |
 8001010:	79ba      	ldrb	r2, [r7, #6]
 8001012:	7db8      	ldrb	r0, [r7, #22]
 8001014:	7d39      	ldrb	r1, [r7, #20]
 8001016:	460b      	mov	r3, r1
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	18c1      	adds	r1, r0, r3
 8001020:	485b      	ldr	r0, [pc, #364]	@ (8001190 <SSD1331_Chr+0x294>)
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4403      	add	r3, r0
 800102c:	440b      	add	r3, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	fa42 f303 	asr.w	r3, r2, r3
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b02      	cmp	r3, #2
 8001042:	bf0c      	ite	eq
 8001044:	2301      	moveq	r3, #1
 8001046:	2300      	movne	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4013      	ands	r3, r2
 800104c:	b2d8      	uxtb	r0, r3
    				 (((LargeNumbers[ch][x+sy*20] >> y) & 0x01 ) & (size == FONT_4X))
 800104e:	79ba      	ldrb	r2, [r7, #6]
 8001050:	7dbc      	ldrb	r4, [r7, #22]
 8001052:	7d39      	ldrb	r1, [r7, #20]
 8001054:	460b      	mov	r3, r1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	18e1      	adds	r1, r4, r3
 800105e:	4c4d      	ldr	r4, [pc, #308]	@ (8001194 <SSD1331_Chr+0x298>)
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	4423      	add	r3, r4
 800106a:	440b      	add	r3, r1
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	fa42 f303 	asr.w	r3, r2, r3
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	b2da      	uxtb	r2, r3
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf0c      	ite	eq
 8001082:	2301      	moveq	r3, #1
 8001084:	2300      	movne	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4013      	ands	r3, r2
 800108a:	b2db      	uxtb	r3, r3
    			if ( (((BigNumbers[ch][x+sy*10] >> y) & 0x01 ) & (size == FONT_2X)) |
 800108c:	4303      	orrs	r3, r0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <SSD1331_Chr+0x19e>

    				) {
    				color = chr_color;
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	827b      	strh	r3, [r7, #18]
 8001098:	e001      	b.n	800109e <SSD1331_Chr+0x1a2>
    			}
    			else {
    				color = bg_color;
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	827b      	strh	r3, [r7, #18]
    			}
				_sendData(color >> 8);
 800109e:	8a7b      	ldrh	r3, [r7, #18]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fda4 	bl	8000bf4 <_sendData>
				_sendData(color);
 80010ac:	8a7b      	ldrh	r3, [r7, #18]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fd9f 	bl	8000bf4 <_sendData>
    		for (x = 0; x < 5*size; x++ ) {
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	3301      	adds	r3, #1
 80010ba:	75bb      	strb	r3, [r7, #22]
 80010bc:	7db9      	ldrb	r1, [r7, #22]
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	4299      	cmp	r1, r3
 80010c8:	dba2      	blt.n	8001010 <SSD1331_Chr+0x114>
    	for (y = 0; y<8; y++ ) {
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	3301      	adds	r3, #1
 80010ce:	75fb      	strb	r3, [r7, #23]
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	f67f af6e 	bls.w	8000fb4 <SSD1331_Chr+0xb8>
    	for (sy = 0; sy<size; sy++) {
 80010d8:	7d3b      	ldrb	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	753b      	strb	r3, [r7, #20]
 80010de:	7d3a      	ldrb	r2, [r7, #20]
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	f4ff af63 	bcc.w	8000fae <SSD1331_Chr+0xb2>
 80010e8:	e094      	b.n	8001214 <SSD1331_Chr+0x318>
    		}
    	}
    	}
    }
    else {
    	for (y = 0; y<8; y++ ) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	75fb      	strb	r3, [r7, #23]
 80010ee:	e08b      	b.n	8001208 <SSD1331_Chr+0x30c>
    		for (sy = 0; sy<size; sy++ ) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	753b      	strb	r3, [r7, #20]
 80010f4:	e080      	b.n	80011f8 <SSD1331_Chr+0x2fc>
    			//set column point
    			_sendCmd(CMD_SET_COLUMN_ADDRESS);
 80010f6:	2015      	movs	r0, #21
 80010f8:	f7ff fd56 	bl	8000ba8 <_sendCmd>
    			_sendCmd(cx);
 80010fc:	8a3b      	ldrh	r3, [r7, #16]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fd51 	bl	8000ba8 <_sendCmd>
    			_sendCmd(RGB_OLED_WIDTH-1);
 8001106:	205f      	movs	r0, #95	@ 0x5f
 8001108:	f7ff fd4e 	bl	8000ba8 <_sendCmd>
    			//set row point
    			_sendCmd(CMD_SET_ROW_ADDRESS);
 800110c:	2075      	movs	r0, #117	@ 0x75
 800110e:	f7ff fd4b 	bl	8000ba8 <_sendCmd>
    			_sendCmd(y*size + sy + cy);
 8001112:	7dfa      	ldrb	r2, [r7, #23]
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	fb12 f303 	smulbb	r3, r2, r3
 800111a:	b2da      	uxtb	r2, r3
 800111c:	7d3b      	ldrb	r3, [r7, #20]
 800111e:	4413      	add	r3, r2
 8001120:	b2da      	uxtb	r2, r3
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4413      	add	r3, r2
 8001128:	b2db      	uxtb	r3, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fd3c 	bl	8000ba8 <_sendCmd>
    			_sendCmd(RGB_OLED_HEIGHT-1);
 8001130:	203f      	movs	r0, #63	@ 0x3f
 8001132:	f7ff fd39 	bl	8000ba8 <_sendCmd>
        		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin,GPIO_PIN_SET);; //cs
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800113c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001140:	f002 f9d0 	bl	80034e4 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_RESET);; //cs
 8001144:	2200      	movs	r2, #0
 8001146:	2110      	movs	r1, #16
 8001148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114c:	f002 f9ca 	bl	80034e4 <HAL_GPIO_WritePin>
    			for (x = 0; x<5; x++ ) {
 8001150:	2300      	movs	r3, #0
 8001152:	75bb      	strb	r3, [r7, #22]
 8001154:	e038      	b.n	80011c8 <SSD1331_Chr+0x2cc>
    				if ((FontLookup[ch][x] >> y) & 0x01) {
 8001156:	79ba      	ldrb	r2, [r7, #6]
 8001158:	7db9      	ldrb	r1, [r7, #22]
 800115a:	480f      	ldr	r0, [pc, #60]	@ (8001198 <SSD1331_Chr+0x29c>)
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	4403      	add	r3, r0
 8001164:	440b      	add	r3, r1
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	fa42 f303 	asr.w	r3, r2, r3
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <SSD1331_Chr+0x282>
    					color = chr_color;
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	827b      	strh	r3, [r7, #18]
 800117c:	e001      	b.n	8001182 <SSD1331_Chr+0x286>
    				}
    				else {
    					color = bg_color;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	827b      	strh	r3, [r7, #18]
    				}
    				//SSD1331_drawPixel(x+cx, y+cy, color);
    				for (sx = 0; sx<size; sx++ ) {
 8001182:	2300      	movs	r3, #0
 8001184:	757b      	strb	r3, [r7, #21]
 8001186:	e018      	b.n	80011ba <SSD1331_Chr+0x2be>
 8001188:	200001f4 	.word	0x200001f4
 800118c:	200001f5 	.word	0x200001f5
 8001190:	080094fc 	.word	0x080094fc
 8001194:	080095c4 	.word	0x080095c4
 8001198:	080091dc 	.word	0x080091dc
    					_sendData(color >> 8);
 800119c:	8a7b      	ldrh	r3, [r7, #18]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fd25 	bl	8000bf4 <_sendData>
    					_sendData(color);
 80011aa:	8a7b      	ldrh	r3, [r7, #18]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd20 	bl	8000bf4 <_sendData>
    				for (sx = 0; sx<size; sx++ ) {
 80011b4:	7d7b      	ldrb	r3, [r7, #21]
 80011b6:	3301      	adds	r3, #1
 80011b8:	757b      	strb	r3, [r7, #21]
 80011ba:	7d7a      	ldrb	r2, [r7, #21]
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d3ec      	bcc.n	800119c <SSD1331_Chr+0x2a0>
    			for (x = 0; x<5; x++ ) {
 80011c2:	7dbb      	ldrb	r3, [r7, #22]
 80011c4:	3301      	adds	r3, #1
 80011c6:	75bb      	strb	r3, [r7, #22]
 80011c8:	7dbb      	ldrb	r3, [r7, #22]
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d9c3      	bls.n	8001156 <SSD1331_Chr+0x25a>
    				}
    			}
    			_sendData(bg_color >> 8);
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fd0c 	bl	8000bf4 <_sendData>
    			_sendData(bg_color);
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fd07 	bl	8000bf4 <_sendData>
        		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_SET);; //cs
 80011e6:	2201      	movs	r2, #1
 80011e8:	2110      	movs	r1, #16
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ee:	f002 f979 	bl	80034e4 <HAL_GPIO_WritePin>
    		for (sy = 0; sy<size; sy++ ) {
 80011f2:	7d3b      	ldrb	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	753b      	strb	r3, [r7, #20]
 80011f8:	7d3a      	ldrb	r2, [r7, #20]
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f4ff af7a 	bcc.w	80010f6 <SSD1331_Chr+0x1fa>
    	for (y = 0; y<8; y++ ) {
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	3301      	adds	r3, #1
 8001206:	75fb      	strb	r3, [r7, #23]
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	2b07      	cmp	r3, #7
 800120c:	f67f af70 	bls.w	80010f0 <SSD1331_Chr+0x1f4>
 8001210:	e000      	b.n	8001214 <SSD1331_Chr+0x318>
		return;
 8001212:	bf00      	nop
    	}
    }

    /////CHR_X++;
    //CHR_X += 6*size;
}
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	bf00      	nop

0800121c <SSD1331_FStr>:
        tmpIdx++;
    }
}

// Print a string from the Flash to display
void SSD1331_FStr(LcdFontSize size, const unsigned char *dataPtr, uint16_t chr_color, uint16_t bg_color) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	4611      	mov	r1, r2
 8001226:	461a      	mov	r2, r3
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	460b      	mov	r3, r1
 800122e:	81bb      	strh	r3, [r7, #12]
 8001230:	4613      	mov	r3, r2
 8001232:	80fb      	strh	r3, [r7, #6]
    unsigned char c;
    for (c = *( dataPtr ); c; ++dataPtr, c = *( dataPtr ))
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	75fb      	strb	r3, [r7, #23]
 800123a:	e00f      	b.n	800125c <SSD1331_FStr+0x40>
        		CHR_Y = 0;
        	}
        }
        */

        SSD1331_Chr(size, c, chr_color, bg_color);
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	89ba      	ldrh	r2, [r7, #12]
 8001240:	7df9      	ldrb	r1, [r7, #23]
 8001242:	7bf8      	ldrb	r0, [r7, #15]
 8001244:	f7ff fe5a 	bl	8000efc <SSD1331_Chr>
        SSD1331_XY_INK(size);
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fe18 	bl	8000e80 <SSD1331_XY_INK>
    for (c = *( dataPtr ); c; ++dataPtr, c = *( dataPtr ))
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	3301      	adds	r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	75fb      	strb	r3, [r7, #23]
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1ec      	bne.n	800123c <SSD1331_FStr+0x20>
    }
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <SSD1331_DisplayON>:
{
    _sendCmd(power);
}

void SSD1331_DisplayON(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	_sendCmd(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);
 8001270:	20af      	movs	r0, #175	@ 0xaf
 8001272:	f7ff fc99 	bl	8000ba8 <_sendCmd>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}

0800127a <SSD1331_DisplayOFF>:

void SSD1331_DisplayOFF(void){
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
	_sendCmd(CMD_DISPLAY_OFF);
 800127e:	20ae      	movs	r0, #174	@ 0xae
 8001280:	f7ff fc92 	bl	8000ba8 <_sendCmd>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_GPIO_EXTI_Callback>:
        return (now - history_navigation_start < HISTORY_PAUSE_TIME);
    }
    return 0;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0 ) { // Debounce 200 ms
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d11e      	bne.n	80012d6 <HAL_GPIO_EXTI_Callback+0x4e>
        if(screenMode == 0) { // Jeśli ekran był wyłączony
 8001298:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <HAL_GPIO_EXTI_Callback+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d111      	bne.n	80012c6 <HAL_GPIO_EXTI_Callback+0x3e>
            screenMode = 1;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_GPIO_EXTI_Callback+0x58>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
            SSD1331_DisplayON();
 80012a8:	f7ff ffe0 	bl	800126c <SSD1331_DisplayON>
            screenTimer = HAL_GetTick(); // Resetuj timer przy KAŻDYM włączeniu
 80012ac:	f000 feae 	bl	800200c <HAL_GetTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a0c      	ldr	r2, [pc, #48]	@ (80012e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80012b4:	6013      	str	r3, [r2, #0]

            // **ZATRZYMAJ AUTOMATYCZNĄ ŚREDNIĄ PRZY RĘCZNYM WŁĄCZENIU**
            if(auto_avg_active) {
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <HAL_GPIO_EXTI_Callback+0x60>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00b      	beq.n	80012d6 <HAL_GPIO_EXTI_Callback+0x4e>
                auto_avg_active = 0;
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_GPIO_EXTI_Callback+0x60>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
            SSD1331_DisplayOFF();
            // **ZATRZYMAJ AUTOMATYCZNĄ ŚREDNIĄ PRZY WYŁĄCZENIU**
            auto_avg_active = 0;
        }
    }
}
 80012c4:	e007      	b.n	80012d6 <HAL_GPIO_EXTI_Callback+0x4e>
            screenMode = 0;
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_GPIO_EXTI_Callback+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
            SSD1331_DisplayOFF();
 80012cc:	f7ff ffd5 	bl	800127a <SSD1331_DisplayOFF>
            auto_avg_active = 0;
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_GPIO_EXTI_Callback+0x60>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000000 	.word	0x20000000
 80012e4:	200003e8 	.word	0x200003e8
 80012e8:	200003f0 	.word	0x200003f0

080012ec <check_power_save>:

void check_power_save(uint32_t now){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    // **NIE WYŁĄCZAJ EKRANU PODCZAS AUTOMATYCZNEGO WYŚWIETLANIA ŚREDNIEJ**
    if(screenMode && !auto_avg_active && (now - screenTimer > 30000)){
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <check_power_save+0x3c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d010      	beq.n	8001320 <check_power_save+0x34>
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <check_power_save+0x40>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10c      	bne.n	8001320 <check_power_save+0x34>
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <check_power_save+0x44>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001312:	4293      	cmp	r3, r2
 8001314:	d904      	bls.n	8001320 <check_power_save+0x34>
        screenMode = 0;
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <check_power_save+0x3c>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
        SSD1331_DisplayOFF();
 800131c:	f7ff ffad 	bl	800127a <SSD1331_DisplayOFF>
    }
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	200003f0 	.word	0x200003f0
 8001330:	200003e8 	.word	0x200003e8

08001334 <display_hum>:
    sprintf(temp_str, "%.2f st. C", temp);
    SSD1331_SetXY(RGB_OLED_WIDTH/2 - 30, RGB_OLED_HEIGHT/2 +6);
    SSD1331_FStr(FONT_1X, (unsigned char*)temp_str, COLOR_RED, COLOR_BLACK);
}

void display_hum(float hum) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af02      	add	r7, sp, #8
 800133a:	ed87 0a01 	vstr	s0, [r7, #4]
    char hum_str[16];
    SSD1331_drawFrame(0, 0, RGB_OLED_WIDTH - 1, RGB_OLED_HEIGHT - 1, COLOR_BLACK, COLOR_BLACK);
 800133e:	2300      	movs	r3, #0
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	2300      	movs	r3, #0
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	233f      	movs	r3, #63	@ 0x3f
 8001348:	225f      	movs	r2, #95	@ 0x5f
 800134a:	2100      	movs	r1, #0
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fd04 	bl	8000d5a <SSD1331_drawFrame>
    HAL_Delay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f000 fe66 	bl	8002024 <HAL_Delay>
    SSD1331_SetXY(RGB_OLED_WIDTH/2 - 32, RGB_OLED_HEIGHT/2 - 10);
 8001358:	2116      	movs	r1, #22
 800135a:	2010      	movs	r0, #16
 800135c:	f7ff fd78 	bl	8000e50 <SSD1331_SetXY>
    SSD1331_FStr(FONT_1X, (unsigned char*)"Wilgotnosc :", COLOR_BLUE, COLOR_BLACK);
 8001360:	2300      	movs	r3, #0
 8001362:	221f      	movs	r2, #31
 8001364:	490e      	ldr	r1, [pc, #56]	@ (80013a0 <display_hum+0x6c>)
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff ff58 	bl	800121c <SSD1331_FStr>
    sprintf(hum_str, "%.2f %%", hum);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff f8eb 	bl	8000548 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	f107 0008 	add.w	r0, r7, #8
 800137a:	490a      	ldr	r1, [pc, #40]	@ (80013a4 <display_hum+0x70>)
 800137c:	f005 fdb8 	bl	8006ef0 <siprintf>
    SSD1331_SetXY(RGB_OLED_WIDTH/2 - 35, RGB_OLED_HEIGHT/2 +6);
 8001380:	2126      	movs	r1, #38	@ 0x26
 8001382:	200d      	movs	r0, #13
 8001384:	f7ff fd64 	bl	8000e50 <SSD1331_SetXY>
    SSD1331_FStr(FONT_1X, (unsigned char*)hum_str, COLOR_BLUE, COLOR_BLACK);
 8001388:	f107 0108 	add.w	r1, r7, #8
 800138c:	2300      	movs	r3, #0
 800138e:	221f      	movs	r2, #31
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff ff43 	bl	800121c <SSD1331_FStr>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	080091ac 	.word	0x080091ac
 80013a4:	080091bc 	.word	0x080091bc

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ae:	f000 fdd3 	bl	8001f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b2:	f000 f895 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b6:	f000 fa9b 	bl	80018f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ba:	f000 fa7b 	bl	80018b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013be:	f000 fa49 	bl	8001854 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80013c2:	f000 f9bb 	bl	800173c <MX_SPI3_Init>
  MX_ADC1_Init();
 80013c6:	f000 f8f3 	bl	80015b0 <MX_ADC1_Init>
  MX_RTC_Init();
 80013ca:	f000 f95d 	bl	8001688 <MX_RTC_Init>
  MX_TIM2_Init();
 80013ce:	f000 f9f3 	bl	80017b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80013d2:	2202      	movs	r2, #2
 80013d4:	493b      	ldr	r1, [pc, #236]	@ (80014c4 <main+0x11c>)
 80013d6:	483c      	ldr	r0, [pc, #240]	@ (80014c8 <main+0x120>)
 80013d8:	f000 ffec 	bl	80023b4 <HAL_ADC_Start_DMA>
  HAL_Delay(100);
 80013dc:	2064      	movs	r0, #100	@ 0x64
 80013de:	f000 fe21 	bl	8002024 <HAL_Delay>

  // Inicjalizacja AHT30
  HAL_Delay(100);
 80013e2:	2064      	movs	r0, #100	@ 0x64
 80013e4:	f000 fe1e 	bl	8002024 <HAL_Delay>

  //Inicjalizacja konfiguracji ekranu
  SSD1331_init();
 80013e8:	f7ff fc2a 	bl	8000c40 <SSD1331_init>
  HAL_Delay(100);
 80013ec:	2064      	movs	r0, #100	@ 0x64
 80013ee:	f000 fe19 	bl	8002024 <HAL_Delay>
  //Wypelnienie calego ekranu na czarno
  SSD1331_drawFrame(0, 0, RGB_OLED_WIDTH - 1, RGB_OLED_HEIGHT - 1, COLOR_GREEN, COLOR_PINK);
 80013f2:	f64f 6319 	movw	r3, #65049	@ 0xfe19
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	233f      	movs	r3, #63	@ 0x3f
 8001400:	225f      	movs	r2, #95	@ 0x5f
 8001402:	2100      	movs	r1, #0
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff fca8 	bl	8000d5a <SSD1331_drawFrame>
  HAL_Delay(150);
 800140a:	2096      	movs	r0, #150	@ 0x96
 800140c:	f000 fe0a 	bl	8002024 <HAL_Delay>
  //Wyswietlenie wiadomosci powitalnej
  SSD1331_SetXY(RGB_OLED_WIDTH/2 - 40, RGB_OLED_HEIGHT/2 - 10);
 8001410:	2116      	movs	r1, #22
 8001412:	2008      	movs	r0, #8
 8001414:	f7ff fd1c 	bl	8000e50 <SSD1331_SetXY>
  char *wiadomosc = "WELCOME";
 8001418:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <main+0x124>)
 800141a:	617b      	str	r3, [r7, #20]
  SSD1331_FStr(FONT_2X, (unsigned char*) wiadomosc, COLOR_WHITE, COLOR_BLACK);
 800141c:	2300      	movs	r3, #0
 800141e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001422:	6979      	ldr	r1, [r7, #20]
 8001424:	2002      	movs	r0, #2
 8001426:	f7ff fef9 	bl	800121c <SSD1331_FStr>
  SSD1331_SetXY(RGB_OLED_WIDTH/2 - 38, RGB_OLED_HEIGHT/2 +15);
 800142a:	212f      	movs	r1, #47	@ 0x2f
 800142c:	200a      	movs	r0, #10
 800142e:	f7ff fd0f 	bl	8000e50 <SSD1331_SetXY>
  char *wiadomosc2 = "Projekt KZ,KT";
 8001432:	4b27      	ldr	r3, [pc, #156]	@ (80014d0 <main+0x128>)
 8001434:	613b      	str	r3, [r7, #16]
  SSD1331_FStr(FONT_1X, (unsigned char*) wiadomosc2, COLOR_WHITE, COLOR_BLACK);
 8001436:	2300      	movs	r3, #0
 8001438:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143c:	6939      	ldr	r1, [r7, #16]
 800143e:	2001      	movs	r0, #1
 8001440:	f7ff feec 	bl	800121c <SSD1331_FStr>
  HAL_Delay(3000);
 8001444:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001448:	f000 fdec 	bl	8002024 <HAL_Delay>
  SSD1331_drawFrame(0, 0, RGB_OLED_WIDTH - 1, RGB_OLED_HEIGHT - 1, COLOR_BLACK, COLOR_BLACK);
 800144c:	2300      	movs	r3, #0
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	2300      	movs	r3, #0
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	233f      	movs	r3, #63	@ 0x3f
 8001456:	225f      	movs	r2, #95	@ 0x5f
 8001458:	2100      	movs	r1, #0
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff fc7d 	bl	8000d5a <SSD1331_drawFrame>
  display_hum(2.0);
 8001460:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001464:	f7ff ff66 	bl	8001334 <display_hum>
  HAL_Delay(100);
 8001468:	2064      	movs	r0, #100	@ 0x64
 800146a:	f000 fddb 	bl	8002024 <HAL_Delay>

  //Deklarowanie zmiennych odnosnie kontroli ekranu
  screenMode = 1;
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <main+0x12c>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
  screenTimer = HAL_GetTick();
 8001474:	f000 fdca 	bl	800200c <HAL_GetTick>
 8001478:	4603      	mov	r3, r0
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <main+0x130>)
 800147c:	6013      	str	r3, [r2, #0]

  // Początkowy odczyt temperatury i wilgotności

  // **USTAWIENIE POCZĄTKOWEGO CZASU DLA ŚREDNIEJ (dla testów - 30 sekund)**
  last_avg_tick = 0; // Odejmij 4 minuty, żeby pierwsza średnia pojawiła się za 30s
 800147e:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <main+0x134>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now;
  uint32_t led_tick = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  uint8_t led_temp_state = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	72fb      	strb	r3, [r7, #11]
  uint8_t led_hum_state = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	72bb      	strb	r3, [r7, #10]
  uint8_t time_display_flag = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	727b      	strb	r3, [r7, #9]

  while (1)
  {
      now = HAL_GetTick();
 8001494:	f000 fdba 	bl	800200c <HAL_GetTick>
 8001498:	6078      	str	r0, [r7, #4]

      check_power_save(now);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff26 	bl	80012ec <check_power_save>

      if(!screenMode) continue; // ekran wyłączony
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <main+0x12c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <main+0x116>

      // Scheduler: pomiar do historii co 15s (ale tylko jeśli nie przeglądamy historii)

      // Odczyt joysticka
      uint16_t x = adc_buf[0];
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <main+0x11c>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	807b      	strh	r3, [r7, #2]
      uint16_t y = adc_buf[1];
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <main+0x11c>)
 80014b2:	885b      	ldrh	r3, [r3, #2]
 80014b4:	803b      	strh	r3, [r7, #0]

      // Logika joysticka


      HAL_Delay(50); // Zmniejszone opóźnienie dla płynniejszego działania
 80014b6:	2032      	movs	r0, #50	@ 0x32
 80014b8:	f000 fdb4 	bl	8002024 <HAL_Delay>
 80014bc:	e7ea      	b.n	8001494 <main+0xec>
      if(!screenMode) continue; // ekran wyłączony
 80014be:	bf00      	nop
  {
 80014c0:	e7e8      	b.n	8001494 <main+0xec>
 80014c2:	bf00      	nop
 80014c4:	200003e4 	.word	0x200003e4
 80014c8:	200001f8 	.word	0x200001f8
 80014cc:	080091c4 	.word	0x080091c4
 80014d0:	080091cc 	.word	0x080091cc
 80014d4:	20000000 	.word	0x20000000
 80014d8:	200003e8 	.word	0x200003e8
 80014dc:	200003ec 	.word	0x200003ec

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b09c      	sub	sp, #112	@ 0x70
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014ea:	2228      	movs	r2, #40	@ 0x28
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f005 fd63 	bl	8006fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001504:	463b      	mov	r3, r7
 8001506:	2234      	movs	r2, #52	@ 0x34
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f005 fd55 	bl	8006fba <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001510:	f002 f818 	bl	8003544 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001514:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <SystemClock_Config+0xc8>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a23      	ldr	r2, [pc, #140]	@ (80015a8 <SystemClock_Config+0xc8>)
 800151a:	f023 0318 	bic.w	r3, r3, #24
 800151e:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001520:	2306      	movs	r3, #6
 8001522:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001528:	2301      	movs	r3, #1
 800152a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800152c:	2310      	movs	r3, #16
 800152e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001530:	2302      	movs	r3, #2
 8001532:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001534:	2300      	movs	r3, #0
 8001536:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001538:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800153c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001542:	4618      	mov	r0, r3
 8001544:	f002 f80e 	bl	8003564 <HAL_RCC_OscConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800154e:	f000 fa63 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001552:	230f      	movs	r3, #15
 8001554:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001556:	2302      	movs	r3, #2
 8001558:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001562:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001568:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800156c:	2102      	movs	r1, #2
 800156e:	4618      	mov	r0, r3
 8001570:	f003 f806 	bl	8004580 <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800157a:	f000 fa4d 	bl	8001a18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <SystemClock_Config+0xcc>)
 8001580:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001586:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800158a:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4618      	mov	r0, r3
 8001590:	f003 fa08 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800159a:	f000 fa3d 	bl	8001a18 <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3770      	adds	r7, #112	@ 0x70
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	00010020 	.word	0x00010020

080015b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001684 <MX_ADC1_Init+0xd4>)
 80015c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80015cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <MX_ADC1_Init+0xd4>)
 80015d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <MX_ADC1_Init+0xd4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015dc:	4b29      	ldr	r3, [pc, #164]	@ (8001684 <MX_ADC1_Init+0xd4>)
 80015de:	2201      	movs	r2, #1
 80015e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015e2:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <MX_ADC1_Init+0xd4>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015e8:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <MX_ADC1_Init+0xd4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f0:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <MX_ADC1_Init+0xd4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f6:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <MX_ADC1_Init+0xd4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <MX_ADC1_Init+0xd4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <MX_ADC1_Init+0xd4>)
 8001604:	2202      	movs	r2, #2
 8001606:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001608:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <MX_ADC1_Init+0xd4>)
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001610:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <MX_ADC1_Init+0xd4>)
 8001612:	2204      	movs	r2, #4
 8001614:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001616:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <MX_ADC1_Init+0xd4>)
 8001618:	2200      	movs	r2, #0
 800161a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <MX_ADC1_Init+0xd4>)
 800161e:	2200      	movs	r2, #0
 8001620:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001622:	4818      	ldr	r0, [pc, #96]	@ (8001684 <MX_ADC1_Init+0xd4>)
 8001624:	f000 fd40 	bl	80020a8 <HAL_ADC_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 800162e:	f000 f9f3 	bl	8001a18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001632:	2307      	movs	r3, #7
 8001634:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001636:	2301      	movs	r3, #1
 8001638:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 800163e:	2306      	movs	r3, #6
 8001640:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164a:	463b      	mov	r3, r7
 800164c:	4619      	mov	r1, r3
 800164e:	480d      	ldr	r0, [pc, #52]	@ (8001684 <MX_ADC1_Init+0xd4>)
 8001650:	f000 ff4c 	bl	80024ec <HAL_ADC_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800165a:	f000 f9dd 	bl	8001a18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800165e:	2308      	movs	r3, #8
 8001660:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001662:	2302      	movs	r3, #2
 8001664:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001666:	463b      	mov	r3, r7
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	@ (8001684 <MX_ADC1_Init+0xd4>)
 800166c:	f000 ff3e 	bl	80024ec <HAL_ADC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001676:	f000 f9cf 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200001f8 	.word	0x200001f8

08001688 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800169c:	2300      	movs	r3, #0
 800169e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016a0:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <MX_RTC_Init+0xac>)
 80016a2:	4a25      	ldr	r2, [pc, #148]	@ (8001738 <MX_RTC_Init+0xb0>)
 80016a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016a6:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <MX_RTC_Init+0xac>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016ac:	4b21      	ldr	r3, [pc, #132]	@ (8001734 <MX_RTC_Init+0xac>)
 80016ae:	227f      	movs	r2, #127	@ 0x7f
 80016b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <MX_RTC_Init+0xac>)
 80016b4:	22ff      	movs	r2, #255	@ 0xff
 80016b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <MX_RTC_Init+0xac>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <MX_RTC_Init+0xac>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_RTC_Init+0xac>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016ca:	481a      	ldr	r0, [pc, #104]	@ (8001734 <MX_RTC_Init+0xac>)
 80016cc:	f003 fafa 	bl	8004cc4 <HAL_RTC_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80016d6:	f000 f99f 	bl	8001a18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016da:	2300      	movs	r3, #0
 80016dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80016de:	2300      	movs	r3, #0
 80016e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2201      	movs	r2, #1
 80016f2:	4619      	mov	r1, r3
 80016f4:	480f      	ldr	r0, [pc, #60]	@ (8001734 <MX_RTC_Init+0xac>)
 80016f6:	f003 fb68 	bl	8004dca <HAL_RTC_SetTime>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001700:	f000 f98a 	bl	8001a18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001704:	2301      	movs	r3, #1
 8001706:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001708:	2301      	movs	r3, #1
 800170a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800170c:	2301      	movs	r3, #1
 800170e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001710:	2300      	movs	r3, #0
 8001712:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	@ (8001734 <MX_RTC_Init+0xac>)
 800171c:	f003 fbef 	bl	8004efe <HAL_RTC_SetDate>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001726:	f000 f977 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000028c 	.word	0x2000028c
 8001738:	40002800 	.word	0x40002800

0800173c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_SPI3_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <MX_SPI3_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_SPI3_Init+0x74>)
 8001748:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800174c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800174e:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_SPI3_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <MX_SPI3_Init+0x74>)
 8001756:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800175a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_SPI3_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001762:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <MX_SPI3_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_SPI3_Init+0x74>)
 800176a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_SPI3_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_SPI3_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <MX_SPI3_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <MX_SPI3_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_SPI3_Init+0x74>)
 800178a:	2207      	movs	r2, #7
 800178c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <MX_SPI3_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_SPI3_Init+0x74>)
 8001796:	2208      	movs	r2, #8
 8001798:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_SPI3_Init+0x74>)
 800179c:	f003 fcd4 	bl	8005148 <HAL_SPI_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 f937 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200002ac 	.word	0x200002ac
 80017b4:	40003c00 	.word	0x40003c00

080017b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f8:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017fe:	4814      	ldr	r0, [pc, #80]	@ (8001850 <MX_TIM2_Init+0x98>)
 8001800:	f004 f826 	bl	8005850 <HAL_TIM_Base_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800180a:	f000 f905 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001812:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	480d      	ldr	r0, [pc, #52]	@ (8001850 <MX_TIM2_Init+0x98>)
 800181c:	f004 f86f 	bl	80058fe <HAL_TIM_ConfigClockSource>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001826:	f000 f8f7 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	@ (8001850 <MX_TIM2_Init+0x98>)
 8001838:	f004 fa3e 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001842:	f000 f8e9 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	3720      	adds	r7, #32
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000310 	.word	0x20000310

08001854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_USART2_UART_Init+0x58>)
 800185a:	4a15      	ldr	r2, [pc, #84]	@ (80018b0 <MX_USART2_UART_Init+0x5c>)
 800185c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800185e:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <MX_USART2_UART_Init+0x58>)
 8001860:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_USART2_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_USART2_UART_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <MX_USART2_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <MX_USART2_UART_Init+0x58>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <MX_USART2_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <MX_USART2_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188a:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <MX_USART2_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <MX_USART2_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_USART2_UART_Init+0x58>)
 8001898:	f004 fa74 	bl	8005d84 <HAL_UART_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018a2:	f000 f8b9 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000035c 	.word	0x2000035c
 80018b0:	40004400 	.word	0x40004400

080018b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <MX_DMA_Init+0x38>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <MX_DMA_Init+0x38>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6153      	str	r3, [r2, #20]
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <MX_DMA_Init+0x38>)
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	200b      	movs	r0, #11
 80018d8:	f001 fac5 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018dc:	200b      	movs	r0, #11
 80018de:	f001 fade 	bl	8002e9e <HAL_NVIC_EnableIRQ>

}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	4b41      	ldr	r3, [pc, #260]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a40      	ldr	r2, [pc, #256]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 800190c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b3e      	ldr	r3, [pc, #248]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800191e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a3a      	ldr	r2, [pc, #232]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 8001924:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b38      	ldr	r3, [pc, #224]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b35      	ldr	r3, [pc, #212]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4a34      	ldr	r2, [pc, #208]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 800193c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001940:	6153      	str	r3, [r2, #20]
 8001942:	4b32      	ldr	r3, [pc, #200]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	4a2e      	ldr	r2, [pc, #184]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001958:	6153      	str	r3, [r2, #20]
 800195a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RESET_Pin|DC_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f248 2110 	movw	r1, #33296	@ 0x8210
 800196c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001970:	f001 fdb8 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800197a:	4825      	ldr	r0, [pc, #148]	@ (8001a10 <MX_GPIO_Init+0x120>)
 800197c:	f001 fdb2 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001980:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001986:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	481f      	ldr	r0, [pc, #124]	@ (8001a14 <MX_GPIO_Init+0x124>)
 8001998:	f001 fc32 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800199c:	2301      	movs	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019a0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4818      	ldr	r0, [pc, #96]	@ (8001a14 <MX_GPIO_Init+0x124>)
 80019b2:	f001 fc25 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin RESET_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RESET_Pin|DC_Pin;
 80019b6:	f248 2310 	movw	r3, #33296	@ 0x8210
 80019ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d2:	f001 fc15 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	4808      	ldr	r0, [pc, #32]	@ (8001a10 <MX_GPIO_Init+0x120>)
 80019f0:	f001 fc06 	bl	8003200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2006      	movs	r0, #6
 80019fa:	f001 fa34 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019fe:	2006      	movs	r0, #6
 8001a00:	f001 fa4d 	bl	8002e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	@ 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	48000400 	.word	0x48000400
 8001a14:	48000800 	.word	0x48000800

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <Error_Handler+0x8>

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6193      	str	r3, [r2, #24]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a5a:	2007      	movs	r0, #7
 8001a5c:	f001 f9f8 	bl	8002e50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000

08001a6c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a8c:	d14b      	bne.n	8001b26 <HAL_ADC_MspInit+0xba>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a8e:	4b28      	ldr	r3, [pc, #160]	@ (8001b30 <HAL_ADC_MspInit+0xc4>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	4a27      	ldr	r2, [pc, #156]	@ (8001b30 <HAL_ADC_MspInit+0xc4>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	6153      	str	r3, [r2, #20]
 8001a9a:	4b25      	ldr	r3, [pc, #148]	@ (8001b30 <HAL_ADC_MspInit+0xc4>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa6:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <HAL_ADC_MspInit+0xc4>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	4a21      	ldr	r2, [pc, #132]	@ (8001b30 <HAL_ADC_MspInit+0xc4>)
 8001aac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ab0:	6153      	str	r3, [r2, #20]
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <HAL_ADC_MspInit+0xc4>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001abe:	2306      	movs	r3, #6
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4818      	ldr	r0, [pc, #96]	@ (8001b34 <HAL_ADC_MspInit+0xc8>)
 8001ad2:	f001 fb95 	bl	8003200 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_ADC_MspInit+0xcc>)
 8001ad8:	4a18      	ldr	r2, [pc, #96]	@ (8001b3c <HAL_ADC_MspInit+0xd0>)
 8001ada:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001adc:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <HAL_ADC_MspInit+0xcc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_ADC_MspInit+0xcc>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <HAL_ADC_MspInit+0xcc>)
 8001aea:	2280      	movs	r2, #128	@ 0x80
 8001aec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aee:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_ADC_MspInit+0xcc>)
 8001af0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001af4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_ADC_MspInit+0xcc>)
 8001af8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001afc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_ADC_MspInit+0xcc>)
 8001b00:	2220      	movs	r2, #32
 8001b02:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <HAL_ADC_MspInit+0xcc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b0a:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <HAL_ADC_MspInit+0xcc>)
 8001b0c:	f001 f9e1 	bl	8002ed2 <HAL_DMA_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8001b16:	f7ff ff7f 	bl	8001a18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a06      	ldr	r2, [pc, #24]	@ (8001b38 <HAL_ADC_MspInit+0xcc>)
 8001b1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b20:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <HAL_ADC_MspInit+0xcc>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	@ 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48000800 	.word	0x48000800
 8001b38:	20000248 	.word	0x20000248
 8001b3c:	40020008 	.word	0x40020008

08001b40 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <HAL_RTC_MspInit+0x44>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d111      	bne.n	8001b76 <HAL_RTC_MspInit+0x36>
 8001b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b56:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b60:	68bb      	ldr	r3, [r7, #8]
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <HAL_RTC_MspInit+0x48>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	461a      	mov	r2, r3
 8001b72:	2301      	movs	r3, #1
 8001b74:	6013      	str	r3, [r2, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40002800 	.word	0x40002800
 8001b88:	10908100 	.word	0x10908100

08001b8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	@ 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a17      	ldr	r2, [pc, #92]	@ (8001c08 <HAL_SPI_MspInit+0x7c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d128      	bne.n	8001c00 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bae:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <HAL_SPI_MspInit+0x80>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a16      	ldr	r2, [pc, #88]	@ (8001c0c <HAL_SPI_MspInit+0x80>)
 8001bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <HAL_SPI_MspInit+0x80>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc6:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <HAL_SPI_MspInit+0x80>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	4a10      	ldr	r2, [pc, #64]	@ (8001c0c <HAL_SPI_MspInit+0x80>)
 8001bcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001bd0:	6153      	str	r3, [r2, #20]
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <HAL_SPI_MspInit+0x80>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001bde:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bf0:	2306      	movs	r3, #6
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <HAL_SPI_MspInit+0x84>)
 8001bfc:	f001 fb00 	bl	8003200 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	@ 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40003c00 	.word	0x40003c00
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	48000800 	.word	0x48000800

08001c14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c24:	d10b      	bne.n	8001c3e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <HAL_TIM_Base_MspInit+0x38>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a08      	ldr	r2, [pc, #32]	@ (8001c4c <HAL_TIM_Base_MspInit+0x38>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_TIM_Base_MspInit+0x38>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	@ 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a17      	ldr	r2, [pc, #92]	@ (8001ccc <HAL_UART_MspInit+0x7c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d128      	bne.n	8001cc4 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c72:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <HAL_UART_MspInit+0x80>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a16      	ldr	r2, [pc, #88]	@ (8001cd0 <HAL_UART_MspInit+0x80>)
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <HAL_UART_MspInit+0x80>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_UART_MspInit+0x80>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	4a10      	ldr	r2, [pc, #64]	@ (8001cd0 <HAL_UART_MspInit+0x80>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c94:	6153      	str	r3, [r2, #20]
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_UART_MspInit+0x80>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc0:	f001 fa9e 	bl	8003200 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3728      	adds	r7, #40	@ 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40004400 	.word	0x40004400
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <NMI_Handler+0x4>

08001cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <HardFault_Handler+0x4>

08001ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <MemManage_Handler+0x4>

08001cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2a:	f000 f95b 	bl	8001fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f001 fbec 	bl	8003514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d44:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <DMA1_Channel1_IRQHandler+0x10>)
 8001d46:	f001 f96a 	bl	800301e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000248 	.word	0x20000248

08001d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return 1;
 8001d58:	2301      	movs	r3, #1
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_kill>:

int _kill(int pid, int sig)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d6e:	f005 f977 	bl	8007060 <__errno>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2216      	movs	r2, #22
 8001d76:	601a      	str	r2, [r3, #0]
  return -1;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_exit>:

void _exit (int status)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ffe7 	bl	8001d64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d96:	bf00      	nop
 8001d98:	e7fd      	b.n	8001d96 <_exit+0x12>

08001d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e00a      	b.n	8001dc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dac:	f3af 8000 	nop.w
 8001db0:	4601      	mov	r1, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	60ba      	str	r2, [r7, #8]
 8001db8:	b2ca      	uxtb	r2, r1
 8001dba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbf0      	blt.n	8001dac <_read+0x12>
  }

  return len;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e009      	b.n	8001dfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	60ba      	str	r2, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbf1      	blt.n	8001de6 <_write+0x12>
  }
  return len;
 8001e02:	687b      	ldr	r3, [r7, #4]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_close>:

int _close(int file)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e34:	605a      	str	r2, [r3, #4]
  return 0;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_isatty>:

int _isatty(int file)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <_sbrk+0x5c>)
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <_sbrk+0x60>)
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e90:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <_sbrk+0x64>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	@ (8001edc <_sbrk+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d207      	bcs.n	8001eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea4:	f005 f8dc 	bl	8007060 <__errno>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	220c      	movs	r2, #12
 8001eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	e009      	b.n	8001ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <_sbrk+0x64>)
 8001ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20004000 	.word	0x20004000
 8001ed4:	00000400 	.word	0x00000400
 8001ed8:	200003f4 	.word	0x200003f4
 8001edc:	20000548 	.word	0x20000548

08001ee0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <SystemInit+0x20>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eea:	4a05      	ldr	r2, [pc, #20]	@ (8001f00 <SystemInit+0x20>)
 8001eec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ef0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f3c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f08:	f7ff ffea 	bl	8001ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f0c:	480c      	ldr	r0, [pc, #48]	@ (8001f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f0e:	490d      	ldr	r1, [pc, #52]	@ (8001f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f10:	4a0d      	ldr	r2, [pc, #52]	@ (8001f48 <LoopForever+0xe>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0a      	ldr	r2, [pc, #40]	@ (8001f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f24:	4c0a      	ldr	r4, [pc, #40]	@ (8001f50 <LoopForever+0x16>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f32:	f005 f89b 	bl	800706c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f36:	f7ff fa37 	bl	80013a8 <main>

08001f3a <LoopForever>:

LoopForever:
    b LoopForever
 8001f3a:	e7fe      	b.n	8001f3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f3c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f48:	08009d94 	.word	0x08009d94
  ldr r2, =_sbss
 8001f4c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f50:	20000548 	.word	0x20000548

08001f54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC1_IRQHandler>
	...

08001f58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f5c:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <HAL_Init+0x28>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a07      	ldr	r2, [pc, #28]	@ (8001f80 <HAL_Init+0x28>)
 8001f62:	f043 0310 	orr.w	r3, r3, #16
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f000 ff71 	bl	8002e50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 f808 	bl	8001f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f74:	f7ff fd56 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40022000 	.word	0x40022000

08001f84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_InitTick+0x54>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_InitTick+0x58>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 ff89 	bl	8002eba <HAL_SYSTICK_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00e      	b.n	8001fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d80a      	bhi.n	8001fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f000 ff51 	bl	8002e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc4:	4a06      	ldr	r2, [pc, #24]	@ (8001fe0 <HAL_InitTick+0x5c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	2000000c 	.word	0x2000000c
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x20>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_IncTick+0x24>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <HAL_IncTick+0x24>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	2000000c 	.word	0x2000000c
 8002008:	200003f8 	.word	0x200003f8

0800200c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002010:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <HAL_GetTick+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	200003f8 	.word	0x200003f8

08002024 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800202c:	f7ff ffee 	bl	800200c <HAL_GetTick>
 8002030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203c:	d005      	beq.n	800204a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <HAL_Delay+0x44>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800204a:	bf00      	nop
 800204c:	f7ff ffde 	bl	800200c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d8f7      	bhi.n	800204c <HAL_Delay+0x28>
  {
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000000c 	.word	0x2000000c

0800206c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b09a      	sub	sp, #104	@ 0x68
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e169      	b.n	800239c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d176      	bne.n	80021c8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d152      	bne.n	8002188 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fcb5 	bl	8001a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d13b      	bne.n	8002188 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fd67 	bl	8002be4 <ADC_Disable>
 8002116:	4603      	mov	r3, r0
 8002118:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d12f      	bne.n	8002188 <HAL_ADC_Init+0xe0>
 8002128:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800212c:	2b00      	cmp	r3, #0
 800212e:	d12b      	bne.n	8002188 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002138:	f023 0302 	bic.w	r3, r3, #2
 800213c:	f043 0202 	orr.w	r2, r3, #2
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002152:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002162:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002164:	4b8f      	ldr	r3, [pc, #572]	@ (80023a4 <HAL_ADC_Init+0x2fc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a8f      	ldr	r2, [pc, #572]	@ (80023a8 <HAL_ADC_Init+0x300>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9a      	lsrs	r2, r3, #18
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800217a:	e002      	b.n	8002182 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	3b01      	subs	r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f9      	bne.n	800217c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021a4:	d110      	bne.n	80021c8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f023 0312 	bic.w	r3, r3, #18
 80021ae:	f043 0210 	orr.w	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 80d6 	bne.w	8002382 <HAL_ADC_Init+0x2da>
 80021d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 80d1 	bne.w	8002382 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 80c9 	bne.w	8002382 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021f8:	f043 0202 	orr.w	r2, r3, #2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002200:	4b6a      	ldr	r3, [pc, #424]	@ (80023ac <HAL_ADC_Init+0x304>)
 8002202:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d108      	bne.n	8002228 <HAL_ADC_Init+0x180>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_ADC_Init+0x180>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_ADC_Init+0x182>
 8002228:	2300      	movs	r3, #0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d11c      	bne.n	8002268 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800222e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d010      	beq.n	8002256 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d107      	bne.n	8002250 <HAL_ADC_Init+0x1a8>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_ADC_Init+0x1a8>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <HAL_ADC_Init+0x1aa>
 8002250:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002252:	2b00      	cmp	r3, #0
 8002254:	d108      	bne.n	8002268 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	431a      	orrs	r2, r3
 8002264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002266:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7e5b      	ldrb	r3, [r3, #25]
 800226c:	035b      	lsls	r3, r3, #13
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002272:	2a01      	cmp	r2, #1
 8002274:	d002      	beq.n	800227c <HAL_ADC_Init+0x1d4>
 8002276:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800227a:	e000      	b.n	800227e <HAL_ADC_Init+0x1d6>
 800227c:	2200      	movs	r2, #0
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4313      	orrs	r3, r2
 800228c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800228e:	4313      	orrs	r3, r2
 8002290:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d11b      	bne.n	80022d4 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7e5b      	ldrb	r3, [r3, #25]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d109      	bne.n	80022b8 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	3b01      	subs	r3, #1
 80022aa:	045a      	lsls	r2, r3, #17
 80022ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80022b6:	e00d      	b.n	80022d4 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d007      	beq.n	80022ec <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	4313      	orrs	r3, r2
 80022e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022e8:	4313      	orrs	r3, r2
 80022ea:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d114      	bne.n	8002324 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002308:	f023 0302 	bic.w	r3, r3, #2
 800230c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7e1b      	ldrb	r3, [r3, #24]
 8002312:	039a      	lsls	r2, r3, #14
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4313      	orrs	r3, r2
 800231e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002320:	4313      	orrs	r3, r2
 8002322:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	4b21      	ldr	r3, [pc, #132]	@ (80023b0 <HAL_ADC_Init+0x308>)
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002334:	430b      	orrs	r3, r1
 8002336:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10c      	bne.n	800235a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f023 010f 	bic.w	r1, r3, #15
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	1e5a      	subs	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
 8002358:	e007      	b.n	800236a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 020f 	bic.w	r2, r2, #15
 8002368:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f023 0303 	bic.w	r3, r3, #3
 8002378:	f043 0201 	orr.w	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002380:	e00a      	b.n	8002398 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f023 0312 	bic.w	r3, r3, #18
 800238a:	f043 0210 	orr.w	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002392:	2301      	movs	r3, #1
 8002394:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002398:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800239c:	4618      	mov	r0, r3
 800239e:	3768      	adds	r7, #104	@ 0x68
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000004 	.word	0x20000004
 80023a8:	431bde83 	.word	0x431bde83
 80023ac:	50000300 	.word	0x50000300
 80023b0:	fff0c007 	.word	0xfff0c007

080023b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d17e      	bne.n	80024d0 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_Start_DMA+0x2c>
 80023dc:	2302      	movs	r3, #2
 80023de:	e07a      	b.n	80024d6 <HAL_ADC_Start_DMA+0x122>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fb97 	bl	8002b1c <ADC_Enable>
 80023ee:	4603      	mov	r3, r0
 80023f0:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d166      	bne.n	80024c6 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800242e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	641a      	str	r2, [r3, #64]	@ 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800243e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002442:	d106      	bne.n	8002452 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002448:	f023 0206 	bic.w	r2, r3, #6
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002450:	e002      	b.n	8002458 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002464:	4a1e      	ldr	r2, [pc, #120]	@ (80024e0 <HAL_ADC_Start_DMA+0x12c>)
 8002466:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246c:	4a1d      	ldr	r2, [pc, #116]	@ (80024e4 <HAL_ADC_Start_DMA+0x130>)
 800246e:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002474:	4a1c      	ldr	r2, [pc, #112]	@ (80024e8 <HAL_ADC_Start_DMA+0x134>)
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	221c      	movs	r2, #28
 800247e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0210 	orr.w	r2, r2, #16
 800248e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3340      	adds	r3, #64	@ 0x40
 80024aa:	4619      	mov	r1, r3
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f000 fd56 	bl	8002f60 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0204 	orr.w	r2, r2, #4
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	e006      	b.n	80024d4 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80024ce:	e001      	b.n	80024d4 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
 80024d2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	08002a51 	.word	0x08002a51
 80024e4:	08002acb 	.word	0x08002acb
 80024e8:	08002ae7 	.word	0x08002ae7

080024ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b09b      	sub	sp, #108	@ 0x6c
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x22>
 800250a:	2302      	movs	r3, #2
 800250c:	e295      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x54e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	f040 8279 	bne.w	8002a18 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b04      	cmp	r3, #4
 800252c:	d81c      	bhi.n	8002568 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	461a      	mov	r2, r3
 8002542:	231f      	movs	r3, #31
 8002544:	4093      	lsls	r3, r2
 8002546:	43db      	mvns	r3, r3
 8002548:	4019      	ands	r1, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa00 f203 	lsl.w	r2, r0, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
 8002566:	e063      	b.n	8002630 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b09      	cmp	r3, #9
 800256e:	d81e      	bhi.n	80025ae <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	3b1e      	subs	r3, #30
 8002584:	221f      	movs	r2, #31
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	4019      	ands	r1, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	3b1e      	subs	r3, #30
 80025a0:	fa00 f203 	lsl.w	r2, r0, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80025ac:	e040      	b.n	8002630 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b0e      	cmp	r3, #14
 80025b4:	d81e      	bhi.n	80025f4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	3b3c      	subs	r3, #60	@ 0x3c
 80025ca:	221f      	movs	r2, #31
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	4019      	ands	r1, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	3b3c      	subs	r3, #60	@ 0x3c
 80025e6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80025f2:	e01d      	b.n	8002630 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	3b5a      	subs	r3, #90	@ 0x5a
 8002608:	221f      	movs	r2, #31
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	4019      	ands	r1, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	3b5a      	subs	r3, #90	@ 0x5a
 8002624:	fa00 f203 	lsl.w	r2, r0, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 80e5 	bne.w	800280a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b09      	cmp	r3, #9
 8002646:	d91c      	bls.n	8002682 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6999      	ldr	r1, [r3, #24]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	3b1e      	subs	r3, #30
 800265a:	2207      	movs	r2, #7
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	4019      	ands	r1, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6898      	ldr	r0, [r3, #8]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	3b1e      	subs	r3, #30
 8002674:	fa00 f203 	lsl.w	r2, r0, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	619a      	str	r2, [r3, #24]
 8002680:	e019      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6959      	ldr	r1, [r3, #20]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	2207      	movs	r2, #7
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	4019      	ands	r1, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6898      	ldr	r0, [r3, #8]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	fa00 f203 	lsl.w	r2, r0, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	08db      	lsrs	r3, r3, #3
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d84f      	bhi.n	8002778 <HAL_ADC_ConfigChannel+0x28c>
 80026d8:	a201      	add	r2, pc, #4	@ (adr r2, 80026e0 <HAL_ADC_ConfigChannel+0x1f4>)
 80026da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026de:	bf00      	nop
 80026e0:	080026f1 	.word	0x080026f1
 80026e4:	08002713 	.word	0x08002713
 80026e8:	08002735 	.word	0x08002735
 80026ec:	08002757 	.word	0x08002757
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026f6:	4b97      	ldr	r3, [pc, #604]	@ (8002954 <HAL_ADC_ConfigChannel+0x468>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	0691      	lsls	r1, r2, #26
 8002700:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002702:	430a      	orrs	r2, r1
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800270e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002710:	e07b      	b.n	800280a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002718:	4b8e      	ldr	r3, [pc, #568]	@ (8002954 <HAL_ADC_ConfigChannel+0x468>)
 800271a:	4013      	ands	r3, r2
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	0691      	lsls	r1, r2, #26
 8002722:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002724:	430a      	orrs	r2, r1
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002730:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002732:	e06a      	b.n	800280a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800273a:	4b86      	ldr	r3, [pc, #536]	@ (8002954 <HAL_ADC_ConfigChannel+0x468>)
 800273c:	4013      	ands	r3, r2
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	0691      	lsls	r1, r2, #26
 8002744:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002746:	430a      	orrs	r2, r1
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002752:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002754:	e059      	b.n	800280a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800275c:	4b7d      	ldr	r3, [pc, #500]	@ (8002954 <HAL_ADC_ConfigChannel+0x468>)
 800275e:	4013      	ands	r3, r2
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	0691      	lsls	r1, r2, #26
 8002766:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002768:	430a      	orrs	r2, r1
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002774:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002776:	e048      	b.n	800280a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	069b      	lsls	r3, r3, #26
 8002788:	429a      	cmp	r2, r3
 800278a:	d107      	bne.n	800279c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800279a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	069b      	lsls	r3, r3, #26
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d107      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027be:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	069b      	lsls	r3, r3, #26
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d107      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027e2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	069b      	lsls	r3, r3, #26
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d107      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002806:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002808:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d108      	bne.n	800282a <HAL_ADC_ConfigChannel+0x33e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_ADC_ConfigChannel+0x33e>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_ADC_ConfigChannel+0x340>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	f040 80fe 	bne.w	8002a2e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d00f      	beq.n	800285a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2201      	movs	r2, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43da      	mvns	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	400a      	ands	r2, r1
 8002854:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002858:	e049      	b.n	80028ee <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2201      	movs	r2, #1
 8002868:	409a      	lsls	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b09      	cmp	r3, #9
 800287a:	d91c      	bls.n	80028b6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6999      	ldr	r1, [r3, #24]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	3b1b      	subs	r3, #27
 800288e:	2207      	movs	r2, #7
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	4019      	ands	r1, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6898      	ldr	r0, [r3, #8]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	3b1b      	subs	r3, #27
 80028a8:	fa00 f203 	lsl.w	r2, r0, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	619a      	str	r2, [r3, #24]
 80028b4:	e01b      	b.n	80028ee <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6959      	ldr	r1, [r3, #20]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	2207      	movs	r2, #7
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	4019      	ands	r1, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6898      	ldr	r0, [r3, #8]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	fa00 f203 	lsl.w	r2, r0, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002958 <HAL_ADC_ConfigChannel+0x46c>)
 80028f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	d105      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002902:	2b00      	cmp	r3, #0
 8002904:	d014      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800290a:	2b11      	cmp	r3, #17
 800290c:	d105      	bne.n	800291a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800290e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800291e:	2b12      	cmp	r3, #18
 8002920:	f040 8085 	bne.w	8002a2e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800292c:	2b00      	cmp	r3, #0
 800292e:	d17e      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10c      	bne.n	800295c <HAL_ADC_ConfigChannel+0x470>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_ADC_ConfigChannel+0x470>
 8002950:	2301      	movs	r3, #1
 8002952:	e004      	b.n	800295e <HAL_ADC_ConfigChannel+0x472>
 8002954:	83fff000 	.word	0x83fff000
 8002958:	50000300 	.word	0x50000300
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d150      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002962:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002964:	2b00      	cmp	r3, #0
 8002966:	d010      	beq.n	800298a <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d107      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x498>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x498>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_ADC_ConfigChannel+0x49a>
 8002984:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002986:	2b00      	cmp	r3, #0
 8002988:	d13c      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b10      	cmp	r3, #16
 8002990:	d11d      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x4e2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800299a:	d118      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800299c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029a8:	4b27      	ldr	r3, [pc, #156]	@ (8002a48 <HAL_ADC_ConfigChannel+0x55c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a27      	ldr	r2, [pc, #156]	@ (8002a4c <HAL_ADC_ConfigChannel+0x560>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	0c9a      	lsrs	r2, r3, #18
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029be:	e002      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f9      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029cc:	e02e      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b11      	cmp	r3, #17
 80029d4:	d10b      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x502>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029de:	d106      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80029e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80029e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029ea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029ec:	e01e      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b12      	cmp	r3, #18
 80029f4:	d11a      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80029f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a00:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a02:	e013      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002a16:	e00a      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002a2a:	e000      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a2c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a36:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	376c      	adds	r7, #108	@ 0x6c
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000004 	.word	0x20000004
 8002a4c:	431bde83 	.word	0x431bde83

08002a50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d126      	bne.n	8002ab8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d115      	bne.n	8002ab0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d111      	bne.n	8002ab0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f043 0201 	orr.w	r2, r3, #1
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff fadb 	bl	800206c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002ab6:	e004      	b.n	8002ac2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff fad1 	bl	8002080 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b04:	f043 0204 	orr.w	r2, r3, #4
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7ff fac1 	bl	8002094 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d108      	bne.n	8002b48 <ADC_Enable+0x2c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <ADC_Enable+0x2c>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <ADC_Enable+0x2e>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d143      	bne.n	8002bd6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b22      	ldr	r3, [pc, #136]	@ (8002be0 <ADC_Enable+0xc4>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	f043 0210 	orr.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e02f      	b.n	8002bd8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002b88:	f7ff fa40 	bl	800200c <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b8e:	e01b      	b.n	8002bc8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b90:	f7ff fa3c 	bl	800200c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d914      	bls.n	8002bc8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d00d      	beq.n	8002bc8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	f043 0210 	orr.w	r2, r3, #16
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbc:	f043 0201 	orr.w	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e007      	b.n	8002bd8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d1dc      	bne.n	8002b90 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	8000003f 	.word	0x8000003f

08002be4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d108      	bne.n	8002c10 <ADC_Disable+0x2c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <ADC_Disable+0x2c>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <ADC_Disable+0x2e>
 8002c10:	2300      	movs	r3, #0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d047      	beq.n	8002ca6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030d 	and.w	r3, r3, #13
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d10f      	bne.n	8002c44 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0202 	orr.w	r2, r2, #2
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2203      	movs	r2, #3
 8002c3a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002c3c:	f7ff f9e6 	bl	800200c <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c42:	e029      	b.n	8002c98 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	f043 0210 	orr.w	r2, r3, #16
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e023      	b.n	8002ca8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c60:	f7ff f9d4 	bl	800200c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d914      	bls.n	8002c98 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d10d      	bne.n	8002c98 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f043 0210 	orr.w	r2, r3, #16
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8c:	f043 0201 	orr.w	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e007      	b.n	8002ca8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d0dc      	beq.n	8002c60 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce2:	4a04      	ldr	r2, [pc, #16]	@ (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	60d3      	str	r3, [r2, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cfc:	4b04      	ldr	r3, [pc, #16]	@ (8002d10 <__NVIC_GetPriorityGrouping+0x18>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	f003 0307 	and.w	r3, r3, #7
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db0b      	blt.n	8002d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	4907      	ldr	r1, [pc, #28]	@ (8002d4c <__NVIC_EnableIRQ+0x38>)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2001      	movs	r0, #1
 8002d36:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000e100 	.word	0xe000e100

08002d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	6039      	str	r1, [r7, #0]
 8002d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	db0a      	blt.n	8002d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	490c      	ldr	r1, [pc, #48]	@ (8002d9c <__NVIC_SetPriority+0x4c>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	0112      	lsls	r2, r2, #4
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	440b      	add	r3, r1
 8002d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d78:	e00a      	b.n	8002d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4908      	ldr	r1, [pc, #32]	@ (8002da0 <__NVIC_SetPriority+0x50>)
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	3b04      	subs	r3, #4
 8002d88:	0112      	lsls	r2, r2, #4
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	761a      	strb	r2, [r3, #24]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000e100 	.word	0xe000e100
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	@ 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f1c3 0307 	rsb	r3, r3, #7
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	bf28      	it	cs
 8002dc2:	2304      	movcs	r3, #4
 8002dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d902      	bls.n	8002dd4 <NVIC_EncodePriority+0x30>
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3b03      	subs	r3, #3
 8002dd2:	e000      	b.n	8002dd6 <NVIC_EncodePriority+0x32>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	401a      	ands	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43d9      	mvns	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	4313      	orrs	r3, r2
         );
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3724      	adds	r7, #36	@ 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e1c:	d301      	bcc.n	8002e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00f      	b.n	8002e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e22:	4a0a      	ldr	r2, [pc, #40]	@ (8002e4c <SysTick_Config+0x40>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f7ff ff8e 	bl	8002d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e34:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <SysTick_Config+0x40>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3a:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <SysTick_Config+0x40>)
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	e000e010 	.word	0xe000e010

08002e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff29 	bl	8002cb0 <__NVIC_SetPriorityGrouping>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e78:	f7ff ff3e 	bl	8002cf8 <__NVIC_GetPriorityGrouping>
 8002e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f7ff ff8e 	bl	8002da4 <NVIC_EncodePriority>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff5d 	bl	8002d50 <__NVIC_SetPriority>
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff31 	bl	8002d14 <__NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ffa2 	bl	8002e0c <SysTick_Config>
 8002ec8:	4603      	mov	r3, r0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e037      	b.n	8002f58 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002efe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002f02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f940 	bl	80031c0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_DMA_Start_IT+0x20>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e04a      	b.n	8003016 <HAL_DMA_Start_IT+0xb6>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d13a      	bne.n	8003008 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2202      	movs	r2, #2
 8002f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f8d4 	bl	8003164 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 020e 	orr.w	r2, r2, #14
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e00f      	b.n	8002ff6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 020a 	orr.w	r2, r2, #10
 8002fe4:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0204 	bic.w	r2, r2, #4
 8002ff4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e005      	b.n	8003014 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003010:	2302      	movs	r3, #2
 8003012:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003014:	7dfb      	ldrb	r3, [r7, #23]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	2204      	movs	r2, #4
 800303c:	409a      	lsls	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d024      	beq.n	8003090 <HAL_DMA_IRQHandler+0x72>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01f      	beq.n	8003090 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0204 	bic.w	r2, r2, #4
 800306c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003076:	2104      	movs	r1, #4
 8003078:	fa01 f202 	lsl.w	r2, r1, r2
 800307c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d06a      	beq.n	800315c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800308e:	e065      	b.n	800315c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	2202      	movs	r2, #2
 8003096:	409a      	lsls	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d02c      	beq.n	80030fa <HAL_DMA_IRQHandler+0xdc>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d027      	beq.n	80030fa <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10b      	bne.n	80030d0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 020a 	bic.w	r2, r2, #10
 80030c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d8:	2102      	movs	r1, #2
 80030da:	fa01 f202 	lsl.w	r2, r1, r2
 80030de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d035      	beq.n	800315c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030f8:	e030      	b.n	800315c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	2208      	movs	r2, #8
 8003100:	409a      	lsls	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d028      	beq.n	800315c <HAL_DMA_IRQHandler+0x13e>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d023      	beq.n	800315c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 020e 	bic.w	r2, r2, #14
 8003122:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
    }
  }
}
 800315a:	e7ff      	b.n	800315c <HAL_DMA_IRQHandler+0x13e>
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317a:	2101      	movs	r1, #1
 800317c:	fa01 f202 	lsl.w	r2, r1, r2
 8003180:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b10      	cmp	r3, #16
 8003190:	d108      	bne.n	80031a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031a2:	e007      	b.n	80031b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b09      	ldr	r3, [pc, #36]	@ (80031f4 <DMA_CalcBaseAndBitshift+0x34>)
 80031d0:	4413      	add	r3, r2
 80031d2:	4a09      	ldr	r2, [pc, #36]	@ (80031f8 <DMA_CalcBaseAndBitshift+0x38>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	009a      	lsls	r2, r3, #2
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a06      	ldr	r2, [pc, #24]	@ (80031fc <DMA_CalcBaseAndBitshift+0x3c>)
 80031e4:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	bffdfff8 	.word	0xbffdfff8
 80031f8:	cccccccd 	.word	0xcccccccd
 80031fc:	40020000 	.word	0x40020000

08003200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800320e:	e14e      	b.n	80034ae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	2101      	movs	r1, #1
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	4013      	ands	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8140 	beq.w	80034a8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d005      	beq.n	8003240 <HAL_GPIO_Init+0x40>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d130      	bne.n	80032a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003276:	2201      	movs	r2, #1
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 0201 	and.w	r2, r3, #1
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d017      	beq.n	80032de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	2203      	movs	r2, #3
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d123      	bne.n	8003332 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	08da      	lsrs	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3208      	adds	r2, #8
 80032f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	08da      	lsrs	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3208      	adds	r2, #8
 800332c:	6939      	ldr	r1, [r7, #16]
 800332e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2203      	movs	r2, #3
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0203 	and.w	r2, r3, #3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 809a 	beq.w	80034a8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003374:	4b55      	ldr	r3, [pc, #340]	@ (80034cc <HAL_GPIO_Init+0x2cc>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	4a54      	ldr	r2, [pc, #336]	@ (80034cc <HAL_GPIO_Init+0x2cc>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6193      	str	r3, [r2, #24]
 8003380:	4b52      	ldr	r3, [pc, #328]	@ (80034cc <HAL_GPIO_Init+0x2cc>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800338c:	4a50      	ldr	r2, [pc, #320]	@ (80034d0 <HAL_GPIO_Init+0x2d0>)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	3302      	adds	r3, #2
 8003394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	220f      	movs	r2, #15
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033b6:	d013      	beq.n	80033e0 <HAL_GPIO_Init+0x1e0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a46      	ldr	r2, [pc, #280]	@ (80034d4 <HAL_GPIO_Init+0x2d4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00d      	beq.n	80033dc <HAL_GPIO_Init+0x1dc>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a45      	ldr	r2, [pc, #276]	@ (80034d8 <HAL_GPIO_Init+0x2d8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <HAL_GPIO_Init+0x1d8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a44      	ldr	r2, [pc, #272]	@ (80034dc <HAL_GPIO_Init+0x2dc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_GPIO_Init+0x1d4>
 80033d0:	2303      	movs	r3, #3
 80033d2:	e006      	b.n	80033e2 <HAL_GPIO_Init+0x1e2>
 80033d4:	2305      	movs	r3, #5
 80033d6:	e004      	b.n	80033e2 <HAL_GPIO_Init+0x1e2>
 80033d8:	2302      	movs	r3, #2
 80033da:	e002      	b.n	80033e2 <HAL_GPIO_Init+0x1e2>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_GPIO_Init+0x1e2>
 80033e0:	2300      	movs	r3, #0
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	f002 0203 	and.w	r2, r2, #3
 80033e8:	0092      	lsls	r2, r2, #2
 80033ea:	4093      	lsls	r3, r2
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033f2:	4937      	ldr	r1, [pc, #220]	@ (80034d0 <HAL_GPIO_Init+0x2d0>)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	089b      	lsrs	r3, r3, #2
 80033f8:	3302      	adds	r3, #2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003400:	4b37      	ldr	r3, [pc, #220]	@ (80034e0 <HAL_GPIO_Init+0x2e0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	43db      	mvns	r3, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003424:	4a2e      	ldr	r2, [pc, #184]	@ (80034e0 <HAL_GPIO_Init+0x2e0>)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800342a:	4b2d      	ldr	r3, [pc, #180]	@ (80034e0 <HAL_GPIO_Init+0x2e0>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	43db      	mvns	r3, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800344e:	4a24      	ldr	r2, [pc, #144]	@ (80034e0 <HAL_GPIO_Init+0x2e0>)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003454:	4b22      	ldr	r3, [pc, #136]	@ (80034e0 <HAL_GPIO_Init+0x2e0>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	43db      	mvns	r3, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003478:	4a19      	ldr	r2, [pc, #100]	@ (80034e0 <HAL_GPIO_Init+0x2e0>)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800347e:	4b18      	ldr	r3, [pc, #96]	@ (80034e0 <HAL_GPIO_Init+0x2e0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034a2:	4a0f      	ldr	r2, [pc, #60]	@ (80034e0 <HAL_GPIO_Init+0x2e0>)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3301      	adds	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f47f aea9 	bne.w	8003210 <HAL_GPIO_Init+0x10>
  }
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40010000 	.word	0x40010000
 80034d4:	48000400 	.word	0x48000400
 80034d8:	48000800 	.word	0x48000800
 80034dc:	48000c00 	.word	0x48000c00
 80034e0:	40010400 	.word	0x40010400

080034e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
 80034f0:	4613      	mov	r3, r2
 80034f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f4:	787b      	ldrb	r3, [r7, #1]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003500:	e002      	b.n	8003508 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800351e:	4b08      	ldr	r3, [pc, #32]	@ (8003540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800352a:	4a05      	ldr	r2, [pc, #20]	@ (8003540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fea8 	bl	8001288 <HAL_GPIO_EXTI_Callback>
  }
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40010400 	.word	0x40010400

08003544 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a04      	ldr	r2, [pc, #16]	@ (8003560 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800354e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003552:	6013      	str	r3, [r2, #0]
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40007000 	.word	0x40007000

08003564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800356a:	af00      	add	r7, sp, #0
 800356c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003570:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003574:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f000 bff4 	b.w	8004572 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 816d 	beq.w	800387a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035a0:	4bb4      	ldr	r3, [pc, #720]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d00c      	beq.n	80035c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035ac:	4bb1      	ldr	r3, [pc, #708]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d157      	bne.n	8003668 <HAL_RCC_OscConfig+0x104>
 80035b8:	4bae      	ldr	r3, [pc, #696]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c4:	d150      	bne.n	8003668 <HAL_RCC_OscConfig+0x104>
 80035c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035ca:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
  return result;
 80035da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80035e6:	d802      	bhi.n	80035ee <HAL_RCC_OscConfig+0x8a>
 80035e8:	4ba2      	ldr	r3, [pc, #648]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	e015      	b.n	800361a <HAL_RCC_OscConfig+0xb6>
 80035ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035f2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003602:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003606:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800360a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003616:	4b97      	ldr	r3, [pc, #604]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800361e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003622:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003626:	fa92 f2a2 	rbit	r2, r2
 800362a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800362e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003632:	fab2 f282 	clz	r2, r2
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	f042 0220 	orr.w	r2, r2, #32
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	f002 021f 	and.w	r2, r2, #31
 8003642:	2101      	movs	r1, #1
 8003644:	fa01 f202 	lsl.w	r2, r1, r2
 8003648:	4013      	ands	r3, r2
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8114 	beq.w	8003878 <HAL_RCC_OscConfig+0x314>
 8003650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003654:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f040 810b 	bne.w	8003878 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f000 bf85 	b.w	8004572 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003678:	d106      	bne.n	8003688 <HAL_RCC_OscConfig+0x124>
 800367a:	4b7e      	ldr	r3, [pc, #504]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7d      	ldr	r2, [pc, #500]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e036      	b.n	80036f6 <HAL_RCC_OscConfig+0x192>
 8003688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x14e>
 8003698:	4b76      	ldr	r3, [pc, #472]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a75      	ldr	r2, [pc, #468]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 800369e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b73      	ldr	r3, [pc, #460]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a72      	ldr	r2, [pc, #456]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80036aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	e021      	b.n	80036f6 <HAL_RCC_OscConfig+0x192>
 80036b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036c2:	d10c      	bne.n	80036de <HAL_RCC_OscConfig+0x17a>
 80036c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80036ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b68      	ldr	r3, [pc, #416]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a67      	ldr	r2, [pc, #412]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	e00b      	b.n	80036f6 <HAL_RCC_OscConfig+0x192>
 80036de:	4b65      	ldr	r3, [pc, #404]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a64      	ldr	r2, [pc, #400]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80036e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b62      	ldr	r3, [pc, #392]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a61      	ldr	r2, [pc, #388]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80036f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036f4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fa:	f023 020f 	bic.w	r2, r3, #15
 80036fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003702:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	495a      	ldr	r1, [pc, #360]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 800370c:	4313      	orrs	r3, r2
 800370e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003714:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d054      	beq.n	80037ca <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fe fc74 	bl	800200c <HAL_GetTick>
 8003724:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372a:	f7fe fc6f 	bl	800200c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	@ 0x64
 8003738:	d902      	bls.n	8003740 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	f000 bf19 	b.w	8004572 <HAL_RCC_OscConfig+0x100e>
 8003740:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003744:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003754:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003760:	d802      	bhi.n	8003768 <HAL_RCC_OscConfig+0x204>
 8003762:	4b44      	ldr	r3, [pc, #272]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	e015      	b.n	8003794 <HAL_RCC_OscConfig+0x230>
 8003768:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800376c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800377c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003780:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003784:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003790:	4b38      	ldr	r3, [pc, #224]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003798:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800379c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80037a0:	fa92 f2a2 	rbit	r2, r2
 80037a4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80037a8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80037ac:	fab2 f282 	clz	r2, r2
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	f042 0220 	orr.w	r2, r2, #32
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	f002 021f 	and.w	r2, r2, #31
 80037bc:	2101      	movs	r1, #1
 80037be:	fa01 f202 	lsl.w	r2, r1, r2
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0b0      	beq.n	800372a <HAL_RCC_OscConfig+0x1c6>
 80037c8:	e057      	b.n	800387a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fe fc1f 	bl	800200c <HAL_GetTick>
 80037ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fe fc1a 	bl	800200c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b64      	cmp	r3, #100	@ 0x64
 80037e2:	d902      	bls.n	80037ea <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	f000 bec4 	b.w	8004572 <HAL_RCC_OscConfig+0x100e>
 80037ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037ee:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80037fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b3f      	cmp	r3, #63	@ 0x3f
 800380a:	d802      	bhi.n	8003812 <HAL_RCC_OscConfig+0x2ae>
 800380c:	4b19      	ldr	r3, [pc, #100]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	e015      	b.n	800383e <HAL_RCC_OscConfig+0x2da>
 8003812:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003816:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800381e:	fa93 f3a3 	rbit	r3, r3
 8003822:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003826:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800382a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800382e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800383a:	4b0e      	ldr	r3, [pc, #56]	@ (8003874 <HAL_RCC_OscConfig+0x310>)
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003842:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003846:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800384a:	fa92 f2a2 	rbit	r2, r2
 800384e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003852:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003856:	fab2 f282 	clz	r2, r2
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	f042 0220 	orr.w	r2, r2, #32
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	f002 021f 	and.w	r2, r2, #31
 8003866:	2101      	movs	r1, #1
 8003868:	fa01 f202 	lsl.w	r2, r1, r2
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1b0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x270>
 8003872:	e002      	b.n	800387a <HAL_RCC_OscConfig+0x316>
 8003874:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 816c 	beq.w	8003b68 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003890:	4bcc      	ldr	r3, [pc, #816]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800389c:	4bc9      	ldr	r3, [pc, #804]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d16d      	bne.n	8003984 <HAL_RCC_OscConfig+0x420>
 80038a8:	4bc6      	ldr	r3, [pc, #792]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d167      	bne.n	8003984 <HAL_RCC_OscConfig+0x420>
 80038b4:	2302      	movs	r3, #2
 80038b6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80038c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80038d2:	d802      	bhi.n	80038da <HAL_RCC_OscConfig+0x376>
 80038d4:	4bbb      	ldr	r3, [pc, #748]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	e013      	b.n	8003902 <HAL_RCC_OscConfig+0x39e>
 80038da:	2302      	movs	r3, #2
 80038dc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80038e4:	fa93 f3a3 	rbit	r3, r3
 80038e8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80038ec:	2302      	movs	r3, #2
 80038ee:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80038f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80038fe:	4bb1      	ldr	r3, [pc, #708]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	2202      	movs	r2, #2
 8003904:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003908:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800390c:	fa92 f2a2 	rbit	r2, r2
 8003910:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003914:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003918:	fab2 f282 	clz	r2, r2
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	f042 0220 	orr.w	r2, r2, #32
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	f002 021f 	and.w	r2, r2, #31
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f202 	lsl.w	r2, r1, r2
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCC_OscConfig+0x3e6>
 8003934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003938:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d002      	beq.n	800394a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	f000 be14 	b.w	8004572 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394a:	4b9e      	ldr	r3, [pc, #632]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003956:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	21f8      	movs	r1, #248	@ 0xf8
 8003960:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003968:	fa91 f1a1 	rbit	r1, r1
 800396c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003970:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003974:	fab1 f181 	clz	r1, r1
 8003978:	b2c9      	uxtb	r1, r1
 800397a:	408b      	lsls	r3, r1
 800397c:	4991      	ldr	r1, [pc, #580]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003982:	e0f1      	b.n	8003b68 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003988:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 8083 	beq.w	8003a9c <HAL_RCC_OscConfig+0x538>
 8003996:	2301      	movs	r3, #1
 8003998:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80039a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	461a      	mov	r2, r3
 80039be:	2301      	movs	r3, #1
 80039c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fe fb23 	bl	800200c <HAL_GetTick>
 80039c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fe fb1e 	bl	800200c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d902      	bls.n	80039e2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	f000 bdc8 	b.w	8004572 <HAL_RCC_OscConfig+0x100e>
 80039e2:	2302      	movs	r3, #2
 80039e4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80039f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a00:	d802      	bhi.n	8003a08 <HAL_RCC_OscConfig+0x4a4>
 8003a02:	4b70      	ldr	r3, [pc, #448]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	e013      	b.n	8003a30 <HAL_RCC_OscConfig+0x4cc>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003a20:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003a2c:	4b65      	ldr	r3, [pc, #404]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	2202      	movs	r2, #2
 8003a32:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003a36:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003a3a:	fa92 f2a2 	rbit	r2, r2
 8003a3e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003a42:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003a46:	fab2 f282 	clz	r2, r2
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	f042 0220 	orr.w	r2, r2, #32
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	f002 021f 	and.w	r2, r2, #31
 8003a56:	2101      	movs	r1, #1
 8003a58:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0b4      	beq.n	80039cc <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b58      	ldr	r3, [pc, #352]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	21f8      	movs	r1, #248	@ 0xf8
 8003a78:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003a80:	fa91 f1a1 	rbit	r1, r1
 8003a84:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003a88:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003a8c:	fab1 f181 	clz	r1, r1
 8003a90:	b2c9      	uxtb	r1, r1
 8003a92:	408b      	lsls	r3, r1
 8003a94:	494b      	ldr	r1, [pc, #300]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]
 8003a9a:	e065      	b.n	8003b68 <HAL_RCC_OscConfig+0x604>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003aae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003abc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fe faa0 	bl	800200c <HAL_GetTick>
 8003acc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fa9b 	bl	800200c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d902      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	f000 bd45 	b.w	8004572 <HAL_RCC_OscConfig+0x100e>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b06:	d802      	bhi.n	8003b0e <HAL_RCC_OscConfig+0x5aa>
 8003b08:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	e013      	b.n	8003b36 <HAL_RCC_OscConfig+0x5d2>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003b20:	2302      	movs	r3, #2
 8003b22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003b26:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003b32:	4b24      	ldr	r3, [pc, #144]	@ (8003bc4 <HAL_RCC_OscConfig+0x660>)
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	2202      	movs	r2, #2
 8003b38:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003b3c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003b40:	fa92 f2a2 	rbit	r2, r2
 8003b44:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003b48:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003b4c:	fab2 f282 	clz	r2, r2
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	f042 0220 	orr.w	r2, r2, #32
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	f002 021f 	and.w	r2, r2, #31
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1b4      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8115 	beq.w	8003da8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d07e      	beq.n	8003c8c <HAL_RCC_OscConfig+0x728>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_RCC_OscConfig+0x664>)
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb8:	f7fe fa28 	bl	800200c <HAL_GetTick>
 8003bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc0:	e00f      	b.n	8003be2 <HAL_RCC_OscConfig+0x67e>
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fe fa1e 	bl	800200c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d902      	bls.n	8003be2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	f000 bcc8 	b.w	8004572 <HAL_RCC_OscConfig+0x100e>
 8003be2:	2302      	movs	r3, #2
 8003be4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	fa93 f2a3 	rbit	r2, r3
 8003c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c20:	2202      	movs	r2, #2
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	fa93 f2a3 	rbit	r2, r3
 8003c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c3a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3c:	4bb0      	ldr	r3, [pc, #704]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003c3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003c48:	2102      	movs	r1, #2
 8003c4a:	6019      	str	r1, [r3, #0]
 8003c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	fa93 f1a3 	rbit	r1, r3
 8003c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c62:	6019      	str	r1, [r3, #0]
  return result;
 8003c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c68:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	2101      	movs	r1, #1
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0a0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x668>
 8003c8a:	e08d      	b.n	8003da8 <HAL_RCC_OscConfig+0x844>
 8003c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c90:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c94:	2201      	movs	r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c9c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	fa93 f2a3 	rbit	r2, r3
 8003ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003caa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003cae:	601a      	str	r2, [r3, #0]
  return result;
 8003cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003cb8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b90      	ldr	r3, [pc, #576]	@ (8003f04 <HAL_RCC_OscConfig+0x9a0>)
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cce:	f7fe f99d 	bl	800200c <HAL_GetTick>
 8003cd2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7fe f998 	bl	800200c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d902      	bls.n	8003cee <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	f000 bc42 	b.w	8004572 <HAL_RCC_OscConfig+0x100e>
 8003cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cfe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	fa93 f2a3 	rbit	r2, r3
 8003d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d16:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d22:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	fa93 f2a3 	rbit	r2, r3
 8003d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003d3e:	2202      	movs	r2, #2
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d46:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	fa93 f2a3 	rbit	r2, r3
 8003d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5a:	4b69      	ldr	r3, [pc, #420]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d62:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d66:	2102      	movs	r1, #2
 8003d68:	6019      	str	r1, [r3, #0]
 8003d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	fa93 f1a3 	rbit	r1, r3
 8003d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d80:	6019      	str	r1, [r3, #0]
  return result;
 8003d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d86:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d197      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 819e 	beq.w	80040fa <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d116      	bne.n	8003dfe <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dda:	61d3      	str	r3, [r2, #28]
 8003ddc:	4b48      	ldr	r3, [pc, #288]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003df6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b42      	ldr	r3, [pc, #264]	@ (8003f08 <HAL_RCC_OscConfig+0x9a4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d11a      	bne.n	8003e40 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f08 <HAL_RCC_OscConfig+0x9a4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a3e      	ldr	r2, [pc, #248]	@ (8003f08 <HAL_RCC_OscConfig+0x9a4>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7fe f8f9 	bl	800200c <HAL_GetTick>
 8003e1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	e009      	b.n	8003e34 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e20:	f7fe f8f4 	bl	800200c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b64      	cmp	r3, #100	@ 0x64
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e39e      	b.n	8004572 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <HAL_RCC_OscConfig+0x9a4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ef      	beq.n	8003e20 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCC_OscConfig+0x8fa>
 8003e50:	4b2b      	ldr	r3, [pc, #172]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	4a2a      	ldr	r2, [pc, #168]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6213      	str	r3, [r2, #32]
 8003e5c:	e035      	b.n	8003eca <HAL_RCC_OscConfig+0x966>
 8003e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x924>
 8003e6e:	4b24      	ldr	r3, [pc, #144]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	4a23      	ldr	r2, [pc, #140]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	6213      	str	r3, [r2, #32]
 8003e7a:	4b21      	ldr	r3, [pc, #132]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4a20      	ldr	r2, [pc, #128]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003e80:	f023 0304 	bic.w	r3, r3, #4
 8003e84:	6213      	str	r3, [r2, #32]
 8003e86:	e020      	b.n	8003eca <HAL_RCC_OscConfig+0x966>
 8003e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d10c      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x94e>
 8003e98:	4b19      	ldr	r3, [pc, #100]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4a18      	ldr	r2, [pc, #96]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003e9e:	f043 0304 	orr.w	r3, r3, #4
 8003ea2:	6213      	str	r3, [r2, #32]
 8003ea4:	4b16      	ldr	r3, [pc, #88]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4a15      	ldr	r2, [pc, #84]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6213      	str	r3, [r2, #32]
 8003eb0:	e00b      	b.n	8003eca <HAL_RCC_OscConfig+0x966>
 8003eb2:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	4a12      	ldr	r2, [pc, #72]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6213      	str	r3, [r2, #32]
 8003ebe:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8003f00 <HAL_RCC_OscConfig+0x99c>)
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ece:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8087 	beq.w	8003fea <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003edc:	f7fe f896 	bl	800200c <HAL_GetTick>
 8003ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	e012      	b.n	8003f0c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fe f891 	bl	800200c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d908      	bls.n	8003f0c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e339      	b.n	8004572 <HAL_RCC_OscConfig+0x100e>
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
 8003f04:	10908120 	.word	0x10908120
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f10:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f14:	2202      	movs	r2, #2
 8003f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	fa93 f2a3 	rbit	r2, r3
 8003f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f2a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f34:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f38:	2202      	movs	r2, #2
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f40:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fa93 f2a3 	rbit	r2, r3
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003f52:	601a      	str	r2, [r3, #0]
  return result;
 8003f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f58:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003f5c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <HAL_RCC_OscConfig+0xa10>
 8003f6e:	4b98      	ldr	r3, [pc, #608]	@ (80041d0 <HAL_RCC_OscConfig+0xc6c>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	e013      	b.n	8003f9c <HAL_RCC_OscConfig+0xa38>
 8003f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f78:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f84:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	fa93 f2a3 	rbit	r2, r3
 8003f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f92:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	4b8d      	ldr	r3, [pc, #564]	@ (80041d0 <HAL_RCC_OscConfig+0xc6c>)
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fa0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	6011      	str	r1, [r2, #0]
 8003fa8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	fa92 f1a2 	rbit	r1, r2
 8003fb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003fbe:	6011      	str	r1, [r2, #0]
  return result;
 8003fc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fc4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	fab2 f282 	clz	r2, r2
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	f002 021f 	and.w	r2, r2, #31
 8003fda:	2101      	movs	r1, #1
 8003fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f43f af7f 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x982>
 8003fe8:	e07d      	b.n	80040e6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fea:	f7fe f80f 	bl	800200c <HAL_GetTick>
 8003fee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff2:	e00b      	b.n	800400c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fe f80a 	bl	800200c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004004:	4293      	cmp	r3, r2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e2b2      	b.n	8004572 <HAL_RCC_OscConfig+0x100e>
 800400c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004010:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004014:	2202      	movs	r2, #2
 8004016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	fa93 f2a3 	rbit	r2, r3
 8004026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004034:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004038:	2202      	movs	r2, #2
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004040:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	fa93 f2a3 	rbit	r2, r3
 800404a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004052:	601a      	str	r2, [r3, #0]
  return result;
 8004054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004058:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800405c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <HAL_RCC_OscConfig+0xb10>
 800406e:	4b58      	ldr	r3, [pc, #352]	@ (80041d0 <HAL_RCC_OscConfig+0xc6c>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	e013      	b.n	800409c <HAL_RCC_OscConfig+0xb38>
 8004074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004078:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800407c:	2202      	movs	r2, #2
 800407e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004084:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	fa93 f2a3 	rbit	r2, r3
 800408e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004092:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	4b4d      	ldr	r3, [pc, #308]	@ (80041d0 <HAL_RCC_OscConfig+0xc6c>)
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040a0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80040a4:	2102      	movs	r1, #2
 80040a6:	6011      	str	r1, [r2, #0]
 80040a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040ac:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	fa92 f1a2 	rbit	r1, r2
 80040b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040ba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80040be:	6011      	str	r1, [r2, #0]
  return result;
 80040c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040c4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	fab2 f282 	clz	r2, r2
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	f002 021f 	and.w	r2, r2, #31
 80040da:	2101      	movs	r1, #1
 80040dc:	fa01 f202 	lsl.w	r2, r1, r2
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d186      	bne.n	8003ff4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040e6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d105      	bne.n	80040fa <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ee:	4b38      	ldr	r3, [pc, #224]	@ (80041d0 <HAL_RCC_OscConfig+0xc6c>)
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	4a37      	ldr	r2, [pc, #220]	@ (80041d0 <HAL_RCC_OscConfig+0xc6c>)
 80040f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8232 	beq.w	8004570 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800410c:	4b30      	ldr	r3, [pc, #192]	@ (80041d0 <HAL_RCC_OscConfig+0xc6c>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 030c 	and.w	r3, r3, #12
 8004114:	2b08      	cmp	r3, #8
 8004116:	f000 8201 	beq.w	800451c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800411a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	2b02      	cmp	r3, #2
 8004128:	f040 8157 	bne.w	80043da <HAL_RCC_OscConfig+0xe76>
 800412c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004130:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004134:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800413e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	fa93 f2a3 	rbit	r2, r3
 8004148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800414c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004150:	601a      	str	r2, [r3, #0]
  return result;
 8004152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004156:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800415a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415c:	fab3 f383 	clz	r3, r3
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004166:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	461a      	mov	r2, r3
 800416e:	2300      	movs	r3, #0
 8004170:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004172:	f7fd ff4b 	bl	800200c <HAL_GetTick>
 8004176:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800417a:	e009      	b.n	8004190 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417c:	f7fd ff46 	bl	800200c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e1f0      	b.n	8004572 <HAL_RCC_OscConfig+0x100e>
 8004190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004194:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004198:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800419c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	fa93 f2a3 	rbit	r2, r3
 80041ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80041b4:	601a      	str	r2, [r3, #0]
  return result;
 80041b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80041be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80041c8:	d804      	bhi.n	80041d4 <HAL_RCC_OscConfig+0xc70>
 80041ca:	4b01      	ldr	r3, [pc, #4]	@ (80041d0 <HAL_RCC_OscConfig+0xc6c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	e029      	b.n	8004224 <HAL_RCC_OscConfig+0xcc0>
 80041d0:	40021000 	.word	0x40021000
 80041d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80041dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	fa93 f2a3 	rbit	r2, r3
 80041f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041fe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004202:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	fa93 f2a3 	rbit	r2, r3
 8004216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	4bc3      	ldr	r3, [pc, #780]	@ (8004530 <HAL_RCC_OscConfig+0xfcc>)
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004228:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800422c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004230:	6011      	str	r1, [r2, #0]
 8004232:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004236:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	fa92 f1a2 	rbit	r1, r2
 8004240:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004244:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004248:	6011      	str	r1, [r2, #0]
  return result;
 800424a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800424e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	fab2 f282 	clz	r2, r2
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	f042 0220 	orr.w	r2, r2, #32
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	f002 021f 	and.w	r2, r2, #31
 8004264:	2101      	movs	r1, #1
 8004266:	fa01 f202 	lsl.w	r2, r1, r2
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d185      	bne.n	800417c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004270:	4baf      	ldr	r3, [pc, #700]	@ (8004530 <HAL_RCC_OscConfig+0xfcc>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004288:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	430b      	orrs	r3, r1
 8004292:	49a7      	ldr	r1, [pc, #668]	@ (8004530 <HAL_RCC_OscConfig+0xfcc>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]
 8004298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80042a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042aa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	fa93 f2a3 	rbit	r2, r3
 80042b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80042bc:	601a      	str	r2, [r3, #0]
  return result;
 80042be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80042c6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80042d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	461a      	mov	r2, r3
 80042da:	2301      	movs	r3, #1
 80042dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042de:	f7fd fe95 	bl	800200c <HAL_GetTick>
 80042e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042e6:	e009      	b.n	80042fc <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fd fe90 	bl	800200c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e13a      	b.n	8004572 <HAL_RCC_OscConfig+0x100e>
 80042fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004300:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004304:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	fa93 f2a3 	rbit	r2, r3
 8004318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800431c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004320:	601a      	str	r2, [r3, #0]
  return result;
 8004322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004326:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800432a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800432c:	fab3 f383 	clz	r3, r3
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b3f      	cmp	r3, #63	@ 0x3f
 8004334:	d802      	bhi.n	800433c <HAL_RCC_OscConfig+0xdd8>
 8004336:	4b7e      	ldr	r3, [pc, #504]	@ (8004530 <HAL_RCC_OscConfig+0xfcc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	e027      	b.n	800438c <HAL_RCC_OscConfig+0xe28>
 800433c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004340:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004344:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	fa93 f2a3 	rbit	r2, r3
 8004358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004366:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800436a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004374:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	fa93 f2a3 	rbit	r2, r3
 800437e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004382:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	4b69      	ldr	r3, [pc, #420]	@ (8004530 <HAL_RCC_OscConfig+0xfcc>)
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004390:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004394:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800439e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	fa92 f1a2 	rbit	r1, r2
 80043a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043ac:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80043b0:	6011      	str	r1, [r2, #0]
  return result;
 80043b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043b6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	fab2 f282 	clz	r2, r2
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	f042 0220 	orr.w	r2, r2, #32
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	f002 021f 	and.w	r2, r2, #31
 80043cc:	2101      	movs	r1, #1
 80043ce:	fa01 f202 	lsl.w	r2, r1, r2
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d087      	beq.n	80042e8 <HAL_RCC_OscConfig+0xd84>
 80043d8:	e0ca      	b.n	8004570 <HAL_RCC_OscConfig+0x100c>
 80043da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043de:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80043e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	fa93 f2a3 	rbit	r2, r3
 80043f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80043fe:	601a      	str	r2, [r3, #0]
  return result;
 8004400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004404:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004408:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004414:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	461a      	mov	r2, r3
 800441c:	2300      	movs	r3, #0
 800441e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fd fdf4 	bl	800200c <HAL_GetTick>
 8004424:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004428:	e009      	b.n	800443e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7fd fdef 	bl	800200c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e099      	b.n	8004572 <HAL_RCC_OscConfig+0x100e>
 800443e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004442:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004446:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800444a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004450:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	fa93 f2a3 	rbit	r2, r3
 800445a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800445e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004462:	601a      	str	r2, [r3, #0]
  return result;
 8004464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004468:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800446c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b3f      	cmp	r3, #63	@ 0x3f
 8004476:	d802      	bhi.n	800447e <HAL_RCC_OscConfig+0xf1a>
 8004478:	4b2d      	ldr	r3, [pc, #180]	@ (8004530 <HAL_RCC_OscConfig+0xfcc>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	e027      	b.n	80044ce <HAL_RCC_OscConfig+0xf6a>
 800447e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004482:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004486:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800448a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004490:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	fa93 f2a3 	rbit	r2, r3
 800449a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800449e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80044ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	fa93 f2a3 	rbit	r2, r3
 80044c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	4b19      	ldr	r3, [pc, #100]	@ (8004530 <HAL_RCC_OscConfig+0xfcc>)
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044d2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80044d6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80044da:	6011      	str	r1, [r2, #0]
 80044dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044e0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	fa92 f1a2 	rbit	r1, r2
 80044ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044ee:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80044f2:	6011      	str	r1, [r2, #0]
  return result;
 80044f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044f8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	fab2 f282 	clz	r2, r2
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	f042 0220 	orr.w	r2, r2, #32
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	f002 021f 	and.w	r2, r2, #31
 800450e:	2101      	movs	r1, #1
 8004510:	fa01 f202 	lsl.w	r2, r1, r2
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d187      	bne.n	800442a <HAL_RCC_OscConfig+0xec6>
 800451a:	e029      	b.n	8004570 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004520:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d103      	bne.n	8004534 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e020      	b.n	8004572 <HAL_RCC_OscConfig+0x100e>
 8004530:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004534:	4b11      	ldr	r3, [pc, #68]	@ (800457c <HAL_RCC_OscConfig+0x1018>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800453c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004540:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004548:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	429a      	cmp	r2, r3
 8004552:	d10b      	bne.n	800456c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004554:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004558:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800455c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004560:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000

08004580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b09e      	sub	sp, #120	@ 0x78
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e154      	b.n	8004842 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004598:	4b89      	ldr	r3, [pc, #548]	@ (80047c0 <HAL_RCC_ClockConfig+0x240>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d910      	bls.n	80045c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a6:	4b86      	ldr	r3, [pc, #536]	@ (80047c0 <HAL_RCC_ClockConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 0207 	bic.w	r2, r3, #7
 80045ae:	4984      	ldr	r1, [pc, #528]	@ (80047c0 <HAL_RCC_ClockConfig+0x240>)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b6:	4b82      	ldr	r3, [pc, #520]	@ (80047c0 <HAL_RCC_ClockConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e13c      	b.n	8004842 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d4:	4b7b      	ldr	r3, [pc, #492]	@ (80047c4 <HAL_RCC_ClockConfig+0x244>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4978      	ldr	r1, [pc, #480]	@ (80047c4 <HAL_RCC_ClockConfig+0x244>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80cd 	beq.w	800478e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d137      	bne.n	800466c <HAL_RCC_ClockConfig+0xec>
 80045fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004600:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800460a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460c:	fab3 f383 	clz	r3, r3
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b3f      	cmp	r3, #63	@ 0x3f
 8004614:	d802      	bhi.n	800461c <HAL_RCC_ClockConfig+0x9c>
 8004616:	4b6b      	ldr	r3, [pc, #428]	@ (80047c4 <HAL_RCC_ClockConfig+0x244>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	e00f      	b.n	800463c <HAL_RCC_ClockConfig+0xbc>
 800461c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004620:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004622:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004624:	fa93 f3a3 	rbit	r3, r3
 8004628:	667b      	str	r3, [r7, #100]	@ 0x64
 800462a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800462e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004630:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004638:	4b62      	ldr	r3, [pc, #392]	@ (80047c4 <HAL_RCC_ClockConfig+0x244>)
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004640:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004642:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004644:	fa92 f2a2 	rbit	r2, r2
 8004648:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800464a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800464c:	fab2 f282 	clz	r2, r2
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	f042 0220 	orr.w	r2, r2, #32
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	f002 021f 	and.w	r2, r2, #31
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f202 	lsl.w	r2, r1, r2
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d171      	bne.n	800474c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0ea      	b.n	8004842 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d137      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x164>
 8004674:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004678:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800467c:	fa93 f3a3 	rbit	r3, r3
 8004680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004684:	fab3 f383 	clz	r3, r3
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b3f      	cmp	r3, #63	@ 0x3f
 800468c:	d802      	bhi.n	8004694 <HAL_RCC_ClockConfig+0x114>
 800468e:	4b4d      	ldr	r3, [pc, #308]	@ (80047c4 <HAL_RCC_ClockConfig+0x244>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	e00f      	b.n	80046b4 <HAL_RCC_ClockConfig+0x134>
 8004694:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004698:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046aa:	fa93 f3a3 	rbit	r3, r3
 80046ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046b0:	4b44      	ldr	r3, [pc, #272]	@ (80047c4 <HAL_RCC_ClockConfig+0x244>)
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046b8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80046ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046bc:	fa92 f2a2 	rbit	r2, r2
 80046c0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80046c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046c4:	fab2 f282 	clz	r2, r2
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	f042 0220 	orr.w	r2, r2, #32
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	f002 021f 	and.w	r2, r2, #31
 80046d4:	2101      	movs	r1, #1
 80046d6:	fa01 f202 	lsl.w	r2, r1, r2
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d135      	bne.n	800474c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0ae      	b.n	8004842 <HAL_RCC_ClockConfig+0x2c2>
 80046e4:	2302      	movs	r3, #2
 80046e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80046f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80046fa:	d802      	bhi.n	8004702 <HAL_RCC_ClockConfig+0x182>
 80046fc:	4b31      	ldr	r3, [pc, #196]	@ (80047c4 <HAL_RCC_ClockConfig+0x244>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	e00d      	b.n	800471e <HAL_RCC_ClockConfig+0x19e>
 8004702:	2302      	movs	r3, #2
 8004704:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	627b      	str	r3, [r7, #36]	@ 0x24
 800470e:	2302      	movs	r3, #2
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	4b2a      	ldr	r3, [pc, #168]	@ (80047c4 <HAL_RCC_ClockConfig+0x244>)
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	2202      	movs	r2, #2
 8004720:	61ba      	str	r2, [r7, #24]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	fa92 f2a2 	rbit	r2, r2
 8004728:	617a      	str	r2, [r7, #20]
  return result;
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	fab2 f282 	clz	r2, r2
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	f042 0220 	orr.w	r2, r2, #32
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	f002 021f 	and.w	r2, r2, #31
 800473c:	2101      	movs	r1, #1
 800473e:	fa01 f202 	lsl.w	r2, r1, r2
 8004742:	4013      	ands	r3, r2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e07a      	b.n	8004842 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800474c:	4b1d      	ldr	r3, [pc, #116]	@ (80047c4 <HAL_RCC_ClockConfig+0x244>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f023 0203 	bic.w	r2, r3, #3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	491a      	ldr	r1, [pc, #104]	@ (80047c4 <HAL_RCC_ClockConfig+0x244>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800475e:	f7fd fc55 	bl	800200c <HAL_GetTick>
 8004762:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004764:	e00a      	b.n	800477c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004766:	f7fd fc51 	bl	800200c <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e062      	b.n	8004842 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477c:	4b11      	ldr	r3, [pc, #68]	@ (80047c4 <HAL_RCC_ClockConfig+0x244>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 020c 	and.w	r2, r3, #12
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	429a      	cmp	r2, r3
 800478c:	d1eb      	bne.n	8004766 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800478e:	4b0c      	ldr	r3, [pc, #48]	@ (80047c0 <HAL_RCC_ClockConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d215      	bcs.n	80047c8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479c:	4b08      	ldr	r3, [pc, #32]	@ (80047c0 <HAL_RCC_ClockConfig+0x240>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f023 0207 	bic.w	r2, r3, #7
 80047a4:	4906      	ldr	r1, [pc, #24]	@ (80047c0 <HAL_RCC_ClockConfig+0x240>)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ac:	4b04      	ldr	r3, [pc, #16]	@ (80047c0 <HAL_RCC_ClockConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d006      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e041      	b.n	8004842 <HAL_RCC_ClockConfig+0x2c2>
 80047be:	bf00      	nop
 80047c0:	40022000 	.word	0x40022000
 80047c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047d4:	4b1d      	ldr	r3, [pc, #116]	@ (800484c <HAL_RCC_ClockConfig+0x2cc>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	491a      	ldr	r1, [pc, #104]	@ (800484c <HAL_RCC_ClockConfig+0x2cc>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047f2:	4b16      	ldr	r3, [pc, #88]	@ (800484c <HAL_RCC_ClockConfig+0x2cc>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4912      	ldr	r1, [pc, #72]	@ (800484c <HAL_RCC_ClockConfig+0x2cc>)
 8004802:	4313      	orrs	r3, r2
 8004804:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004806:	f000 f829 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800480a:	4601      	mov	r1, r0
 800480c:	4b0f      	ldr	r3, [pc, #60]	@ (800484c <HAL_RCC_ClockConfig+0x2cc>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004814:	22f0      	movs	r2, #240	@ 0xf0
 8004816:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	fa92 f2a2 	rbit	r2, r2
 800481e:	60fa      	str	r2, [r7, #12]
  return result;
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	fab2 f282 	clz	r2, r2
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	40d3      	lsrs	r3, r2
 800482a:	4a09      	ldr	r2, [pc, #36]	@ (8004850 <HAL_RCC_ClockConfig+0x2d0>)
 800482c:	5cd3      	ldrb	r3, [r2, r3]
 800482e:	fa21 f303 	lsr.w	r3, r1, r3
 8004832:	4a08      	ldr	r2, [pc, #32]	@ (8004854 <HAL_RCC_ClockConfig+0x2d4>)
 8004834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004836:	4b08      	ldr	r3, [pc, #32]	@ (8004858 <HAL_RCC_ClockConfig+0x2d8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fba2 	bl	8001f84 <HAL_InitTick>
  
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3778      	adds	r7, #120	@ 0x78
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000
 8004850:	080099d4 	.word	0x080099d4
 8004854:	20000004 	.word	0x20000004
 8004858:	20000008 	.word	0x20000008

0800485c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004876:	4b1e      	ldr	r3, [pc, #120]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b04      	cmp	r3, #4
 8004884:	d002      	beq.n	800488c <HAL_RCC_GetSysClockFreq+0x30>
 8004886:	2b08      	cmp	r3, #8
 8004888:	d003      	beq.n	8004892 <HAL_RCC_GetSysClockFreq+0x36>
 800488a:	e026      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800488c:	4b19      	ldr	r3, [pc, #100]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800488e:	613b      	str	r3, [r7, #16]
      break;
 8004890:	e026      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0c9b      	lsrs	r3, r3, #18
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	4a17      	ldr	r2, [pc, #92]	@ (80048f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800489c:	5cd3      	ldrb	r3, [r2, r3]
 800489e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80048a0:	4b13      	ldr	r3, [pc, #76]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80048a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	4a14      	ldr	r2, [pc, #80]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80048aa:	5cd3      	ldrb	r3, [r2, r3]
 80048ac:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048b8:	4a0e      	ldr	r2, [pc, #56]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	e004      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004900 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	613b      	str	r3, [r7, #16]
      break;
 80048d8:	e002      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048da:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80048dc:	613b      	str	r3, [r7, #16]
      break;
 80048de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e0:	693b      	ldr	r3, [r7, #16]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	007a1200 	.word	0x007a1200
 80048f8:	080099ec 	.word	0x080099ec
 80048fc:	080099fc 	.word	0x080099fc
 8004900:	003d0900 	.word	0x003d0900

08004904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004908:	4b03      	ldr	r3, [pc, #12]	@ (8004918 <HAL_RCC_GetHCLKFreq+0x14>)
 800490a:	681b      	ldr	r3, [r3, #0]
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000004 	.word	0x20000004

0800491c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004922:	f7ff ffef 	bl	8004904 <HAL_RCC_GetHCLKFreq>
 8004926:	4601      	mov	r1, r0
 8004928:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004930:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004934:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	fa92 f2a2 	rbit	r2, r2
 800493c:	603a      	str	r2, [r7, #0]
  return result;
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	fab2 f282 	clz	r2, r2
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	40d3      	lsrs	r3, r2
 8004948:	4a04      	ldr	r2, [pc, #16]	@ (800495c <HAL_RCC_GetPCLK1Freq+0x40>)
 800494a:	5cd3      	ldrb	r3, [r2, r3]
 800494c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40021000 	.word	0x40021000
 800495c:	080099e4 	.word	0x080099e4

08004960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004966:	f7ff ffcd 	bl	8004904 <HAL_RCC_GetHCLKFreq>
 800496a:	4601      	mov	r1, r0
 800496c:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004974:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004978:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	fa92 f2a2 	rbit	r2, r2
 8004980:	603a      	str	r2, [r7, #0]
  return result;
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	fab2 f282 	clz	r2, r2
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	40d3      	lsrs	r3, r2
 800498c:	4a04      	ldr	r2, [pc, #16]	@ (80049a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800498e:	5cd3      	ldrb	r3, [r2, r3]
 8004990:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40021000 	.word	0x40021000
 80049a0:	080099e4 	.word	0x080099e4

080049a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b092      	sub	sp, #72	@ 0x48
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80d2 	beq.w	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10e      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	4a49      	ldr	r2, [pc, #292]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049de:	61d3      	str	r3, [r2, #28]
 80049e0:	4b47      	ldr	r3, [pc, #284]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f2:	4b44      	ldr	r3, [pc, #272]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d118      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049fe:	4b41      	ldr	r3, [pc, #260]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a40      	ldr	r2, [pc, #256]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a0a:	f7fd faff 	bl	800200c <HAL_GetTick>
 8004a0e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	e008      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a12:	f7fd fafb 	bl	800200c <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b64      	cmp	r3, #100	@ 0x64
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e149      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a24:	4b37      	ldr	r3, [pc, #220]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f0      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a30:	4b33      	ldr	r3, [pc, #204]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8082 	beq.w	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d07a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a50:	4b2b      	ldr	r3, [pc, #172]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a62:	fa93 f3a3 	rbit	r3, r3
 8004a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b25      	ldr	r3, [pc, #148]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a86:	fa93 f3a3 	rbit	r3, r3
 8004a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	4b1c      	ldr	r3, [pc, #112]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004aa2:	4a17      	ldr	r2, [pc, #92]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d049      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fd faab 	bl	800200c <HAL_GetTick>
 8004ab6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab8:	e00a      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aba:	f7fd faa7 	bl	800200c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e0f3      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	fa93 f3a3 	rbit	r3, r3
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8004adc:	2302      	movs	r3, #2
 8004ade:	623b      	str	r3, [r7, #32]
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	61fb      	str	r3, [r7, #28]
  return result;
 8004ae8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aea:	fab3 f383 	clz	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d108      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004afa:	4b01      	ldr	r3, [pc, #4]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	e00d      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40007000 	.word	0x40007000
 8004b08:	10908100 	.word	0x10908100
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	fa93 f3a3 	rbit	r3, r3
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	4b69      	ldr	r3, [pc, #420]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	613a      	str	r2, [r7, #16]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	fa92 f2a2 	rbit	r2, r2
 8004b26:	60fa      	str	r2, [r7, #12]
  return result;
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	fab2 f282 	clz	r2, r2
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	f002 021f 	and.w	r2, r2, #31
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0b9      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b46:	4b5e      	ldr	r3, [pc, #376]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	495b      	ldr	r1, [pc, #364]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b58:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d105      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b60:	4b57      	ldr	r3, [pc, #348]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4a56      	ldr	r2, [pc, #344]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b78:	4b51      	ldr	r3, [pc, #324]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7c:	f023 0203 	bic.w	r2, r3, #3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	494e      	ldr	r1, [pc, #312]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b96:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9a:	f023 0210 	bic.w	r2, r3, #16
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	4947      	ldr	r1, [pc, #284]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004bb4:	4b42      	ldr	r3, [pc, #264]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc0:	493f      	ldr	r1, [pc, #252]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	f023 0220 	bic.w	r2, r3, #32
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4938      	ldr	r1, [pc, #224]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bf0:	4b33      	ldr	r3, [pc, #204]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	4930      	ldr	r1, [pc, #192]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	4929      	ldr	r1, [pc, #164]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004c2c:	4b24      	ldr	r3, [pc, #144]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c30:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	4921      	ldr	r1, [pc, #132]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	491a      	ldr	r1, [pc, #104]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004c68:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	4912      	ldr	r1, [pc, #72]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004c86:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c92:	490b      	ldr	r1, [pc, #44]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004ca4:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	4903      	ldr	r1, [pc, #12]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3748      	adds	r7, #72	@ 0x48
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40021000 	.word	0x40021000

08004cc4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e073      	b.n	8004dc2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	7f5b      	ldrb	r3, [r3, #29]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fc ff28 	bl	8001b40 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d055      	beq.n	8004db0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	22ca      	movs	r2, #202	@ 0xca
 8004d0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2253      	movs	r2, #83	@ 0x53
 8004d12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f99d 	bl	8005054 <RTC_EnterInitMode>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d12c      	bne.n	8004d7e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d36:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6899      	ldr	r1, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68d2      	ldr	r2, [r2, #12]
 8004d5e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6919      	ldr	r1, [r3, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	041a      	lsls	r2, r3, #16
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f9a4 	bl	80050c2 <RTC_ExitInitMode>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d110      	bne.n	8004da6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d92:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	22ff      	movs	r2, #255	@ 0xff
 8004dac:	625a      	str	r2, [r3, #36]	@ 0x24
 8004dae:	e001      	b.n	8004db4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004dca:	b590      	push	{r4, r7, lr}
 8004dcc:	b087      	sub	sp, #28
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	7f1b      	ldrb	r3, [r3, #28]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_RTC_SetTime+0x1c>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e087      	b.n	8004ef6 <HAL_RTC_SetTime+0x12c>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2202      	movs	r2, #2
 8004df0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d126      	bne.n	8004e46 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d102      	bne.n	8004e0c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f97b 	bl	800510c <RTC_ByteToBcd2>
 8004e16:	4603      	mov	r3, r0
 8004e18:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f974 	bl	800510c <RTC_ByteToBcd2>
 8004e24:	4603      	mov	r3, r0
 8004e26:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004e28:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	789b      	ldrb	r3, [r3, #2]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f96c 	bl	800510c <RTC_ByteToBcd2>
 8004e34:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e36:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	78db      	ldrb	r3, [r3, #3]
 8004e3e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e018      	b.n	8004e78 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d102      	bne.n	8004e5a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2200      	movs	r2, #0
 8004e58:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004e66:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004e6c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	78db      	ldrb	r3, [r3, #3]
 8004e72:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	22ca      	movs	r2, #202	@ 0xca
 8004e7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2253      	movs	r2, #83	@ 0x53
 8004e86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f8e3 	bl	8005054 <RTC_EnterInitMode>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004e92:	7cfb      	ldrb	r3, [r7, #19]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d120      	bne.n	8004eda <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004ea2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004eb6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6899      	ldr	r1, [r3, #8]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f8f6 	bl	80050c2 <RTC_ExitInitMode>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004eda:	7cfb      	ldrb	r3, [r7, #19]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	22ff      	movs	r2, #255	@ 0xff
 8004eec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]

  return status;
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd90      	pop	{r4, r7, pc}

08004efe <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004efe:	b590      	push	{r4, r7, lr}
 8004f00:	b087      	sub	sp, #28
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	7f1b      	ldrb	r3, [r3, #28]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_RTC_SetDate+0x1c>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e071      	b.n	8004ffe <HAL_RTC_SetDate+0x100>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2202      	movs	r2, #2
 8004f24:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10e      	bne.n	8004f4a <HAL_RTC_SetDate+0x4c>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d008      	beq.n	8004f4a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	f023 0310 	bic.w	r3, r3, #16
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	330a      	adds	r3, #10
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d11c      	bne.n	8004f8a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	78db      	ldrb	r3, [r3, #3]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f8d9 	bl	800510c <RTC_ByteToBcd2>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	785b      	ldrb	r3, [r3, #1]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 f8d2 	bl	800510c <RTC_ByteToBcd2>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f6c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	789b      	ldrb	r3, [r3, #2]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f8ca 	bl	800510c <RTC_ByteToBcd2>
 8004f78:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f7a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e00e      	b.n	8004fa8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	78db      	ldrb	r3, [r3, #3]
 8004f8e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f96:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004f9c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	22ca      	movs	r2, #202	@ 0xca
 8004fae:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2253      	movs	r2, #83	@ 0x53
 8004fb6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f84b 	bl	8005054 <RTC_EnterInitMode>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004fc2:	7cfb      	ldrb	r3, [r7, #19]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10c      	bne.n	8004fe2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fd2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004fd6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f872 	bl	80050c2 <RTC_ExitInitMode>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004fe2:	7cfb      	ldrb	r3, [r7, #19]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	22ff      	movs	r2, #255	@ 0xff
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]

  return status;
 8004ffc:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	bd90      	pop	{r4, r7, pc}
	...

08005008 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a0d      	ldr	r2, [pc, #52]	@ (8005050 <HAL_RTC_WaitForSynchro+0x48>)
 800501a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800501c:	f7fc fff6 	bl	800200c <HAL_GetTick>
 8005020:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005022:	e009      	b.n	8005038 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005024:	f7fc fff2 	bl	800200c <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005032:	d901      	bls.n	8005038 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e007      	b.n	8005048 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0ee      	beq.n	8005024 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	00017f5f 	.word	0x00017f5f

08005054 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d122      	bne.n	80050b8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005080:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005082:	f7fc ffc3 	bl	800200c <HAL_GetTick>
 8005086:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005088:	e00c      	b.n	80050a4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800508a:	f7fc ffbf 	bl	800200c <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005098:	d904      	bls.n	80050a4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2204      	movs	r2, #4
 800509e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <RTC_EnterInitMode+0x64>
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d1e8      	bne.n	800508a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050dc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff ff8b 	bl	8005008 <HAL_RTC_WaitForSynchro>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2204      	movs	r2, #4
 80050fc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005102:	7bfb      	ldrb	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800511a:	e005      	b.n	8005128 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3301      	adds	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	3b0a      	subs	r3, #10
 8005126:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	2b09      	cmp	r3, #9
 800512c:	d8f6      	bhi.n	800511c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	b2da      	uxtb	r2, r3
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	4313      	orrs	r3, r2
 800513a:	b2db      	uxtb	r3, r3
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e09d      	b.n	8005296 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d108      	bne.n	8005174 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800516a:	d009      	beq.n	8005180 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	61da      	str	r2, [r3, #28]
 8005172:	e005      	b.n	8005180 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fc fcf6 	bl	8001b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051c0:	d902      	bls.n	80051c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e002      	b.n	80051ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80051d6:	d007      	beq.n	80051e8 <HAL_SPI_Init+0xa0>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051e0:	d002      	beq.n	80051e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522a:	ea42 0103 	orr.w	r1, r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005232:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	0c1b      	lsrs	r3, r3, #16
 8005244:	f003 0204 	and.w	r2, r3, #4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005264:	ea42 0103 	orr.w	r1, r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005284:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b088      	sub	sp, #32
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	603b      	str	r3, [r7, #0]
 80052aa:	4613      	mov	r3, r2
 80052ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_SPI_Transmit+0x22>
 80052bc:	2302      	movs	r3, #2
 80052be:	e15f      	b.n	8005580 <HAL_SPI_Transmit+0x2e2>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052c8:	f7fc fea0 	bl	800200c <HAL_GetTick>
 80052cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d002      	beq.n	80052e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052de:	2302      	movs	r3, #2
 80052e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052e2:	e148      	b.n	8005576 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <HAL_SPI_Transmit+0x52>
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d102      	bne.n	80052f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052f4:	e13f      	b.n	8005576 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2203      	movs	r2, #3
 80052fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	88fa      	ldrh	r2, [r7, #6]
 800530e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	88fa      	ldrh	r2, [r7, #6]
 8005314:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005340:	d10f      	bne.n	8005362 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005350:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005360:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536c:	2b40      	cmp	r3, #64	@ 0x40
 800536e:	d007      	beq.n	8005380 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800537e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005388:	d94f      	bls.n	800542a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_SPI_Transmit+0xfa>
 8005392:	8afb      	ldrh	r3, [r7, #22]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d142      	bne.n	800541e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	881a      	ldrh	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a8:	1c9a      	adds	r2, r3, #2
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053bc:	e02f      	b.n	800541e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d112      	bne.n	80053f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	881a      	ldrh	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	1c9a      	adds	r2, r3, #2
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053f0:	e015      	b.n	800541e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053f2:	f7fc fe0b 	bl	800200c <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d803      	bhi.n	800540a <HAL_SPI_Transmit+0x16c>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d102      	bne.n	8005410 <HAL_SPI_Transmit+0x172>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d106      	bne.n	800541e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800541c:	e0ab      	b.n	8005576 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1ca      	bne.n	80053be <HAL_SPI_Transmit+0x120>
 8005428:	e080      	b.n	800552c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_SPI_Transmit+0x19a>
 8005432:	8afb      	ldrh	r3, [r7, #22]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d174      	bne.n	8005522 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	d912      	bls.n	8005468 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005446:	881a      	ldrh	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005452:	1c9a      	adds	r2, r3, #2
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b02      	subs	r3, #2
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005466:	e05c      	b.n	8005522 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	7812      	ldrb	r2, [r2, #0]
 8005474:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800548e:	e048      	b.n	8005522 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b02      	cmp	r3, #2
 800549c:	d12b      	bne.n	80054f6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d912      	bls.n	80054ce <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ac:	881a      	ldrh	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b8:	1c9a      	adds	r2, r3, #2
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b02      	subs	r3, #2
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054cc:	e029      	b.n	8005522 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	7812      	ldrb	r2, [r2, #0]
 80054da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054f4:	e015      	b.n	8005522 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054f6:	f7fc fd89 	bl	800200c <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d803      	bhi.n	800550e <HAL_SPI_Transmit+0x270>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d102      	bne.n	8005514 <HAL_SPI_Transmit+0x276>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005520:	e029      	b.n	8005576 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1b1      	bne.n	8005490 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f947 	bl	80057c4 <SPI_EndRxTxTransaction>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e003      	b.n	8005576 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800557e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005598:	f7fc fd38 	bl	800200c <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	4413      	add	r3, r2
 80055a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055a8:	f7fc fd30 	bl	800200c <HAL_GetTick>
 80055ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055ae:	4b39      	ldr	r3, [pc, #228]	@ (8005694 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	015b      	lsls	r3, r3, #5
 80055b4:	0d1b      	lsrs	r3, r3, #20
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	fb02 f303 	mul.w	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055be:	e054      	b.n	800566a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d050      	beq.n	800566a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055c8:	f7fc fd20 	bl	800200c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d902      	bls.n	80055de <SPI_WaitFlagStateUntilTimeout+0x56>
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d13d      	bne.n	800565a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f6:	d111      	bne.n	800561c <SPI_WaitFlagStateUntilTimeout+0x94>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005600:	d004      	beq.n	800560c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800560a:	d107      	bne.n	800561c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800561a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005624:	d10f      	bne.n	8005646 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005644:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e017      	b.n	800568a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	3b01      	subs	r3, #1
 8005668:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4013      	ands	r3, r2
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	429a      	cmp	r2, r3
 8005678:	bf0c      	ite	eq
 800567a:	2301      	moveq	r3, #1
 800567c:	2300      	movne	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	429a      	cmp	r2, r3
 8005686:	d19b      	bne.n	80055c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3720      	adds	r7, #32
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000004 	.word	0x20000004

08005698 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	@ 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80056aa:	f7fc fcaf 	bl	800200c <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	4413      	add	r3, r2
 80056b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80056ba:	f7fc fca7 	bl	800200c <HAL_GetTick>
 80056be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80056c8:	4b3d      	ldr	r3, [pc, #244]	@ (80057c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	00da      	lsls	r2, r3, #3
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	0d1b      	lsrs	r3, r3, #20
 80056d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056da:	fb02 f303 	mul.w	r3, r2, r3
 80056de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80056e0:	e060      	b.n	80057a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80056e8:	d107      	bne.n	80056fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d050      	beq.n	80057a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005702:	f7fc fc83 	bl	800200c <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800570e:	429a      	cmp	r2, r3
 8005710:	d902      	bls.n	8005718 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d13d      	bne.n	8005794 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005726:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005730:	d111      	bne.n	8005756 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800573a:	d004      	beq.n	8005746 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005744:	d107      	bne.n	8005756 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005754:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800575e:	d10f      	bne.n	8005780 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800577e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e010      	b.n	80057b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d196      	bne.n	80056e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3728      	adds	r7, #40	@ 0x28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000004 	.word	0x20000004

080057c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff ff5b 	bl	8005698 <SPI_WaitFifoStateUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e027      	b.n	8005848 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2200      	movs	r2, #0
 8005800:	2180      	movs	r1, #128	@ 0x80
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fec0 	bl	8005588 <SPI_WaitFlagStateUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005812:	f043 0220 	orr.w	r2, r3, #32
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e014      	b.n	8005848 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2200      	movs	r2, #0
 8005826:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff ff34 	bl	8005698 <SPI_WaitFifoStateUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e000      	b.n	8005848 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e049      	b.n	80058f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc f9cc 	bl	8001c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 f8fe 	bl	8005a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_TIM_ConfigClockSource+0x1c>
 8005916:	2302      	movs	r3, #2
 8005918:	e0b6      	b.n	8005a88 <HAL_TIM_ConfigClockSource+0x18a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005938:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800593c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005944:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005956:	d03e      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0xd8>
 8005958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800595c:	f200 8087 	bhi.w	8005a6e <HAL_TIM_ConfigClockSource+0x170>
 8005960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005964:	f000 8086 	beq.w	8005a74 <HAL_TIM_ConfigClockSource+0x176>
 8005968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800596c:	d87f      	bhi.n	8005a6e <HAL_TIM_ConfigClockSource+0x170>
 800596e:	2b70      	cmp	r3, #112	@ 0x70
 8005970:	d01a      	beq.n	80059a8 <HAL_TIM_ConfigClockSource+0xaa>
 8005972:	2b70      	cmp	r3, #112	@ 0x70
 8005974:	d87b      	bhi.n	8005a6e <HAL_TIM_ConfigClockSource+0x170>
 8005976:	2b60      	cmp	r3, #96	@ 0x60
 8005978:	d050      	beq.n	8005a1c <HAL_TIM_ConfigClockSource+0x11e>
 800597a:	2b60      	cmp	r3, #96	@ 0x60
 800597c:	d877      	bhi.n	8005a6e <HAL_TIM_ConfigClockSource+0x170>
 800597e:	2b50      	cmp	r3, #80	@ 0x50
 8005980:	d03c      	beq.n	80059fc <HAL_TIM_ConfigClockSource+0xfe>
 8005982:	2b50      	cmp	r3, #80	@ 0x50
 8005984:	d873      	bhi.n	8005a6e <HAL_TIM_ConfigClockSource+0x170>
 8005986:	2b40      	cmp	r3, #64	@ 0x40
 8005988:	d058      	beq.n	8005a3c <HAL_TIM_ConfigClockSource+0x13e>
 800598a:	2b40      	cmp	r3, #64	@ 0x40
 800598c:	d86f      	bhi.n	8005a6e <HAL_TIM_ConfigClockSource+0x170>
 800598e:	2b30      	cmp	r3, #48	@ 0x30
 8005990:	d064      	beq.n	8005a5c <HAL_TIM_ConfigClockSource+0x15e>
 8005992:	2b30      	cmp	r3, #48	@ 0x30
 8005994:	d86b      	bhi.n	8005a6e <HAL_TIM_ConfigClockSource+0x170>
 8005996:	2b20      	cmp	r3, #32
 8005998:	d060      	beq.n	8005a5c <HAL_TIM_ConfigClockSource+0x15e>
 800599a:	2b20      	cmp	r3, #32
 800599c:	d867      	bhi.n	8005a6e <HAL_TIM_ConfigClockSource+0x170>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d05c      	beq.n	8005a5c <HAL_TIM_ConfigClockSource+0x15e>
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	d05a      	beq.n	8005a5c <HAL_TIM_ConfigClockSource+0x15e>
 80059a6:	e062      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059b8:	f000 f95e 	bl	8005c78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	609a      	str	r2, [r3, #8]
      break;
 80059d4:	e04f      	b.n	8005a76 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059e6:	f000 f947 	bl	8005c78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059f8:	609a      	str	r2, [r3, #8]
      break;
 80059fa:	e03c      	b.n	8005a76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f000 f8bb 	bl	8005b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2150      	movs	r1, #80	@ 0x50
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f914 	bl	8005c42 <TIM_ITRx_SetConfig>
      break;
 8005a1a:	e02c      	b.n	8005a76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f000 f8da 	bl	8005be2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2160      	movs	r1, #96	@ 0x60
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 f904 	bl	8005c42 <TIM_ITRx_SetConfig>
      break;
 8005a3a:	e01c      	b.n	8005a76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f000 f89b 	bl	8005b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2140      	movs	r1, #64	@ 0x40
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 f8f4 	bl	8005c42 <TIM_ITRx_SetConfig>
      break;
 8005a5a:	e00c      	b.n	8005a76 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f000 f8eb 	bl	8005c42 <TIM_ITRx_SetConfig>
      break;
 8005a6c:	e003      	b.n	8005a76 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	73fb      	strb	r3, [r7, #15]
      break;
 8005a72:	e000      	b.n	8005a76 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a34      	ldr	r2, [pc, #208]	@ (8005b74 <TIM_Base_SetConfig+0xe4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_Base_SetConfig+0x20>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aae:	d108      	bne.n	8005ac2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b74 <TIM_Base_SetConfig+0xe4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00f      	beq.n	8005aea <TIM_Base_SetConfig+0x5a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad0:	d00b      	beq.n	8005aea <TIM_Base_SetConfig+0x5a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a28      	ldr	r2, [pc, #160]	@ (8005b78 <TIM_Base_SetConfig+0xe8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d007      	beq.n	8005aea <TIM_Base_SetConfig+0x5a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a27      	ldr	r2, [pc, #156]	@ (8005b7c <TIM_Base_SetConfig+0xec>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d003      	beq.n	8005aea <TIM_Base_SetConfig+0x5a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a26      	ldr	r2, [pc, #152]	@ (8005b80 <TIM_Base_SetConfig+0xf0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d108      	bne.n	8005afc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a14      	ldr	r2, [pc, #80]	@ (8005b74 <TIM_Base_SetConfig+0xe4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <TIM_Base_SetConfig+0xb0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a13      	ldr	r2, [pc, #76]	@ (8005b78 <TIM_Base_SetConfig+0xe8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d007      	beq.n	8005b40 <TIM_Base_SetConfig+0xb0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a12      	ldr	r2, [pc, #72]	@ (8005b7c <TIM_Base_SetConfig+0xec>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_Base_SetConfig+0xb0>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a11      	ldr	r2, [pc, #68]	@ (8005b80 <TIM_Base_SetConfig+0xf0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d103      	bne.n	8005b48 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d105      	bne.n	8005b66 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f023 0201 	bic.w	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	611a      	str	r2, [r3, #16]
  }
}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	40014400 	.word	0x40014400
 8005b80:	40014800 	.word	0x40014800

08005b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f023 0201 	bic.w	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f023 030a 	bic.w	r3, r3, #10
 8005bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	621a      	str	r2, [r3, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b087      	sub	sp, #28
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f023 0210 	bic.w	r2, r3, #16
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	031b      	lsls	r3, r3, #12
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f043 0307 	orr.w	r3, r3, #7
 8005c64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	021a      	lsls	r2, r3, #8
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	609a      	str	r2, [r3, #8]
}
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e04f      	b.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a21      	ldr	r2, [pc, #132]	@ (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d108      	bne.n	8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a14      	ldr	r2, [pc, #80]	@ (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d38:	d004      	beq.n	8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a10      	ldr	r2, [pc, #64]	@ (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d10c      	bne.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	40014000 	.word	0x40014000

08005d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e040      	b.n	8005e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fb ff52 	bl	8001c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2224      	movs	r2, #36	@ 0x24
 8005db0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f95e 	bl	800608c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f825 	bl	8005e20 <UART_SetConfig>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e01b      	b.n	8005e18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f9dd 	bl	80061d0 <UART_CheckIdleState>
 8005e16:	4603      	mov	r3, r0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b8a      	ldr	r3, [pc, #552]	@ (8006074 <UART_SetConfig+0x254>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6812      	ldr	r2, [r2, #0]
 8005e52:	6979      	ldr	r1, [r7, #20]
 8005e54:	430b      	orrs	r3, r1
 8005e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a78      	ldr	r2, [pc, #480]	@ (8006078 <UART_SetConfig+0x258>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d120      	bne.n	8005ede <UART_SetConfig+0xbe>
 8005e9c:	4b77      	ldr	r3, [pc, #476]	@ (800607c <UART_SetConfig+0x25c>)
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d817      	bhi.n	8005ed8 <UART_SetConfig+0xb8>
 8005ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb0 <UART_SetConfig+0x90>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ec1 	.word	0x08005ec1
 8005eb4:	08005ecd 	.word	0x08005ecd
 8005eb8:	08005ed3 	.word	0x08005ed3
 8005ebc:	08005ec7 	.word	0x08005ec7
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e01d      	b.n	8005f02 <UART_SetConfig+0xe2>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	77fb      	strb	r3, [r7, #31]
 8005eca:	e01a      	b.n	8005f02 <UART_SetConfig+0xe2>
 8005ecc:	2304      	movs	r3, #4
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e017      	b.n	8005f02 <UART_SetConfig+0xe2>
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	77fb      	strb	r3, [r7, #31]
 8005ed6:	e014      	b.n	8005f02 <UART_SetConfig+0xe2>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	77fb      	strb	r3, [r7, #31]
 8005edc:	e011      	b.n	8005f02 <UART_SetConfig+0xe2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a67      	ldr	r2, [pc, #412]	@ (8006080 <UART_SetConfig+0x260>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d102      	bne.n	8005eee <UART_SetConfig+0xce>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	77fb      	strb	r3, [r7, #31]
 8005eec:	e009      	b.n	8005f02 <UART_SetConfig+0xe2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a64      	ldr	r2, [pc, #400]	@ (8006084 <UART_SetConfig+0x264>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d102      	bne.n	8005efe <UART_SetConfig+0xde>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e001      	b.n	8005f02 <UART_SetConfig+0xe2>
 8005efe:	2310      	movs	r3, #16
 8005f00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f0a:	d15a      	bne.n	8005fc2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005f0c:	7ffb      	ldrb	r3, [r7, #31]
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d827      	bhi.n	8005f62 <UART_SetConfig+0x142>
 8005f12:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <UART_SetConfig+0xf8>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f45 	.word	0x08005f45
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	08005f63 	.word	0x08005f63
 8005f28:	08005f53 	.word	0x08005f53
 8005f2c:	08005f63 	.word	0x08005f63
 8005f30:	08005f63 	.word	0x08005f63
 8005f34:	08005f63 	.word	0x08005f63
 8005f38:	08005f5b 	.word	0x08005f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f3c:	f7fe fcee 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 8005f40:	61b8      	str	r0, [r7, #24]
        break;
 8005f42:	e013      	b.n	8005f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f44:	f7fe fd0c 	bl	8004960 <HAL_RCC_GetPCLK2Freq>
 8005f48:	61b8      	str	r0, [r7, #24]
        break;
 8005f4a:	e00f      	b.n	8005f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f4c:	4b4e      	ldr	r3, [pc, #312]	@ (8006088 <UART_SetConfig+0x268>)
 8005f4e:	61bb      	str	r3, [r7, #24]
        break;
 8005f50:	e00c      	b.n	8005f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f52:	f7fe fc83 	bl	800485c <HAL_RCC_GetSysClockFreq>
 8005f56:	61b8      	str	r0, [r7, #24]
        break;
 8005f58:	e008      	b.n	8005f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f5e:	61bb      	str	r3, [r7, #24]
        break;
 8005f60:	e004      	b.n	8005f6c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	77bb      	strb	r3, [r7, #30]
        break;
 8005f6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d074      	beq.n	800605c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	005a      	lsls	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	441a      	add	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b0f      	cmp	r3, #15
 8005f8c:	d916      	bls.n	8005fbc <UART_SetConfig+0x19c>
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f94:	d212      	bcs.n	8005fbc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f023 030f 	bic.w	r3, r3, #15
 8005f9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	89fb      	ldrh	r3, [r7, #14]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	89fa      	ldrh	r2, [r7, #14]
 8005fb8:	60da      	str	r2, [r3, #12]
 8005fba:	e04f      	b.n	800605c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	77bb      	strb	r3, [r7, #30]
 8005fc0:	e04c      	b.n	800605c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fc2:	7ffb      	ldrb	r3, [r7, #31]
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d828      	bhi.n	800601a <UART_SetConfig+0x1fa>
 8005fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd0 <UART_SetConfig+0x1b0>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08005ffd 	.word	0x08005ffd
 8005fd8:	08006005 	.word	0x08006005
 8005fdc:	0800601b 	.word	0x0800601b
 8005fe0:	0800600b 	.word	0x0800600b
 8005fe4:	0800601b 	.word	0x0800601b
 8005fe8:	0800601b 	.word	0x0800601b
 8005fec:	0800601b 	.word	0x0800601b
 8005ff0:	08006013 	.word	0x08006013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f7fe fc92 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 8005ff8:	61b8      	str	r0, [r7, #24]
        break;
 8005ffa:	e013      	b.n	8006024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ffc:	f7fe fcb0 	bl	8004960 <HAL_RCC_GetPCLK2Freq>
 8006000:	61b8      	str	r0, [r7, #24]
        break;
 8006002:	e00f      	b.n	8006024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006004:	4b20      	ldr	r3, [pc, #128]	@ (8006088 <UART_SetConfig+0x268>)
 8006006:	61bb      	str	r3, [r7, #24]
        break;
 8006008:	e00c      	b.n	8006024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800600a:	f7fe fc27 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800600e:	61b8      	str	r0, [r7, #24]
        break;
 8006010:	e008      	b.n	8006024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006016:	61bb      	str	r3, [r7, #24]
        break;
 8006018:	e004      	b.n	8006024 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	77bb      	strb	r3, [r7, #30]
        break;
 8006022:	bf00      	nop
    }

    if (pclk != 0U)
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d018      	beq.n	800605c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	085a      	lsrs	r2, r3, #1
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	441a      	add	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	fbb2 f3f3 	udiv	r3, r2, r3
 800603c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b0f      	cmp	r3, #15
 8006042:	d909      	bls.n	8006058 <UART_SetConfig+0x238>
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800604a:	d205      	bcs.n	8006058 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	b29a      	uxth	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	e001      	b.n	800605c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006068:	7fbb      	ldrb	r3, [r7, #30]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	efff69f3 	.word	0xefff69f3
 8006078:	40013800 	.word	0x40013800
 800607c:	40021000 	.word	0x40021000
 8006080:	40004400 	.word	0x40004400
 8006084:	40004800 	.word	0x40004800
 8006088:	007a1200 	.word	0x007a1200

0800608c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800618a:	d10a      	bne.n	80061a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b098      	sub	sp, #96	@ 0x60
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e0:	f7fb ff14 	bl	800200c <HAL_GetTick>
 80061e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d12e      	bne.n	8006252 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fc:	2200      	movs	r2, #0
 80061fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f88c 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d021      	beq.n	8006252 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800621c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006222:	653b      	str	r3, [r7, #80]	@ 0x50
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800622c:	647b      	str	r3, [r7, #68]	@ 0x44
 800622e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800623a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e6      	bne.n	800620e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e062      	b.n	8006318 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b04      	cmp	r3, #4
 800625e:	d149      	bne.n	80062f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006260:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006268:	2200      	movs	r2, #0
 800626a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f856 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d03c      	beq.n	80062f4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	623b      	str	r3, [r7, #32]
   return(result);
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800628e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006298:	633b      	str	r3, [r7, #48]	@ 0x30
 800629a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800629e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e6      	bne.n	800627a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3308      	adds	r3, #8
 80062ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062cc:	61fa      	str	r2, [r7, #28]
 80062ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	69b9      	ldr	r1, [r7, #24]
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	617b      	str	r3, [r7, #20]
   return(result);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e5      	bne.n	80062ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e011      	b.n	8006318 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3758      	adds	r7, #88	@ 0x58
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006330:	e04f      	b.n	80063d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d04b      	beq.n	80063d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633a:	f7fb fe67 	bl	800200c <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	429a      	cmp	r2, r3
 8006348:	d302      	bcc.n	8006350 <UART_WaitOnFlagUntilTimeout+0x30>
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e04e      	b.n	80063f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	d037      	beq.n	80063d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b80      	cmp	r3, #128	@ 0x80
 8006366:	d034      	beq.n	80063d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b40      	cmp	r3, #64	@ 0x40
 800636c:	d031      	beq.n	80063d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	2b08      	cmp	r3, #8
 800637a:	d110      	bne.n	800639e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2208      	movs	r2, #8
 8006382:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f838 	bl	80063fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2208      	movs	r2, #8
 800638e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e029      	b.n	80063f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063ac:	d111      	bne.n	80063d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f81e 	bl	80063fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e00f      	b.n	80063f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4013      	ands	r3, r2
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	429a      	cmp	r2, r3
 80063e0:	bf0c      	ite	eq
 80063e2:	2301      	moveq	r3, #1
 80063e4:	2300      	movne	r3, #0
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d0a0      	beq.n	8006332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b095      	sub	sp, #84	@ 0x54
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006412:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006420:	643b      	str	r3, [r7, #64]	@ 0x40
 8006422:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006426:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800642e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e6      	bne.n	8006402 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3308      	adds	r3, #8
 800643a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	61fb      	str	r3, [r7, #28]
   return(result);
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3308      	adds	r3, #8
 8006452:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006454:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006456:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800645a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e5      	bne.n	8006434 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646c:	2b01      	cmp	r3, #1
 800646e:	d118      	bne.n	80064a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	60bb      	str	r3, [r7, #8]
   return(result);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f023 0310 	bic.w	r3, r3, #16
 8006484:	647b      	str	r3, [r7, #68]	@ 0x44
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6979      	ldr	r1, [r7, #20]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	613b      	str	r3, [r7, #16]
   return(result);
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e6      	bne.n	8006470 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064b6:	bf00      	nop
 80064b8:	3754      	adds	r7, #84	@ 0x54
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <__cvt>:
 80064c2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c6:	ec57 6b10 	vmov	r6, r7, d0
 80064ca:	2f00      	cmp	r7, #0
 80064cc:	460c      	mov	r4, r1
 80064ce:	4619      	mov	r1, r3
 80064d0:	463b      	mov	r3, r7
 80064d2:	bfbb      	ittet	lt
 80064d4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80064d8:	461f      	movlt	r7, r3
 80064da:	2300      	movge	r3, #0
 80064dc:	232d      	movlt	r3, #45	@ 0x2d
 80064de:	700b      	strb	r3, [r1, #0]
 80064e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064e2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80064e6:	4691      	mov	r9, r2
 80064e8:	f023 0820 	bic.w	r8, r3, #32
 80064ec:	bfbc      	itt	lt
 80064ee:	4632      	movlt	r2, r6
 80064f0:	4616      	movlt	r6, r2
 80064f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064f6:	d005      	beq.n	8006504 <__cvt+0x42>
 80064f8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80064fc:	d100      	bne.n	8006500 <__cvt+0x3e>
 80064fe:	3401      	adds	r4, #1
 8006500:	2102      	movs	r1, #2
 8006502:	e000      	b.n	8006506 <__cvt+0x44>
 8006504:	2103      	movs	r1, #3
 8006506:	ab03      	add	r3, sp, #12
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	ab02      	add	r3, sp, #8
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	ec47 6b10 	vmov	d0, r6, r7
 8006512:	4653      	mov	r3, sl
 8006514:	4622      	mov	r2, r4
 8006516:	f000 fe5b 	bl	80071d0 <_dtoa_r>
 800651a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800651e:	4605      	mov	r5, r0
 8006520:	d119      	bne.n	8006556 <__cvt+0x94>
 8006522:	f019 0f01 	tst.w	r9, #1
 8006526:	d00e      	beq.n	8006546 <__cvt+0x84>
 8006528:	eb00 0904 	add.w	r9, r0, r4
 800652c:	2200      	movs	r2, #0
 800652e:	2300      	movs	r3, #0
 8006530:	4630      	mov	r0, r6
 8006532:	4639      	mov	r1, r7
 8006534:	f7fa fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006538:	b108      	cbz	r0, 800653e <__cvt+0x7c>
 800653a:	f8cd 900c 	str.w	r9, [sp, #12]
 800653e:	2230      	movs	r2, #48	@ 0x30
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	454b      	cmp	r3, r9
 8006544:	d31e      	bcc.n	8006584 <__cvt+0xc2>
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800654a:	1b5b      	subs	r3, r3, r5
 800654c:	4628      	mov	r0, r5
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	b004      	add	sp, #16
 8006552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006556:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800655a:	eb00 0904 	add.w	r9, r0, r4
 800655e:	d1e5      	bne.n	800652c <__cvt+0x6a>
 8006560:	7803      	ldrb	r3, [r0, #0]
 8006562:	2b30      	cmp	r3, #48	@ 0x30
 8006564:	d10a      	bne.n	800657c <__cvt+0xba>
 8006566:	2200      	movs	r2, #0
 8006568:	2300      	movs	r3, #0
 800656a:	4630      	mov	r0, r6
 800656c:	4639      	mov	r1, r7
 800656e:	f7fa faab 	bl	8000ac8 <__aeabi_dcmpeq>
 8006572:	b918      	cbnz	r0, 800657c <__cvt+0xba>
 8006574:	f1c4 0401 	rsb	r4, r4, #1
 8006578:	f8ca 4000 	str.w	r4, [sl]
 800657c:	f8da 3000 	ldr.w	r3, [sl]
 8006580:	4499      	add	r9, r3
 8006582:	e7d3      	b.n	800652c <__cvt+0x6a>
 8006584:	1c59      	adds	r1, r3, #1
 8006586:	9103      	str	r1, [sp, #12]
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e7d9      	b.n	8006540 <__cvt+0x7e>

0800658c <__exponent>:
 800658c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800658e:	2900      	cmp	r1, #0
 8006590:	bfba      	itte	lt
 8006592:	4249      	neglt	r1, r1
 8006594:	232d      	movlt	r3, #45	@ 0x2d
 8006596:	232b      	movge	r3, #43	@ 0x2b
 8006598:	2909      	cmp	r1, #9
 800659a:	7002      	strb	r2, [r0, #0]
 800659c:	7043      	strb	r3, [r0, #1]
 800659e:	dd29      	ble.n	80065f4 <__exponent+0x68>
 80065a0:	f10d 0307 	add.w	r3, sp, #7
 80065a4:	461d      	mov	r5, r3
 80065a6:	270a      	movs	r7, #10
 80065a8:	461a      	mov	r2, r3
 80065aa:	fbb1 f6f7 	udiv	r6, r1, r7
 80065ae:	fb07 1416 	mls	r4, r7, r6, r1
 80065b2:	3430      	adds	r4, #48	@ 0x30
 80065b4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065b8:	460c      	mov	r4, r1
 80065ba:	2c63      	cmp	r4, #99	@ 0x63
 80065bc:	f103 33ff 	add.w	r3, r3, #4294967295
 80065c0:	4631      	mov	r1, r6
 80065c2:	dcf1      	bgt.n	80065a8 <__exponent+0x1c>
 80065c4:	3130      	adds	r1, #48	@ 0x30
 80065c6:	1e94      	subs	r4, r2, #2
 80065c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065cc:	1c41      	adds	r1, r0, #1
 80065ce:	4623      	mov	r3, r4
 80065d0:	42ab      	cmp	r3, r5
 80065d2:	d30a      	bcc.n	80065ea <__exponent+0x5e>
 80065d4:	f10d 0309 	add.w	r3, sp, #9
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	42ac      	cmp	r4, r5
 80065dc:	bf88      	it	hi
 80065de:	2300      	movhi	r3, #0
 80065e0:	3302      	adds	r3, #2
 80065e2:	4403      	add	r3, r0
 80065e4:	1a18      	subs	r0, r3, r0
 80065e6:	b003      	add	sp, #12
 80065e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 80065f2:	e7ed      	b.n	80065d0 <__exponent+0x44>
 80065f4:	2330      	movs	r3, #48	@ 0x30
 80065f6:	3130      	adds	r1, #48	@ 0x30
 80065f8:	7083      	strb	r3, [r0, #2]
 80065fa:	70c1      	strb	r1, [r0, #3]
 80065fc:	1d03      	adds	r3, r0, #4
 80065fe:	e7f1      	b.n	80065e4 <__exponent+0x58>

08006600 <_printf_float>:
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	b08d      	sub	sp, #52	@ 0x34
 8006606:	460c      	mov	r4, r1
 8006608:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800660c:	4616      	mov	r6, r2
 800660e:	461f      	mov	r7, r3
 8006610:	4605      	mov	r5, r0
 8006612:	f000 fcdb 	bl	8006fcc <_localeconv_r>
 8006616:	6803      	ldr	r3, [r0, #0]
 8006618:	9304      	str	r3, [sp, #16]
 800661a:	4618      	mov	r0, r3
 800661c:	f7f9 fe28 	bl	8000270 <strlen>
 8006620:	2300      	movs	r3, #0
 8006622:	930a      	str	r3, [sp, #40]	@ 0x28
 8006624:	f8d8 3000 	ldr.w	r3, [r8]
 8006628:	9005      	str	r0, [sp, #20]
 800662a:	3307      	adds	r3, #7
 800662c:	f023 0307 	bic.w	r3, r3, #7
 8006630:	f103 0208 	add.w	r2, r3, #8
 8006634:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006638:	f8d4 b000 	ldr.w	fp, [r4]
 800663c:	f8c8 2000 	str.w	r2, [r8]
 8006640:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006644:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006648:	9307      	str	r3, [sp, #28]
 800664a:	f8cd 8018 	str.w	r8, [sp, #24]
 800664e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006652:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006656:	4b9c      	ldr	r3, [pc, #624]	@ (80068c8 <_printf_float+0x2c8>)
 8006658:	f04f 32ff 	mov.w	r2, #4294967295
 800665c:	f7fa fa66 	bl	8000b2c <__aeabi_dcmpun>
 8006660:	bb70      	cbnz	r0, 80066c0 <_printf_float+0xc0>
 8006662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006666:	4b98      	ldr	r3, [pc, #608]	@ (80068c8 <_printf_float+0x2c8>)
 8006668:	f04f 32ff 	mov.w	r2, #4294967295
 800666c:	f7fa fa40 	bl	8000af0 <__aeabi_dcmple>
 8006670:	bb30      	cbnz	r0, 80066c0 <_printf_float+0xc0>
 8006672:	2200      	movs	r2, #0
 8006674:	2300      	movs	r3, #0
 8006676:	4640      	mov	r0, r8
 8006678:	4649      	mov	r1, r9
 800667a:	f7fa fa2f 	bl	8000adc <__aeabi_dcmplt>
 800667e:	b110      	cbz	r0, 8006686 <_printf_float+0x86>
 8006680:	232d      	movs	r3, #45	@ 0x2d
 8006682:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006686:	4a91      	ldr	r2, [pc, #580]	@ (80068cc <_printf_float+0x2cc>)
 8006688:	4b91      	ldr	r3, [pc, #580]	@ (80068d0 <_printf_float+0x2d0>)
 800668a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800668e:	bf8c      	ite	hi
 8006690:	4690      	movhi	r8, r2
 8006692:	4698      	movls	r8, r3
 8006694:	2303      	movs	r3, #3
 8006696:	6123      	str	r3, [r4, #16]
 8006698:	f02b 0304 	bic.w	r3, fp, #4
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	f04f 0900 	mov.w	r9, #0
 80066a2:	9700      	str	r7, [sp, #0]
 80066a4:	4633      	mov	r3, r6
 80066a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80066a8:	4621      	mov	r1, r4
 80066aa:	4628      	mov	r0, r5
 80066ac:	f000 f9d2 	bl	8006a54 <_printf_common>
 80066b0:	3001      	adds	r0, #1
 80066b2:	f040 808d 	bne.w	80067d0 <_printf_float+0x1d0>
 80066b6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ba:	b00d      	add	sp, #52	@ 0x34
 80066bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c0:	4642      	mov	r2, r8
 80066c2:	464b      	mov	r3, r9
 80066c4:	4640      	mov	r0, r8
 80066c6:	4649      	mov	r1, r9
 80066c8:	f7fa fa30 	bl	8000b2c <__aeabi_dcmpun>
 80066cc:	b140      	cbz	r0, 80066e0 <_printf_float+0xe0>
 80066ce:	464b      	mov	r3, r9
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bfbc      	itt	lt
 80066d4:	232d      	movlt	r3, #45	@ 0x2d
 80066d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80066da:	4a7e      	ldr	r2, [pc, #504]	@ (80068d4 <_printf_float+0x2d4>)
 80066dc:	4b7e      	ldr	r3, [pc, #504]	@ (80068d8 <_printf_float+0x2d8>)
 80066de:	e7d4      	b.n	800668a <_printf_float+0x8a>
 80066e0:	6863      	ldr	r3, [r4, #4]
 80066e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80066e6:	9206      	str	r2, [sp, #24]
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	d13b      	bne.n	8006764 <_printf_float+0x164>
 80066ec:	2306      	movs	r3, #6
 80066ee:	6063      	str	r3, [r4, #4]
 80066f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80066f4:	2300      	movs	r3, #0
 80066f6:	6022      	str	r2, [r4, #0]
 80066f8:	9303      	str	r3, [sp, #12]
 80066fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80066fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006700:	ab09      	add	r3, sp, #36	@ 0x24
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	6861      	ldr	r1, [r4, #4]
 8006706:	ec49 8b10 	vmov	d0, r8, r9
 800670a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800670e:	4628      	mov	r0, r5
 8006710:	f7ff fed7 	bl	80064c2 <__cvt>
 8006714:	9b06      	ldr	r3, [sp, #24]
 8006716:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006718:	2b47      	cmp	r3, #71	@ 0x47
 800671a:	4680      	mov	r8, r0
 800671c:	d129      	bne.n	8006772 <_printf_float+0x172>
 800671e:	1cc8      	adds	r0, r1, #3
 8006720:	db02      	blt.n	8006728 <_printf_float+0x128>
 8006722:	6863      	ldr	r3, [r4, #4]
 8006724:	4299      	cmp	r1, r3
 8006726:	dd41      	ble.n	80067ac <_printf_float+0x1ac>
 8006728:	f1aa 0a02 	sub.w	sl, sl, #2
 800672c:	fa5f fa8a 	uxtb.w	sl, sl
 8006730:	3901      	subs	r1, #1
 8006732:	4652      	mov	r2, sl
 8006734:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006738:	9109      	str	r1, [sp, #36]	@ 0x24
 800673a:	f7ff ff27 	bl	800658c <__exponent>
 800673e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006740:	1813      	adds	r3, r2, r0
 8006742:	2a01      	cmp	r2, #1
 8006744:	4681      	mov	r9, r0
 8006746:	6123      	str	r3, [r4, #16]
 8006748:	dc02      	bgt.n	8006750 <_printf_float+0x150>
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	07d2      	lsls	r2, r2, #31
 800674e:	d501      	bpl.n	8006754 <_printf_float+0x154>
 8006750:	3301      	adds	r3, #1
 8006752:	6123      	str	r3, [r4, #16]
 8006754:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0a2      	beq.n	80066a2 <_printf_float+0xa2>
 800675c:	232d      	movs	r3, #45	@ 0x2d
 800675e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006762:	e79e      	b.n	80066a2 <_printf_float+0xa2>
 8006764:	9a06      	ldr	r2, [sp, #24]
 8006766:	2a47      	cmp	r2, #71	@ 0x47
 8006768:	d1c2      	bne.n	80066f0 <_printf_float+0xf0>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1c0      	bne.n	80066f0 <_printf_float+0xf0>
 800676e:	2301      	movs	r3, #1
 8006770:	e7bd      	b.n	80066ee <_printf_float+0xee>
 8006772:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006776:	d9db      	bls.n	8006730 <_printf_float+0x130>
 8006778:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800677c:	d118      	bne.n	80067b0 <_printf_float+0x1b0>
 800677e:	2900      	cmp	r1, #0
 8006780:	6863      	ldr	r3, [r4, #4]
 8006782:	dd0b      	ble.n	800679c <_printf_float+0x19c>
 8006784:	6121      	str	r1, [r4, #16]
 8006786:	b913      	cbnz	r3, 800678e <_printf_float+0x18e>
 8006788:	6822      	ldr	r2, [r4, #0]
 800678a:	07d0      	lsls	r0, r2, #31
 800678c:	d502      	bpl.n	8006794 <_printf_float+0x194>
 800678e:	3301      	adds	r3, #1
 8006790:	440b      	add	r3, r1
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006796:	f04f 0900 	mov.w	r9, #0
 800679a:	e7db      	b.n	8006754 <_printf_float+0x154>
 800679c:	b913      	cbnz	r3, 80067a4 <_printf_float+0x1a4>
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	07d2      	lsls	r2, r2, #31
 80067a2:	d501      	bpl.n	80067a8 <_printf_float+0x1a8>
 80067a4:	3302      	adds	r3, #2
 80067a6:	e7f4      	b.n	8006792 <_printf_float+0x192>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e7f2      	b.n	8006792 <_printf_float+0x192>
 80067ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067b2:	4299      	cmp	r1, r3
 80067b4:	db05      	blt.n	80067c2 <_printf_float+0x1c2>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	6121      	str	r1, [r4, #16]
 80067ba:	07d8      	lsls	r0, r3, #31
 80067bc:	d5ea      	bpl.n	8006794 <_printf_float+0x194>
 80067be:	1c4b      	adds	r3, r1, #1
 80067c0:	e7e7      	b.n	8006792 <_printf_float+0x192>
 80067c2:	2900      	cmp	r1, #0
 80067c4:	bfd4      	ite	le
 80067c6:	f1c1 0202 	rsble	r2, r1, #2
 80067ca:	2201      	movgt	r2, #1
 80067cc:	4413      	add	r3, r2
 80067ce:	e7e0      	b.n	8006792 <_printf_float+0x192>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	055a      	lsls	r2, r3, #21
 80067d4:	d407      	bmi.n	80067e6 <_printf_float+0x1e6>
 80067d6:	6923      	ldr	r3, [r4, #16]
 80067d8:	4642      	mov	r2, r8
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	d12b      	bne.n	800683c <_printf_float+0x23c>
 80067e4:	e767      	b.n	80066b6 <_printf_float+0xb6>
 80067e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067ea:	f240 80dd 	bls.w	80069a8 <_printf_float+0x3a8>
 80067ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067f2:	2200      	movs	r2, #0
 80067f4:	2300      	movs	r3, #0
 80067f6:	f7fa f967 	bl	8000ac8 <__aeabi_dcmpeq>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d033      	beq.n	8006866 <_printf_float+0x266>
 80067fe:	4a37      	ldr	r2, [pc, #220]	@ (80068dc <_printf_float+0x2dc>)
 8006800:	2301      	movs	r3, #1
 8006802:	4631      	mov	r1, r6
 8006804:	4628      	mov	r0, r5
 8006806:	47b8      	blx	r7
 8006808:	3001      	adds	r0, #1
 800680a:	f43f af54 	beq.w	80066b6 <_printf_float+0xb6>
 800680e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006812:	4543      	cmp	r3, r8
 8006814:	db02      	blt.n	800681c <_printf_float+0x21c>
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	07d8      	lsls	r0, r3, #31
 800681a:	d50f      	bpl.n	800683c <_printf_float+0x23c>
 800681c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	f43f af45 	beq.w	80066b6 <_printf_float+0xb6>
 800682c:	f04f 0900 	mov.w	r9, #0
 8006830:	f108 38ff 	add.w	r8, r8, #4294967295
 8006834:	f104 0a1a 	add.w	sl, r4, #26
 8006838:	45c8      	cmp	r8, r9
 800683a:	dc09      	bgt.n	8006850 <_printf_float+0x250>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	079b      	lsls	r3, r3, #30
 8006840:	f100 8103 	bmi.w	8006a4a <_printf_float+0x44a>
 8006844:	68e0      	ldr	r0, [r4, #12]
 8006846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006848:	4298      	cmp	r0, r3
 800684a:	bfb8      	it	lt
 800684c:	4618      	movlt	r0, r3
 800684e:	e734      	b.n	80066ba <_printf_float+0xba>
 8006850:	2301      	movs	r3, #1
 8006852:	4652      	mov	r2, sl
 8006854:	4631      	mov	r1, r6
 8006856:	4628      	mov	r0, r5
 8006858:	47b8      	blx	r7
 800685a:	3001      	adds	r0, #1
 800685c:	f43f af2b 	beq.w	80066b6 <_printf_float+0xb6>
 8006860:	f109 0901 	add.w	r9, r9, #1
 8006864:	e7e8      	b.n	8006838 <_printf_float+0x238>
 8006866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006868:	2b00      	cmp	r3, #0
 800686a:	dc39      	bgt.n	80068e0 <_printf_float+0x2e0>
 800686c:	4a1b      	ldr	r2, [pc, #108]	@ (80068dc <_printf_float+0x2dc>)
 800686e:	2301      	movs	r3, #1
 8006870:	4631      	mov	r1, r6
 8006872:	4628      	mov	r0, r5
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	f43f af1d 	beq.w	80066b6 <_printf_float+0xb6>
 800687c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006880:	ea59 0303 	orrs.w	r3, r9, r3
 8006884:	d102      	bne.n	800688c <_printf_float+0x28c>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	07d9      	lsls	r1, r3, #31
 800688a:	d5d7      	bpl.n	800683c <_printf_float+0x23c>
 800688c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006890:	4631      	mov	r1, r6
 8006892:	4628      	mov	r0, r5
 8006894:	47b8      	blx	r7
 8006896:	3001      	adds	r0, #1
 8006898:	f43f af0d 	beq.w	80066b6 <_printf_float+0xb6>
 800689c:	f04f 0a00 	mov.w	sl, #0
 80068a0:	f104 0b1a 	add.w	fp, r4, #26
 80068a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a6:	425b      	negs	r3, r3
 80068a8:	4553      	cmp	r3, sl
 80068aa:	dc01      	bgt.n	80068b0 <_printf_float+0x2b0>
 80068ac:	464b      	mov	r3, r9
 80068ae:	e793      	b.n	80067d8 <_printf_float+0x1d8>
 80068b0:	2301      	movs	r3, #1
 80068b2:	465a      	mov	r2, fp
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	f43f aefb 	beq.w	80066b6 <_printf_float+0xb6>
 80068c0:	f10a 0a01 	add.w	sl, sl, #1
 80068c4:	e7ee      	b.n	80068a4 <_printf_float+0x2a4>
 80068c6:	bf00      	nop
 80068c8:	7fefffff 	.word	0x7fefffff
 80068cc:	08009a10 	.word	0x08009a10
 80068d0:	08009a0c 	.word	0x08009a0c
 80068d4:	08009a18 	.word	0x08009a18
 80068d8:	08009a14 	.word	0x08009a14
 80068dc:	08009a1c 	.word	0x08009a1c
 80068e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068e6:	4553      	cmp	r3, sl
 80068e8:	bfa8      	it	ge
 80068ea:	4653      	movge	r3, sl
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	4699      	mov	r9, r3
 80068f0:	dc36      	bgt.n	8006960 <_printf_float+0x360>
 80068f2:	f04f 0b00 	mov.w	fp, #0
 80068f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068fa:	f104 021a 	add.w	r2, r4, #26
 80068fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006900:	9306      	str	r3, [sp, #24]
 8006902:	eba3 0309 	sub.w	r3, r3, r9
 8006906:	455b      	cmp	r3, fp
 8006908:	dc31      	bgt.n	800696e <_printf_float+0x36e>
 800690a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800690c:	459a      	cmp	sl, r3
 800690e:	dc3a      	bgt.n	8006986 <_printf_float+0x386>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	07da      	lsls	r2, r3, #31
 8006914:	d437      	bmi.n	8006986 <_printf_float+0x386>
 8006916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006918:	ebaa 0903 	sub.w	r9, sl, r3
 800691c:	9b06      	ldr	r3, [sp, #24]
 800691e:	ebaa 0303 	sub.w	r3, sl, r3
 8006922:	4599      	cmp	r9, r3
 8006924:	bfa8      	it	ge
 8006926:	4699      	movge	r9, r3
 8006928:	f1b9 0f00 	cmp.w	r9, #0
 800692c:	dc33      	bgt.n	8006996 <_printf_float+0x396>
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006936:	f104 0b1a 	add.w	fp, r4, #26
 800693a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800693c:	ebaa 0303 	sub.w	r3, sl, r3
 8006940:	eba3 0309 	sub.w	r3, r3, r9
 8006944:	4543      	cmp	r3, r8
 8006946:	f77f af79 	ble.w	800683c <_printf_float+0x23c>
 800694a:	2301      	movs	r3, #1
 800694c:	465a      	mov	r2, fp
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	f43f aeae 	beq.w	80066b6 <_printf_float+0xb6>
 800695a:	f108 0801 	add.w	r8, r8, #1
 800695e:	e7ec      	b.n	800693a <_printf_float+0x33a>
 8006960:	4642      	mov	r2, r8
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	47b8      	blx	r7
 8006968:	3001      	adds	r0, #1
 800696a:	d1c2      	bne.n	80068f2 <_printf_float+0x2f2>
 800696c:	e6a3      	b.n	80066b6 <_printf_float+0xb6>
 800696e:	2301      	movs	r3, #1
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	9206      	str	r2, [sp, #24]
 8006976:	47b8      	blx	r7
 8006978:	3001      	adds	r0, #1
 800697a:	f43f ae9c 	beq.w	80066b6 <_printf_float+0xb6>
 800697e:	9a06      	ldr	r2, [sp, #24]
 8006980:	f10b 0b01 	add.w	fp, fp, #1
 8006984:	e7bb      	b.n	80068fe <_printf_float+0x2fe>
 8006986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	d1c0      	bne.n	8006916 <_printf_float+0x316>
 8006994:	e68f      	b.n	80066b6 <_printf_float+0xb6>
 8006996:	9a06      	ldr	r2, [sp, #24]
 8006998:	464b      	mov	r3, r9
 800699a:	4442      	add	r2, r8
 800699c:	4631      	mov	r1, r6
 800699e:	4628      	mov	r0, r5
 80069a0:	47b8      	blx	r7
 80069a2:	3001      	adds	r0, #1
 80069a4:	d1c3      	bne.n	800692e <_printf_float+0x32e>
 80069a6:	e686      	b.n	80066b6 <_printf_float+0xb6>
 80069a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069ac:	f1ba 0f01 	cmp.w	sl, #1
 80069b0:	dc01      	bgt.n	80069b6 <_printf_float+0x3b6>
 80069b2:	07db      	lsls	r3, r3, #31
 80069b4:	d536      	bpl.n	8006a24 <_printf_float+0x424>
 80069b6:	2301      	movs	r3, #1
 80069b8:	4642      	mov	r2, r8
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	47b8      	blx	r7
 80069c0:	3001      	adds	r0, #1
 80069c2:	f43f ae78 	beq.w	80066b6 <_printf_float+0xb6>
 80069c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	f43f ae70 	beq.w	80066b6 <_printf_float+0xb6>
 80069d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069da:	2200      	movs	r2, #0
 80069dc:	2300      	movs	r3, #0
 80069de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069e2:	f7fa f871 	bl	8000ac8 <__aeabi_dcmpeq>
 80069e6:	b9c0      	cbnz	r0, 8006a1a <_printf_float+0x41a>
 80069e8:	4653      	mov	r3, sl
 80069ea:	f108 0201 	add.w	r2, r8, #1
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b8      	blx	r7
 80069f4:	3001      	adds	r0, #1
 80069f6:	d10c      	bne.n	8006a12 <_printf_float+0x412>
 80069f8:	e65d      	b.n	80066b6 <_printf_float+0xb6>
 80069fa:	2301      	movs	r3, #1
 80069fc:	465a      	mov	r2, fp
 80069fe:	4631      	mov	r1, r6
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b8      	blx	r7
 8006a04:	3001      	adds	r0, #1
 8006a06:	f43f ae56 	beq.w	80066b6 <_printf_float+0xb6>
 8006a0a:	f108 0801 	add.w	r8, r8, #1
 8006a0e:	45d0      	cmp	r8, sl
 8006a10:	dbf3      	blt.n	80069fa <_printf_float+0x3fa>
 8006a12:	464b      	mov	r3, r9
 8006a14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a18:	e6df      	b.n	80067da <_printf_float+0x1da>
 8006a1a:	f04f 0800 	mov.w	r8, #0
 8006a1e:	f104 0b1a 	add.w	fp, r4, #26
 8006a22:	e7f4      	b.n	8006a0e <_printf_float+0x40e>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4642      	mov	r2, r8
 8006a28:	e7e1      	b.n	80069ee <_printf_float+0x3ee>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	464a      	mov	r2, r9
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b8      	blx	r7
 8006a34:	3001      	adds	r0, #1
 8006a36:	f43f ae3e 	beq.w	80066b6 <_printf_float+0xb6>
 8006a3a:	f108 0801 	add.w	r8, r8, #1
 8006a3e:	68e3      	ldr	r3, [r4, #12]
 8006a40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a42:	1a5b      	subs	r3, r3, r1
 8006a44:	4543      	cmp	r3, r8
 8006a46:	dcf0      	bgt.n	8006a2a <_printf_float+0x42a>
 8006a48:	e6fc      	b.n	8006844 <_printf_float+0x244>
 8006a4a:	f04f 0800 	mov.w	r8, #0
 8006a4e:	f104 0919 	add.w	r9, r4, #25
 8006a52:	e7f4      	b.n	8006a3e <_printf_float+0x43e>

08006a54 <_printf_common>:
 8006a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a58:	4616      	mov	r6, r2
 8006a5a:	4698      	mov	r8, r3
 8006a5c:	688a      	ldr	r2, [r1, #8]
 8006a5e:	690b      	ldr	r3, [r1, #16]
 8006a60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a64:	4293      	cmp	r3, r2
 8006a66:	bfb8      	it	lt
 8006a68:	4613      	movlt	r3, r2
 8006a6a:	6033      	str	r3, [r6, #0]
 8006a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a70:	4607      	mov	r7, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	b10a      	cbz	r2, 8006a7a <_printf_common+0x26>
 8006a76:	3301      	adds	r3, #1
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	0699      	lsls	r1, r3, #26
 8006a7e:	bf42      	ittt	mi
 8006a80:	6833      	ldrmi	r3, [r6, #0]
 8006a82:	3302      	addmi	r3, #2
 8006a84:	6033      	strmi	r3, [r6, #0]
 8006a86:	6825      	ldr	r5, [r4, #0]
 8006a88:	f015 0506 	ands.w	r5, r5, #6
 8006a8c:	d106      	bne.n	8006a9c <_printf_common+0x48>
 8006a8e:	f104 0a19 	add.w	sl, r4, #25
 8006a92:	68e3      	ldr	r3, [r4, #12]
 8006a94:	6832      	ldr	r2, [r6, #0]
 8006a96:	1a9b      	subs	r3, r3, r2
 8006a98:	42ab      	cmp	r3, r5
 8006a9a:	dc26      	bgt.n	8006aea <_printf_common+0x96>
 8006a9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006aa0:	6822      	ldr	r2, [r4, #0]
 8006aa2:	3b00      	subs	r3, #0
 8006aa4:	bf18      	it	ne
 8006aa6:	2301      	movne	r3, #1
 8006aa8:	0692      	lsls	r2, r2, #26
 8006aaa:	d42b      	bmi.n	8006b04 <_printf_common+0xb0>
 8006aac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ab0:	4641      	mov	r1, r8
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	47c8      	blx	r9
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d01e      	beq.n	8006af8 <_printf_common+0xa4>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	6922      	ldr	r2, [r4, #16]
 8006abe:	f003 0306 	and.w	r3, r3, #6
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	bf02      	ittt	eq
 8006ac6:	68e5      	ldreq	r5, [r4, #12]
 8006ac8:	6833      	ldreq	r3, [r6, #0]
 8006aca:	1aed      	subeq	r5, r5, r3
 8006acc:	68a3      	ldr	r3, [r4, #8]
 8006ace:	bf0c      	ite	eq
 8006ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad4:	2500      	movne	r5, #0
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	bfc4      	itt	gt
 8006ada:	1a9b      	subgt	r3, r3, r2
 8006adc:	18ed      	addgt	r5, r5, r3
 8006ade:	2600      	movs	r6, #0
 8006ae0:	341a      	adds	r4, #26
 8006ae2:	42b5      	cmp	r5, r6
 8006ae4:	d11a      	bne.n	8006b1c <_printf_common+0xc8>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e008      	b.n	8006afc <_printf_common+0xa8>
 8006aea:	2301      	movs	r3, #1
 8006aec:	4652      	mov	r2, sl
 8006aee:	4641      	mov	r1, r8
 8006af0:	4638      	mov	r0, r7
 8006af2:	47c8      	blx	r9
 8006af4:	3001      	adds	r0, #1
 8006af6:	d103      	bne.n	8006b00 <_printf_common+0xac>
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295
 8006afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b00:	3501      	adds	r5, #1
 8006b02:	e7c6      	b.n	8006a92 <_printf_common+0x3e>
 8006b04:	18e1      	adds	r1, r4, r3
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	2030      	movs	r0, #48	@ 0x30
 8006b0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b0e:	4422      	add	r2, r4
 8006b10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b18:	3302      	adds	r3, #2
 8006b1a:	e7c7      	b.n	8006aac <_printf_common+0x58>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4622      	mov	r2, r4
 8006b20:	4641      	mov	r1, r8
 8006b22:	4638      	mov	r0, r7
 8006b24:	47c8      	blx	r9
 8006b26:	3001      	adds	r0, #1
 8006b28:	d0e6      	beq.n	8006af8 <_printf_common+0xa4>
 8006b2a:	3601      	adds	r6, #1
 8006b2c:	e7d9      	b.n	8006ae2 <_printf_common+0x8e>
	...

08006b30 <_printf_i>:
 8006b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b34:	7e0f      	ldrb	r7, [r1, #24]
 8006b36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b38:	2f78      	cmp	r7, #120	@ 0x78
 8006b3a:	4691      	mov	r9, r2
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	469a      	mov	sl, r3
 8006b42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b46:	d807      	bhi.n	8006b58 <_printf_i+0x28>
 8006b48:	2f62      	cmp	r7, #98	@ 0x62
 8006b4a:	d80a      	bhi.n	8006b62 <_printf_i+0x32>
 8006b4c:	2f00      	cmp	r7, #0
 8006b4e:	f000 80d1 	beq.w	8006cf4 <_printf_i+0x1c4>
 8006b52:	2f58      	cmp	r7, #88	@ 0x58
 8006b54:	f000 80b8 	beq.w	8006cc8 <_printf_i+0x198>
 8006b58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b60:	e03a      	b.n	8006bd8 <_printf_i+0xa8>
 8006b62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b66:	2b15      	cmp	r3, #21
 8006b68:	d8f6      	bhi.n	8006b58 <_printf_i+0x28>
 8006b6a:	a101      	add	r1, pc, #4	@ (adr r1, 8006b70 <_printf_i+0x40>)
 8006b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b70:	08006bc9 	.word	0x08006bc9
 8006b74:	08006bdd 	.word	0x08006bdd
 8006b78:	08006b59 	.word	0x08006b59
 8006b7c:	08006b59 	.word	0x08006b59
 8006b80:	08006b59 	.word	0x08006b59
 8006b84:	08006b59 	.word	0x08006b59
 8006b88:	08006bdd 	.word	0x08006bdd
 8006b8c:	08006b59 	.word	0x08006b59
 8006b90:	08006b59 	.word	0x08006b59
 8006b94:	08006b59 	.word	0x08006b59
 8006b98:	08006b59 	.word	0x08006b59
 8006b9c:	08006cdb 	.word	0x08006cdb
 8006ba0:	08006c07 	.word	0x08006c07
 8006ba4:	08006c95 	.word	0x08006c95
 8006ba8:	08006b59 	.word	0x08006b59
 8006bac:	08006b59 	.word	0x08006b59
 8006bb0:	08006cfd 	.word	0x08006cfd
 8006bb4:	08006b59 	.word	0x08006b59
 8006bb8:	08006c07 	.word	0x08006c07
 8006bbc:	08006b59 	.word	0x08006b59
 8006bc0:	08006b59 	.word	0x08006b59
 8006bc4:	08006c9d 	.word	0x08006c9d
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	1d1a      	adds	r2, r3, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6032      	str	r2, [r6, #0]
 8006bd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e09c      	b.n	8006d16 <_printf_i+0x1e6>
 8006bdc:	6833      	ldr	r3, [r6, #0]
 8006bde:	6820      	ldr	r0, [r4, #0]
 8006be0:	1d19      	adds	r1, r3, #4
 8006be2:	6031      	str	r1, [r6, #0]
 8006be4:	0606      	lsls	r6, r0, #24
 8006be6:	d501      	bpl.n	8006bec <_printf_i+0xbc>
 8006be8:	681d      	ldr	r5, [r3, #0]
 8006bea:	e003      	b.n	8006bf4 <_printf_i+0xc4>
 8006bec:	0645      	lsls	r5, r0, #25
 8006bee:	d5fb      	bpl.n	8006be8 <_printf_i+0xb8>
 8006bf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bf4:	2d00      	cmp	r5, #0
 8006bf6:	da03      	bge.n	8006c00 <_printf_i+0xd0>
 8006bf8:	232d      	movs	r3, #45	@ 0x2d
 8006bfa:	426d      	negs	r5, r5
 8006bfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c00:	4858      	ldr	r0, [pc, #352]	@ (8006d64 <_printf_i+0x234>)
 8006c02:	230a      	movs	r3, #10
 8006c04:	e011      	b.n	8006c2a <_printf_i+0xfa>
 8006c06:	6821      	ldr	r1, [r4, #0]
 8006c08:	6833      	ldr	r3, [r6, #0]
 8006c0a:	0608      	lsls	r0, r1, #24
 8006c0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c10:	d402      	bmi.n	8006c18 <_printf_i+0xe8>
 8006c12:	0649      	lsls	r1, r1, #25
 8006c14:	bf48      	it	mi
 8006c16:	b2ad      	uxthmi	r5, r5
 8006c18:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c1a:	4852      	ldr	r0, [pc, #328]	@ (8006d64 <_printf_i+0x234>)
 8006c1c:	6033      	str	r3, [r6, #0]
 8006c1e:	bf14      	ite	ne
 8006c20:	230a      	movne	r3, #10
 8006c22:	2308      	moveq	r3, #8
 8006c24:	2100      	movs	r1, #0
 8006c26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c2a:	6866      	ldr	r6, [r4, #4]
 8006c2c:	60a6      	str	r6, [r4, #8]
 8006c2e:	2e00      	cmp	r6, #0
 8006c30:	db05      	blt.n	8006c3e <_printf_i+0x10e>
 8006c32:	6821      	ldr	r1, [r4, #0]
 8006c34:	432e      	orrs	r6, r5
 8006c36:	f021 0104 	bic.w	r1, r1, #4
 8006c3a:	6021      	str	r1, [r4, #0]
 8006c3c:	d04b      	beq.n	8006cd6 <_printf_i+0x1a6>
 8006c3e:	4616      	mov	r6, r2
 8006c40:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c44:	fb03 5711 	mls	r7, r3, r1, r5
 8006c48:	5dc7      	ldrb	r7, [r0, r7]
 8006c4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c4e:	462f      	mov	r7, r5
 8006c50:	42bb      	cmp	r3, r7
 8006c52:	460d      	mov	r5, r1
 8006c54:	d9f4      	bls.n	8006c40 <_printf_i+0x110>
 8006c56:	2b08      	cmp	r3, #8
 8006c58:	d10b      	bne.n	8006c72 <_printf_i+0x142>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	07df      	lsls	r7, r3, #31
 8006c5e:	d508      	bpl.n	8006c72 <_printf_i+0x142>
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	6861      	ldr	r1, [r4, #4]
 8006c64:	4299      	cmp	r1, r3
 8006c66:	bfde      	ittt	le
 8006c68:	2330      	movle	r3, #48	@ 0x30
 8006c6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c72:	1b92      	subs	r2, r2, r6
 8006c74:	6122      	str	r2, [r4, #16]
 8006c76:	f8cd a000 	str.w	sl, [sp]
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	aa03      	add	r2, sp, #12
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4640      	mov	r0, r8
 8006c82:	f7ff fee7 	bl	8006a54 <_printf_common>
 8006c86:	3001      	adds	r0, #1
 8006c88:	d14a      	bne.n	8006d20 <_printf_i+0x1f0>
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8e:	b004      	add	sp, #16
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	f043 0320 	orr.w	r3, r3, #32
 8006c9a:	6023      	str	r3, [r4, #0]
 8006c9c:	4832      	ldr	r0, [pc, #200]	@ (8006d68 <_printf_i+0x238>)
 8006c9e:	2778      	movs	r7, #120	@ 0x78
 8006ca0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	6831      	ldr	r1, [r6, #0]
 8006ca8:	061f      	lsls	r7, r3, #24
 8006caa:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cae:	d402      	bmi.n	8006cb6 <_printf_i+0x186>
 8006cb0:	065f      	lsls	r7, r3, #25
 8006cb2:	bf48      	it	mi
 8006cb4:	b2ad      	uxthmi	r5, r5
 8006cb6:	6031      	str	r1, [r6, #0]
 8006cb8:	07d9      	lsls	r1, r3, #31
 8006cba:	bf44      	itt	mi
 8006cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc0:	6023      	strmi	r3, [r4, #0]
 8006cc2:	b11d      	cbz	r5, 8006ccc <_printf_i+0x19c>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	e7ad      	b.n	8006c24 <_printf_i+0xf4>
 8006cc8:	4826      	ldr	r0, [pc, #152]	@ (8006d64 <_printf_i+0x234>)
 8006cca:	e7e9      	b.n	8006ca0 <_printf_i+0x170>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	f023 0320 	bic.w	r3, r3, #32
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	e7f6      	b.n	8006cc4 <_printf_i+0x194>
 8006cd6:	4616      	mov	r6, r2
 8006cd8:	e7bd      	b.n	8006c56 <_printf_i+0x126>
 8006cda:	6833      	ldr	r3, [r6, #0]
 8006cdc:	6825      	ldr	r5, [r4, #0]
 8006cde:	6961      	ldr	r1, [r4, #20]
 8006ce0:	1d18      	adds	r0, r3, #4
 8006ce2:	6030      	str	r0, [r6, #0]
 8006ce4:	062e      	lsls	r6, r5, #24
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	d501      	bpl.n	8006cee <_printf_i+0x1be>
 8006cea:	6019      	str	r1, [r3, #0]
 8006cec:	e002      	b.n	8006cf4 <_printf_i+0x1c4>
 8006cee:	0668      	lsls	r0, r5, #25
 8006cf0:	d5fb      	bpl.n	8006cea <_printf_i+0x1ba>
 8006cf2:	8019      	strh	r1, [r3, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	6123      	str	r3, [r4, #16]
 8006cf8:	4616      	mov	r6, r2
 8006cfa:	e7bc      	b.n	8006c76 <_printf_i+0x146>
 8006cfc:	6833      	ldr	r3, [r6, #0]
 8006cfe:	1d1a      	adds	r2, r3, #4
 8006d00:	6032      	str	r2, [r6, #0]
 8006d02:	681e      	ldr	r6, [r3, #0]
 8006d04:	6862      	ldr	r2, [r4, #4]
 8006d06:	2100      	movs	r1, #0
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7f9 fa61 	bl	80001d0 <memchr>
 8006d0e:	b108      	cbz	r0, 8006d14 <_printf_i+0x1e4>
 8006d10:	1b80      	subs	r0, r0, r6
 8006d12:	6060      	str	r0, [r4, #4]
 8006d14:	6863      	ldr	r3, [r4, #4]
 8006d16:	6123      	str	r3, [r4, #16]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d1e:	e7aa      	b.n	8006c76 <_printf_i+0x146>
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	4632      	mov	r2, r6
 8006d24:	4649      	mov	r1, r9
 8006d26:	4640      	mov	r0, r8
 8006d28:	47d0      	blx	sl
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d0ad      	beq.n	8006c8a <_printf_i+0x15a>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	079b      	lsls	r3, r3, #30
 8006d32:	d413      	bmi.n	8006d5c <_printf_i+0x22c>
 8006d34:	68e0      	ldr	r0, [r4, #12]
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	4298      	cmp	r0, r3
 8006d3a:	bfb8      	it	lt
 8006d3c:	4618      	movlt	r0, r3
 8006d3e:	e7a6      	b.n	8006c8e <_printf_i+0x15e>
 8006d40:	2301      	movs	r3, #1
 8006d42:	4632      	mov	r2, r6
 8006d44:	4649      	mov	r1, r9
 8006d46:	4640      	mov	r0, r8
 8006d48:	47d0      	blx	sl
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	d09d      	beq.n	8006c8a <_printf_i+0x15a>
 8006d4e:	3501      	adds	r5, #1
 8006d50:	68e3      	ldr	r3, [r4, #12]
 8006d52:	9903      	ldr	r1, [sp, #12]
 8006d54:	1a5b      	subs	r3, r3, r1
 8006d56:	42ab      	cmp	r3, r5
 8006d58:	dcf2      	bgt.n	8006d40 <_printf_i+0x210>
 8006d5a:	e7eb      	b.n	8006d34 <_printf_i+0x204>
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	f104 0619 	add.w	r6, r4, #25
 8006d62:	e7f5      	b.n	8006d50 <_printf_i+0x220>
 8006d64:	08009a1e 	.word	0x08009a1e
 8006d68:	08009a2f 	.word	0x08009a2f

08006d6c <std>:
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	b510      	push	{r4, lr}
 8006d70:	4604      	mov	r4, r0
 8006d72:	e9c0 3300 	strd	r3, r3, [r0]
 8006d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d7a:	6083      	str	r3, [r0, #8]
 8006d7c:	8181      	strh	r1, [r0, #12]
 8006d7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d80:	81c2      	strh	r2, [r0, #14]
 8006d82:	6183      	str	r3, [r0, #24]
 8006d84:	4619      	mov	r1, r3
 8006d86:	2208      	movs	r2, #8
 8006d88:	305c      	adds	r0, #92	@ 0x5c
 8006d8a:	f000 f916 	bl	8006fba <memset>
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc4 <std+0x58>)
 8006d90:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d92:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc8 <std+0x5c>)
 8006d94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d96:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <std+0x60>)
 8006d98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd0 <std+0x64>)
 8006d9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd4 <std+0x68>)
 8006da0:	6224      	str	r4, [r4, #32]
 8006da2:	429c      	cmp	r4, r3
 8006da4:	d006      	beq.n	8006db4 <std+0x48>
 8006da6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006daa:	4294      	cmp	r4, r2
 8006dac:	d002      	beq.n	8006db4 <std+0x48>
 8006dae:	33d0      	adds	r3, #208	@ 0xd0
 8006db0:	429c      	cmp	r4, r3
 8006db2:	d105      	bne.n	8006dc0 <std+0x54>
 8006db4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dbc:	f000 b97a 	b.w	80070b4 <__retarget_lock_init_recursive>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	bf00      	nop
 8006dc4:	08006f35 	.word	0x08006f35
 8006dc8:	08006f57 	.word	0x08006f57
 8006dcc:	08006f8f 	.word	0x08006f8f
 8006dd0:	08006fb3 	.word	0x08006fb3
 8006dd4:	200003fc 	.word	0x200003fc

08006dd8 <stdio_exit_handler>:
 8006dd8:	4a02      	ldr	r2, [pc, #8]	@ (8006de4 <stdio_exit_handler+0xc>)
 8006dda:	4903      	ldr	r1, [pc, #12]	@ (8006de8 <stdio_exit_handler+0x10>)
 8006ddc:	4803      	ldr	r0, [pc, #12]	@ (8006dec <stdio_exit_handler+0x14>)
 8006dde:	f000 b869 	b.w	8006eb4 <_fwalk_sglue>
 8006de2:	bf00      	nop
 8006de4:	20000010 	.word	0x20000010
 8006de8:	08008a1d 	.word	0x08008a1d
 8006dec:	20000020 	.word	0x20000020

08006df0 <cleanup_stdio>:
 8006df0:	6841      	ldr	r1, [r0, #4]
 8006df2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <cleanup_stdio+0x34>)
 8006df4:	4299      	cmp	r1, r3
 8006df6:	b510      	push	{r4, lr}
 8006df8:	4604      	mov	r4, r0
 8006dfa:	d001      	beq.n	8006e00 <cleanup_stdio+0x10>
 8006dfc:	f001 fe0e 	bl	8008a1c <_fflush_r>
 8006e00:	68a1      	ldr	r1, [r4, #8]
 8006e02:	4b09      	ldr	r3, [pc, #36]	@ (8006e28 <cleanup_stdio+0x38>)
 8006e04:	4299      	cmp	r1, r3
 8006e06:	d002      	beq.n	8006e0e <cleanup_stdio+0x1e>
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f001 fe07 	bl	8008a1c <_fflush_r>
 8006e0e:	68e1      	ldr	r1, [r4, #12]
 8006e10:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <cleanup_stdio+0x3c>)
 8006e12:	4299      	cmp	r1, r3
 8006e14:	d004      	beq.n	8006e20 <cleanup_stdio+0x30>
 8006e16:	4620      	mov	r0, r4
 8006e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e1c:	f001 bdfe 	b.w	8008a1c <_fflush_r>
 8006e20:	bd10      	pop	{r4, pc}
 8006e22:	bf00      	nop
 8006e24:	200003fc 	.word	0x200003fc
 8006e28:	20000464 	.word	0x20000464
 8006e2c:	200004cc 	.word	0x200004cc

08006e30 <global_stdio_init.part.0>:
 8006e30:	b510      	push	{r4, lr}
 8006e32:	4b0b      	ldr	r3, [pc, #44]	@ (8006e60 <global_stdio_init.part.0+0x30>)
 8006e34:	4c0b      	ldr	r4, [pc, #44]	@ (8006e64 <global_stdio_init.part.0+0x34>)
 8006e36:	4a0c      	ldr	r2, [pc, #48]	@ (8006e68 <global_stdio_init.part.0+0x38>)
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2104      	movs	r1, #4
 8006e40:	f7ff ff94 	bl	8006d6c <std>
 8006e44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e48:	2201      	movs	r2, #1
 8006e4a:	2109      	movs	r1, #9
 8006e4c:	f7ff ff8e 	bl	8006d6c <std>
 8006e50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e54:	2202      	movs	r2, #2
 8006e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e5a:	2112      	movs	r1, #18
 8006e5c:	f7ff bf86 	b.w	8006d6c <std>
 8006e60:	20000534 	.word	0x20000534
 8006e64:	200003fc 	.word	0x200003fc
 8006e68:	08006dd9 	.word	0x08006dd9

08006e6c <__sfp_lock_acquire>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	@ (8006e74 <__sfp_lock_acquire+0x8>)
 8006e6e:	f000 b922 	b.w	80070b6 <__retarget_lock_acquire_recursive>
 8006e72:	bf00      	nop
 8006e74:	2000053d 	.word	0x2000053d

08006e78 <__sfp_lock_release>:
 8006e78:	4801      	ldr	r0, [pc, #4]	@ (8006e80 <__sfp_lock_release+0x8>)
 8006e7a:	f000 b91d 	b.w	80070b8 <__retarget_lock_release_recursive>
 8006e7e:	bf00      	nop
 8006e80:	2000053d 	.word	0x2000053d

08006e84 <__sinit>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	4604      	mov	r4, r0
 8006e88:	f7ff fff0 	bl	8006e6c <__sfp_lock_acquire>
 8006e8c:	6a23      	ldr	r3, [r4, #32]
 8006e8e:	b11b      	cbz	r3, 8006e98 <__sinit+0x14>
 8006e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e94:	f7ff bff0 	b.w	8006e78 <__sfp_lock_release>
 8006e98:	4b04      	ldr	r3, [pc, #16]	@ (8006eac <__sinit+0x28>)
 8006e9a:	6223      	str	r3, [r4, #32]
 8006e9c:	4b04      	ldr	r3, [pc, #16]	@ (8006eb0 <__sinit+0x2c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1f5      	bne.n	8006e90 <__sinit+0xc>
 8006ea4:	f7ff ffc4 	bl	8006e30 <global_stdio_init.part.0>
 8006ea8:	e7f2      	b.n	8006e90 <__sinit+0xc>
 8006eaa:	bf00      	nop
 8006eac:	08006df1 	.word	0x08006df1
 8006eb0:	20000534 	.word	0x20000534

08006eb4 <_fwalk_sglue>:
 8006eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb8:	4607      	mov	r7, r0
 8006eba:	4688      	mov	r8, r1
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	2600      	movs	r6, #0
 8006ec0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ec4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ec8:	d505      	bpl.n	8006ed6 <_fwalk_sglue+0x22>
 8006eca:	6824      	ldr	r4, [r4, #0]
 8006ecc:	2c00      	cmp	r4, #0
 8006ece:	d1f7      	bne.n	8006ec0 <_fwalk_sglue+0xc>
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ed6:	89ab      	ldrh	r3, [r5, #12]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d907      	bls.n	8006eec <_fwalk_sglue+0x38>
 8006edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	d003      	beq.n	8006eec <_fwalk_sglue+0x38>
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	47c0      	blx	r8
 8006eea:	4306      	orrs	r6, r0
 8006eec:	3568      	adds	r5, #104	@ 0x68
 8006eee:	e7e9      	b.n	8006ec4 <_fwalk_sglue+0x10>

08006ef0 <siprintf>:
 8006ef0:	b40e      	push	{r1, r2, r3}
 8006ef2:	b510      	push	{r4, lr}
 8006ef4:	b09d      	sub	sp, #116	@ 0x74
 8006ef6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006ef8:	9002      	str	r0, [sp, #8]
 8006efa:	9006      	str	r0, [sp, #24]
 8006efc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f00:	480a      	ldr	r0, [pc, #40]	@ (8006f2c <siprintf+0x3c>)
 8006f02:	9107      	str	r1, [sp, #28]
 8006f04:	9104      	str	r1, [sp, #16]
 8006f06:	490a      	ldr	r1, [pc, #40]	@ (8006f30 <siprintf+0x40>)
 8006f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f0c:	9105      	str	r1, [sp, #20]
 8006f0e:	2400      	movs	r4, #0
 8006f10:	a902      	add	r1, sp, #8
 8006f12:	6800      	ldr	r0, [r0, #0]
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006f18:	f001 fc00 	bl	800871c <_svfiprintf_r>
 8006f1c:	9b02      	ldr	r3, [sp, #8]
 8006f1e:	701c      	strb	r4, [r3, #0]
 8006f20:	b01d      	add	sp, #116	@ 0x74
 8006f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f26:	b003      	add	sp, #12
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	2000001c 	.word	0x2000001c
 8006f30:	ffff0208 	.word	0xffff0208

08006f34 <__sread>:
 8006f34:	b510      	push	{r4, lr}
 8006f36:	460c      	mov	r4, r1
 8006f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f3c:	f000 f86c 	bl	8007018 <_read_r>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	bfab      	itete	ge
 8006f44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f46:	89a3      	ldrhlt	r3, [r4, #12]
 8006f48:	181b      	addge	r3, r3, r0
 8006f4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f4e:	bfac      	ite	ge
 8006f50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f52:	81a3      	strhlt	r3, [r4, #12]
 8006f54:	bd10      	pop	{r4, pc}

08006f56 <__swrite>:
 8006f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5a:	461f      	mov	r7, r3
 8006f5c:	898b      	ldrh	r3, [r1, #12]
 8006f5e:	05db      	lsls	r3, r3, #23
 8006f60:	4605      	mov	r5, r0
 8006f62:	460c      	mov	r4, r1
 8006f64:	4616      	mov	r6, r2
 8006f66:	d505      	bpl.n	8006f74 <__swrite+0x1e>
 8006f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f000 f840 	bl	8006ff4 <_lseek_r>
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f7e:	81a3      	strh	r3, [r4, #12]
 8006f80:	4632      	mov	r2, r6
 8006f82:	463b      	mov	r3, r7
 8006f84:	4628      	mov	r0, r5
 8006f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8a:	f000 b857 	b.w	800703c <_write_r>

08006f8e <__sseek>:
 8006f8e:	b510      	push	{r4, lr}
 8006f90:	460c      	mov	r4, r1
 8006f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f96:	f000 f82d 	bl	8006ff4 <_lseek_r>
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	bf15      	itete	ne
 8006fa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006faa:	81a3      	strheq	r3, [r4, #12]
 8006fac:	bf18      	it	ne
 8006fae:	81a3      	strhne	r3, [r4, #12]
 8006fb0:	bd10      	pop	{r4, pc}

08006fb2 <__sclose>:
 8006fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb6:	f000 b80d 	b.w	8006fd4 <_close_r>

08006fba <memset>:
 8006fba:	4402      	add	r2, r0
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d100      	bne.n	8006fc4 <memset+0xa>
 8006fc2:	4770      	bx	lr
 8006fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8006fc8:	e7f9      	b.n	8006fbe <memset+0x4>
	...

08006fcc <_localeconv_r>:
 8006fcc:	4800      	ldr	r0, [pc, #0]	@ (8006fd0 <_localeconv_r+0x4>)
 8006fce:	4770      	bx	lr
 8006fd0:	2000015c 	.word	0x2000015c

08006fd4 <_close_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4d06      	ldr	r5, [pc, #24]	@ (8006ff0 <_close_r+0x1c>)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4604      	mov	r4, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	602b      	str	r3, [r5, #0]
 8006fe0:	f7fa ff14 	bl	8001e0c <_close>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_close_r+0x1a>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_close_r+0x1a>
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	20000538 	.word	0x20000538

08006ff4 <_lseek_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d07      	ldr	r5, [pc, #28]	@ (8007014 <_lseek_r+0x20>)
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	4608      	mov	r0, r1
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	602a      	str	r2, [r5, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	f7fa ff29 	bl	8001e5a <_lseek>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_lseek_r+0x1e>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_lseek_r+0x1e>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	20000538 	.word	0x20000538

08007018 <_read_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d07      	ldr	r5, [pc, #28]	@ (8007038 <_read_r+0x20>)
 800701c:	4604      	mov	r4, r0
 800701e:	4608      	mov	r0, r1
 8007020:	4611      	mov	r1, r2
 8007022:	2200      	movs	r2, #0
 8007024:	602a      	str	r2, [r5, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	f7fa feb7 	bl	8001d9a <_read>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d102      	bne.n	8007036 <_read_r+0x1e>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	b103      	cbz	r3, 8007036 <_read_r+0x1e>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	20000538 	.word	0x20000538

0800703c <_write_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d07      	ldr	r5, [pc, #28]	@ (800705c <_write_r+0x20>)
 8007040:	4604      	mov	r4, r0
 8007042:	4608      	mov	r0, r1
 8007044:	4611      	mov	r1, r2
 8007046:	2200      	movs	r2, #0
 8007048:	602a      	str	r2, [r5, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	f7fa fec2 	bl	8001dd4 <_write>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_write_r+0x1e>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	b103      	cbz	r3, 800705a <_write_r+0x1e>
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	20000538 	.word	0x20000538

08007060 <__errno>:
 8007060:	4b01      	ldr	r3, [pc, #4]	@ (8007068 <__errno+0x8>)
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	2000001c 	.word	0x2000001c

0800706c <__libc_init_array>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4d0d      	ldr	r5, [pc, #52]	@ (80070a4 <__libc_init_array+0x38>)
 8007070:	4c0d      	ldr	r4, [pc, #52]	@ (80070a8 <__libc_init_array+0x3c>)
 8007072:	1b64      	subs	r4, r4, r5
 8007074:	10a4      	asrs	r4, r4, #2
 8007076:	2600      	movs	r6, #0
 8007078:	42a6      	cmp	r6, r4
 800707a:	d109      	bne.n	8007090 <__libc_init_array+0x24>
 800707c:	4d0b      	ldr	r5, [pc, #44]	@ (80070ac <__libc_init_array+0x40>)
 800707e:	4c0c      	ldr	r4, [pc, #48]	@ (80070b0 <__libc_init_array+0x44>)
 8007080:	f002 f86a 	bl	8009158 <_init>
 8007084:	1b64      	subs	r4, r4, r5
 8007086:	10a4      	asrs	r4, r4, #2
 8007088:	2600      	movs	r6, #0
 800708a:	42a6      	cmp	r6, r4
 800708c:	d105      	bne.n	800709a <__libc_init_array+0x2e>
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	f855 3b04 	ldr.w	r3, [r5], #4
 8007094:	4798      	blx	r3
 8007096:	3601      	adds	r6, #1
 8007098:	e7ee      	b.n	8007078 <__libc_init_array+0xc>
 800709a:	f855 3b04 	ldr.w	r3, [r5], #4
 800709e:	4798      	blx	r3
 80070a0:	3601      	adds	r6, #1
 80070a2:	e7f2      	b.n	800708a <__libc_init_array+0x1e>
 80070a4:	08009d8c 	.word	0x08009d8c
 80070a8:	08009d8c 	.word	0x08009d8c
 80070ac:	08009d8c 	.word	0x08009d8c
 80070b0:	08009d90 	.word	0x08009d90

080070b4 <__retarget_lock_init_recursive>:
 80070b4:	4770      	bx	lr

080070b6 <__retarget_lock_acquire_recursive>:
 80070b6:	4770      	bx	lr

080070b8 <__retarget_lock_release_recursive>:
 80070b8:	4770      	bx	lr

080070ba <quorem>:
 80070ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070be:	6903      	ldr	r3, [r0, #16]
 80070c0:	690c      	ldr	r4, [r1, #16]
 80070c2:	42a3      	cmp	r3, r4
 80070c4:	4607      	mov	r7, r0
 80070c6:	db7e      	blt.n	80071c6 <quorem+0x10c>
 80070c8:	3c01      	subs	r4, #1
 80070ca:	f101 0814 	add.w	r8, r1, #20
 80070ce:	00a3      	lsls	r3, r4, #2
 80070d0:	f100 0514 	add.w	r5, r0, #20
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070e4:	3301      	adds	r3, #1
 80070e6:	429a      	cmp	r2, r3
 80070e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80070f0:	d32e      	bcc.n	8007150 <quorem+0x96>
 80070f2:	f04f 0a00 	mov.w	sl, #0
 80070f6:	46c4      	mov	ip, r8
 80070f8:	46ae      	mov	lr, r5
 80070fa:	46d3      	mov	fp, sl
 80070fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007100:	b298      	uxth	r0, r3
 8007102:	fb06 a000 	mla	r0, r6, r0, sl
 8007106:	0c02      	lsrs	r2, r0, #16
 8007108:	0c1b      	lsrs	r3, r3, #16
 800710a:	fb06 2303 	mla	r3, r6, r3, r2
 800710e:	f8de 2000 	ldr.w	r2, [lr]
 8007112:	b280      	uxth	r0, r0
 8007114:	b292      	uxth	r2, r2
 8007116:	1a12      	subs	r2, r2, r0
 8007118:	445a      	add	r2, fp
 800711a:	f8de 0000 	ldr.w	r0, [lr]
 800711e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007122:	b29b      	uxth	r3, r3
 8007124:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007128:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800712c:	b292      	uxth	r2, r2
 800712e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007132:	45e1      	cmp	r9, ip
 8007134:	f84e 2b04 	str.w	r2, [lr], #4
 8007138:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800713c:	d2de      	bcs.n	80070fc <quorem+0x42>
 800713e:	9b00      	ldr	r3, [sp, #0]
 8007140:	58eb      	ldr	r3, [r5, r3]
 8007142:	b92b      	cbnz	r3, 8007150 <quorem+0x96>
 8007144:	9b01      	ldr	r3, [sp, #4]
 8007146:	3b04      	subs	r3, #4
 8007148:	429d      	cmp	r5, r3
 800714a:	461a      	mov	r2, r3
 800714c:	d32f      	bcc.n	80071ae <quorem+0xf4>
 800714e:	613c      	str	r4, [r7, #16]
 8007150:	4638      	mov	r0, r7
 8007152:	f001 f97f 	bl	8008454 <__mcmp>
 8007156:	2800      	cmp	r0, #0
 8007158:	db25      	blt.n	80071a6 <quorem+0xec>
 800715a:	4629      	mov	r1, r5
 800715c:	2000      	movs	r0, #0
 800715e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007162:	f8d1 c000 	ldr.w	ip, [r1]
 8007166:	fa1f fe82 	uxth.w	lr, r2
 800716a:	fa1f f38c 	uxth.w	r3, ip
 800716e:	eba3 030e 	sub.w	r3, r3, lr
 8007172:	4403      	add	r3, r0
 8007174:	0c12      	lsrs	r2, r2, #16
 8007176:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800717a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800717e:	b29b      	uxth	r3, r3
 8007180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007184:	45c1      	cmp	r9, r8
 8007186:	f841 3b04 	str.w	r3, [r1], #4
 800718a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800718e:	d2e6      	bcs.n	800715e <quorem+0xa4>
 8007190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007194:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007198:	b922      	cbnz	r2, 80071a4 <quorem+0xea>
 800719a:	3b04      	subs	r3, #4
 800719c:	429d      	cmp	r5, r3
 800719e:	461a      	mov	r2, r3
 80071a0:	d30b      	bcc.n	80071ba <quorem+0x100>
 80071a2:	613c      	str	r4, [r7, #16]
 80071a4:	3601      	adds	r6, #1
 80071a6:	4630      	mov	r0, r6
 80071a8:	b003      	add	sp, #12
 80071aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	3b04      	subs	r3, #4
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	d1cb      	bne.n	800714e <quorem+0x94>
 80071b6:	3c01      	subs	r4, #1
 80071b8:	e7c6      	b.n	8007148 <quorem+0x8e>
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	3b04      	subs	r3, #4
 80071be:	2a00      	cmp	r2, #0
 80071c0:	d1ef      	bne.n	80071a2 <quorem+0xe8>
 80071c2:	3c01      	subs	r4, #1
 80071c4:	e7ea      	b.n	800719c <quorem+0xe2>
 80071c6:	2000      	movs	r0, #0
 80071c8:	e7ee      	b.n	80071a8 <quorem+0xee>
 80071ca:	0000      	movs	r0, r0
 80071cc:	0000      	movs	r0, r0
	...

080071d0 <_dtoa_r>:
 80071d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	69c7      	ldr	r7, [r0, #28]
 80071d6:	b097      	sub	sp, #92	@ 0x5c
 80071d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80071dc:	ec55 4b10 	vmov	r4, r5, d0
 80071e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80071e2:	9107      	str	r1, [sp, #28]
 80071e4:	4681      	mov	r9, r0
 80071e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80071e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80071ea:	b97f      	cbnz	r7, 800720c <_dtoa_r+0x3c>
 80071ec:	2010      	movs	r0, #16
 80071ee:	f000 fe09 	bl	8007e04 <malloc>
 80071f2:	4602      	mov	r2, r0
 80071f4:	f8c9 001c 	str.w	r0, [r9, #28]
 80071f8:	b920      	cbnz	r0, 8007204 <_dtoa_r+0x34>
 80071fa:	4ba9      	ldr	r3, [pc, #676]	@ (80074a0 <_dtoa_r+0x2d0>)
 80071fc:	21ef      	movs	r1, #239	@ 0xef
 80071fe:	48a9      	ldr	r0, [pc, #676]	@ (80074a4 <_dtoa_r+0x2d4>)
 8007200:	f001 fc6c 	bl	8008adc <__assert_func>
 8007204:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007208:	6007      	str	r7, [r0, #0]
 800720a:	60c7      	str	r7, [r0, #12]
 800720c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007210:	6819      	ldr	r1, [r3, #0]
 8007212:	b159      	cbz	r1, 800722c <_dtoa_r+0x5c>
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	604a      	str	r2, [r1, #4]
 8007218:	2301      	movs	r3, #1
 800721a:	4093      	lsls	r3, r2
 800721c:	608b      	str	r3, [r1, #8]
 800721e:	4648      	mov	r0, r9
 8007220:	f000 fee6 	bl	8007ff0 <_Bfree>
 8007224:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	1e2b      	subs	r3, r5, #0
 800722e:	bfb9      	ittee	lt
 8007230:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007234:	9305      	strlt	r3, [sp, #20]
 8007236:	2300      	movge	r3, #0
 8007238:	6033      	strge	r3, [r6, #0]
 800723a:	9f05      	ldr	r7, [sp, #20]
 800723c:	4b9a      	ldr	r3, [pc, #616]	@ (80074a8 <_dtoa_r+0x2d8>)
 800723e:	bfbc      	itt	lt
 8007240:	2201      	movlt	r2, #1
 8007242:	6032      	strlt	r2, [r6, #0]
 8007244:	43bb      	bics	r3, r7
 8007246:	d112      	bne.n	800726e <_dtoa_r+0x9e>
 8007248:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800724a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007254:	4323      	orrs	r3, r4
 8007256:	f000 855a 	beq.w	8007d0e <_dtoa_r+0xb3e>
 800725a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800725c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80074bc <_dtoa_r+0x2ec>
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 855c 	beq.w	8007d1e <_dtoa_r+0xb4e>
 8007266:	f10a 0303 	add.w	r3, sl, #3
 800726a:	f000 bd56 	b.w	8007d1a <_dtoa_r+0xb4a>
 800726e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007272:	2200      	movs	r2, #0
 8007274:	ec51 0b17 	vmov	r0, r1, d7
 8007278:	2300      	movs	r3, #0
 800727a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800727e:	f7f9 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8007282:	4680      	mov	r8, r0
 8007284:	b158      	cbz	r0, 800729e <_dtoa_r+0xce>
 8007286:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007288:	2301      	movs	r3, #1
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800728e:	b113      	cbz	r3, 8007296 <_dtoa_r+0xc6>
 8007290:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007292:	4b86      	ldr	r3, [pc, #536]	@ (80074ac <_dtoa_r+0x2dc>)
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80074c0 <_dtoa_r+0x2f0>
 800729a:	f000 bd40 	b.w	8007d1e <_dtoa_r+0xb4e>
 800729e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80072a2:	aa14      	add	r2, sp, #80	@ 0x50
 80072a4:	a915      	add	r1, sp, #84	@ 0x54
 80072a6:	4648      	mov	r0, r9
 80072a8:	f001 f984 	bl	80085b4 <__d2b>
 80072ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80072b0:	9002      	str	r0, [sp, #8]
 80072b2:	2e00      	cmp	r6, #0
 80072b4:	d078      	beq.n	80073a8 <_dtoa_r+0x1d8>
 80072b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072b8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80072bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80072c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072d0:	4619      	mov	r1, r3
 80072d2:	2200      	movs	r2, #0
 80072d4:	4b76      	ldr	r3, [pc, #472]	@ (80074b0 <_dtoa_r+0x2e0>)
 80072d6:	f7f8 ffd7 	bl	8000288 <__aeabi_dsub>
 80072da:	a36b      	add	r3, pc, #428	@ (adr r3, 8007488 <_dtoa_r+0x2b8>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f7f9 f98a 	bl	80005f8 <__aeabi_dmul>
 80072e4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007490 <_dtoa_r+0x2c0>)
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	f7f8 ffcf 	bl	800028c <__adddf3>
 80072ee:	4604      	mov	r4, r0
 80072f0:	4630      	mov	r0, r6
 80072f2:	460d      	mov	r5, r1
 80072f4:	f7f9 f916 	bl	8000524 <__aeabi_i2d>
 80072f8:	a367      	add	r3, pc, #412	@ (adr r3, 8007498 <_dtoa_r+0x2c8>)
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f7f9 f97b 	bl	80005f8 <__aeabi_dmul>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4620      	mov	r0, r4
 8007308:	4629      	mov	r1, r5
 800730a:	f7f8 ffbf 	bl	800028c <__adddf3>
 800730e:	4604      	mov	r4, r0
 8007310:	460d      	mov	r5, r1
 8007312:	f7f9 fc21 	bl	8000b58 <__aeabi_d2iz>
 8007316:	2200      	movs	r2, #0
 8007318:	4607      	mov	r7, r0
 800731a:	2300      	movs	r3, #0
 800731c:	4620      	mov	r0, r4
 800731e:	4629      	mov	r1, r5
 8007320:	f7f9 fbdc 	bl	8000adc <__aeabi_dcmplt>
 8007324:	b140      	cbz	r0, 8007338 <_dtoa_r+0x168>
 8007326:	4638      	mov	r0, r7
 8007328:	f7f9 f8fc 	bl	8000524 <__aeabi_i2d>
 800732c:	4622      	mov	r2, r4
 800732e:	462b      	mov	r3, r5
 8007330:	f7f9 fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 8007334:	b900      	cbnz	r0, 8007338 <_dtoa_r+0x168>
 8007336:	3f01      	subs	r7, #1
 8007338:	2f16      	cmp	r7, #22
 800733a:	d852      	bhi.n	80073e2 <_dtoa_r+0x212>
 800733c:	4b5d      	ldr	r3, [pc, #372]	@ (80074b4 <_dtoa_r+0x2e4>)
 800733e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800734a:	f7f9 fbc7 	bl	8000adc <__aeabi_dcmplt>
 800734e:	2800      	cmp	r0, #0
 8007350:	d049      	beq.n	80073e6 <_dtoa_r+0x216>
 8007352:	3f01      	subs	r7, #1
 8007354:	2300      	movs	r3, #0
 8007356:	9310      	str	r3, [sp, #64]	@ 0x40
 8007358:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800735a:	1b9b      	subs	r3, r3, r6
 800735c:	1e5a      	subs	r2, r3, #1
 800735e:	bf45      	ittet	mi
 8007360:	f1c3 0301 	rsbmi	r3, r3, #1
 8007364:	9300      	strmi	r3, [sp, #0]
 8007366:	2300      	movpl	r3, #0
 8007368:	2300      	movmi	r3, #0
 800736a:	9206      	str	r2, [sp, #24]
 800736c:	bf54      	ite	pl
 800736e:	9300      	strpl	r3, [sp, #0]
 8007370:	9306      	strmi	r3, [sp, #24]
 8007372:	2f00      	cmp	r7, #0
 8007374:	db39      	blt.n	80073ea <_dtoa_r+0x21a>
 8007376:	9b06      	ldr	r3, [sp, #24]
 8007378:	970d      	str	r7, [sp, #52]	@ 0x34
 800737a:	443b      	add	r3, r7
 800737c:	9306      	str	r3, [sp, #24]
 800737e:	2300      	movs	r3, #0
 8007380:	9308      	str	r3, [sp, #32]
 8007382:	9b07      	ldr	r3, [sp, #28]
 8007384:	2b09      	cmp	r3, #9
 8007386:	d863      	bhi.n	8007450 <_dtoa_r+0x280>
 8007388:	2b05      	cmp	r3, #5
 800738a:	bfc4      	itt	gt
 800738c:	3b04      	subgt	r3, #4
 800738e:	9307      	strgt	r3, [sp, #28]
 8007390:	9b07      	ldr	r3, [sp, #28]
 8007392:	f1a3 0302 	sub.w	r3, r3, #2
 8007396:	bfcc      	ite	gt
 8007398:	2400      	movgt	r4, #0
 800739a:	2401      	movle	r4, #1
 800739c:	2b03      	cmp	r3, #3
 800739e:	d863      	bhi.n	8007468 <_dtoa_r+0x298>
 80073a0:	e8df f003 	tbb	[pc, r3]
 80073a4:	2b375452 	.word	0x2b375452
 80073a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80073ac:	441e      	add	r6, r3
 80073ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	bfc1      	itttt	gt
 80073b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073ba:	409f      	lslgt	r7, r3
 80073bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073c4:	bfd6      	itet	le
 80073c6:	f1c3 0320 	rsble	r3, r3, #32
 80073ca:	ea47 0003 	orrgt.w	r0, r7, r3
 80073ce:	fa04 f003 	lslle.w	r0, r4, r3
 80073d2:	f7f9 f897 	bl	8000504 <__aeabi_ui2d>
 80073d6:	2201      	movs	r2, #1
 80073d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073dc:	3e01      	subs	r6, #1
 80073de:	9212      	str	r2, [sp, #72]	@ 0x48
 80073e0:	e776      	b.n	80072d0 <_dtoa_r+0x100>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e7b7      	b.n	8007356 <_dtoa_r+0x186>
 80073e6:	9010      	str	r0, [sp, #64]	@ 0x40
 80073e8:	e7b6      	b.n	8007358 <_dtoa_r+0x188>
 80073ea:	9b00      	ldr	r3, [sp, #0]
 80073ec:	1bdb      	subs	r3, r3, r7
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	427b      	negs	r3, r7
 80073f2:	9308      	str	r3, [sp, #32]
 80073f4:	2300      	movs	r3, #0
 80073f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80073f8:	e7c3      	b.n	8007382 <_dtoa_r+0x1b2>
 80073fa:	2301      	movs	r3, #1
 80073fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007400:	eb07 0b03 	add.w	fp, r7, r3
 8007404:	f10b 0301 	add.w	r3, fp, #1
 8007408:	2b01      	cmp	r3, #1
 800740a:	9303      	str	r3, [sp, #12]
 800740c:	bfb8      	it	lt
 800740e:	2301      	movlt	r3, #1
 8007410:	e006      	b.n	8007420 <_dtoa_r+0x250>
 8007412:	2301      	movs	r3, #1
 8007414:	9309      	str	r3, [sp, #36]	@ 0x24
 8007416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007418:	2b00      	cmp	r3, #0
 800741a:	dd28      	ble.n	800746e <_dtoa_r+0x29e>
 800741c:	469b      	mov	fp, r3
 800741e:	9303      	str	r3, [sp, #12]
 8007420:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007424:	2100      	movs	r1, #0
 8007426:	2204      	movs	r2, #4
 8007428:	f102 0514 	add.w	r5, r2, #20
 800742c:	429d      	cmp	r5, r3
 800742e:	d926      	bls.n	800747e <_dtoa_r+0x2ae>
 8007430:	6041      	str	r1, [r0, #4]
 8007432:	4648      	mov	r0, r9
 8007434:	f000 fd9c 	bl	8007f70 <_Balloc>
 8007438:	4682      	mov	sl, r0
 800743a:	2800      	cmp	r0, #0
 800743c:	d142      	bne.n	80074c4 <_dtoa_r+0x2f4>
 800743e:	4b1e      	ldr	r3, [pc, #120]	@ (80074b8 <_dtoa_r+0x2e8>)
 8007440:	4602      	mov	r2, r0
 8007442:	f240 11af 	movw	r1, #431	@ 0x1af
 8007446:	e6da      	b.n	80071fe <_dtoa_r+0x2e>
 8007448:	2300      	movs	r3, #0
 800744a:	e7e3      	b.n	8007414 <_dtoa_r+0x244>
 800744c:	2300      	movs	r3, #0
 800744e:	e7d5      	b.n	80073fc <_dtoa_r+0x22c>
 8007450:	2401      	movs	r4, #1
 8007452:	2300      	movs	r3, #0
 8007454:	9307      	str	r3, [sp, #28]
 8007456:	9409      	str	r4, [sp, #36]	@ 0x24
 8007458:	f04f 3bff 	mov.w	fp, #4294967295
 800745c:	2200      	movs	r2, #0
 800745e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007462:	2312      	movs	r3, #18
 8007464:	920c      	str	r2, [sp, #48]	@ 0x30
 8007466:	e7db      	b.n	8007420 <_dtoa_r+0x250>
 8007468:	2301      	movs	r3, #1
 800746a:	9309      	str	r3, [sp, #36]	@ 0x24
 800746c:	e7f4      	b.n	8007458 <_dtoa_r+0x288>
 800746e:	f04f 0b01 	mov.w	fp, #1
 8007472:	f8cd b00c 	str.w	fp, [sp, #12]
 8007476:	465b      	mov	r3, fp
 8007478:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800747c:	e7d0      	b.n	8007420 <_dtoa_r+0x250>
 800747e:	3101      	adds	r1, #1
 8007480:	0052      	lsls	r2, r2, #1
 8007482:	e7d1      	b.n	8007428 <_dtoa_r+0x258>
 8007484:	f3af 8000 	nop.w
 8007488:	636f4361 	.word	0x636f4361
 800748c:	3fd287a7 	.word	0x3fd287a7
 8007490:	8b60c8b3 	.word	0x8b60c8b3
 8007494:	3fc68a28 	.word	0x3fc68a28
 8007498:	509f79fb 	.word	0x509f79fb
 800749c:	3fd34413 	.word	0x3fd34413
 80074a0:	08009a4d 	.word	0x08009a4d
 80074a4:	08009a64 	.word	0x08009a64
 80074a8:	7ff00000 	.word	0x7ff00000
 80074ac:	08009a1d 	.word	0x08009a1d
 80074b0:	3ff80000 	.word	0x3ff80000
 80074b4:	08009bb8 	.word	0x08009bb8
 80074b8:	08009abc 	.word	0x08009abc
 80074bc:	08009a49 	.word	0x08009a49
 80074c0:	08009a1c 	.word	0x08009a1c
 80074c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80074c8:	6018      	str	r0, [r3, #0]
 80074ca:	9b03      	ldr	r3, [sp, #12]
 80074cc:	2b0e      	cmp	r3, #14
 80074ce:	f200 80a1 	bhi.w	8007614 <_dtoa_r+0x444>
 80074d2:	2c00      	cmp	r4, #0
 80074d4:	f000 809e 	beq.w	8007614 <_dtoa_r+0x444>
 80074d8:	2f00      	cmp	r7, #0
 80074da:	dd33      	ble.n	8007544 <_dtoa_r+0x374>
 80074dc:	4b9c      	ldr	r3, [pc, #624]	@ (8007750 <_dtoa_r+0x580>)
 80074de:	f007 020f 	and.w	r2, r7, #15
 80074e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074e6:	ed93 7b00 	vldr	d7, [r3]
 80074ea:	05f8      	lsls	r0, r7, #23
 80074ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80074f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074f4:	d516      	bpl.n	8007524 <_dtoa_r+0x354>
 80074f6:	4b97      	ldr	r3, [pc, #604]	@ (8007754 <_dtoa_r+0x584>)
 80074f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80074fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007500:	f7f9 f9a4 	bl	800084c <__aeabi_ddiv>
 8007504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007508:	f004 040f 	and.w	r4, r4, #15
 800750c:	2603      	movs	r6, #3
 800750e:	4d91      	ldr	r5, [pc, #580]	@ (8007754 <_dtoa_r+0x584>)
 8007510:	b954      	cbnz	r4, 8007528 <_dtoa_r+0x358>
 8007512:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800751a:	f7f9 f997 	bl	800084c <__aeabi_ddiv>
 800751e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007522:	e028      	b.n	8007576 <_dtoa_r+0x3a6>
 8007524:	2602      	movs	r6, #2
 8007526:	e7f2      	b.n	800750e <_dtoa_r+0x33e>
 8007528:	07e1      	lsls	r1, r4, #31
 800752a:	d508      	bpl.n	800753e <_dtoa_r+0x36e>
 800752c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007530:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007534:	f7f9 f860 	bl	80005f8 <__aeabi_dmul>
 8007538:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800753c:	3601      	adds	r6, #1
 800753e:	1064      	asrs	r4, r4, #1
 8007540:	3508      	adds	r5, #8
 8007542:	e7e5      	b.n	8007510 <_dtoa_r+0x340>
 8007544:	f000 80af 	beq.w	80076a6 <_dtoa_r+0x4d6>
 8007548:	427c      	negs	r4, r7
 800754a:	4b81      	ldr	r3, [pc, #516]	@ (8007750 <_dtoa_r+0x580>)
 800754c:	4d81      	ldr	r5, [pc, #516]	@ (8007754 <_dtoa_r+0x584>)
 800754e:	f004 020f 	and.w	r2, r4, #15
 8007552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800755e:	f7f9 f84b 	bl	80005f8 <__aeabi_dmul>
 8007562:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007566:	1124      	asrs	r4, r4, #4
 8007568:	2300      	movs	r3, #0
 800756a:	2602      	movs	r6, #2
 800756c:	2c00      	cmp	r4, #0
 800756e:	f040 808f 	bne.w	8007690 <_dtoa_r+0x4c0>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1d3      	bne.n	800751e <_dtoa_r+0x34e>
 8007576:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007578:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 8094 	beq.w	80076aa <_dtoa_r+0x4da>
 8007582:	4b75      	ldr	r3, [pc, #468]	@ (8007758 <_dtoa_r+0x588>)
 8007584:	2200      	movs	r2, #0
 8007586:	4620      	mov	r0, r4
 8007588:	4629      	mov	r1, r5
 800758a:	f7f9 faa7 	bl	8000adc <__aeabi_dcmplt>
 800758e:	2800      	cmp	r0, #0
 8007590:	f000 808b 	beq.w	80076aa <_dtoa_r+0x4da>
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 8087 	beq.w	80076aa <_dtoa_r+0x4da>
 800759c:	f1bb 0f00 	cmp.w	fp, #0
 80075a0:	dd34      	ble.n	800760c <_dtoa_r+0x43c>
 80075a2:	4620      	mov	r0, r4
 80075a4:	4b6d      	ldr	r3, [pc, #436]	@ (800775c <_dtoa_r+0x58c>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	4629      	mov	r1, r5
 80075aa:	f7f9 f825 	bl	80005f8 <__aeabi_dmul>
 80075ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075b2:	f107 38ff 	add.w	r8, r7, #4294967295
 80075b6:	3601      	adds	r6, #1
 80075b8:	465c      	mov	r4, fp
 80075ba:	4630      	mov	r0, r6
 80075bc:	f7f8 ffb2 	bl	8000524 <__aeabi_i2d>
 80075c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075c4:	f7f9 f818 	bl	80005f8 <__aeabi_dmul>
 80075c8:	4b65      	ldr	r3, [pc, #404]	@ (8007760 <_dtoa_r+0x590>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	f7f8 fe5e 	bl	800028c <__adddf3>
 80075d0:	4605      	mov	r5, r0
 80075d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075d6:	2c00      	cmp	r4, #0
 80075d8:	d16a      	bne.n	80076b0 <_dtoa_r+0x4e0>
 80075da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075de:	4b61      	ldr	r3, [pc, #388]	@ (8007764 <_dtoa_r+0x594>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	f7f8 fe51 	bl	8000288 <__aeabi_dsub>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075ee:	462a      	mov	r2, r5
 80075f0:	4633      	mov	r3, r6
 80075f2:	f7f9 fa91 	bl	8000b18 <__aeabi_dcmpgt>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f040 8298 	bne.w	8007b2c <_dtoa_r+0x95c>
 80075fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007600:	462a      	mov	r2, r5
 8007602:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007606:	f7f9 fa69 	bl	8000adc <__aeabi_dcmplt>
 800760a:	bb38      	cbnz	r0, 800765c <_dtoa_r+0x48c>
 800760c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007610:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007614:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007616:	2b00      	cmp	r3, #0
 8007618:	f2c0 8157 	blt.w	80078ca <_dtoa_r+0x6fa>
 800761c:	2f0e      	cmp	r7, #14
 800761e:	f300 8154 	bgt.w	80078ca <_dtoa_r+0x6fa>
 8007622:	4b4b      	ldr	r3, [pc, #300]	@ (8007750 <_dtoa_r+0x580>)
 8007624:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007628:	ed93 7b00 	vldr	d7, [r3]
 800762c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800762e:	2b00      	cmp	r3, #0
 8007630:	ed8d 7b00 	vstr	d7, [sp]
 8007634:	f280 80e5 	bge.w	8007802 <_dtoa_r+0x632>
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	f300 80e1 	bgt.w	8007802 <_dtoa_r+0x632>
 8007640:	d10c      	bne.n	800765c <_dtoa_r+0x48c>
 8007642:	4b48      	ldr	r3, [pc, #288]	@ (8007764 <_dtoa_r+0x594>)
 8007644:	2200      	movs	r2, #0
 8007646:	ec51 0b17 	vmov	r0, r1, d7
 800764a:	f7f8 ffd5 	bl	80005f8 <__aeabi_dmul>
 800764e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007652:	f7f9 fa57 	bl	8000b04 <__aeabi_dcmpge>
 8007656:	2800      	cmp	r0, #0
 8007658:	f000 8266 	beq.w	8007b28 <_dtoa_r+0x958>
 800765c:	2400      	movs	r4, #0
 800765e:	4625      	mov	r5, r4
 8007660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007662:	4656      	mov	r6, sl
 8007664:	ea6f 0803 	mvn.w	r8, r3
 8007668:	2700      	movs	r7, #0
 800766a:	4621      	mov	r1, r4
 800766c:	4648      	mov	r0, r9
 800766e:	f000 fcbf 	bl	8007ff0 <_Bfree>
 8007672:	2d00      	cmp	r5, #0
 8007674:	f000 80bd 	beq.w	80077f2 <_dtoa_r+0x622>
 8007678:	b12f      	cbz	r7, 8007686 <_dtoa_r+0x4b6>
 800767a:	42af      	cmp	r7, r5
 800767c:	d003      	beq.n	8007686 <_dtoa_r+0x4b6>
 800767e:	4639      	mov	r1, r7
 8007680:	4648      	mov	r0, r9
 8007682:	f000 fcb5 	bl	8007ff0 <_Bfree>
 8007686:	4629      	mov	r1, r5
 8007688:	4648      	mov	r0, r9
 800768a:	f000 fcb1 	bl	8007ff0 <_Bfree>
 800768e:	e0b0      	b.n	80077f2 <_dtoa_r+0x622>
 8007690:	07e2      	lsls	r2, r4, #31
 8007692:	d505      	bpl.n	80076a0 <_dtoa_r+0x4d0>
 8007694:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007698:	f7f8 ffae 	bl	80005f8 <__aeabi_dmul>
 800769c:	3601      	adds	r6, #1
 800769e:	2301      	movs	r3, #1
 80076a0:	1064      	asrs	r4, r4, #1
 80076a2:	3508      	adds	r5, #8
 80076a4:	e762      	b.n	800756c <_dtoa_r+0x39c>
 80076a6:	2602      	movs	r6, #2
 80076a8:	e765      	b.n	8007576 <_dtoa_r+0x3a6>
 80076aa:	9c03      	ldr	r4, [sp, #12]
 80076ac:	46b8      	mov	r8, r7
 80076ae:	e784      	b.n	80075ba <_dtoa_r+0x3ea>
 80076b0:	4b27      	ldr	r3, [pc, #156]	@ (8007750 <_dtoa_r+0x580>)
 80076b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076bc:	4454      	add	r4, sl
 80076be:	2900      	cmp	r1, #0
 80076c0:	d054      	beq.n	800776c <_dtoa_r+0x59c>
 80076c2:	4929      	ldr	r1, [pc, #164]	@ (8007768 <_dtoa_r+0x598>)
 80076c4:	2000      	movs	r0, #0
 80076c6:	f7f9 f8c1 	bl	800084c <__aeabi_ddiv>
 80076ca:	4633      	mov	r3, r6
 80076cc:	462a      	mov	r2, r5
 80076ce:	f7f8 fddb 	bl	8000288 <__aeabi_dsub>
 80076d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80076d6:	4656      	mov	r6, sl
 80076d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076dc:	f7f9 fa3c 	bl	8000b58 <__aeabi_d2iz>
 80076e0:	4605      	mov	r5, r0
 80076e2:	f7f8 ff1f 	bl	8000524 <__aeabi_i2d>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ee:	f7f8 fdcb 	bl	8000288 <__aeabi_dsub>
 80076f2:	3530      	adds	r5, #48	@ 0x30
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076fc:	f806 5b01 	strb.w	r5, [r6], #1
 8007700:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007704:	f7f9 f9ea 	bl	8000adc <__aeabi_dcmplt>
 8007708:	2800      	cmp	r0, #0
 800770a:	d172      	bne.n	80077f2 <_dtoa_r+0x622>
 800770c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007710:	4911      	ldr	r1, [pc, #68]	@ (8007758 <_dtoa_r+0x588>)
 8007712:	2000      	movs	r0, #0
 8007714:	f7f8 fdb8 	bl	8000288 <__aeabi_dsub>
 8007718:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800771c:	f7f9 f9de 	bl	8000adc <__aeabi_dcmplt>
 8007720:	2800      	cmp	r0, #0
 8007722:	f040 80b4 	bne.w	800788e <_dtoa_r+0x6be>
 8007726:	42a6      	cmp	r6, r4
 8007728:	f43f af70 	beq.w	800760c <_dtoa_r+0x43c>
 800772c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007730:	4b0a      	ldr	r3, [pc, #40]	@ (800775c <_dtoa_r+0x58c>)
 8007732:	2200      	movs	r2, #0
 8007734:	f7f8 ff60 	bl	80005f8 <__aeabi_dmul>
 8007738:	4b08      	ldr	r3, [pc, #32]	@ (800775c <_dtoa_r+0x58c>)
 800773a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800773e:	2200      	movs	r2, #0
 8007740:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007744:	f7f8 ff58 	bl	80005f8 <__aeabi_dmul>
 8007748:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800774c:	e7c4      	b.n	80076d8 <_dtoa_r+0x508>
 800774e:	bf00      	nop
 8007750:	08009bb8 	.word	0x08009bb8
 8007754:	08009b90 	.word	0x08009b90
 8007758:	3ff00000 	.word	0x3ff00000
 800775c:	40240000 	.word	0x40240000
 8007760:	401c0000 	.word	0x401c0000
 8007764:	40140000 	.word	0x40140000
 8007768:	3fe00000 	.word	0x3fe00000
 800776c:	4631      	mov	r1, r6
 800776e:	4628      	mov	r0, r5
 8007770:	f7f8 ff42 	bl	80005f8 <__aeabi_dmul>
 8007774:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007778:	9413      	str	r4, [sp, #76]	@ 0x4c
 800777a:	4656      	mov	r6, sl
 800777c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007780:	f7f9 f9ea 	bl	8000b58 <__aeabi_d2iz>
 8007784:	4605      	mov	r5, r0
 8007786:	f7f8 fecd 	bl	8000524 <__aeabi_i2d>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007792:	f7f8 fd79 	bl	8000288 <__aeabi_dsub>
 8007796:	3530      	adds	r5, #48	@ 0x30
 8007798:	f806 5b01 	strb.w	r5, [r6], #1
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	42a6      	cmp	r6, r4
 80077a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	d124      	bne.n	80077f6 <_dtoa_r+0x626>
 80077ac:	4baf      	ldr	r3, [pc, #700]	@ (8007a6c <_dtoa_r+0x89c>)
 80077ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80077b2:	f7f8 fd6b 	bl	800028c <__adddf3>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077be:	f7f9 f9ab 	bl	8000b18 <__aeabi_dcmpgt>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d163      	bne.n	800788e <_dtoa_r+0x6be>
 80077c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80077ca:	49a8      	ldr	r1, [pc, #672]	@ (8007a6c <_dtoa_r+0x89c>)
 80077cc:	2000      	movs	r0, #0
 80077ce:	f7f8 fd5b 	bl	8000288 <__aeabi_dsub>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077da:	f7f9 f97f 	bl	8000adc <__aeabi_dcmplt>
 80077de:	2800      	cmp	r0, #0
 80077e0:	f43f af14 	beq.w	800760c <_dtoa_r+0x43c>
 80077e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80077e6:	1e73      	subs	r3, r6, #1
 80077e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077ee:	2b30      	cmp	r3, #48	@ 0x30
 80077f0:	d0f8      	beq.n	80077e4 <_dtoa_r+0x614>
 80077f2:	4647      	mov	r7, r8
 80077f4:	e03b      	b.n	800786e <_dtoa_r+0x69e>
 80077f6:	4b9e      	ldr	r3, [pc, #632]	@ (8007a70 <_dtoa_r+0x8a0>)
 80077f8:	f7f8 fefe 	bl	80005f8 <__aeabi_dmul>
 80077fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007800:	e7bc      	b.n	800777c <_dtoa_r+0x5ac>
 8007802:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007806:	4656      	mov	r6, sl
 8007808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800780c:	4620      	mov	r0, r4
 800780e:	4629      	mov	r1, r5
 8007810:	f7f9 f81c 	bl	800084c <__aeabi_ddiv>
 8007814:	f7f9 f9a0 	bl	8000b58 <__aeabi_d2iz>
 8007818:	4680      	mov	r8, r0
 800781a:	f7f8 fe83 	bl	8000524 <__aeabi_i2d>
 800781e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007822:	f7f8 fee9 	bl	80005f8 <__aeabi_dmul>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4620      	mov	r0, r4
 800782c:	4629      	mov	r1, r5
 800782e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007832:	f7f8 fd29 	bl	8000288 <__aeabi_dsub>
 8007836:	f806 4b01 	strb.w	r4, [r6], #1
 800783a:	9d03      	ldr	r5, [sp, #12]
 800783c:	eba6 040a 	sub.w	r4, r6, sl
 8007840:	42a5      	cmp	r5, r4
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	d133      	bne.n	80078b0 <_dtoa_r+0x6e0>
 8007848:	f7f8 fd20 	bl	800028c <__adddf3>
 800784c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007850:	4604      	mov	r4, r0
 8007852:	460d      	mov	r5, r1
 8007854:	f7f9 f960 	bl	8000b18 <__aeabi_dcmpgt>
 8007858:	b9c0      	cbnz	r0, 800788c <_dtoa_r+0x6bc>
 800785a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800785e:	4620      	mov	r0, r4
 8007860:	4629      	mov	r1, r5
 8007862:	f7f9 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8007866:	b110      	cbz	r0, 800786e <_dtoa_r+0x69e>
 8007868:	f018 0f01 	tst.w	r8, #1
 800786c:	d10e      	bne.n	800788c <_dtoa_r+0x6bc>
 800786e:	9902      	ldr	r1, [sp, #8]
 8007870:	4648      	mov	r0, r9
 8007872:	f000 fbbd 	bl	8007ff0 <_Bfree>
 8007876:	2300      	movs	r3, #0
 8007878:	7033      	strb	r3, [r6, #0]
 800787a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800787c:	3701      	adds	r7, #1
 800787e:	601f      	str	r7, [r3, #0]
 8007880:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 824b 	beq.w	8007d1e <_dtoa_r+0xb4e>
 8007888:	601e      	str	r6, [r3, #0]
 800788a:	e248      	b.n	8007d1e <_dtoa_r+0xb4e>
 800788c:	46b8      	mov	r8, r7
 800788e:	4633      	mov	r3, r6
 8007890:	461e      	mov	r6, r3
 8007892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007896:	2a39      	cmp	r2, #57	@ 0x39
 8007898:	d106      	bne.n	80078a8 <_dtoa_r+0x6d8>
 800789a:	459a      	cmp	sl, r3
 800789c:	d1f8      	bne.n	8007890 <_dtoa_r+0x6c0>
 800789e:	2230      	movs	r2, #48	@ 0x30
 80078a0:	f108 0801 	add.w	r8, r8, #1
 80078a4:	f88a 2000 	strb.w	r2, [sl]
 80078a8:	781a      	ldrb	r2, [r3, #0]
 80078aa:	3201      	adds	r2, #1
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e7a0      	b.n	80077f2 <_dtoa_r+0x622>
 80078b0:	4b6f      	ldr	r3, [pc, #444]	@ (8007a70 <_dtoa_r+0x8a0>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	f7f8 fea0 	bl	80005f8 <__aeabi_dmul>
 80078b8:	2200      	movs	r2, #0
 80078ba:	2300      	movs	r3, #0
 80078bc:	4604      	mov	r4, r0
 80078be:	460d      	mov	r5, r1
 80078c0:	f7f9 f902 	bl	8000ac8 <__aeabi_dcmpeq>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d09f      	beq.n	8007808 <_dtoa_r+0x638>
 80078c8:	e7d1      	b.n	800786e <_dtoa_r+0x69e>
 80078ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078cc:	2a00      	cmp	r2, #0
 80078ce:	f000 80ea 	beq.w	8007aa6 <_dtoa_r+0x8d6>
 80078d2:	9a07      	ldr	r2, [sp, #28]
 80078d4:	2a01      	cmp	r2, #1
 80078d6:	f300 80cd 	bgt.w	8007a74 <_dtoa_r+0x8a4>
 80078da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80078dc:	2a00      	cmp	r2, #0
 80078de:	f000 80c1 	beq.w	8007a64 <_dtoa_r+0x894>
 80078e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078e6:	9c08      	ldr	r4, [sp, #32]
 80078e8:	9e00      	ldr	r6, [sp, #0]
 80078ea:	9a00      	ldr	r2, [sp, #0]
 80078ec:	441a      	add	r2, r3
 80078ee:	9200      	str	r2, [sp, #0]
 80078f0:	9a06      	ldr	r2, [sp, #24]
 80078f2:	2101      	movs	r1, #1
 80078f4:	441a      	add	r2, r3
 80078f6:	4648      	mov	r0, r9
 80078f8:	9206      	str	r2, [sp, #24]
 80078fa:	f000 fc2d 	bl	8008158 <__i2b>
 80078fe:	4605      	mov	r5, r0
 8007900:	b166      	cbz	r6, 800791c <_dtoa_r+0x74c>
 8007902:	9b06      	ldr	r3, [sp, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	dd09      	ble.n	800791c <_dtoa_r+0x74c>
 8007908:	42b3      	cmp	r3, r6
 800790a:	9a00      	ldr	r2, [sp, #0]
 800790c:	bfa8      	it	ge
 800790e:	4633      	movge	r3, r6
 8007910:	1ad2      	subs	r2, r2, r3
 8007912:	9200      	str	r2, [sp, #0]
 8007914:	9a06      	ldr	r2, [sp, #24]
 8007916:	1af6      	subs	r6, r6, r3
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	9306      	str	r3, [sp, #24]
 800791c:	9b08      	ldr	r3, [sp, #32]
 800791e:	b30b      	cbz	r3, 8007964 <_dtoa_r+0x794>
 8007920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 80c6 	beq.w	8007ab4 <_dtoa_r+0x8e4>
 8007928:	2c00      	cmp	r4, #0
 800792a:	f000 80c0 	beq.w	8007aae <_dtoa_r+0x8de>
 800792e:	4629      	mov	r1, r5
 8007930:	4622      	mov	r2, r4
 8007932:	4648      	mov	r0, r9
 8007934:	f000 fcc8 	bl	80082c8 <__pow5mult>
 8007938:	9a02      	ldr	r2, [sp, #8]
 800793a:	4601      	mov	r1, r0
 800793c:	4605      	mov	r5, r0
 800793e:	4648      	mov	r0, r9
 8007940:	f000 fc20 	bl	8008184 <__multiply>
 8007944:	9902      	ldr	r1, [sp, #8]
 8007946:	4680      	mov	r8, r0
 8007948:	4648      	mov	r0, r9
 800794a:	f000 fb51 	bl	8007ff0 <_Bfree>
 800794e:	9b08      	ldr	r3, [sp, #32]
 8007950:	1b1b      	subs	r3, r3, r4
 8007952:	9308      	str	r3, [sp, #32]
 8007954:	f000 80b1 	beq.w	8007aba <_dtoa_r+0x8ea>
 8007958:	9a08      	ldr	r2, [sp, #32]
 800795a:	4641      	mov	r1, r8
 800795c:	4648      	mov	r0, r9
 800795e:	f000 fcb3 	bl	80082c8 <__pow5mult>
 8007962:	9002      	str	r0, [sp, #8]
 8007964:	2101      	movs	r1, #1
 8007966:	4648      	mov	r0, r9
 8007968:	f000 fbf6 	bl	8008158 <__i2b>
 800796c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800796e:	4604      	mov	r4, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 81d8 	beq.w	8007d26 <_dtoa_r+0xb56>
 8007976:	461a      	mov	r2, r3
 8007978:	4601      	mov	r1, r0
 800797a:	4648      	mov	r0, r9
 800797c:	f000 fca4 	bl	80082c8 <__pow5mult>
 8007980:	9b07      	ldr	r3, [sp, #28]
 8007982:	2b01      	cmp	r3, #1
 8007984:	4604      	mov	r4, r0
 8007986:	f300 809f 	bgt.w	8007ac8 <_dtoa_r+0x8f8>
 800798a:	9b04      	ldr	r3, [sp, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f040 8097 	bne.w	8007ac0 <_dtoa_r+0x8f0>
 8007992:	9b05      	ldr	r3, [sp, #20]
 8007994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007998:	2b00      	cmp	r3, #0
 800799a:	f040 8093 	bne.w	8007ac4 <_dtoa_r+0x8f4>
 800799e:	9b05      	ldr	r3, [sp, #20]
 80079a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079a4:	0d1b      	lsrs	r3, r3, #20
 80079a6:	051b      	lsls	r3, r3, #20
 80079a8:	b133      	cbz	r3, 80079b8 <_dtoa_r+0x7e8>
 80079aa:	9b00      	ldr	r3, [sp, #0]
 80079ac:	3301      	adds	r3, #1
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	9b06      	ldr	r3, [sp, #24]
 80079b2:	3301      	adds	r3, #1
 80079b4:	9306      	str	r3, [sp, #24]
 80079b6:	2301      	movs	r3, #1
 80079b8:	9308      	str	r3, [sp, #32]
 80079ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 81b8 	beq.w	8007d32 <_dtoa_r+0xb62>
 80079c2:	6923      	ldr	r3, [r4, #16]
 80079c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079c8:	6918      	ldr	r0, [r3, #16]
 80079ca:	f000 fb79 	bl	80080c0 <__hi0bits>
 80079ce:	f1c0 0020 	rsb	r0, r0, #32
 80079d2:	9b06      	ldr	r3, [sp, #24]
 80079d4:	4418      	add	r0, r3
 80079d6:	f010 001f 	ands.w	r0, r0, #31
 80079da:	f000 8082 	beq.w	8007ae2 <_dtoa_r+0x912>
 80079de:	f1c0 0320 	rsb	r3, r0, #32
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	dd73      	ble.n	8007ace <_dtoa_r+0x8fe>
 80079e6:	9b00      	ldr	r3, [sp, #0]
 80079e8:	f1c0 001c 	rsb	r0, r0, #28
 80079ec:	4403      	add	r3, r0
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	9b06      	ldr	r3, [sp, #24]
 80079f2:	4403      	add	r3, r0
 80079f4:	4406      	add	r6, r0
 80079f6:	9306      	str	r3, [sp, #24]
 80079f8:	9b00      	ldr	r3, [sp, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	dd05      	ble.n	8007a0a <_dtoa_r+0x83a>
 80079fe:	9902      	ldr	r1, [sp, #8]
 8007a00:	461a      	mov	r2, r3
 8007a02:	4648      	mov	r0, r9
 8007a04:	f000 fcba 	bl	800837c <__lshift>
 8007a08:	9002      	str	r0, [sp, #8]
 8007a0a:	9b06      	ldr	r3, [sp, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	dd05      	ble.n	8007a1c <_dtoa_r+0x84c>
 8007a10:	4621      	mov	r1, r4
 8007a12:	461a      	mov	r2, r3
 8007a14:	4648      	mov	r0, r9
 8007a16:	f000 fcb1 	bl	800837c <__lshift>
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d061      	beq.n	8007ae6 <_dtoa_r+0x916>
 8007a22:	9802      	ldr	r0, [sp, #8]
 8007a24:	4621      	mov	r1, r4
 8007a26:	f000 fd15 	bl	8008454 <__mcmp>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	da5b      	bge.n	8007ae6 <_dtoa_r+0x916>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9902      	ldr	r1, [sp, #8]
 8007a32:	220a      	movs	r2, #10
 8007a34:	4648      	mov	r0, r9
 8007a36:	f000 fafd 	bl	8008034 <__multadd>
 8007a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3c:	9002      	str	r0, [sp, #8]
 8007a3e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8177 	beq.w	8007d36 <_dtoa_r+0xb66>
 8007a48:	4629      	mov	r1, r5
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	220a      	movs	r2, #10
 8007a4e:	4648      	mov	r0, r9
 8007a50:	f000 faf0 	bl	8008034 <__multadd>
 8007a54:	f1bb 0f00 	cmp.w	fp, #0
 8007a58:	4605      	mov	r5, r0
 8007a5a:	dc6f      	bgt.n	8007b3c <_dtoa_r+0x96c>
 8007a5c:	9b07      	ldr	r3, [sp, #28]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	dc49      	bgt.n	8007af6 <_dtoa_r+0x926>
 8007a62:	e06b      	b.n	8007b3c <_dtoa_r+0x96c>
 8007a64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a6a:	e73c      	b.n	80078e6 <_dtoa_r+0x716>
 8007a6c:	3fe00000 	.word	0x3fe00000
 8007a70:	40240000 	.word	0x40240000
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	1e5c      	subs	r4, r3, #1
 8007a78:	9b08      	ldr	r3, [sp, #32]
 8007a7a:	42a3      	cmp	r3, r4
 8007a7c:	db09      	blt.n	8007a92 <_dtoa_r+0x8c2>
 8007a7e:	1b1c      	subs	r4, r3, r4
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f6bf af30 	bge.w	80078e8 <_dtoa_r+0x718>
 8007a88:	9b00      	ldr	r3, [sp, #0]
 8007a8a:	9a03      	ldr	r2, [sp, #12]
 8007a8c:	1a9e      	subs	r6, r3, r2
 8007a8e:	2300      	movs	r3, #0
 8007a90:	e72b      	b.n	80078ea <_dtoa_r+0x71a>
 8007a92:	9b08      	ldr	r3, [sp, #32]
 8007a94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a96:	9408      	str	r4, [sp, #32]
 8007a98:	1ae3      	subs	r3, r4, r3
 8007a9a:	441a      	add	r2, r3
 8007a9c:	9e00      	ldr	r6, [sp, #0]
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007aa2:	2400      	movs	r4, #0
 8007aa4:	e721      	b.n	80078ea <_dtoa_r+0x71a>
 8007aa6:	9c08      	ldr	r4, [sp, #32]
 8007aa8:	9e00      	ldr	r6, [sp, #0]
 8007aaa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007aac:	e728      	b.n	8007900 <_dtoa_r+0x730>
 8007aae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007ab2:	e751      	b.n	8007958 <_dtoa_r+0x788>
 8007ab4:	9a08      	ldr	r2, [sp, #32]
 8007ab6:	9902      	ldr	r1, [sp, #8]
 8007ab8:	e750      	b.n	800795c <_dtoa_r+0x78c>
 8007aba:	f8cd 8008 	str.w	r8, [sp, #8]
 8007abe:	e751      	b.n	8007964 <_dtoa_r+0x794>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e779      	b.n	80079b8 <_dtoa_r+0x7e8>
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	e777      	b.n	80079b8 <_dtoa_r+0x7e8>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9308      	str	r3, [sp, #32]
 8007acc:	e779      	b.n	80079c2 <_dtoa_r+0x7f2>
 8007ace:	d093      	beq.n	80079f8 <_dtoa_r+0x828>
 8007ad0:	9a00      	ldr	r2, [sp, #0]
 8007ad2:	331c      	adds	r3, #28
 8007ad4:	441a      	add	r2, r3
 8007ad6:	9200      	str	r2, [sp, #0]
 8007ad8:	9a06      	ldr	r2, [sp, #24]
 8007ada:	441a      	add	r2, r3
 8007adc:	441e      	add	r6, r3
 8007ade:	9206      	str	r2, [sp, #24]
 8007ae0:	e78a      	b.n	80079f8 <_dtoa_r+0x828>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	e7f4      	b.n	8007ad0 <_dtoa_r+0x900>
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	46b8      	mov	r8, r7
 8007aec:	dc20      	bgt.n	8007b30 <_dtoa_r+0x960>
 8007aee:	469b      	mov	fp, r3
 8007af0:	9b07      	ldr	r3, [sp, #28]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	dd1e      	ble.n	8007b34 <_dtoa_r+0x964>
 8007af6:	f1bb 0f00 	cmp.w	fp, #0
 8007afa:	f47f adb1 	bne.w	8007660 <_dtoa_r+0x490>
 8007afe:	4621      	mov	r1, r4
 8007b00:	465b      	mov	r3, fp
 8007b02:	2205      	movs	r2, #5
 8007b04:	4648      	mov	r0, r9
 8007b06:	f000 fa95 	bl	8008034 <__multadd>
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	9802      	ldr	r0, [sp, #8]
 8007b10:	f000 fca0 	bl	8008454 <__mcmp>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	f77f ada3 	ble.w	8007660 <_dtoa_r+0x490>
 8007b1a:	4656      	mov	r6, sl
 8007b1c:	2331      	movs	r3, #49	@ 0x31
 8007b1e:	f806 3b01 	strb.w	r3, [r6], #1
 8007b22:	f108 0801 	add.w	r8, r8, #1
 8007b26:	e59f      	b.n	8007668 <_dtoa_r+0x498>
 8007b28:	9c03      	ldr	r4, [sp, #12]
 8007b2a:	46b8      	mov	r8, r7
 8007b2c:	4625      	mov	r5, r4
 8007b2e:	e7f4      	b.n	8007b1a <_dtoa_r+0x94a>
 8007b30:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 8101 	beq.w	8007d3e <_dtoa_r+0xb6e>
 8007b3c:	2e00      	cmp	r6, #0
 8007b3e:	dd05      	ble.n	8007b4c <_dtoa_r+0x97c>
 8007b40:	4629      	mov	r1, r5
 8007b42:	4632      	mov	r2, r6
 8007b44:	4648      	mov	r0, r9
 8007b46:	f000 fc19 	bl	800837c <__lshift>
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	9b08      	ldr	r3, [sp, #32]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d05c      	beq.n	8007c0c <_dtoa_r+0xa3c>
 8007b52:	6869      	ldr	r1, [r5, #4]
 8007b54:	4648      	mov	r0, r9
 8007b56:	f000 fa0b 	bl	8007f70 <_Balloc>
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	b928      	cbnz	r0, 8007b6a <_dtoa_r+0x99a>
 8007b5e:	4b82      	ldr	r3, [pc, #520]	@ (8007d68 <_dtoa_r+0xb98>)
 8007b60:	4602      	mov	r2, r0
 8007b62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b66:	f7ff bb4a 	b.w	80071fe <_dtoa_r+0x2e>
 8007b6a:	692a      	ldr	r2, [r5, #16]
 8007b6c:	3202      	adds	r2, #2
 8007b6e:	0092      	lsls	r2, r2, #2
 8007b70:	f105 010c 	add.w	r1, r5, #12
 8007b74:	300c      	adds	r0, #12
 8007b76:	f000 ffa3 	bl	8008ac0 <memcpy>
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4648      	mov	r0, r9
 8007b80:	f000 fbfc 	bl	800837c <__lshift>
 8007b84:	f10a 0301 	add.w	r3, sl, #1
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	eb0a 030b 	add.w	r3, sl, fp
 8007b8e:	9308      	str	r3, [sp, #32]
 8007b90:	9b04      	ldr	r3, [sp, #16]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	462f      	mov	r7, r5
 8007b98:	9306      	str	r3, [sp, #24]
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	9b00      	ldr	r3, [sp, #0]
 8007b9e:	9802      	ldr	r0, [sp, #8]
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ba6:	f7ff fa88 	bl	80070ba <quorem>
 8007baa:	4603      	mov	r3, r0
 8007bac:	3330      	adds	r3, #48	@ 0x30
 8007bae:	9003      	str	r0, [sp, #12]
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	9802      	ldr	r0, [sp, #8]
 8007bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb6:	f000 fc4d 	bl	8008454 <__mcmp>
 8007bba:	462a      	mov	r2, r5
 8007bbc:	9004      	str	r0, [sp, #16]
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4648      	mov	r0, r9
 8007bc2:	f000 fc63 	bl	800848c <__mdiff>
 8007bc6:	68c2      	ldr	r2, [r0, #12]
 8007bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bca:	4606      	mov	r6, r0
 8007bcc:	bb02      	cbnz	r2, 8007c10 <_dtoa_r+0xa40>
 8007bce:	4601      	mov	r1, r0
 8007bd0:	9802      	ldr	r0, [sp, #8]
 8007bd2:	f000 fc3f 	bl	8008454 <__mcmp>
 8007bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd8:	4602      	mov	r2, r0
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4648      	mov	r0, r9
 8007bde:	920c      	str	r2, [sp, #48]	@ 0x30
 8007be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007be2:	f000 fa05 	bl	8007ff0 <_Bfree>
 8007be6:	9b07      	ldr	r3, [sp, #28]
 8007be8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007bea:	9e00      	ldr	r6, [sp, #0]
 8007bec:	ea42 0103 	orr.w	r1, r2, r3
 8007bf0:	9b06      	ldr	r3, [sp, #24]
 8007bf2:	4319      	orrs	r1, r3
 8007bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bf6:	d10d      	bne.n	8007c14 <_dtoa_r+0xa44>
 8007bf8:	2b39      	cmp	r3, #57	@ 0x39
 8007bfa:	d027      	beq.n	8007c4c <_dtoa_r+0xa7c>
 8007bfc:	9a04      	ldr	r2, [sp, #16]
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	dd01      	ble.n	8007c06 <_dtoa_r+0xa36>
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	3331      	adds	r3, #49	@ 0x31
 8007c06:	f88b 3000 	strb.w	r3, [fp]
 8007c0a:	e52e      	b.n	800766a <_dtoa_r+0x49a>
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	e7b9      	b.n	8007b84 <_dtoa_r+0x9b4>
 8007c10:	2201      	movs	r2, #1
 8007c12:	e7e2      	b.n	8007bda <_dtoa_r+0xa0a>
 8007c14:	9904      	ldr	r1, [sp, #16]
 8007c16:	2900      	cmp	r1, #0
 8007c18:	db04      	blt.n	8007c24 <_dtoa_r+0xa54>
 8007c1a:	9807      	ldr	r0, [sp, #28]
 8007c1c:	4301      	orrs	r1, r0
 8007c1e:	9806      	ldr	r0, [sp, #24]
 8007c20:	4301      	orrs	r1, r0
 8007c22:	d120      	bne.n	8007c66 <_dtoa_r+0xa96>
 8007c24:	2a00      	cmp	r2, #0
 8007c26:	ddee      	ble.n	8007c06 <_dtoa_r+0xa36>
 8007c28:	9902      	ldr	r1, [sp, #8]
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	4648      	mov	r0, r9
 8007c30:	f000 fba4 	bl	800837c <__lshift>
 8007c34:	4621      	mov	r1, r4
 8007c36:	9002      	str	r0, [sp, #8]
 8007c38:	f000 fc0c 	bl	8008454 <__mcmp>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	9b00      	ldr	r3, [sp, #0]
 8007c40:	dc02      	bgt.n	8007c48 <_dtoa_r+0xa78>
 8007c42:	d1e0      	bne.n	8007c06 <_dtoa_r+0xa36>
 8007c44:	07da      	lsls	r2, r3, #31
 8007c46:	d5de      	bpl.n	8007c06 <_dtoa_r+0xa36>
 8007c48:	2b39      	cmp	r3, #57	@ 0x39
 8007c4a:	d1da      	bne.n	8007c02 <_dtoa_r+0xa32>
 8007c4c:	2339      	movs	r3, #57	@ 0x39
 8007c4e:	f88b 3000 	strb.w	r3, [fp]
 8007c52:	4633      	mov	r3, r6
 8007c54:	461e      	mov	r6, r3
 8007c56:	3b01      	subs	r3, #1
 8007c58:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c5c:	2a39      	cmp	r2, #57	@ 0x39
 8007c5e:	d04e      	beq.n	8007cfe <_dtoa_r+0xb2e>
 8007c60:	3201      	adds	r2, #1
 8007c62:	701a      	strb	r2, [r3, #0]
 8007c64:	e501      	b.n	800766a <_dtoa_r+0x49a>
 8007c66:	2a00      	cmp	r2, #0
 8007c68:	dd03      	ble.n	8007c72 <_dtoa_r+0xaa2>
 8007c6a:	2b39      	cmp	r3, #57	@ 0x39
 8007c6c:	d0ee      	beq.n	8007c4c <_dtoa_r+0xa7c>
 8007c6e:	3301      	adds	r3, #1
 8007c70:	e7c9      	b.n	8007c06 <_dtoa_r+0xa36>
 8007c72:	9a00      	ldr	r2, [sp, #0]
 8007c74:	9908      	ldr	r1, [sp, #32]
 8007c76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c7a:	428a      	cmp	r2, r1
 8007c7c:	d028      	beq.n	8007cd0 <_dtoa_r+0xb00>
 8007c7e:	9902      	ldr	r1, [sp, #8]
 8007c80:	2300      	movs	r3, #0
 8007c82:	220a      	movs	r2, #10
 8007c84:	4648      	mov	r0, r9
 8007c86:	f000 f9d5 	bl	8008034 <__multadd>
 8007c8a:	42af      	cmp	r7, r5
 8007c8c:	9002      	str	r0, [sp, #8]
 8007c8e:	f04f 0300 	mov.w	r3, #0
 8007c92:	f04f 020a 	mov.w	r2, #10
 8007c96:	4639      	mov	r1, r7
 8007c98:	4648      	mov	r0, r9
 8007c9a:	d107      	bne.n	8007cac <_dtoa_r+0xadc>
 8007c9c:	f000 f9ca 	bl	8008034 <__multadd>
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	9b00      	ldr	r3, [sp, #0]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	e777      	b.n	8007b9c <_dtoa_r+0x9cc>
 8007cac:	f000 f9c2 	bl	8008034 <__multadd>
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4607      	mov	r7, r0
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	220a      	movs	r2, #10
 8007cb8:	4648      	mov	r0, r9
 8007cba:	f000 f9bb 	bl	8008034 <__multadd>
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	e7f0      	b.n	8007ca4 <_dtoa_r+0xad4>
 8007cc2:	f1bb 0f00 	cmp.w	fp, #0
 8007cc6:	bfcc      	ite	gt
 8007cc8:	465e      	movgt	r6, fp
 8007cca:	2601      	movle	r6, #1
 8007ccc:	4456      	add	r6, sl
 8007cce:	2700      	movs	r7, #0
 8007cd0:	9902      	ldr	r1, [sp, #8]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	4648      	mov	r0, r9
 8007cd8:	f000 fb50 	bl	800837c <__lshift>
 8007cdc:	4621      	mov	r1, r4
 8007cde:	9002      	str	r0, [sp, #8]
 8007ce0:	f000 fbb8 	bl	8008454 <__mcmp>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	dcb4      	bgt.n	8007c52 <_dtoa_r+0xa82>
 8007ce8:	d102      	bne.n	8007cf0 <_dtoa_r+0xb20>
 8007cea:	9b00      	ldr	r3, [sp, #0]
 8007cec:	07db      	lsls	r3, r3, #31
 8007cee:	d4b0      	bmi.n	8007c52 <_dtoa_r+0xa82>
 8007cf0:	4633      	mov	r3, r6
 8007cf2:	461e      	mov	r6, r3
 8007cf4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cf8:	2a30      	cmp	r2, #48	@ 0x30
 8007cfa:	d0fa      	beq.n	8007cf2 <_dtoa_r+0xb22>
 8007cfc:	e4b5      	b.n	800766a <_dtoa_r+0x49a>
 8007cfe:	459a      	cmp	sl, r3
 8007d00:	d1a8      	bne.n	8007c54 <_dtoa_r+0xa84>
 8007d02:	2331      	movs	r3, #49	@ 0x31
 8007d04:	f108 0801 	add.w	r8, r8, #1
 8007d08:	f88a 3000 	strb.w	r3, [sl]
 8007d0c:	e4ad      	b.n	800766a <_dtoa_r+0x49a>
 8007d0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d10:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007d6c <_dtoa_r+0xb9c>
 8007d14:	b11b      	cbz	r3, 8007d1e <_dtoa_r+0xb4e>
 8007d16:	f10a 0308 	add.w	r3, sl, #8
 8007d1a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	4650      	mov	r0, sl
 8007d20:	b017      	add	sp, #92	@ 0x5c
 8007d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d26:	9b07      	ldr	r3, [sp, #28]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	f77f ae2e 	ble.w	800798a <_dtoa_r+0x7ba>
 8007d2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d30:	9308      	str	r3, [sp, #32]
 8007d32:	2001      	movs	r0, #1
 8007d34:	e64d      	b.n	80079d2 <_dtoa_r+0x802>
 8007d36:	f1bb 0f00 	cmp.w	fp, #0
 8007d3a:	f77f aed9 	ble.w	8007af0 <_dtoa_r+0x920>
 8007d3e:	4656      	mov	r6, sl
 8007d40:	9802      	ldr	r0, [sp, #8]
 8007d42:	4621      	mov	r1, r4
 8007d44:	f7ff f9b9 	bl	80070ba <quorem>
 8007d48:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007d4c:	f806 3b01 	strb.w	r3, [r6], #1
 8007d50:	eba6 020a 	sub.w	r2, r6, sl
 8007d54:	4593      	cmp	fp, r2
 8007d56:	ddb4      	ble.n	8007cc2 <_dtoa_r+0xaf2>
 8007d58:	9902      	ldr	r1, [sp, #8]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	220a      	movs	r2, #10
 8007d5e:	4648      	mov	r0, r9
 8007d60:	f000 f968 	bl	8008034 <__multadd>
 8007d64:	9002      	str	r0, [sp, #8]
 8007d66:	e7eb      	b.n	8007d40 <_dtoa_r+0xb70>
 8007d68:	08009abc 	.word	0x08009abc
 8007d6c:	08009a40 	.word	0x08009a40

08007d70 <_free_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4605      	mov	r5, r0
 8007d74:	2900      	cmp	r1, #0
 8007d76:	d041      	beq.n	8007dfc <_free_r+0x8c>
 8007d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d7c:	1f0c      	subs	r4, r1, #4
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	bfb8      	it	lt
 8007d82:	18e4      	addlt	r4, r4, r3
 8007d84:	f000 f8e8 	bl	8007f58 <__malloc_lock>
 8007d88:	4a1d      	ldr	r2, [pc, #116]	@ (8007e00 <_free_r+0x90>)
 8007d8a:	6813      	ldr	r3, [r2, #0]
 8007d8c:	b933      	cbnz	r3, 8007d9c <_free_r+0x2c>
 8007d8e:	6063      	str	r3, [r4, #4]
 8007d90:	6014      	str	r4, [r2, #0]
 8007d92:	4628      	mov	r0, r5
 8007d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d98:	f000 b8e4 	b.w	8007f64 <__malloc_unlock>
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	d908      	bls.n	8007db2 <_free_r+0x42>
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	1821      	adds	r1, r4, r0
 8007da4:	428b      	cmp	r3, r1
 8007da6:	bf01      	itttt	eq
 8007da8:	6819      	ldreq	r1, [r3, #0]
 8007daa:	685b      	ldreq	r3, [r3, #4]
 8007dac:	1809      	addeq	r1, r1, r0
 8007dae:	6021      	streq	r1, [r4, #0]
 8007db0:	e7ed      	b.n	8007d8e <_free_r+0x1e>
 8007db2:	461a      	mov	r2, r3
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	b10b      	cbz	r3, 8007dbc <_free_r+0x4c>
 8007db8:	42a3      	cmp	r3, r4
 8007dba:	d9fa      	bls.n	8007db2 <_free_r+0x42>
 8007dbc:	6811      	ldr	r1, [r2, #0]
 8007dbe:	1850      	adds	r0, r2, r1
 8007dc0:	42a0      	cmp	r0, r4
 8007dc2:	d10b      	bne.n	8007ddc <_free_r+0x6c>
 8007dc4:	6820      	ldr	r0, [r4, #0]
 8007dc6:	4401      	add	r1, r0
 8007dc8:	1850      	adds	r0, r2, r1
 8007dca:	4283      	cmp	r3, r0
 8007dcc:	6011      	str	r1, [r2, #0]
 8007dce:	d1e0      	bne.n	8007d92 <_free_r+0x22>
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	6053      	str	r3, [r2, #4]
 8007dd6:	4408      	add	r0, r1
 8007dd8:	6010      	str	r0, [r2, #0]
 8007dda:	e7da      	b.n	8007d92 <_free_r+0x22>
 8007ddc:	d902      	bls.n	8007de4 <_free_r+0x74>
 8007dde:	230c      	movs	r3, #12
 8007de0:	602b      	str	r3, [r5, #0]
 8007de2:	e7d6      	b.n	8007d92 <_free_r+0x22>
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	1821      	adds	r1, r4, r0
 8007de8:	428b      	cmp	r3, r1
 8007dea:	bf04      	itt	eq
 8007dec:	6819      	ldreq	r1, [r3, #0]
 8007dee:	685b      	ldreq	r3, [r3, #4]
 8007df0:	6063      	str	r3, [r4, #4]
 8007df2:	bf04      	itt	eq
 8007df4:	1809      	addeq	r1, r1, r0
 8007df6:	6021      	streq	r1, [r4, #0]
 8007df8:	6054      	str	r4, [r2, #4]
 8007dfa:	e7ca      	b.n	8007d92 <_free_r+0x22>
 8007dfc:	bd38      	pop	{r3, r4, r5, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000544 	.word	0x20000544

08007e04 <malloc>:
 8007e04:	4b02      	ldr	r3, [pc, #8]	@ (8007e10 <malloc+0xc>)
 8007e06:	4601      	mov	r1, r0
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	f000 b825 	b.w	8007e58 <_malloc_r>
 8007e0e:	bf00      	nop
 8007e10:	2000001c 	.word	0x2000001c

08007e14 <sbrk_aligned>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	4e0f      	ldr	r6, [pc, #60]	@ (8007e54 <sbrk_aligned+0x40>)
 8007e18:	460c      	mov	r4, r1
 8007e1a:	6831      	ldr	r1, [r6, #0]
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	b911      	cbnz	r1, 8007e26 <sbrk_aligned+0x12>
 8007e20:	f000 fe3e 	bl	8008aa0 <_sbrk_r>
 8007e24:	6030      	str	r0, [r6, #0]
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f000 fe39 	bl	8008aa0 <_sbrk_r>
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	d103      	bne.n	8007e3a <sbrk_aligned+0x26>
 8007e32:	f04f 34ff 	mov.w	r4, #4294967295
 8007e36:	4620      	mov	r0, r4
 8007e38:	bd70      	pop	{r4, r5, r6, pc}
 8007e3a:	1cc4      	adds	r4, r0, #3
 8007e3c:	f024 0403 	bic.w	r4, r4, #3
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d0f8      	beq.n	8007e36 <sbrk_aligned+0x22>
 8007e44:	1a21      	subs	r1, r4, r0
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 fe2a 	bl	8008aa0 <_sbrk_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d1f2      	bne.n	8007e36 <sbrk_aligned+0x22>
 8007e50:	e7ef      	b.n	8007e32 <sbrk_aligned+0x1e>
 8007e52:	bf00      	nop
 8007e54:	20000540 	.word	0x20000540

08007e58 <_malloc_r>:
 8007e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	1ccd      	adds	r5, r1, #3
 8007e5e:	f025 0503 	bic.w	r5, r5, #3
 8007e62:	3508      	adds	r5, #8
 8007e64:	2d0c      	cmp	r5, #12
 8007e66:	bf38      	it	cc
 8007e68:	250c      	movcc	r5, #12
 8007e6a:	2d00      	cmp	r5, #0
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	db01      	blt.n	8007e74 <_malloc_r+0x1c>
 8007e70:	42a9      	cmp	r1, r5
 8007e72:	d904      	bls.n	8007e7e <_malloc_r+0x26>
 8007e74:	230c      	movs	r3, #12
 8007e76:	6033      	str	r3, [r6, #0]
 8007e78:	2000      	movs	r0, #0
 8007e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f54 <_malloc_r+0xfc>
 8007e82:	f000 f869 	bl	8007f58 <__malloc_lock>
 8007e86:	f8d8 3000 	ldr.w	r3, [r8]
 8007e8a:	461c      	mov	r4, r3
 8007e8c:	bb44      	cbnz	r4, 8007ee0 <_malloc_r+0x88>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4630      	mov	r0, r6
 8007e92:	f7ff ffbf 	bl	8007e14 <sbrk_aligned>
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	4604      	mov	r4, r0
 8007e9a:	d158      	bne.n	8007f4e <_malloc_r+0xf6>
 8007e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8007ea0:	4627      	mov	r7, r4
 8007ea2:	2f00      	cmp	r7, #0
 8007ea4:	d143      	bne.n	8007f2e <_malloc_r+0xd6>
 8007ea6:	2c00      	cmp	r4, #0
 8007ea8:	d04b      	beq.n	8007f42 <_malloc_r+0xea>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	4639      	mov	r1, r7
 8007eae:	4630      	mov	r0, r6
 8007eb0:	eb04 0903 	add.w	r9, r4, r3
 8007eb4:	f000 fdf4 	bl	8008aa0 <_sbrk_r>
 8007eb8:	4581      	cmp	r9, r0
 8007eba:	d142      	bne.n	8007f42 <_malloc_r+0xea>
 8007ebc:	6821      	ldr	r1, [r4, #0]
 8007ebe:	1a6d      	subs	r5, r5, r1
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7ff ffa6 	bl	8007e14 <sbrk_aligned>
 8007ec8:	3001      	adds	r0, #1
 8007eca:	d03a      	beq.n	8007f42 <_malloc_r+0xea>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	442b      	add	r3, r5
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	bb62      	cbnz	r2, 8007f34 <_malloc_r+0xdc>
 8007eda:	f8c8 7000 	str.w	r7, [r8]
 8007ede:	e00f      	b.n	8007f00 <_malloc_r+0xa8>
 8007ee0:	6822      	ldr	r2, [r4, #0]
 8007ee2:	1b52      	subs	r2, r2, r5
 8007ee4:	d420      	bmi.n	8007f28 <_malloc_r+0xd0>
 8007ee6:	2a0b      	cmp	r2, #11
 8007ee8:	d917      	bls.n	8007f1a <_malloc_r+0xc2>
 8007eea:	1961      	adds	r1, r4, r5
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	6025      	str	r5, [r4, #0]
 8007ef0:	bf18      	it	ne
 8007ef2:	6059      	strne	r1, [r3, #4]
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	bf08      	it	eq
 8007ef8:	f8c8 1000 	streq.w	r1, [r8]
 8007efc:	5162      	str	r2, [r4, r5]
 8007efe:	604b      	str	r3, [r1, #4]
 8007f00:	4630      	mov	r0, r6
 8007f02:	f000 f82f 	bl	8007f64 <__malloc_unlock>
 8007f06:	f104 000b 	add.w	r0, r4, #11
 8007f0a:	1d23      	adds	r3, r4, #4
 8007f0c:	f020 0007 	bic.w	r0, r0, #7
 8007f10:	1ac2      	subs	r2, r0, r3
 8007f12:	bf1c      	itt	ne
 8007f14:	1a1b      	subne	r3, r3, r0
 8007f16:	50a3      	strne	r3, [r4, r2]
 8007f18:	e7af      	b.n	8007e7a <_malloc_r+0x22>
 8007f1a:	6862      	ldr	r2, [r4, #4]
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	bf0c      	ite	eq
 8007f20:	f8c8 2000 	streq.w	r2, [r8]
 8007f24:	605a      	strne	r2, [r3, #4]
 8007f26:	e7eb      	b.n	8007f00 <_malloc_r+0xa8>
 8007f28:	4623      	mov	r3, r4
 8007f2a:	6864      	ldr	r4, [r4, #4]
 8007f2c:	e7ae      	b.n	8007e8c <_malloc_r+0x34>
 8007f2e:	463c      	mov	r4, r7
 8007f30:	687f      	ldr	r7, [r7, #4]
 8007f32:	e7b6      	b.n	8007ea2 <_malloc_r+0x4a>
 8007f34:	461a      	mov	r2, r3
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d1fb      	bne.n	8007f34 <_malloc_r+0xdc>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6053      	str	r3, [r2, #4]
 8007f40:	e7de      	b.n	8007f00 <_malloc_r+0xa8>
 8007f42:	230c      	movs	r3, #12
 8007f44:	6033      	str	r3, [r6, #0]
 8007f46:	4630      	mov	r0, r6
 8007f48:	f000 f80c 	bl	8007f64 <__malloc_unlock>
 8007f4c:	e794      	b.n	8007e78 <_malloc_r+0x20>
 8007f4e:	6005      	str	r5, [r0, #0]
 8007f50:	e7d6      	b.n	8007f00 <_malloc_r+0xa8>
 8007f52:	bf00      	nop
 8007f54:	20000544 	.word	0x20000544

08007f58 <__malloc_lock>:
 8007f58:	4801      	ldr	r0, [pc, #4]	@ (8007f60 <__malloc_lock+0x8>)
 8007f5a:	f7ff b8ac 	b.w	80070b6 <__retarget_lock_acquire_recursive>
 8007f5e:	bf00      	nop
 8007f60:	2000053c 	.word	0x2000053c

08007f64 <__malloc_unlock>:
 8007f64:	4801      	ldr	r0, [pc, #4]	@ (8007f6c <__malloc_unlock+0x8>)
 8007f66:	f7ff b8a7 	b.w	80070b8 <__retarget_lock_release_recursive>
 8007f6a:	bf00      	nop
 8007f6c:	2000053c 	.word	0x2000053c

08007f70 <_Balloc>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	69c6      	ldr	r6, [r0, #28]
 8007f74:	4604      	mov	r4, r0
 8007f76:	460d      	mov	r5, r1
 8007f78:	b976      	cbnz	r6, 8007f98 <_Balloc+0x28>
 8007f7a:	2010      	movs	r0, #16
 8007f7c:	f7ff ff42 	bl	8007e04 <malloc>
 8007f80:	4602      	mov	r2, r0
 8007f82:	61e0      	str	r0, [r4, #28]
 8007f84:	b920      	cbnz	r0, 8007f90 <_Balloc+0x20>
 8007f86:	4b18      	ldr	r3, [pc, #96]	@ (8007fe8 <_Balloc+0x78>)
 8007f88:	4818      	ldr	r0, [pc, #96]	@ (8007fec <_Balloc+0x7c>)
 8007f8a:	216b      	movs	r1, #107	@ 0x6b
 8007f8c:	f000 fda6 	bl	8008adc <__assert_func>
 8007f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f94:	6006      	str	r6, [r0, #0]
 8007f96:	60c6      	str	r6, [r0, #12]
 8007f98:	69e6      	ldr	r6, [r4, #28]
 8007f9a:	68f3      	ldr	r3, [r6, #12]
 8007f9c:	b183      	cbz	r3, 8007fc0 <_Balloc+0x50>
 8007f9e:	69e3      	ldr	r3, [r4, #28]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fa6:	b9b8      	cbnz	r0, 8007fd8 <_Balloc+0x68>
 8007fa8:	2101      	movs	r1, #1
 8007faa:	fa01 f605 	lsl.w	r6, r1, r5
 8007fae:	1d72      	adds	r2, r6, #5
 8007fb0:	0092      	lsls	r2, r2, #2
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 fdb0 	bl	8008b18 <_calloc_r>
 8007fb8:	b160      	cbz	r0, 8007fd4 <_Balloc+0x64>
 8007fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fbe:	e00e      	b.n	8007fde <_Balloc+0x6e>
 8007fc0:	2221      	movs	r2, #33	@ 0x21
 8007fc2:	2104      	movs	r1, #4
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f000 fda7 	bl	8008b18 <_calloc_r>
 8007fca:	69e3      	ldr	r3, [r4, #28]
 8007fcc:	60f0      	str	r0, [r6, #12]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e4      	bne.n	8007f9e <_Balloc+0x2e>
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	6802      	ldr	r2, [r0, #0]
 8007fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fe4:	e7f7      	b.n	8007fd6 <_Balloc+0x66>
 8007fe6:	bf00      	nop
 8007fe8:	08009a4d 	.word	0x08009a4d
 8007fec:	08009acd 	.word	0x08009acd

08007ff0 <_Bfree>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	69c6      	ldr	r6, [r0, #28]
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	b976      	cbnz	r6, 8008018 <_Bfree+0x28>
 8007ffa:	2010      	movs	r0, #16
 8007ffc:	f7ff ff02 	bl	8007e04 <malloc>
 8008000:	4602      	mov	r2, r0
 8008002:	61e8      	str	r0, [r5, #28]
 8008004:	b920      	cbnz	r0, 8008010 <_Bfree+0x20>
 8008006:	4b09      	ldr	r3, [pc, #36]	@ (800802c <_Bfree+0x3c>)
 8008008:	4809      	ldr	r0, [pc, #36]	@ (8008030 <_Bfree+0x40>)
 800800a:	218f      	movs	r1, #143	@ 0x8f
 800800c:	f000 fd66 	bl	8008adc <__assert_func>
 8008010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008014:	6006      	str	r6, [r0, #0]
 8008016:	60c6      	str	r6, [r0, #12]
 8008018:	b13c      	cbz	r4, 800802a <_Bfree+0x3a>
 800801a:	69eb      	ldr	r3, [r5, #28]
 800801c:	6862      	ldr	r2, [r4, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008024:	6021      	str	r1, [r4, #0]
 8008026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	08009a4d 	.word	0x08009a4d
 8008030:	08009acd 	.word	0x08009acd

08008034 <__multadd>:
 8008034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008038:	690d      	ldr	r5, [r1, #16]
 800803a:	4607      	mov	r7, r0
 800803c:	460c      	mov	r4, r1
 800803e:	461e      	mov	r6, r3
 8008040:	f101 0c14 	add.w	ip, r1, #20
 8008044:	2000      	movs	r0, #0
 8008046:	f8dc 3000 	ldr.w	r3, [ip]
 800804a:	b299      	uxth	r1, r3
 800804c:	fb02 6101 	mla	r1, r2, r1, r6
 8008050:	0c1e      	lsrs	r6, r3, #16
 8008052:	0c0b      	lsrs	r3, r1, #16
 8008054:	fb02 3306 	mla	r3, r2, r6, r3
 8008058:	b289      	uxth	r1, r1
 800805a:	3001      	adds	r0, #1
 800805c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008060:	4285      	cmp	r5, r0
 8008062:	f84c 1b04 	str.w	r1, [ip], #4
 8008066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800806a:	dcec      	bgt.n	8008046 <__multadd+0x12>
 800806c:	b30e      	cbz	r6, 80080b2 <__multadd+0x7e>
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	42ab      	cmp	r3, r5
 8008072:	dc19      	bgt.n	80080a8 <__multadd+0x74>
 8008074:	6861      	ldr	r1, [r4, #4]
 8008076:	4638      	mov	r0, r7
 8008078:	3101      	adds	r1, #1
 800807a:	f7ff ff79 	bl	8007f70 <_Balloc>
 800807e:	4680      	mov	r8, r0
 8008080:	b928      	cbnz	r0, 800808e <__multadd+0x5a>
 8008082:	4602      	mov	r2, r0
 8008084:	4b0c      	ldr	r3, [pc, #48]	@ (80080b8 <__multadd+0x84>)
 8008086:	480d      	ldr	r0, [pc, #52]	@ (80080bc <__multadd+0x88>)
 8008088:	21ba      	movs	r1, #186	@ 0xba
 800808a:	f000 fd27 	bl	8008adc <__assert_func>
 800808e:	6922      	ldr	r2, [r4, #16]
 8008090:	3202      	adds	r2, #2
 8008092:	f104 010c 	add.w	r1, r4, #12
 8008096:	0092      	lsls	r2, r2, #2
 8008098:	300c      	adds	r0, #12
 800809a:	f000 fd11 	bl	8008ac0 <memcpy>
 800809e:	4621      	mov	r1, r4
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff ffa5 	bl	8007ff0 <_Bfree>
 80080a6:	4644      	mov	r4, r8
 80080a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080ac:	3501      	adds	r5, #1
 80080ae:	615e      	str	r6, [r3, #20]
 80080b0:	6125      	str	r5, [r4, #16]
 80080b2:	4620      	mov	r0, r4
 80080b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b8:	08009abc 	.word	0x08009abc
 80080bc:	08009acd 	.word	0x08009acd

080080c0 <__hi0bits>:
 80080c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080c4:	4603      	mov	r3, r0
 80080c6:	bf36      	itet	cc
 80080c8:	0403      	lslcc	r3, r0, #16
 80080ca:	2000      	movcs	r0, #0
 80080cc:	2010      	movcc	r0, #16
 80080ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080d2:	bf3c      	itt	cc
 80080d4:	021b      	lslcc	r3, r3, #8
 80080d6:	3008      	addcc	r0, #8
 80080d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080dc:	bf3c      	itt	cc
 80080de:	011b      	lslcc	r3, r3, #4
 80080e0:	3004      	addcc	r0, #4
 80080e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e6:	bf3c      	itt	cc
 80080e8:	009b      	lslcc	r3, r3, #2
 80080ea:	3002      	addcc	r0, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	db05      	blt.n	80080fc <__hi0bits+0x3c>
 80080f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080f4:	f100 0001 	add.w	r0, r0, #1
 80080f8:	bf08      	it	eq
 80080fa:	2020      	moveq	r0, #32
 80080fc:	4770      	bx	lr

080080fe <__lo0bits>:
 80080fe:	6803      	ldr	r3, [r0, #0]
 8008100:	4602      	mov	r2, r0
 8008102:	f013 0007 	ands.w	r0, r3, #7
 8008106:	d00b      	beq.n	8008120 <__lo0bits+0x22>
 8008108:	07d9      	lsls	r1, r3, #31
 800810a:	d421      	bmi.n	8008150 <__lo0bits+0x52>
 800810c:	0798      	lsls	r0, r3, #30
 800810e:	bf49      	itett	mi
 8008110:	085b      	lsrmi	r3, r3, #1
 8008112:	089b      	lsrpl	r3, r3, #2
 8008114:	2001      	movmi	r0, #1
 8008116:	6013      	strmi	r3, [r2, #0]
 8008118:	bf5c      	itt	pl
 800811a:	6013      	strpl	r3, [r2, #0]
 800811c:	2002      	movpl	r0, #2
 800811e:	4770      	bx	lr
 8008120:	b299      	uxth	r1, r3
 8008122:	b909      	cbnz	r1, 8008128 <__lo0bits+0x2a>
 8008124:	0c1b      	lsrs	r3, r3, #16
 8008126:	2010      	movs	r0, #16
 8008128:	b2d9      	uxtb	r1, r3
 800812a:	b909      	cbnz	r1, 8008130 <__lo0bits+0x32>
 800812c:	3008      	adds	r0, #8
 800812e:	0a1b      	lsrs	r3, r3, #8
 8008130:	0719      	lsls	r1, r3, #28
 8008132:	bf04      	itt	eq
 8008134:	091b      	lsreq	r3, r3, #4
 8008136:	3004      	addeq	r0, #4
 8008138:	0799      	lsls	r1, r3, #30
 800813a:	bf04      	itt	eq
 800813c:	089b      	lsreq	r3, r3, #2
 800813e:	3002      	addeq	r0, #2
 8008140:	07d9      	lsls	r1, r3, #31
 8008142:	d403      	bmi.n	800814c <__lo0bits+0x4e>
 8008144:	085b      	lsrs	r3, r3, #1
 8008146:	f100 0001 	add.w	r0, r0, #1
 800814a:	d003      	beq.n	8008154 <__lo0bits+0x56>
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	4770      	bx	lr
 8008150:	2000      	movs	r0, #0
 8008152:	4770      	bx	lr
 8008154:	2020      	movs	r0, #32
 8008156:	4770      	bx	lr

08008158 <__i2b>:
 8008158:	b510      	push	{r4, lr}
 800815a:	460c      	mov	r4, r1
 800815c:	2101      	movs	r1, #1
 800815e:	f7ff ff07 	bl	8007f70 <_Balloc>
 8008162:	4602      	mov	r2, r0
 8008164:	b928      	cbnz	r0, 8008172 <__i2b+0x1a>
 8008166:	4b05      	ldr	r3, [pc, #20]	@ (800817c <__i2b+0x24>)
 8008168:	4805      	ldr	r0, [pc, #20]	@ (8008180 <__i2b+0x28>)
 800816a:	f240 1145 	movw	r1, #325	@ 0x145
 800816e:	f000 fcb5 	bl	8008adc <__assert_func>
 8008172:	2301      	movs	r3, #1
 8008174:	6144      	str	r4, [r0, #20]
 8008176:	6103      	str	r3, [r0, #16]
 8008178:	bd10      	pop	{r4, pc}
 800817a:	bf00      	nop
 800817c:	08009abc 	.word	0x08009abc
 8008180:	08009acd 	.word	0x08009acd

08008184 <__multiply>:
 8008184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	4617      	mov	r7, r2
 800818a:	690a      	ldr	r2, [r1, #16]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	429a      	cmp	r2, r3
 8008190:	bfa8      	it	ge
 8008192:	463b      	movge	r3, r7
 8008194:	4689      	mov	r9, r1
 8008196:	bfa4      	itt	ge
 8008198:	460f      	movge	r7, r1
 800819a:	4699      	movge	r9, r3
 800819c:	693d      	ldr	r5, [r7, #16]
 800819e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	eb05 060a 	add.w	r6, r5, sl
 80081aa:	42b3      	cmp	r3, r6
 80081ac:	b085      	sub	sp, #20
 80081ae:	bfb8      	it	lt
 80081b0:	3101      	addlt	r1, #1
 80081b2:	f7ff fedd 	bl	8007f70 <_Balloc>
 80081b6:	b930      	cbnz	r0, 80081c6 <__multiply+0x42>
 80081b8:	4602      	mov	r2, r0
 80081ba:	4b41      	ldr	r3, [pc, #260]	@ (80082c0 <__multiply+0x13c>)
 80081bc:	4841      	ldr	r0, [pc, #260]	@ (80082c4 <__multiply+0x140>)
 80081be:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081c2:	f000 fc8b 	bl	8008adc <__assert_func>
 80081c6:	f100 0414 	add.w	r4, r0, #20
 80081ca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80081ce:	4623      	mov	r3, r4
 80081d0:	2200      	movs	r2, #0
 80081d2:	4573      	cmp	r3, lr
 80081d4:	d320      	bcc.n	8008218 <__multiply+0x94>
 80081d6:	f107 0814 	add.w	r8, r7, #20
 80081da:	f109 0114 	add.w	r1, r9, #20
 80081de:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80081e2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80081e6:	9302      	str	r3, [sp, #8]
 80081e8:	1beb      	subs	r3, r5, r7
 80081ea:	3b15      	subs	r3, #21
 80081ec:	f023 0303 	bic.w	r3, r3, #3
 80081f0:	3304      	adds	r3, #4
 80081f2:	3715      	adds	r7, #21
 80081f4:	42bd      	cmp	r5, r7
 80081f6:	bf38      	it	cc
 80081f8:	2304      	movcc	r3, #4
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	9b02      	ldr	r3, [sp, #8]
 80081fe:	9103      	str	r1, [sp, #12]
 8008200:	428b      	cmp	r3, r1
 8008202:	d80c      	bhi.n	800821e <__multiply+0x9a>
 8008204:	2e00      	cmp	r6, #0
 8008206:	dd03      	ble.n	8008210 <__multiply+0x8c>
 8008208:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800820c:	2b00      	cmp	r3, #0
 800820e:	d055      	beq.n	80082bc <__multiply+0x138>
 8008210:	6106      	str	r6, [r0, #16]
 8008212:	b005      	add	sp, #20
 8008214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008218:	f843 2b04 	str.w	r2, [r3], #4
 800821c:	e7d9      	b.n	80081d2 <__multiply+0x4e>
 800821e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008222:	f1ba 0f00 	cmp.w	sl, #0
 8008226:	d01f      	beq.n	8008268 <__multiply+0xe4>
 8008228:	46c4      	mov	ip, r8
 800822a:	46a1      	mov	r9, r4
 800822c:	2700      	movs	r7, #0
 800822e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008232:	f8d9 3000 	ldr.w	r3, [r9]
 8008236:	fa1f fb82 	uxth.w	fp, r2
 800823a:	b29b      	uxth	r3, r3
 800823c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008240:	443b      	add	r3, r7
 8008242:	f8d9 7000 	ldr.w	r7, [r9]
 8008246:	0c12      	lsrs	r2, r2, #16
 8008248:	0c3f      	lsrs	r7, r7, #16
 800824a:	fb0a 7202 	mla	r2, sl, r2, r7
 800824e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008252:	b29b      	uxth	r3, r3
 8008254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008258:	4565      	cmp	r5, ip
 800825a:	f849 3b04 	str.w	r3, [r9], #4
 800825e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008262:	d8e4      	bhi.n	800822e <__multiply+0xaa>
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	50e7      	str	r7, [r4, r3]
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800826e:	3104      	adds	r1, #4
 8008270:	f1b9 0f00 	cmp.w	r9, #0
 8008274:	d020      	beq.n	80082b8 <__multiply+0x134>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	4647      	mov	r7, r8
 800827a:	46a4      	mov	ip, r4
 800827c:	f04f 0a00 	mov.w	sl, #0
 8008280:	f8b7 b000 	ldrh.w	fp, [r7]
 8008284:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008288:	fb09 220b 	mla	r2, r9, fp, r2
 800828c:	4452      	add	r2, sl
 800828e:	b29b      	uxth	r3, r3
 8008290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008294:	f84c 3b04 	str.w	r3, [ip], #4
 8008298:	f857 3b04 	ldr.w	r3, [r7], #4
 800829c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082a0:	f8bc 3000 	ldrh.w	r3, [ip]
 80082a4:	fb09 330a 	mla	r3, r9, sl, r3
 80082a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80082ac:	42bd      	cmp	r5, r7
 80082ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082b2:	d8e5      	bhi.n	8008280 <__multiply+0xfc>
 80082b4:	9a01      	ldr	r2, [sp, #4]
 80082b6:	50a3      	str	r3, [r4, r2]
 80082b8:	3404      	adds	r4, #4
 80082ba:	e79f      	b.n	80081fc <__multiply+0x78>
 80082bc:	3e01      	subs	r6, #1
 80082be:	e7a1      	b.n	8008204 <__multiply+0x80>
 80082c0:	08009abc 	.word	0x08009abc
 80082c4:	08009acd 	.word	0x08009acd

080082c8 <__pow5mult>:
 80082c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082cc:	4615      	mov	r5, r2
 80082ce:	f012 0203 	ands.w	r2, r2, #3
 80082d2:	4607      	mov	r7, r0
 80082d4:	460e      	mov	r6, r1
 80082d6:	d007      	beq.n	80082e8 <__pow5mult+0x20>
 80082d8:	4c25      	ldr	r4, [pc, #148]	@ (8008370 <__pow5mult+0xa8>)
 80082da:	3a01      	subs	r2, #1
 80082dc:	2300      	movs	r3, #0
 80082de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082e2:	f7ff fea7 	bl	8008034 <__multadd>
 80082e6:	4606      	mov	r6, r0
 80082e8:	10ad      	asrs	r5, r5, #2
 80082ea:	d03d      	beq.n	8008368 <__pow5mult+0xa0>
 80082ec:	69fc      	ldr	r4, [r7, #28]
 80082ee:	b97c      	cbnz	r4, 8008310 <__pow5mult+0x48>
 80082f0:	2010      	movs	r0, #16
 80082f2:	f7ff fd87 	bl	8007e04 <malloc>
 80082f6:	4602      	mov	r2, r0
 80082f8:	61f8      	str	r0, [r7, #28]
 80082fa:	b928      	cbnz	r0, 8008308 <__pow5mult+0x40>
 80082fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008374 <__pow5mult+0xac>)
 80082fe:	481e      	ldr	r0, [pc, #120]	@ (8008378 <__pow5mult+0xb0>)
 8008300:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008304:	f000 fbea 	bl	8008adc <__assert_func>
 8008308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800830c:	6004      	str	r4, [r0, #0]
 800830e:	60c4      	str	r4, [r0, #12]
 8008310:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008318:	b94c      	cbnz	r4, 800832e <__pow5mult+0x66>
 800831a:	f240 2171 	movw	r1, #625	@ 0x271
 800831e:	4638      	mov	r0, r7
 8008320:	f7ff ff1a 	bl	8008158 <__i2b>
 8008324:	2300      	movs	r3, #0
 8008326:	f8c8 0008 	str.w	r0, [r8, #8]
 800832a:	4604      	mov	r4, r0
 800832c:	6003      	str	r3, [r0, #0]
 800832e:	f04f 0900 	mov.w	r9, #0
 8008332:	07eb      	lsls	r3, r5, #31
 8008334:	d50a      	bpl.n	800834c <__pow5mult+0x84>
 8008336:	4631      	mov	r1, r6
 8008338:	4622      	mov	r2, r4
 800833a:	4638      	mov	r0, r7
 800833c:	f7ff ff22 	bl	8008184 <__multiply>
 8008340:	4631      	mov	r1, r6
 8008342:	4680      	mov	r8, r0
 8008344:	4638      	mov	r0, r7
 8008346:	f7ff fe53 	bl	8007ff0 <_Bfree>
 800834a:	4646      	mov	r6, r8
 800834c:	106d      	asrs	r5, r5, #1
 800834e:	d00b      	beq.n	8008368 <__pow5mult+0xa0>
 8008350:	6820      	ldr	r0, [r4, #0]
 8008352:	b938      	cbnz	r0, 8008364 <__pow5mult+0x9c>
 8008354:	4622      	mov	r2, r4
 8008356:	4621      	mov	r1, r4
 8008358:	4638      	mov	r0, r7
 800835a:	f7ff ff13 	bl	8008184 <__multiply>
 800835e:	6020      	str	r0, [r4, #0]
 8008360:	f8c0 9000 	str.w	r9, [r0]
 8008364:	4604      	mov	r4, r0
 8008366:	e7e4      	b.n	8008332 <__pow5mult+0x6a>
 8008368:	4630      	mov	r0, r6
 800836a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800836e:	bf00      	nop
 8008370:	08009b80 	.word	0x08009b80
 8008374:	08009a4d 	.word	0x08009a4d
 8008378:	08009acd 	.word	0x08009acd

0800837c <__lshift>:
 800837c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008380:	460c      	mov	r4, r1
 8008382:	6849      	ldr	r1, [r1, #4]
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800838a:	68a3      	ldr	r3, [r4, #8]
 800838c:	4607      	mov	r7, r0
 800838e:	4691      	mov	r9, r2
 8008390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008394:	f108 0601 	add.w	r6, r8, #1
 8008398:	42b3      	cmp	r3, r6
 800839a:	db0b      	blt.n	80083b4 <__lshift+0x38>
 800839c:	4638      	mov	r0, r7
 800839e:	f7ff fde7 	bl	8007f70 <_Balloc>
 80083a2:	4605      	mov	r5, r0
 80083a4:	b948      	cbnz	r0, 80083ba <__lshift+0x3e>
 80083a6:	4602      	mov	r2, r0
 80083a8:	4b28      	ldr	r3, [pc, #160]	@ (800844c <__lshift+0xd0>)
 80083aa:	4829      	ldr	r0, [pc, #164]	@ (8008450 <__lshift+0xd4>)
 80083ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083b0:	f000 fb94 	bl	8008adc <__assert_func>
 80083b4:	3101      	adds	r1, #1
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	e7ee      	b.n	8008398 <__lshift+0x1c>
 80083ba:	2300      	movs	r3, #0
 80083bc:	f100 0114 	add.w	r1, r0, #20
 80083c0:	f100 0210 	add.w	r2, r0, #16
 80083c4:	4618      	mov	r0, r3
 80083c6:	4553      	cmp	r3, sl
 80083c8:	db33      	blt.n	8008432 <__lshift+0xb6>
 80083ca:	6920      	ldr	r0, [r4, #16]
 80083cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083d0:	f104 0314 	add.w	r3, r4, #20
 80083d4:	f019 091f 	ands.w	r9, r9, #31
 80083d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083e0:	d02b      	beq.n	800843a <__lshift+0xbe>
 80083e2:	f1c9 0e20 	rsb	lr, r9, #32
 80083e6:	468a      	mov	sl, r1
 80083e8:	2200      	movs	r2, #0
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	fa00 f009 	lsl.w	r0, r0, r9
 80083f0:	4310      	orrs	r0, r2
 80083f2:	f84a 0b04 	str.w	r0, [sl], #4
 80083f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fa:	459c      	cmp	ip, r3
 80083fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008400:	d8f3      	bhi.n	80083ea <__lshift+0x6e>
 8008402:	ebac 0304 	sub.w	r3, ip, r4
 8008406:	3b15      	subs	r3, #21
 8008408:	f023 0303 	bic.w	r3, r3, #3
 800840c:	3304      	adds	r3, #4
 800840e:	f104 0015 	add.w	r0, r4, #21
 8008412:	4560      	cmp	r0, ip
 8008414:	bf88      	it	hi
 8008416:	2304      	movhi	r3, #4
 8008418:	50ca      	str	r2, [r1, r3]
 800841a:	b10a      	cbz	r2, 8008420 <__lshift+0xa4>
 800841c:	f108 0602 	add.w	r6, r8, #2
 8008420:	3e01      	subs	r6, #1
 8008422:	4638      	mov	r0, r7
 8008424:	612e      	str	r6, [r5, #16]
 8008426:	4621      	mov	r1, r4
 8008428:	f7ff fde2 	bl	8007ff0 <_Bfree>
 800842c:	4628      	mov	r0, r5
 800842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008432:	f842 0f04 	str.w	r0, [r2, #4]!
 8008436:	3301      	adds	r3, #1
 8008438:	e7c5      	b.n	80083c6 <__lshift+0x4a>
 800843a:	3904      	subs	r1, #4
 800843c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008440:	f841 2f04 	str.w	r2, [r1, #4]!
 8008444:	459c      	cmp	ip, r3
 8008446:	d8f9      	bhi.n	800843c <__lshift+0xc0>
 8008448:	e7ea      	b.n	8008420 <__lshift+0xa4>
 800844a:	bf00      	nop
 800844c:	08009abc 	.word	0x08009abc
 8008450:	08009acd 	.word	0x08009acd

08008454 <__mcmp>:
 8008454:	690a      	ldr	r2, [r1, #16]
 8008456:	4603      	mov	r3, r0
 8008458:	6900      	ldr	r0, [r0, #16]
 800845a:	1a80      	subs	r0, r0, r2
 800845c:	b530      	push	{r4, r5, lr}
 800845e:	d10e      	bne.n	800847e <__mcmp+0x2a>
 8008460:	3314      	adds	r3, #20
 8008462:	3114      	adds	r1, #20
 8008464:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008468:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800846c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008470:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008474:	4295      	cmp	r5, r2
 8008476:	d003      	beq.n	8008480 <__mcmp+0x2c>
 8008478:	d205      	bcs.n	8008486 <__mcmp+0x32>
 800847a:	f04f 30ff 	mov.w	r0, #4294967295
 800847e:	bd30      	pop	{r4, r5, pc}
 8008480:	42a3      	cmp	r3, r4
 8008482:	d3f3      	bcc.n	800846c <__mcmp+0x18>
 8008484:	e7fb      	b.n	800847e <__mcmp+0x2a>
 8008486:	2001      	movs	r0, #1
 8008488:	e7f9      	b.n	800847e <__mcmp+0x2a>
	...

0800848c <__mdiff>:
 800848c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	4689      	mov	r9, r1
 8008492:	4606      	mov	r6, r0
 8008494:	4611      	mov	r1, r2
 8008496:	4648      	mov	r0, r9
 8008498:	4614      	mov	r4, r2
 800849a:	f7ff ffdb 	bl	8008454 <__mcmp>
 800849e:	1e05      	subs	r5, r0, #0
 80084a0:	d112      	bne.n	80084c8 <__mdiff+0x3c>
 80084a2:	4629      	mov	r1, r5
 80084a4:	4630      	mov	r0, r6
 80084a6:	f7ff fd63 	bl	8007f70 <_Balloc>
 80084aa:	4602      	mov	r2, r0
 80084ac:	b928      	cbnz	r0, 80084ba <__mdiff+0x2e>
 80084ae:	4b3f      	ldr	r3, [pc, #252]	@ (80085ac <__mdiff+0x120>)
 80084b0:	f240 2137 	movw	r1, #567	@ 0x237
 80084b4:	483e      	ldr	r0, [pc, #248]	@ (80085b0 <__mdiff+0x124>)
 80084b6:	f000 fb11 	bl	8008adc <__assert_func>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084c0:	4610      	mov	r0, r2
 80084c2:	b003      	add	sp, #12
 80084c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c8:	bfbc      	itt	lt
 80084ca:	464b      	movlt	r3, r9
 80084cc:	46a1      	movlt	r9, r4
 80084ce:	4630      	mov	r0, r6
 80084d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084d4:	bfba      	itte	lt
 80084d6:	461c      	movlt	r4, r3
 80084d8:	2501      	movlt	r5, #1
 80084da:	2500      	movge	r5, #0
 80084dc:	f7ff fd48 	bl	8007f70 <_Balloc>
 80084e0:	4602      	mov	r2, r0
 80084e2:	b918      	cbnz	r0, 80084ec <__mdiff+0x60>
 80084e4:	4b31      	ldr	r3, [pc, #196]	@ (80085ac <__mdiff+0x120>)
 80084e6:	f240 2145 	movw	r1, #581	@ 0x245
 80084ea:	e7e3      	b.n	80084b4 <__mdiff+0x28>
 80084ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084f0:	6926      	ldr	r6, [r4, #16]
 80084f2:	60c5      	str	r5, [r0, #12]
 80084f4:	f109 0310 	add.w	r3, r9, #16
 80084f8:	f109 0514 	add.w	r5, r9, #20
 80084fc:	f104 0e14 	add.w	lr, r4, #20
 8008500:	f100 0b14 	add.w	fp, r0, #20
 8008504:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008508:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	46d9      	mov	r9, fp
 8008510:	f04f 0c00 	mov.w	ip, #0
 8008514:	9b01      	ldr	r3, [sp, #4]
 8008516:	f85e 0b04 	ldr.w	r0, [lr], #4
 800851a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	fa1f f38a 	uxth.w	r3, sl
 8008524:	4619      	mov	r1, r3
 8008526:	b283      	uxth	r3, r0
 8008528:	1acb      	subs	r3, r1, r3
 800852a:	0c00      	lsrs	r0, r0, #16
 800852c:	4463      	add	r3, ip
 800852e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008532:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008536:	b29b      	uxth	r3, r3
 8008538:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800853c:	4576      	cmp	r6, lr
 800853e:	f849 3b04 	str.w	r3, [r9], #4
 8008542:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008546:	d8e5      	bhi.n	8008514 <__mdiff+0x88>
 8008548:	1b33      	subs	r3, r6, r4
 800854a:	3b15      	subs	r3, #21
 800854c:	f023 0303 	bic.w	r3, r3, #3
 8008550:	3415      	adds	r4, #21
 8008552:	3304      	adds	r3, #4
 8008554:	42a6      	cmp	r6, r4
 8008556:	bf38      	it	cc
 8008558:	2304      	movcc	r3, #4
 800855a:	441d      	add	r5, r3
 800855c:	445b      	add	r3, fp
 800855e:	461e      	mov	r6, r3
 8008560:	462c      	mov	r4, r5
 8008562:	4544      	cmp	r4, r8
 8008564:	d30e      	bcc.n	8008584 <__mdiff+0xf8>
 8008566:	f108 0103 	add.w	r1, r8, #3
 800856a:	1b49      	subs	r1, r1, r5
 800856c:	f021 0103 	bic.w	r1, r1, #3
 8008570:	3d03      	subs	r5, #3
 8008572:	45a8      	cmp	r8, r5
 8008574:	bf38      	it	cc
 8008576:	2100      	movcc	r1, #0
 8008578:	440b      	add	r3, r1
 800857a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800857e:	b191      	cbz	r1, 80085a6 <__mdiff+0x11a>
 8008580:	6117      	str	r7, [r2, #16]
 8008582:	e79d      	b.n	80084c0 <__mdiff+0x34>
 8008584:	f854 1b04 	ldr.w	r1, [r4], #4
 8008588:	46e6      	mov	lr, ip
 800858a:	0c08      	lsrs	r0, r1, #16
 800858c:	fa1c fc81 	uxtah	ip, ip, r1
 8008590:	4471      	add	r1, lr
 8008592:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008596:	b289      	uxth	r1, r1
 8008598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800859c:	f846 1b04 	str.w	r1, [r6], #4
 80085a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085a4:	e7dd      	b.n	8008562 <__mdiff+0xd6>
 80085a6:	3f01      	subs	r7, #1
 80085a8:	e7e7      	b.n	800857a <__mdiff+0xee>
 80085aa:	bf00      	nop
 80085ac:	08009abc 	.word	0x08009abc
 80085b0:	08009acd 	.word	0x08009acd

080085b4 <__d2b>:
 80085b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085b8:	460f      	mov	r7, r1
 80085ba:	2101      	movs	r1, #1
 80085bc:	ec59 8b10 	vmov	r8, r9, d0
 80085c0:	4616      	mov	r6, r2
 80085c2:	f7ff fcd5 	bl	8007f70 <_Balloc>
 80085c6:	4604      	mov	r4, r0
 80085c8:	b930      	cbnz	r0, 80085d8 <__d2b+0x24>
 80085ca:	4602      	mov	r2, r0
 80085cc:	4b23      	ldr	r3, [pc, #140]	@ (800865c <__d2b+0xa8>)
 80085ce:	4824      	ldr	r0, [pc, #144]	@ (8008660 <__d2b+0xac>)
 80085d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80085d4:	f000 fa82 	bl	8008adc <__assert_func>
 80085d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085e0:	b10d      	cbz	r5, 80085e6 <__d2b+0x32>
 80085e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	f1b8 0300 	subs.w	r3, r8, #0
 80085ec:	d023      	beq.n	8008636 <__d2b+0x82>
 80085ee:	4668      	mov	r0, sp
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	f7ff fd84 	bl	80080fe <__lo0bits>
 80085f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085fa:	b1d0      	cbz	r0, 8008632 <__d2b+0x7e>
 80085fc:	f1c0 0320 	rsb	r3, r0, #32
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	430b      	orrs	r3, r1
 8008606:	40c2      	lsrs	r2, r0
 8008608:	6163      	str	r3, [r4, #20]
 800860a:	9201      	str	r2, [sp, #4]
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	61a3      	str	r3, [r4, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	bf0c      	ite	eq
 8008614:	2201      	moveq	r2, #1
 8008616:	2202      	movne	r2, #2
 8008618:	6122      	str	r2, [r4, #16]
 800861a:	b1a5      	cbz	r5, 8008646 <__d2b+0x92>
 800861c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008620:	4405      	add	r5, r0
 8008622:	603d      	str	r5, [r7, #0]
 8008624:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008628:	6030      	str	r0, [r6, #0]
 800862a:	4620      	mov	r0, r4
 800862c:	b003      	add	sp, #12
 800862e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008632:	6161      	str	r1, [r4, #20]
 8008634:	e7ea      	b.n	800860c <__d2b+0x58>
 8008636:	a801      	add	r0, sp, #4
 8008638:	f7ff fd61 	bl	80080fe <__lo0bits>
 800863c:	9b01      	ldr	r3, [sp, #4]
 800863e:	6163      	str	r3, [r4, #20]
 8008640:	3020      	adds	r0, #32
 8008642:	2201      	movs	r2, #1
 8008644:	e7e8      	b.n	8008618 <__d2b+0x64>
 8008646:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800864a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800864e:	6038      	str	r0, [r7, #0]
 8008650:	6918      	ldr	r0, [r3, #16]
 8008652:	f7ff fd35 	bl	80080c0 <__hi0bits>
 8008656:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800865a:	e7e5      	b.n	8008628 <__d2b+0x74>
 800865c:	08009abc 	.word	0x08009abc
 8008660:	08009acd 	.word	0x08009acd

08008664 <__ssputs_r>:
 8008664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008668:	688e      	ldr	r6, [r1, #8]
 800866a:	461f      	mov	r7, r3
 800866c:	42be      	cmp	r6, r7
 800866e:	680b      	ldr	r3, [r1, #0]
 8008670:	4682      	mov	sl, r0
 8008672:	460c      	mov	r4, r1
 8008674:	4690      	mov	r8, r2
 8008676:	d82d      	bhi.n	80086d4 <__ssputs_r+0x70>
 8008678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800867c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008680:	d026      	beq.n	80086d0 <__ssputs_r+0x6c>
 8008682:	6965      	ldr	r5, [r4, #20]
 8008684:	6909      	ldr	r1, [r1, #16]
 8008686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800868a:	eba3 0901 	sub.w	r9, r3, r1
 800868e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008692:	1c7b      	adds	r3, r7, #1
 8008694:	444b      	add	r3, r9
 8008696:	106d      	asrs	r5, r5, #1
 8008698:	429d      	cmp	r5, r3
 800869a:	bf38      	it	cc
 800869c:	461d      	movcc	r5, r3
 800869e:	0553      	lsls	r3, r2, #21
 80086a0:	d527      	bpl.n	80086f2 <__ssputs_r+0x8e>
 80086a2:	4629      	mov	r1, r5
 80086a4:	f7ff fbd8 	bl	8007e58 <_malloc_r>
 80086a8:	4606      	mov	r6, r0
 80086aa:	b360      	cbz	r0, 8008706 <__ssputs_r+0xa2>
 80086ac:	6921      	ldr	r1, [r4, #16]
 80086ae:	464a      	mov	r2, r9
 80086b0:	f000 fa06 	bl	8008ac0 <memcpy>
 80086b4:	89a3      	ldrh	r3, [r4, #12]
 80086b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086be:	81a3      	strh	r3, [r4, #12]
 80086c0:	6126      	str	r6, [r4, #16]
 80086c2:	6165      	str	r5, [r4, #20]
 80086c4:	444e      	add	r6, r9
 80086c6:	eba5 0509 	sub.w	r5, r5, r9
 80086ca:	6026      	str	r6, [r4, #0]
 80086cc:	60a5      	str	r5, [r4, #8]
 80086ce:	463e      	mov	r6, r7
 80086d0:	42be      	cmp	r6, r7
 80086d2:	d900      	bls.n	80086d6 <__ssputs_r+0x72>
 80086d4:	463e      	mov	r6, r7
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	4632      	mov	r2, r6
 80086da:	4641      	mov	r1, r8
 80086dc:	f000 f9c6 	bl	8008a6c <memmove>
 80086e0:	68a3      	ldr	r3, [r4, #8]
 80086e2:	1b9b      	subs	r3, r3, r6
 80086e4:	60a3      	str	r3, [r4, #8]
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	4433      	add	r3, r6
 80086ea:	6023      	str	r3, [r4, #0]
 80086ec:	2000      	movs	r0, #0
 80086ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f2:	462a      	mov	r2, r5
 80086f4:	f000 fa36 	bl	8008b64 <_realloc_r>
 80086f8:	4606      	mov	r6, r0
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d1e0      	bne.n	80086c0 <__ssputs_r+0x5c>
 80086fe:	6921      	ldr	r1, [r4, #16]
 8008700:	4650      	mov	r0, sl
 8008702:	f7ff fb35 	bl	8007d70 <_free_r>
 8008706:	230c      	movs	r3, #12
 8008708:	f8ca 3000 	str.w	r3, [sl]
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008712:	81a3      	strh	r3, [r4, #12]
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	e7e9      	b.n	80086ee <__ssputs_r+0x8a>
	...

0800871c <_svfiprintf_r>:
 800871c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	4698      	mov	r8, r3
 8008722:	898b      	ldrh	r3, [r1, #12]
 8008724:	061b      	lsls	r3, r3, #24
 8008726:	b09d      	sub	sp, #116	@ 0x74
 8008728:	4607      	mov	r7, r0
 800872a:	460d      	mov	r5, r1
 800872c:	4614      	mov	r4, r2
 800872e:	d510      	bpl.n	8008752 <_svfiprintf_r+0x36>
 8008730:	690b      	ldr	r3, [r1, #16]
 8008732:	b973      	cbnz	r3, 8008752 <_svfiprintf_r+0x36>
 8008734:	2140      	movs	r1, #64	@ 0x40
 8008736:	f7ff fb8f 	bl	8007e58 <_malloc_r>
 800873a:	6028      	str	r0, [r5, #0]
 800873c:	6128      	str	r0, [r5, #16]
 800873e:	b930      	cbnz	r0, 800874e <_svfiprintf_r+0x32>
 8008740:	230c      	movs	r3, #12
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	f04f 30ff 	mov.w	r0, #4294967295
 8008748:	b01d      	add	sp, #116	@ 0x74
 800874a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874e:	2340      	movs	r3, #64	@ 0x40
 8008750:	616b      	str	r3, [r5, #20]
 8008752:	2300      	movs	r3, #0
 8008754:	9309      	str	r3, [sp, #36]	@ 0x24
 8008756:	2320      	movs	r3, #32
 8008758:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800875c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008760:	2330      	movs	r3, #48	@ 0x30
 8008762:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008900 <_svfiprintf_r+0x1e4>
 8008766:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800876a:	f04f 0901 	mov.w	r9, #1
 800876e:	4623      	mov	r3, r4
 8008770:	469a      	mov	sl, r3
 8008772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008776:	b10a      	cbz	r2, 800877c <_svfiprintf_r+0x60>
 8008778:	2a25      	cmp	r2, #37	@ 0x25
 800877a:	d1f9      	bne.n	8008770 <_svfiprintf_r+0x54>
 800877c:	ebba 0b04 	subs.w	fp, sl, r4
 8008780:	d00b      	beq.n	800879a <_svfiprintf_r+0x7e>
 8008782:	465b      	mov	r3, fp
 8008784:	4622      	mov	r2, r4
 8008786:	4629      	mov	r1, r5
 8008788:	4638      	mov	r0, r7
 800878a:	f7ff ff6b 	bl	8008664 <__ssputs_r>
 800878e:	3001      	adds	r0, #1
 8008790:	f000 80a7 	beq.w	80088e2 <_svfiprintf_r+0x1c6>
 8008794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008796:	445a      	add	r2, fp
 8008798:	9209      	str	r2, [sp, #36]	@ 0x24
 800879a:	f89a 3000 	ldrb.w	r3, [sl]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 809f 	beq.w	80088e2 <_svfiprintf_r+0x1c6>
 80087a4:	2300      	movs	r3, #0
 80087a6:	f04f 32ff 	mov.w	r2, #4294967295
 80087aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ae:	f10a 0a01 	add.w	sl, sl, #1
 80087b2:	9304      	str	r3, [sp, #16]
 80087b4:	9307      	str	r3, [sp, #28]
 80087b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80087bc:	4654      	mov	r4, sl
 80087be:	2205      	movs	r2, #5
 80087c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c4:	484e      	ldr	r0, [pc, #312]	@ (8008900 <_svfiprintf_r+0x1e4>)
 80087c6:	f7f7 fd03 	bl	80001d0 <memchr>
 80087ca:	9a04      	ldr	r2, [sp, #16]
 80087cc:	b9d8      	cbnz	r0, 8008806 <_svfiprintf_r+0xea>
 80087ce:	06d0      	lsls	r0, r2, #27
 80087d0:	bf44      	itt	mi
 80087d2:	2320      	movmi	r3, #32
 80087d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087d8:	0711      	lsls	r1, r2, #28
 80087da:	bf44      	itt	mi
 80087dc:	232b      	movmi	r3, #43	@ 0x2b
 80087de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087e2:	f89a 3000 	ldrb.w	r3, [sl]
 80087e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80087e8:	d015      	beq.n	8008816 <_svfiprintf_r+0xfa>
 80087ea:	9a07      	ldr	r2, [sp, #28]
 80087ec:	4654      	mov	r4, sl
 80087ee:	2000      	movs	r0, #0
 80087f0:	f04f 0c0a 	mov.w	ip, #10
 80087f4:	4621      	mov	r1, r4
 80087f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087fa:	3b30      	subs	r3, #48	@ 0x30
 80087fc:	2b09      	cmp	r3, #9
 80087fe:	d94b      	bls.n	8008898 <_svfiprintf_r+0x17c>
 8008800:	b1b0      	cbz	r0, 8008830 <_svfiprintf_r+0x114>
 8008802:	9207      	str	r2, [sp, #28]
 8008804:	e014      	b.n	8008830 <_svfiprintf_r+0x114>
 8008806:	eba0 0308 	sub.w	r3, r0, r8
 800880a:	fa09 f303 	lsl.w	r3, r9, r3
 800880e:	4313      	orrs	r3, r2
 8008810:	9304      	str	r3, [sp, #16]
 8008812:	46a2      	mov	sl, r4
 8008814:	e7d2      	b.n	80087bc <_svfiprintf_r+0xa0>
 8008816:	9b03      	ldr	r3, [sp, #12]
 8008818:	1d19      	adds	r1, r3, #4
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	9103      	str	r1, [sp, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	bfbb      	ittet	lt
 8008822:	425b      	neglt	r3, r3
 8008824:	f042 0202 	orrlt.w	r2, r2, #2
 8008828:	9307      	strge	r3, [sp, #28]
 800882a:	9307      	strlt	r3, [sp, #28]
 800882c:	bfb8      	it	lt
 800882e:	9204      	strlt	r2, [sp, #16]
 8008830:	7823      	ldrb	r3, [r4, #0]
 8008832:	2b2e      	cmp	r3, #46	@ 0x2e
 8008834:	d10a      	bne.n	800884c <_svfiprintf_r+0x130>
 8008836:	7863      	ldrb	r3, [r4, #1]
 8008838:	2b2a      	cmp	r3, #42	@ 0x2a
 800883a:	d132      	bne.n	80088a2 <_svfiprintf_r+0x186>
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	1d1a      	adds	r2, r3, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	9203      	str	r2, [sp, #12]
 8008844:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008848:	3402      	adds	r4, #2
 800884a:	9305      	str	r3, [sp, #20]
 800884c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008910 <_svfiprintf_r+0x1f4>
 8008850:	7821      	ldrb	r1, [r4, #0]
 8008852:	2203      	movs	r2, #3
 8008854:	4650      	mov	r0, sl
 8008856:	f7f7 fcbb 	bl	80001d0 <memchr>
 800885a:	b138      	cbz	r0, 800886c <_svfiprintf_r+0x150>
 800885c:	9b04      	ldr	r3, [sp, #16]
 800885e:	eba0 000a 	sub.w	r0, r0, sl
 8008862:	2240      	movs	r2, #64	@ 0x40
 8008864:	4082      	lsls	r2, r0
 8008866:	4313      	orrs	r3, r2
 8008868:	3401      	adds	r4, #1
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008870:	4824      	ldr	r0, [pc, #144]	@ (8008904 <_svfiprintf_r+0x1e8>)
 8008872:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008876:	2206      	movs	r2, #6
 8008878:	f7f7 fcaa 	bl	80001d0 <memchr>
 800887c:	2800      	cmp	r0, #0
 800887e:	d036      	beq.n	80088ee <_svfiprintf_r+0x1d2>
 8008880:	4b21      	ldr	r3, [pc, #132]	@ (8008908 <_svfiprintf_r+0x1ec>)
 8008882:	bb1b      	cbnz	r3, 80088cc <_svfiprintf_r+0x1b0>
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	3307      	adds	r3, #7
 8008888:	f023 0307 	bic.w	r3, r3, #7
 800888c:	3308      	adds	r3, #8
 800888e:	9303      	str	r3, [sp, #12]
 8008890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008892:	4433      	add	r3, r6
 8008894:	9309      	str	r3, [sp, #36]	@ 0x24
 8008896:	e76a      	b.n	800876e <_svfiprintf_r+0x52>
 8008898:	fb0c 3202 	mla	r2, ip, r2, r3
 800889c:	460c      	mov	r4, r1
 800889e:	2001      	movs	r0, #1
 80088a0:	e7a8      	b.n	80087f4 <_svfiprintf_r+0xd8>
 80088a2:	2300      	movs	r3, #0
 80088a4:	3401      	adds	r4, #1
 80088a6:	9305      	str	r3, [sp, #20]
 80088a8:	4619      	mov	r1, r3
 80088aa:	f04f 0c0a 	mov.w	ip, #10
 80088ae:	4620      	mov	r0, r4
 80088b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088b4:	3a30      	subs	r2, #48	@ 0x30
 80088b6:	2a09      	cmp	r2, #9
 80088b8:	d903      	bls.n	80088c2 <_svfiprintf_r+0x1a6>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d0c6      	beq.n	800884c <_svfiprintf_r+0x130>
 80088be:	9105      	str	r1, [sp, #20]
 80088c0:	e7c4      	b.n	800884c <_svfiprintf_r+0x130>
 80088c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80088c6:	4604      	mov	r4, r0
 80088c8:	2301      	movs	r3, #1
 80088ca:	e7f0      	b.n	80088ae <_svfiprintf_r+0x192>
 80088cc:	ab03      	add	r3, sp, #12
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	462a      	mov	r2, r5
 80088d2:	4b0e      	ldr	r3, [pc, #56]	@ (800890c <_svfiprintf_r+0x1f0>)
 80088d4:	a904      	add	r1, sp, #16
 80088d6:	4638      	mov	r0, r7
 80088d8:	f7fd fe92 	bl	8006600 <_printf_float>
 80088dc:	1c42      	adds	r2, r0, #1
 80088de:	4606      	mov	r6, r0
 80088e0:	d1d6      	bne.n	8008890 <_svfiprintf_r+0x174>
 80088e2:	89ab      	ldrh	r3, [r5, #12]
 80088e4:	065b      	lsls	r3, r3, #25
 80088e6:	f53f af2d 	bmi.w	8008744 <_svfiprintf_r+0x28>
 80088ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088ec:	e72c      	b.n	8008748 <_svfiprintf_r+0x2c>
 80088ee:	ab03      	add	r3, sp, #12
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	462a      	mov	r2, r5
 80088f4:	4b05      	ldr	r3, [pc, #20]	@ (800890c <_svfiprintf_r+0x1f0>)
 80088f6:	a904      	add	r1, sp, #16
 80088f8:	4638      	mov	r0, r7
 80088fa:	f7fe f919 	bl	8006b30 <_printf_i>
 80088fe:	e7ed      	b.n	80088dc <_svfiprintf_r+0x1c0>
 8008900:	08009b26 	.word	0x08009b26
 8008904:	08009b30 	.word	0x08009b30
 8008908:	08006601 	.word	0x08006601
 800890c:	08008665 	.word	0x08008665
 8008910:	08009b2c 	.word	0x08009b2c

08008914 <__sflush_r>:
 8008914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800891c:	0716      	lsls	r6, r2, #28
 800891e:	4605      	mov	r5, r0
 8008920:	460c      	mov	r4, r1
 8008922:	d454      	bmi.n	80089ce <__sflush_r+0xba>
 8008924:	684b      	ldr	r3, [r1, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	dc02      	bgt.n	8008930 <__sflush_r+0x1c>
 800892a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800892c:	2b00      	cmp	r3, #0
 800892e:	dd48      	ble.n	80089c2 <__sflush_r+0xae>
 8008930:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008932:	2e00      	cmp	r6, #0
 8008934:	d045      	beq.n	80089c2 <__sflush_r+0xae>
 8008936:	2300      	movs	r3, #0
 8008938:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800893c:	682f      	ldr	r7, [r5, #0]
 800893e:	6a21      	ldr	r1, [r4, #32]
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	d030      	beq.n	80089a6 <__sflush_r+0x92>
 8008944:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	0759      	lsls	r1, r3, #29
 800894a:	d505      	bpl.n	8008958 <__sflush_r+0x44>
 800894c:	6863      	ldr	r3, [r4, #4]
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008952:	b10b      	cbz	r3, 8008958 <__sflush_r+0x44>
 8008954:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008956:	1ad2      	subs	r2, r2, r3
 8008958:	2300      	movs	r3, #0
 800895a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800895c:	6a21      	ldr	r1, [r4, #32]
 800895e:	4628      	mov	r0, r5
 8008960:	47b0      	blx	r6
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	d106      	bne.n	8008976 <__sflush_r+0x62>
 8008968:	6829      	ldr	r1, [r5, #0]
 800896a:	291d      	cmp	r1, #29
 800896c:	d82b      	bhi.n	80089c6 <__sflush_r+0xb2>
 800896e:	4a2a      	ldr	r2, [pc, #168]	@ (8008a18 <__sflush_r+0x104>)
 8008970:	40ca      	lsrs	r2, r1
 8008972:	07d6      	lsls	r6, r2, #31
 8008974:	d527      	bpl.n	80089c6 <__sflush_r+0xb2>
 8008976:	2200      	movs	r2, #0
 8008978:	6062      	str	r2, [r4, #4]
 800897a:	04d9      	lsls	r1, r3, #19
 800897c:	6922      	ldr	r2, [r4, #16]
 800897e:	6022      	str	r2, [r4, #0]
 8008980:	d504      	bpl.n	800898c <__sflush_r+0x78>
 8008982:	1c42      	adds	r2, r0, #1
 8008984:	d101      	bne.n	800898a <__sflush_r+0x76>
 8008986:	682b      	ldr	r3, [r5, #0]
 8008988:	b903      	cbnz	r3, 800898c <__sflush_r+0x78>
 800898a:	6560      	str	r0, [r4, #84]	@ 0x54
 800898c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800898e:	602f      	str	r7, [r5, #0]
 8008990:	b1b9      	cbz	r1, 80089c2 <__sflush_r+0xae>
 8008992:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008996:	4299      	cmp	r1, r3
 8008998:	d002      	beq.n	80089a0 <__sflush_r+0x8c>
 800899a:	4628      	mov	r0, r5
 800899c:	f7ff f9e8 	bl	8007d70 <_free_r>
 80089a0:	2300      	movs	r3, #0
 80089a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80089a4:	e00d      	b.n	80089c2 <__sflush_r+0xae>
 80089a6:	2301      	movs	r3, #1
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b0      	blx	r6
 80089ac:	4602      	mov	r2, r0
 80089ae:	1c50      	adds	r0, r2, #1
 80089b0:	d1c9      	bne.n	8008946 <__sflush_r+0x32>
 80089b2:	682b      	ldr	r3, [r5, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0c6      	beq.n	8008946 <__sflush_r+0x32>
 80089b8:	2b1d      	cmp	r3, #29
 80089ba:	d001      	beq.n	80089c0 <__sflush_r+0xac>
 80089bc:	2b16      	cmp	r3, #22
 80089be:	d11e      	bne.n	80089fe <__sflush_r+0xea>
 80089c0:	602f      	str	r7, [r5, #0]
 80089c2:	2000      	movs	r0, #0
 80089c4:	e022      	b.n	8008a0c <__sflush_r+0xf8>
 80089c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ca:	b21b      	sxth	r3, r3
 80089cc:	e01b      	b.n	8008a06 <__sflush_r+0xf2>
 80089ce:	690f      	ldr	r7, [r1, #16]
 80089d0:	2f00      	cmp	r7, #0
 80089d2:	d0f6      	beq.n	80089c2 <__sflush_r+0xae>
 80089d4:	0793      	lsls	r3, r2, #30
 80089d6:	680e      	ldr	r6, [r1, #0]
 80089d8:	bf08      	it	eq
 80089da:	694b      	ldreq	r3, [r1, #20]
 80089dc:	600f      	str	r7, [r1, #0]
 80089de:	bf18      	it	ne
 80089e0:	2300      	movne	r3, #0
 80089e2:	eba6 0807 	sub.w	r8, r6, r7
 80089e6:	608b      	str	r3, [r1, #8]
 80089e8:	f1b8 0f00 	cmp.w	r8, #0
 80089ec:	dde9      	ble.n	80089c2 <__sflush_r+0xae>
 80089ee:	6a21      	ldr	r1, [r4, #32]
 80089f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089f2:	4643      	mov	r3, r8
 80089f4:	463a      	mov	r2, r7
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b0      	blx	r6
 80089fa:	2800      	cmp	r0, #0
 80089fc:	dc08      	bgt.n	8008a10 <__sflush_r+0xfc>
 80089fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a06:	81a3      	strh	r3, [r4, #12]
 8008a08:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a10:	4407      	add	r7, r0
 8008a12:	eba8 0800 	sub.w	r8, r8, r0
 8008a16:	e7e7      	b.n	80089e8 <__sflush_r+0xd4>
 8008a18:	20400001 	.word	0x20400001

08008a1c <_fflush_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	690b      	ldr	r3, [r1, #16]
 8008a20:	4605      	mov	r5, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	b913      	cbnz	r3, 8008a2c <_fflush_r+0x10>
 8008a26:	2500      	movs	r5, #0
 8008a28:	4628      	mov	r0, r5
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	b118      	cbz	r0, 8008a36 <_fflush_r+0x1a>
 8008a2e:	6a03      	ldr	r3, [r0, #32]
 8008a30:	b90b      	cbnz	r3, 8008a36 <_fflush_r+0x1a>
 8008a32:	f7fe fa27 	bl	8006e84 <__sinit>
 8008a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0f3      	beq.n	8008a26 <_fflush_r+0xa>
 8008a3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a40:	07d0      	lsls	r0, r2, #31
 8008a42:	d404      	bmi.n	8008a4e <_fflush_r+0x32>
 8008a44:	0599      	lsls	r1, r3, #22
 8008a46:	d402      	bmi.n	8008a4e <_fflush_r+0x32>
 8008a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a4a:	f7fe fb34 	bl	80070b6 <__retarget_lock_acquire_recursive>
 8008a4e:	4628      	mov	r0, r5
 8008a50:	4621      	mov	r1, r4
 8008a52:	f7ff ff5f 	bl	8008914 <__sflush_r>
 8008a56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a58:	07da      	lsls	r2, r3, #31
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	d4e4      	bmi.n	8008a28 <_fflush_r+0xc>
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	059b      	lsls	r3, r3, #22
 8008a62:	d4e1      	bmi.n	8008a28 <_fflush_r+0xc>
 8008a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a66:	f7fe fb27 	bl	80070b8 <__retarget_lock_release_recursive>
 8008a6a:	e7dd      	b.n	8008a28 <_fflush_r+0xc>

08008a6c <memmove>:
 8008a6c:	4288      	cmp	r0, r1
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	eb01 0402 	add.w	r4, r1, r2
 8008a74:	d902      	bls.n	8008a7c <memmove+0x10>
 8008a76:	4284      	cmp	r4, r0
 8008a78:	4623      	mov	r3, r4
 8008a7a:	d807      	bhi.n	8008a8c <memmove+0x20>
 8008a7c:	1e43      	subs	r3, r0, #1
 8008a7e:	42a1      	cmp	r1, r4
 8008a80:	d008      	beq.n	8008a94 <memmove+0x28>
 8008a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a8a:	e7f8      	b.n	8008a7e <memmove+0x12>
 8008a8c:	4402      	add	r2, r0
 8008a8e:	4601      	mov	r1, r0
 8008a90:	428a      	cmp	r2, r1
 8008a92:	d100      	bne.n	8008a96 <memmove+0x2a>
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a9e:	e7f7      	b.n	8008a90 <memmove+0x24>

08008aa0 <_sbrk_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d06      	ldr	r5, [pc, #24]	@ (8008abc <_sbrk_r+0x1c>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	602b      	str	r3, [r5, #0]
 8008aac:	f7f9 f9e2 	bl	8001e74 <_sbrk>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_sbrk_r+0x1a>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_sbrk_r+0x1a>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	20000538 	.word	0x20000538

08008ac0 <memcpy>:
 8008ac0:	440a      	add	r2, r1
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ac8:	d100      	bne.n	8008acc <memcpy+0xc>
 8008aca:	4770      	bx	lr
 8008acc:	b510      	push	{r4, lr}
 8008ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	d1f9      	bne.n	8008ace <memcpy+0xe>
 8008ada:	bd10      	pop	{r4, pc}

08008adc <__assert_func>:
 8008adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ade:	4614      	mov	r4, r2
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <__assert_func+0x2c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	68d8      	ldr	r0, [r3, #12]
 8008aea:	b14c      	cbz	r4, 8008b00 <__assert_func+0x24>
 8008aec:	4b07      	ldr	r3, [pc, #28]	@ (8008b0c <__assert_func+0x30>)
 8008aee:	9100      	str	r1, [sp, #0]
 8008af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008af4:	4906      	ldr	r1, [pc, #24]	@ (8008b10 <__assert_func+0x34>)
 8008af6:	462b      	mov	r3, r5
 8008af8:	f000 f870 	bl	8008bdc <fiprintf>
 8008afc:	f000 f880 	bl	8008c00 <abort>
 8008b00:	4b04      	ldr	r3, [pc, #16]	@ (8008b14 <__assert_func+0x38>)
 8008b02:	461c      	mov	r4, r3
 8008b04:	e7f3      	b.n	8008aee <__assert_func+0x12>
 8008b06:	bf00      	nop
 8008b08:	2000001c 	.word	0x2000001c
 8008b0c:	08009b41 	.word	0x08009b41
 8008b10:	08009b4e 	.word	0x08009b4e
 8008b14:	08009b7c 	.word	0x08009b7c

08008b18 <_calloc_r>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	fba1 5402 	umull	r5, r4, r1, r2
 8008b1e:	b934      	cbnz	r4, 8008b2e <_calloc_r+0x16>
 8008b20:	4629      	mov	r1, r5
 8008b22:	f7ff f999 	bl	8007e58 <_malloc_r>
 8008b26:	4606      	mov	r6, r0
 8008b28:	b928      	cbnz	r0, 8008b36 <_calloc_r+0x1e>
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	bd70      	pop	{r4, r5, r6, pc}
 8008b2e:	220c      	movs	r2, #12
 8008b30:	6002      	str	r2, [r0, #0]
 8008b32:	2600      	movs	r6, #0
 8008b34:	e7f9      	b.n	8008b2a <_calloc_r+0x12>
 8008b36:	462a      	mov	r2, r5
 8008b38:	4621      	mov	r1, r4
 8008b3a:	f7fe fa3e 	bl	8006fba <memset>
 8008b3e:	e7f4      	b.n	8008b2a <_calloc_r+0x12>

08008b40 <__ascii_mbtowc>:
 8008b40:	b082      	sub	sp, #8
 8008b42:	b901      	cbnz	r1, 8008b46 <__ascii_mbtowc+0x6>
 8008b44:	a901      	add	r1, sp, #4
 8008b46:	b142      	cbz	r2, 8008b5a <__ascii_mbtowc+0x1a>
 8008b48:	b14b      	cbz	r3, 8008b5e <__ascii_mbtowc+0x1e>
 8008b4a:	7813      	ldrb	r3, [r2, #0]
 8008b4c:	600b      	str	r3, [r1, #0]
 8008b4e:	7812      	ldrb	r2, [r2, #0]
 8008b50:	1e10      	subs	r0, r2, #0
 8008b52:	bf18      	it	ne
 8008b54:	2001      	movne	r0, #1
 8008b56:	b002      	add	sp, #8
 8008b58:	4770      	bx	lr
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	e7fb      	b.n	8008b56 <__ascii_mbtowc+0x16>
 8008b5e:	f06f 0001 	mvn.w	r0, #1
 8008b62:	e7f8      	b.n	8008b56 <__ascii_mbtowc+0x16>

08008b64 <_realloc_r>:
 8008b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b68:	4607      	mov	r7, r0
 8008b6a:	4614      	mov	r4, r2
 8008b6c:	460d      	mov	r5, r1
 8008b6e:	b921      	cbnz	r1, 8008b7a <_realloc_r+0x16>
 8008b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b74:	4611      	mov	r1, r2
 8008b76:	f7ff b96f 	b.w	8007e58 <_malloc_r>
 8008b7a:	b92a      	cbnz	r2, 8008b88 <_realloc_r+0x24>
 8008b7c:	f7ff f8f8 	bl	8007d70 <_free_r>
 8008b80:	4625      	mov	r5, r4
 8008b82:	4628      	mov	r0, r5
 8008b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b88:	f000 f841 	bl	8008c0e <_malloc_usable_size_r>
 8008b8c:	4284      	cmp	r4, r0
 8008b8e:	4606      	mov	r6, r0
 8008b90:	d802      	bhi.n	8008b98 <_realloc_r+0x34>
 8008b92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b96:	d8f4      	bhi.n	8008b82 <_realloc_r+0x1e>
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	f7ff f95c 	bl	8007e58 <_malloc_r>
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	b908      	cbnz	r0, 8008ba8 <_realloc_r+0x44>
 8008ba4:	4645      	mov	r5, r8
 8008ba6:	e7ec      	b.n	8008b82 <_realloc_r+0x1e>
 8008ba8:	42b4      	cmp	r4, r6
 8008baa:	4622      	mov	r2, r4
 8008bac:	4629      	mov	r1, r5
 8008bae:	bf28      	it	cs
 8008bb0:	4632      	movcs	r2, r6
 8008bb2:	f7ff ff85 	bl	8008ac0 <memcpy>
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f7ff f8d9 	bl	8007d70 <_free_r>
 8008bbe:	e7f1      	b.n	8008ba4 <_realloc_r+0x40>

08008bc0 <__ascii_wctomb>:
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	4608      	mov	r0, r1
 8008bc4:	b141      	cbz	r1, 8008bd8 <__ascii_wctomb+0x18>
 8008bc6:	2aff      	cmp	r2, #255	@ 0xff
 8008bc8:	d904      	bls.n	8008bd4 <__ascii_wctomb+0x14>
 8008bca:	228a      	movs	r2, #138	@ 0x8a
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd2:	4770      	bx	lr
 8008bd4:	700a      	strb	r2, [r1, #0]
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	4770      	bx	lr
	...

08008bdc <fiprintf>:
 8008bdc:	b40e      	push	{r1, r2, r3}
 8008bde:	b503      	push	{r0, r1, lr}
 8008be0:	4601      	mov	r1, r0
 8008be2:	ab03      	add	r3, sp, #12
 8008be4:	4805      	ldr	r0, [pc, #20]	@ (8008bfc <fiprintf+0x20>)
 8008be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bea:	6800      	ldr	r0, [r0, #0]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	f000 f83f 	bl	8008c70 <_vfiprintf_r>
 8008bf2:	b002      	add	sp, #8
 8008bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf8:	b003      	add	sp, #12
 8008bfa:	4770      	bx	lr
 8008bfc:	2000001c 	.word	0x2000001c

08008c00 <abort>:
 8008c00:	b508      	push	{r3, lr}
 8008c02:	2006      	movs	r0, #6
 8008c04:	f000 fa08 	bl	8009018 <raise>
 8008c08:	2001      	movs	r0, #1
 8008c0a:	f7f9 f8bb 	bl	8001d84 <_exit>

08008c0e <_malloc_usable_size_r>:
 8008c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c12:	1f18      	subs	r0, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bfbc      	itt	lt
 8008c18:	580b      	ldrlt	r3, [r1, r0]
 8008c1a:	18c0      	addlt	r0, r0, r3
 8008c1c:	4770      	bx	lr

08008c1e <__sfputc_r>:
 8008c1e:	6893      	ldr	r3, [r2, #8]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	b410      	push	{r4}
 8008c26:	6093      	str	r3, [r2, #8]
 8008c28:	da08      	bge.n	8008c3c <__sfputc_r+0x1e>
 8008c2a:	6994      	ldr	r4, [r2, #24]
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	db01      	blt.n	8008c34 <__sfputc_r+0x16>
 8008c30:	290a      	cmp	r1, #10
 8008c32:	d103      	bne.n	8008c3c <__sfputc_r+0x1e>
 8008c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c38:	f000 b932 	b.w	8008ea0 <__swbuf_r>
 8008c3c:	6813      	ldr	r3, [r2, #0]
 8008c3e:	1c58      	adds	r0, r3, #1
 8008c40:	6010      	str	r0, [r2, #0]
 8008c42:	7019      	strb	r1, [r3, #0]
 8008c44:	4608      	mov	r0, r1
 8008c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <__sfputs_r>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	4606      	mov	r6, r0
 8008c50:	460f      	mov	r7, r1
 8008c52:	4614      	mov	r4, r2
 8008c54:	18d5      	adds	r5, r2, r3
 8008c56:	42ac      	cmp	r4, r5
 8008c58:	d101      	bne.n	8008c5e <__sfputs_r+0x12>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	e007      	b.n	8008c6e <__sfputs_r+0x22>
 8008c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c62:	463a      	mov	r2, r7
 8008c64:	4630      	mov	r0, r6
 8008c66:	f7ff ffda 	bl	8008c1e <__sfputc_r>
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	d1f3      	bne.n	8008c56 <__sfputs_r+0xa>
 8008c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c70 <_vfiprintf_r>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	460d      	mov	r5, r1
 8008c76:	b09d      	sub	sp, #116	@ 0x74
 8008c78:	4614      	mov	r4, r2
 8008c7a:	4698      	mov	r8, r3
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	b118      	cbz	r0, 8008c88 <_vfiprintf_r+0x18>
 8008c80:	6a03      	ldr	r3, [r0, #32]
 8008c82:	b90b      	cbnz	r3, 8008c88 <_vfiprintf_r+0x18>
 8008c84:	f7fe f8fe 	bl	8006e84 <__sinit>
 8008c88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c8a:	07d9      	lsls	r1, r3, #31
 8008c8c:	d405      	bmi.n	8008c9a <_vfiprintf_r+0x2a>
 8008c8e:	89ab      	ldrh	r3, [r5, #12]
 8008c90:	059a      	lsls	r2, r3, #22
 8008c92:	d402      	bmi.n	8008c9a <_vfiprintf_r+0x2a>
 8008c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c96:	f7fe fa0e 	bl	80070b6 <__retarget_lock_acquire_recursive>
 8008c9a:	89ab      	ldrh	r3, [r5, #12]
 8008c9c:	071b      	lsls	r3, r3, #28
 8008c9e:	d501      	bpl.n	8008ca4 <_vfiprintf_r+0x34>
 8008ca0:	692b      	ldr	r3, [r5, #16]
 8008ca2:	b99b      	cbnz	r3, 8008ccc <_vfiprintf_r+0x5c>
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f000 f938 	bl	8008f1c <__swsetup_r>
 8008cac:	b170      	cbz	r0, 8008ccc <_vfiprintf_r+0x5c>
 8008cae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cb0:	07dc      	lsls	r4, r3, #31
 8008cb2:	d504      	bpl.n	8008cbe <_vfiprintf_r+0x4e>
 8008cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb8:	b01d      	add	sp, #116	@ 0x74
 8008cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbe:	89ab      	ldrh	r3, [r5, #12]
 8008cc0:	0598      	lsls	r0, r3, #22
 8008cc2:	d4f7      	bmi.n	8008cb4 <_vfiprintf_r+0x44>
 8008cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cc6:	f7fe f9f7 	bl	80070b8 <__retarget_lock_release_recursive>
 8008cca:	e7f3      	b.n	8008cb4 <_vfiprintf_r+0x44>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cda:	2330      	movs	r3, #48	@ 0x30
 8008cdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e8c <_vfiprintf_r+0x21c>
 8008ce0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ce4:	f04f 0901 	mov.w	r9, #1
 8008ce8:	4623      	mov	r3, r4
 8008cea:	469a      	mov	sl, r3
 8008cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cf0:	b10a      	cbz	r2, 8008cf6 <_vfiprintf_r+0x86>
 8008cf2:	2a25      	cmp	r2, #37	@ 0x25
 8008cf4:	d1f9      	bne.n	8008cea <_vfiprintf_r+0x7a>
 8008cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cfa:	d00b      	beq.n	8008d14 <_vfiprintf_r+0xa4>
 8008cfc:	465b      	mov	r3, fp
 8008cfe:	4622      	mov	r2, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	4630      	mov	r0, r6
 8008d04:	f7ff ffa2 	bl	8008c4c <__sfputs_r>
 8008d08:	3001      	adds	r0, #1
 8008d0a:	f000 80a7 	beq.w	8008e5c <_vfiprintf_r+0x1ec>
 8008d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d10:	445a      	add	r2, fp
 8008d12:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d14:	f89a 3000 	ldrb.w	r3, [sl]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 809f 	beq.w	8008e5c <_vfiprintf_r+0x1ec>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f04f 32ff 	mov.w	r2, #4294967295
 8008d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d28:	f10a 0a01 	add.w	sl, sl, #1
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	9307      	str	r3, [sp, #28]
 8008d30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d34:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d36:	4654      	mov	r4, sl
 8008d38:	2205      	movs	r2, #5
 8008d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3e:	4853      	ldr	r0, [pc, #332]	@ (8008e8c <_vfiprintf_r+0x21c>)
 8008d40:	f7f7 fa46 	bl	80001d0 <memchr>
 8008d44:	9a04      	ldr	r2, [sp, #16]
 8008d46:	b9d8      	cbnz	r0, 8008d80 <_vfiprintf_r+0x110>
 8008d48:	06d1      	lsls	r1, r2, #27
 8008d4a:	bf44      	itt	mi
 8008d4c:	2320      	movmi	r3, #32
 8008d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d52:	0713      	lsls	r3, r2, #28
 8008d54:	bf44      	itt	mi
 8008d56:	232b      	movmi	r3, #43	@ 0x2b
 8008d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d62:	d015      	beq.n	8008d90 <_vfiprintf_r+0x120>
 8008d64:	9a07      	ldr	r2, [sp, #28]
 8008d66:	4654      	mov	r4, sl
 8008d68:	2000      	movs	r0, #0
 8008d6a:	f04f 0c0a 	mov.w	ip, #10
 8008d6e:	4621      	mov	r1, r4
 8008d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d74:	3b30      	subs	r3, #48	@ 0x30
 8008d76:	2b09      	cmp	r3, #9
 8008d78:	d94b      	bls.n	8008e12 <_vfiprintf_r+0x1a2>
 8008d7a:	b1b0      	cbz	r0, 8008daa <_vfiprintf_r+0x13a>
 8008d7c:	9207      	str	r2, [sp, #28]
 8008d7e:	e014      	b.n	8008daa <_vfiprintf_r+0x13a>
 8008d80:	eba0 0308 	sub.w	r3, r0, r8
 8008d84:	fa09 f303 	lsl.w	r3, r9, r3
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	9304      	str	r3, [sp, #16]
 8008d8c:	46a2      	mov	sl, r4
 8008d8e:	e7d2      	b.n	8008d36 <_vfiprintf_r+0xc6>
 8008d90:	9b03      	ldr	r3, [sp, #12]
 8008d92:	1d19      	adds	r1, r3, #4
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	9103      	str	r1, [sp, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	bfbb      	ittet	lt
 8008d9c:	425b      	neglt	r3, r3
 8008d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8008da2:	9307      	strge	r3, [sp, #28]
 8008da4:	9307      	strlt	r3, [sp, #28]
 8008da6:	bfb8      	it	lt
 8008da8:	9204      	strlt	r2, [sp, #16]
 8008daa:	7823      	ldrb	r3, [r4, #0]
 8008dac:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dae:	d10a      	bne.n	8008dc6 <_vfiprintf_r+0x156>
 8008db0:	7863      	ldrb	r3, [r4, #1]
 8008db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008db4:	d132      	bne.n	8008e1c <_vfiprintf_r+0x1ac>
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	1d1a      	adds	r2, r3, #4
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	9203      	str	r2, [sp, #12]
 8008dbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dc2:	3402      	adds	r4, #2
 8008dc4:	9305      	str	r3, [sp, #20]
 8008dc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e9c <_vfiprintf_r+0x22c>
 8008dca:	7821      	ldrb	r1, [r4, #0]
 8008dcc:	2203      	movs	r2, #3
 8008dce:	4650      	mov	r0, sl
 8008dd0:	f7f7 f9fe 	bl	80001d0 <memchr>
 8008dd4:	b138      	cbz	r0, 8008de6 <_vfiprintf_r+0x176>
 8008dd6:	9b04      	ldr	r3, [sp, #16]
 8008dd8:	eba0 000a 	sub.w	r0, r0, sl
 8008ddc:	2240      	movs	r2, #64	@ 0x40
 8008dde:	4082      	lsls	r2, r0
 8008de0:	4313      	orrs	r3, r2
 8008de2:	3401      	adds	r4, #1
 8008de4:	9304      	str	r3, [sp, #16]
 8008de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dea:	4829      	ldr	r0, [pc, #164]	@ (8008e90 <_vfiprintf_r+0x220>)
 8008dec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008df0:	2206      	movs	r2, #6
 8008df2:	f7f7 f9ed 	bl	80001d0 <memchr>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d03f      	beq.n	8008e7a <_vfiprintf_r+0x20a>
 8008dfa:	4b26      	ldr	r3, [pc, #152]	@ (8008e94 <_vfiprintf_r+0x224>)
 8008dfc:	bb1b      	cbnz	r3, 8008e46 <_vfiprintf_r+0x1d6>
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	3307      	adds	r3, #7
 8008e02:	f023 0307 	bic.w	r3, r3, #7
 8008e06:	3308      	adds	r3, #8
 8008e08:	9303      	str	r3, [sp, #12]
 8008e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0c:	443b      	add	r3, r7
 8008e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e10:	e76a      	b.n	8008ce8 <_vfiprintf_r+0x78>
 8008e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e16:	460c      	mov	r4, r1
 8008e18:	2001      	movs	r0, #1
 8008e1a:	e7a8      	b.n	8008d6e <_vfiprintf_r+0xfe>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	3401      	adds	r4, #1
 8008e20:	9305      	str	r3, [sp, #20]
 8008e22:	4619      	mov	r1, r3
 8008e24:	f04f 0c0a 	mov.w	ip, #10
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e2e:	3a30      	subs	r2, #48	@ 0x30
 8008e30:	2a09      	cmp	r2, #9
 8008e32:	d903      	bls.n	8008e3c <_vfiprintf_r+0x1cc>
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d0c6      	beq.n	8008dc6 <_vfiprintf_r+0x156>
 8008e38:	9105      	str	r1, [sp, #20]
 8008e3a:	e7c4      	b.n	8008dc6 <_vfiprintf_r+0x156>
 8008e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e40:	4604      	mov	r4, r0
 8008e42:	2301      	movs	r3, #1
 8008e44:	e7f0      	b.n	8008e28 <_vfiprintf_r+0x1b8>
 8008e46:	ab03      	add	r3, sp, #12
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	462a      	mov	r2, r5
 8008e4c:	4b12      	ldr	r3, [pc, #72]	@ (8008e98 <_vfiprintf_r+0x228>)
 8008e4e:	a904      	add	r1, sp, #16
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7fd fbd5 	bl	8006600 <_printf_float>
 8008e56:	4607      	mov	r7, r0
 8008e58:	1c78      	adds	r0, r7, #1
 8008e5a:	d1d6      	bne.n	8008e0a <_vfiprintf_r+0x19a>
 8008e5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e5e:	07d9      	lsls	r1, r3, #31
 8008e60:	d405      	bmi.n	8008e6e <_vfiprintf_r+0x1fe>
 8008e62:	89ab      	ldrh	r3, [r5, #12]
 8008e64:	059a      	lsls	r2, r3, #22
 8008e66:	d402      	bmi.n	8008e6e <_vfiprintf_r+0x1fe>
 8008e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e6a:	f7fe f925 	bl	80070b8 <__retarget_lock_release_recursive>
 8008e6e:	89ab      	ldrh	r3, [r5, #12]
 8008e70:	065b      	lsls	r3, r3, #25
 8008e72:	f53f af1f 	bmi.w	8008cb4 <_vfiprintf_r+0x44>
 8008e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e78:	e71e      	b.n	8008cb8 <_vfiprintf_r+0x48>
 8008e7a:	ab03      	add	r3, sp, #12
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	462a      	mov	r2, r5
 8008e80:	4b05      	ldr	r3, [pc, #20]	@ (8008e98 <_vfiprintf_r+0x228>)
 8008e82:	a904      	add	r1, sp, #16
 8008e84:	4630      	mov	r0, r6
 8008e86:	f7fd fe53 	bl	8006b30 <_printf_i>
 8008e8a:	e7e4      	b.n	8008e56 <_vfiprintf_r+0x1e6>
 8008e8c:	08009b26 	.word	0x08009b26
 8008e90:	08009b30 	.word	0x08009b30
 8008e94:	08006601 	.word	0x08006601
 8008e98:	08008c4d 	.word	0x08008c4d
 8008e9c:	08009b2c 	.word	0x08009b2c

08008ea0 <__swbuf_r>:
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	460e      	mov	r6, r1
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	b118      	cbz	r0, 8008eb2 <__swbuf_r+0x12>
 8008eaa:	6a03      	ldr	r3, [r0, #32]
 8008eac:	b90b      	cbnz	r3, 8008eb2 <__swbuf_r+0x12>
 8008eae:	f7fd ffe9 	bl	8006e84 <__sinit>
 8008eb2:	69a3      	ldr	r3, [r4, #24]
 8008eb4:	60a3      	str	r3, [r4, #8]
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	071a      	lsls	r2, r3, #28
 8008eba:	d501      	bpl.n	8008ec0 <__swbuf_r+0x20>
 8008ebc:	6923      	ldr	r3, [r4, #16]
 8008ebe:	b943      	cbnz	r3, 8008ed2 <__swbuf_r+0x32>
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f000 f82a 	bl	8008f1c <__swsetup_r>
 8008ec8:	b118      	cbz	r0, 8008ed2 <__swbuf_r+0x32>
 8008eca:	f04f 37ff 	mov.w	r7, #4294967295
 8008ece:	4638      	mov	r0, r7
 8008ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	6922      	ldr	r2, [r4, #16]
 8008ed6:	1a98      	subs	r0, r3, r2
 8008ed8:	6963      	ldr	r3, [r4, #20]
 8008eda:	b2f6      	uxtb	r6, r6
 8008edc:	4283      	cmp	r3, r0
 8008ede:	4637      	mov	r7, r6
 8008ee0:	dc05      	bgt.n	8008eee <__swbuf_r+0x4e>
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f7ff fd99 	bl	8008a1c <_fflush_r>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d1ed      	bne.n	8008eca <__swbuf_r+0x2a>
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	60a3      	str	r3, [r4, #8]
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	6022      	str	r2, [r4, #0]
 8008efa:	701e      	strb	r6, [r3, #0]
 8008efc:	6962      	ldr	r2, [r4, #20]
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d004      	beq.n	8008f0e <__swbuf_r+0x6e>
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	07db      	lsls	r3, r3, #31
 8008f08:	d5e1      	bpl.n	8008ece <__swbuf_r+0x2e>
 8008f0a:	2e0a      	cmp	r6, #10
 8008f0c:	d1df      	bne.n	8008ece <__swbuf_r+0x2e>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4628      	mov	r0, r5
 8008f12:	f7ff fd83 	bl	8008a1c <_fflush_r>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d0d9      	beq.n	8008ece <__swbuf_r+0x2e>
 8008f1a:	e7d6      	b.n	8008eca <__swbuf_r+0x2a>

08008f1c <__swsetup_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4b29      	ldr	r3, [pc, #164]	@ (8008fc4 <__swsetup_r+0xa8>)
 8008f20:	4605      	mov	r5, r0
 8008f22:	6818      	ldr	r0, [r3, #0]
 8008f24:	460c      	mov	r4, r1
 8008f26:	b118      	cbz	r0, 8008f30 <__swsetup_r+0x14>
 8008f28:	6a03      	ldr	r3, [r0, #32]
 8008f2a:	b90b      	cbnz	r3, 8008f30 <__swsetup_r+0x14>
 8008f2c:	f7fd ffaa 	bl	8006e84 <__sinit>
 8008f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f34:	0719      	lsls	r1, r3, #28
 8008f36:	d422      	bmi.n	8008f7e <__swsetup_r+0x62>
 8008f38:	06da      	lsls	r2, r3, #27
 8008f3a:	d407      	bmi.n	8008f4c <__swsetup_r+0x30>
 8008f3c:	2209      	movs	r2, #9
 8008f3e:	602a      	str	r2, [r5, #0]
 8008f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4a:	e033      	b.n	8008fb4 <__swsetup_r+0x98>
 8008f4c:	0758      	lsls	r0, r3, #29
 8008f4e:	d512      	bpl.n	8008f76 <__swsetup_r+0x5a>
 8008f50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f52:	b141      	cbz	r1, 8008f66 <__swsetup_r+0x4a>
 8008f54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f58:	4299      	cmp	r1, r3
 8008f5a:	d002      	beq.n	8008f62 <__swsetup_r+0x46>
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f7fe ff07 	bl	8007d70 <_free_r>
 8008f62:	2300      	movs	r3, #0
 8008f64:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f6c:	81a3      	strh	r3, [r4, #12]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6063      	str	r3, [r4, #4]
 8008f72:	6923      	ldr	r3, [r4, #16]
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	f043 0308 	orr.w	r3, r3, #8
 8008f7c:	81a3      	strh	r3, [r4, #12]
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	b94b      	cbnz	r3, 8008f96 <__swsetup_r+0x7a>
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8c:	d003      	beq.n	8008f96 <__swsetup_r+0x7a>
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4628      	mov	r0, r5
 8008f92:	f000 f883 	bl	800909c <__smakebuf_r>
 8008f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f9a:	f013 0201 	ands.w	r2, r3, #1
 8008f9e:	d00a      	beq.n	8008fb6 <__swsetup_r+0x9a>
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	60a2      	str	r2, [r4, #8]
 8008fa4:	6962      	ldr	r2, [r4, #20]
 8008fa6:	4252      	negs	r2, r2
 8008fa8:	61a2      	str	r2, [r4, #24]
 8008faa:	6922      	ldr	r2, [r4, #16]
 8008fac:	b942      	cbnz	r2, 8008fc0 <__swsetup_r+0xa4>
 8008fae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fb2:	d1c5      	bne.n	8008f40 <__swsetup_r+0x24>
 8008fb4:	bd38      	pop	{r3, r4, r5, pc}
 8008fb6:	0799      	lsls	r1, r3, #30
 8008fb8:	bf58      	it	pl
 8008fba:	6962      	ldrpl	r2, [r4, #20]
 8008fbc:	60a2      	str	r2, [r4, #8]
 8008fbe:	e7f4      	b.n	8008faa <__swsetup_r+0x8e>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	e7f7      	b.n	8008fb4 <__swsetup_r+0x98>
 8008fc4:	2000001c 	.word	0x2000001c

08008fc8 <_raise_r>:
 8008fc8:	291f      	cmp	r1, #31
 8008fca:	b538      	push	{r3, r4, r5, lr}
 8008fcc:	4605      	mov	r5, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	d904      	bls.n	8008fdc <_raise_r+0x14>
 8008fd2:	2316      	movs	r3, #22
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
 8008fdc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fde:	b112      	cbz	r2, 8008fe6 <_raise_r+0x1e>
 8008fe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fe4:	b94b      	cbnz	r3, 8008ffa <_raise_r+0x32>
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 f830 	bl	800904c <_getpid_r>
 8008fec:	4622      	mov	r2, r4
 8008fee:	4601      	mov	r1, r0
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff6:	f000 b817 	b.w	8009028 <_kill_r>
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d00a      	beq.n	8009014 <_raise_r+0x4c>
 8008ffe:	1c59      	adds	r1, r3, #1
 8009000:	d103      	bne.n	800900a <_raise_r+0x42>
 8009002:	2316      	movs	r3, #22
 8009004:	6003      	str	r3, [r0, #0]
 8009006:	2001      	movs	r0, #1
 8009008:	e7e7      	b.n	8008fda <_raise_r+0x12>
 800900a:	2100      	movs	r1, #0
 800900c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009010:	4620      	mov	r0, r4
 8009012:	4798      	blx	r3
 8009014:	2000      	movs	r0, #0
 8009016:	e7e0      	b.n	8008fda <_raise_r+0x12>

08009018 <raise>:
 8009018:	4b02      	ldr	r3, [pc, #8]	@ (8009024 <raise+0xc>)
 800901a:	4601      	mov	r1, r0
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	f7ff bfd3 	b.w	8008fc8 <_raise_r>
 8009022:	bf00      	nop
 8009024:	2000001c 	.word	0x2000001c

08009028 <_kill_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d07      	ldr	r5, [pc, #28]	@ (8009048 <_kill_r+0x20>)
 800902c:	2300      	movs	r3, #0
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	4611      	mov	r1, r2
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	f7f8 fe95 	bl	8001d64 <_kill>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	d102      	bne.n	8009044 <_kill_r+0x1c>
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	b103      	cbz	r3, 8009044 <_kill_r+0x1c>
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	bf00      	nop
 8009048:	20000538 	.word	0x20000538

0800904c <_getpid_r>:
 800904c:	f7f8 be82 	b.w	8001d54 <_getpid>

08009050 <__swhatbuf_r>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	460c      	mov	r4, r1
 8009054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009058:	2900      	cmp	r1, #0
 800905a:	b096      	sub	sp, #88	@ 0x58
 800905c:	4615      	mov	r5, r2
 800905e:	461e      	mov	r6, r3
 8009060:	da0d      	bge.n	800907e <__swhatbuf_r+0x2e>
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009068:	f04f 0100 	mov.w	r1, #0
 800906c:	bf14      	ite	ne
 800906e:	2340      	movne	r3, #64	@ 0x40
 8009070:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009074:	2000      	movs	r0, #0
 8009076:	6031      	str	r1, [r6, #0]
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	b016      	add	sp, #88	@ 0x58
 800907c:	bd70      	pop	{r4, r5, r6, pc}
 800907e:	466a      	mov	r2, sp
 8009080:	f000 f848 	bl	8009114 <_fstat_r>
 8009084:	2800      	cmp	r0, #0
 8009086:	dbec      	blt.n	8009062 <__swhatbuf_r+0x12>
 8009088:	9901      	ldr	r1, [sp, #4]
 800908a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800908e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009092:	4259      	negs	r1, r3
 8009094:	4159      	adcs	r1, r3
 8009096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800909a:	e7eb      	b.n	8009074 <__swhatbuf_r+0x24>

0800909c <__smakebuf_r>:
 800909c:	898b      	ldrh	r3, [r1, #12]
 800909e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090a0:	079d      	lsls	r5, r3, #30
 80090a2:	4606      	mov	r6, r0
 80090a4:	460c      	mov	r4, r1
 80090a6:	d507      	bpl.n	80090b8 <__smakebuf_r+0x1c>
 80090a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	2301      	movs	r3, #1
 80090b2:	6163      	str	r3, [r4, #20]
 80090b4:	b003      	add	sp, #12
 80090b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b8:	ab01      	add	r3, sp, #4
 80090ba:	466a      	mov	r2, sp
 80090bc:	f7ff ffc8 	bl	8009050 <__swhatbuf_r>
 80090c0:	9f00      	ldr	r7, [sp, #0]
 80090c2:	4605      	mov	r5, r0
 80090c4:	4639      	mov	r1, r7
 80090c6:	4630      	mov	r0, r6
 80090c8:	f7fe fec6 	bl	8007e58 <_malloc_r>
 80090cc:	b948      	cbnz	r0, 80090e2 <__smakebuf_r+0x46>
 80090ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d2:	059a      	lsls	r2, r3, #22
 80090d4:	d4ee      	bmi.n	80090b4 <__smakebuf_r+0x18>
 80090d6:	f023 0303 	bic.w	r3, r3, #3
 80090da:	f043 0302 	orr.w	r3, r3, #2
 80090de:	81a3      	strh	r3, [r4, #12]
 80090e0:	e7e2      	b.n	80090a8 <__smakebuf_r+0xc>
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	6020      	str	r0, [r4, #0]
 80090e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ea:	81a3      	strh	r3, [r4, #12]
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090f2:	b15b      	cbz	r3, 800910c <__smakebuf_r+0x70>
 80090f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090f8:	4630      	mov	r0, r6
 80090fa:	f000 f81d 	bl	8009138 <_isatty_r>
 80090fe:	b128      	cbz	r0, 800910c <__smakebuf_r+0x70>
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	f023 0303 	bic.w	r3, r3, #3
 8009106:	f043 0301 	orr.w	r3, r3, #1
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	431d      	orrs	r5, r3
 8009110:	81a5      	strh	r5, [r4, #12]
 8009112:	e7cf      	b.n	80090b4 <__smakebuf_r+0x18>

08009114 <_fstat_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d07      	ldr	r5, [pc, #28]	@ (8009134 <_fstat_r+0x20>)
 8009118:	2300      	movs	r3, #0
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	4611      	mov	r1, r2
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	f7f8 fe7f 	bl	8001e24 <_fstat>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d102      	bne.n	8009130 <_fstat_r+0x1c>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	b103      	cbz	r3, 8009130 <_fstat_r+0x1c>
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	bd38      	pop	{r3, r4, r5, pc}
 8009132:	bf00      	nop
 8009134:	20000538 	.word	0x20000538

08009138 <_isatty_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4d06      	ldr	r5, [pc, #24]	@ (8009154 <_isatty_r+0x1c>)
 800913c:	2300      	movs	r3, #0
 800913e:	4604      	mov	r4, r0
 8009140:	4608      	mov	r0, r1
 8009142:	602b      	str	r3, [r5, #0]
 8009144:	f7f8 fe7e 	bl	8001e44 <_isatty>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_isatty_r+0x1a>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_isatty_r+0x1a>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	20000538 	.word	0x20000538

08009158 <_init>:
 8009158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915a:	bf00      	nop
 800915c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915e:	bc08      	pop	{r3}
 8009160:	469e      	mov	lr, r3
 8009162:	4770      	bx	lr

08009164 <_fini>:
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	bf00      	nop
 8009168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916a:	bc08      	pop	{r3}
 800916c:	469e      	mov	lr, r3
 800916e:	4770      	bx	lr
